
TX_400_sx1262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e61c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  0800e6dc  0800e6dc  0001e6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2f0  0800f2f0  0003002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2f0  0800f2f0  0001f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2f8  0800f2f8  0003002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2f8  0800f2f8  0001f2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2fc  0800f2fc  0001f2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .eeprom_rodata 0000002c  08080000  08080000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001d0  20000000  0800f300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000016c0  200001d0  0800f4d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001890  0800f4d0  00021890  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0003002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d857  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aed2  00000000  00000000  0006d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001a8fe  00000000  00000000  0007877d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002210  00000000  00000000  00093080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000035b8  00000000  00000000  00095290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e0fb  00000000  00000000  00098848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046254  00000000  00000000  000b6943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000959c4  00000000  00000000  000fcb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019255b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006194  00000000  00000000  001925ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d0 	.word	0x200001d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e6c4 	.word	0x0800e6c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d4 	.word	0x200001d4
 8000104:	0800e6c4 	.word	0x0800e6c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fa35 	bl	80018c0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f985 	bl	8001770 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa27 	bl	80018c0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa1d 	bl	80018c0 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9ad 	bl	80017f4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9a3 	bl	80017f4 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f852 	bl	8000594 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46ce      	mov	lr, r9
 8000500:	4647      	mov	r7, r8
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	4699      	mov	r9, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	469c      	mov	ip, r3
 800050c:	0413      	lsls	r3, r2, #16
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	001d      	movs	r5, r3
 8000512:	000e      	movs	r6, r1
 8000514:	4661      	mov	r1, ip
 8000516:	0400      	lsls	r0, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c00      	lsrs	r0, r0, #16
 800051c:	4345      	muls	r5, r0
 800051e:	434b      	muls	r3, r1
 8000520:	4360      	muls	r0, r4
 8000522:	4361      	muls	r1, r4
 8000524:	18c0      	adds	r0, r0, r3
 8000526:	0c2c      	lsrs	r4, r5, #16
 8000528:	1820      	adds	r0, r4, r0
 800052a:	468c      	mov	ip, r1
 800052c:	4283      	cmp	r3, r0
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x3c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	4649      	mov	r1, r9
 800053a:	4379      	muls	r1, r7
 800053c:	4372      	muls	r2, r6
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	4463      	add	r3, ip
 8000542:	042d      	lsls	r5, r5, #16
 8000544:	0c2d      	lsrs	r5, r5, #16
 8000546:	18c9      	adds	r1, r1, r3
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	1940      	adds	r0, r0, r5
 800054c:	1889      	adds	r1, r1, r2
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ffa1 	bl	80004a8 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f001 fd9d 	bl	80020ac <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fa04 	bl	8001988 <__aeabi_dsub>
 8000580:	f001 fd94 	bl	80020ac <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__udivmoddi4>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4657      	mov	r7, sl
 8000598:	464e      	mov	r6, r9
 800059a:	4645      	mov	r5, r8
 800059c:	46de      	mov	lr, fp
 800059e:	b5e0      	push	{r5, r6, r7, lr}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	4692      	mov	sl, r2
 80005a6:	4699      	mov	r9, r3
 80005a8:	b083      	sub	sp, #12
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d830      	bhi.n	8000610 <__udivmoddi4+0x7c>
 80005ae:	d02d      	beq.n	800060c <__udivmoddi4+0x78>
 80005b0:	4649      	mov	r1, r9
 80005b2:	4650      	mov	r0, sl
 80005b4:	f001 fe3c 	bl	8002230 <__clzdi2>
 80005b8:	0029      	movs	r1, r5
 80005ba:	0006      	movs	r6, r0
 80005bc:	0020      	movs	r0, r4
 80005be:	f001 fe37 	bl	8002230 <__clzdi2>
 80005c2:	1a33      	subs	r3, r6, r0
 80005c4:	4698      	mov	r8, r3
 80005c6:	3b20      	subs	r3, #32
 80005c8:	469b      	mov	fp, r3
 80005ca:	d433      	bmi.n	8000634 <__udivmoddi4+0xa0>
 80005cc:	465a      	mov	r2, fp
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	4642      	mov	r2, r8
 80005d4:	001f      	movs	r7, r3
 80005d6:	4653      	mov	r3, sl
 80005d8:	4093      	lsls	r3, r2
 80005da:	001e      	movs	r6, r3
 80005dc:	42af      	cmp	r7, r5
 80005de:	d83a      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d100      	bne.n	80005e6 <__udivmoddi4+0x52>
 80005e4:	e078      	b.n	80006d8 <__udivmoddi4+0x144>
 80005e6:	465b      	mov	r3, fp
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5e>
 80005f0:	e075      	b.n	80006de <__udivmoddi4+0x14a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	465a      	mov	r2, fp
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4642      	mov	r2, r8
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e028      	b.n	800065e <__udivmoddi4+0xca>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9cf      	bls.n	80005b0 <__udivmoddi4+0x1c>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8e>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b003      	add	sp, #12
 8000628:	bcf0      	pop	{r4, r5, r6, r7}
 800062a:	46bb      	mov	fp, r7
 800062c:	46b2      	mov	sl, r6
 800062e:	46a9      	mov	r9, r5
 8000630:	46a0      	mov	r8, r4
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4652      	mov	r2, sl
 800063c:	40da      	lsrs	r2, r3
 800063e:	4641      	mov	r1, r8
 8000640:	0013      	movs	r3, r2
 8000642:	464a      	mov	r2, r9
 8000644:	408a      	lsls	r2, r1
 8000646:	0017      	movs	r7, r2
 8000648:	4642      	mov	r2, r8
 800064a:	431f      	orrs	r7, r3
 800064c:	4653      	mov	r3, sl
 800064e:	4093      	lsls	r3, r2
 8000650:	001e      	movs	r6, r3
 8000652:	42af      	cmp	r7, r5
 8000654:	d9c4      	bls.n	80005e0 <__udivmoddi4+0x4c>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d9      	beq.n	8000618 <__udivmoddi4+0x84>
 8000664:	07fb      	lsls	r3, r7, #31
 8000666:	0872      	lsrs	r2, r6, #1
 8000668:	431a      	orrs	r2, r3
 800066a:	4646      	mov	r6, r8
 800066c:	087b      	lsrs	r3, r7, #1
 800066e:	e00e      	b.n	800068e <__udivmoddi4+0xfa>
 8000670:	42ab      	cmp	r3, r5
 8000672:	d101      	bne.n	8000678 <__udivmoddi4+0xe4>
 8000674:	42a2      	cmp	r2, r4
 8000676:	d80c      	bhi.n	8000692 <__udivmoddi4+0xfe>
 8000678:	1aa4      	subs	r4, r4, r2
 800067a:	419d      	sbcs	r5, r3
 800067c:	2001      	movs	r0, #1
 800067e:	1924      	adds	r4, r4, r4
 8000680:	416d      	adcs	r5, r5
 8000682:	2100      	movs	r1, #0
 8000684:	3e01      	subs	r6, #1
 8000686:	1824      	adds	r4, r4, r0
 8000688:	414d      	adcs	r5, r1
 800068a:	2e00      	cmp	r6, #0
 800068c:	d006      	beq.n	800069c <__udivmoddi4+0x108>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d9ee      	bls.n	8000670 <__udivmoddi4+0xdc>
 8000692:	3e01      	subs	r6, #1
 8000694:	1924      	adds	r4, r4, r4
 8000696:	416d      	adcs	r5, r5
 8000698:	2e00      	cmp	r6, #0
 800069a:	d1f8      	bne.n	800068e <__udivmoddi4+0xfa>
 800069c:	9800      	ldr	r0, [sp, #0]
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	465b      	mov	r3, fp
 80006a2:	1900      	adds	r0, r0, r4
 80006a4:	4169      	adcs	r1, r5
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db24      	blt.n	80006f4 <__udivmoddi4+0x160>
 80006aa:	002b      	movs	r3, r5
 80006ac:	465a      	mov	r2, fp
 80006ae:	4644      	mov	r4, r8
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	002a      	movs	r2, r5
 80006b4:	40e2      	lsrs	r2, r4
 80006b6:	001c      	movs	r4, r3
 80006b8:	465b      	mov	r3, fp
 80006ba:	0015      	movs	r5, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db2a      	blt.n	8000716 <__udivmoddi4+0x182>
 80006c0:	0026      	movs	r6, r4
 80006c2:	409e      	lsls	r6, r3
 80006c4:	0033      	movs	r3, r6
 80006c6:	0026      	movs	r6, r4
 80006c8:	4647      	mov	r7, r8
 80006ca:	40be      	lsls	r6, r7
 80006cc:	0032      	movs	r2, r6
 80006ce:	1a80      	subs	r0, r0, r2
 80006d0:	4199      	sbcs	r1, r3
 80006d2:	9000      	str	r0, [sp, #0]
 80006d4:	9101      	str	r1, [sp, #4]
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x84>
 80006d8:	42a3      	cmp	r3, r4
 80006da:	d8bc      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80006dc:	e783      	b.n	80005e6 <__udivmoddi4+0x52>
 80006de:	4642      	mov	r2, r8
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e786      	b.n	8000602 <__udivmoddi4+0x6e>
 80006f4:	4642      	mov	r2, r8
 80006f6:	2320      	movs	r3, #32
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4646      	mov	r6, r8
 80006fe:	409a      	lsls	r2, r3
 8000700:	0023      	movs	r3, r4
 8000702:	40f3      	lsrs	r3, r6
 8000704:	4644      	mov	r4, r8
 8000706:	4313      	orrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	40e2      	lsrs	r2, r4
 800070c:	001c      	movs	r4, r3
 800070e:	465b      	mov	r3, fp
 8000710:	0015      	movs	r5, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	dad4      	bge.n	80006c0 <__udivmoddi4+0x12c>
 8000716:	4642      	mov	r2, r8
 8000718:	002f      	movs	r7, r5
 800071a:	2320      	movs	r3, #32
 800071c:	0026      	movs	r6, r4
 800071e:	4097      	lsls	r7, r2
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	40de      	lsrs	r6, r3
 8000724:	003b      	movs	r3, r7
 8000726:	4333      	orrs	r3, r6
 8000728:	e7cd      	b.n	80006c6 <__udivmoddi4+0x132>
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <__aeabi_fsub>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	46ce      	mov	lr, r9
 8000730:	4647      	mov	r7, r8
 8000732:	0243      	lsls	r3, r0, #9
 8000734:	0a5b      	lsrs	r3, r3, #9
 8000736:	024e      	lsls	r6, r1, #9
 8000738:	00da      	lsls	r2, r3, #3
 800073a:	4694      	mov	ip, r2
 800073c:	0a72      	lsrs	r2, r6, #9
 800073e:	4691      	mov	r9, r2
 8000740:	0045      	lsls	r5, r0, #1
 8000742:	004a      	lsls	r2, r1, #1
 8000744:	b580      	push	{r7, lr}
 8000746:	0e2d      	lsrs	r5, r5, #24
 8000748:	001f      	movs	r7, r3
 800074a:	0fc4      	lsrs	r4, r0, #31
 800074c:	0e12      	lsrs	r2, r2, #24
 800074e:	0fc9      	lsrs	r1, r1, #31
 8000750:	09b6      	lsrs	r6, r6, #6
 8000752:	2aff      	cmp	r2, #255	; 0xff
 8000754:	d05b      	beq.n	800080e <__aeabi_fsub+0xe2>
 8000756:	2001      	movs	r0, #1
 8000758:	4041      	eors	r1, r0
 800075a:	428c      	cmp	r4, r1
 800075c:	d039      	beq.n	80007d2 <__aeabi_fsub+0xa6>
 800075e:	1aa8      	subs	r0, r5, r2
 8000760:	2800      	cmp	r0, #0
 8000762:	dd5a      	ble.n	800081a <__aeabi_fsub+0xee>
 8000764:	2a00      	cmp	r2, #0
 8000766:	d06a      	beq.n	800083e <__aeabi_fsub+0x112>
 8000768:	2dff      	cmp	r5, #255	; 0xff
 800076a:	d100      	bne.n	800076e <__aeabi_fsub+0x42>
 800076c:	e0d9      	b.n	8000922 <__aeabi_fsub+0x1f6>
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	04d2      	lsls	r2, r2, #19
 8000772:	4316      	orrs	r6, r2
 8000774:	281b      	cmp	r0, #27
 8000776:	dc00      	bgt.n	800077a <__aeabi_fsub+0x4e>
 8000778:	e0e9      	b.n	800094e <__aeabi_fsub+0x222>
 800077a:	2001      	movs	r0, #1
 800077c:	4663      	mov	r3, ip
 800077e:	1a18      	subs	r0, r3, r0
 8000780:	0143      	lsls	r3, r0, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fsub+0x5a>
 8000784:	e0b4      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 8000786:	0180      	lsls	r0, r0, #6
 8000788:	0987      	lsrs	r7, r0, #6
 800078a:	0038      	movs	r0, r7
 800078c:	f001 fd32 	bl	80021f4 <__clzsi2>
 8000790:	3805      	subs	r0, #5
 8000792:	4087      	lsls	r7, r0
 8000794:	4285      	cmp	r5, r0
 8000796:	dc00      	bgt.n	800079a <__aeabi_fsub+0x6e>
 8000798:	e0cc      	b.n	8000934 <__aeabi_fsub+0x208>
 800079a:	1a2d      	subs	r5, r5, r0
 800079c:	48b5      	ldr	r0, [pc, #724]	; (8000a74 <__aeabi_fsub+0x348>)
 800079e:	4038      	ands	r0, r7
 80007a0:	0743      	lsls	r3, r0, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fsub+0x82>
 80007a4:	230f      	movs	r3, #15
 80007a6:	4003      	ands	r3, r0
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fsub+0x82>
 80007ac:	3004      	adds	r0, #4
 80007ae:	0143      	lsls	r3, r0, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fsub+0x88>
 80007b2:	e0a0      	b.n	80008f6 <__aeabi_fsub+0x1ca>
 80007b4:	1c6a      	adds	r2, r5, #1
 80007b6:	2dfe      	cmp	r5, #254	; 0xfe
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0x90>
 80007ba:	e08d      	b.n	80008d8 <__aeabi_fsub+0x1ac>
 80007bc:	0180      	lsls	r0, r0, #6
 80007be:	0a47      	lsrs	r7, r0, #9
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	05d0      	lsls	r0, r2, #23
 80007c4:	4338      	orrs	r0, r7
 80007c6:	07e4      	lsls	r4, r4, #31
 80007c8:	4320      	orrs	r0, r4
 80007ca:	bcc0      	pop	{r6, r7}
 80007cc:	46b9      	mov	r9, r7
 80007ce:	46b0      	mov	r8, r6
 80007d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007d2:	1aa8      	subs	r0, r5, r2
 80007d4:	4680      	mov	r8, r0
 80007d6:	2800      	cmp	r0, #0
 80007d8:	dd45      	ble.n	8000866 <__aeabi_fsub+0x13a>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d070      	beq.n	80008c0 <__aeabi_fsub+0x194>
 80007de:	2dff      	cmp	r5, #255	; 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0xb8>
 80007e2:	e09e      	b.n	8000922 <__aeabi_fsub+0x1f6>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	431e      	orrs	r6, r3
 80007ea:	4643      	mov	r3, r8
 80007ec:	2b1b      	cmp	r3, #27
 80007ee:	dc00      	bgt.n	80007f2 <__aeabi_fsub+0xc6>
 80007f0:	e0d2      	b.n	8000998 <__aeabi_fsub+0x26c>
 80007f2:	2001      	movs	r0, #1
 80007f4:	4460      	add	r0, ip
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d57a      	bpl.n	80008f0 <__aeabi_fsub+0x1c4>
 80007fa:	3501      	adds	r5, #1
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d06b      	beq.n	80008d8 <__aeabi_fsub+0x1ac>
 8000800:	2301      	movs	r3, #1
 8000802:	4a9d      	ldr	r2, [pc, #628]	; (8000a78 <__aeabi_fsub+0x34c>)
 8000804:	4003      	ands	r3, r0
 8000806:	0840      	lsrs	r0, r0, #1
 8000808:	4010      	ands	r0, r2
 800080a:	4318      	orrs	r0, r3
 800080c:	e7c8      	b.n	80007a0 <__aeabi_fsub+0x74>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d020      	beq.n	8000854 <__aeabi_fsub+0x128>
 8000812:	428c      	cmp	r4, r1
 8000814:	d023      	beq.n	800085e <__aeabi_fsub+0x132>
 8000816:	0028      	movs	r0, r5
 8000818:	38ff      	subs	r0, #255	; 0xff
 800081a:	2800      	cmp	r0, #0
 800081c:	d039      	beq.n	8000892 <__aeabi_fsub+0x166>
 800081e:	1b57      	subs	r7, r2, r5
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fsub+0xfa>
 8000824:	e09d      	b.n	8000962 <__aeabi_fsub+0x236>
 8000826:	4663      	mov	r3, ip
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x102>
 800082c:	e0db      	b.n	80009e6 <__aeabi_fsub+0x2ba>
 800082e:	1e7b      	subs	r3, r7, #1
 8000830:	2f01      	cmp	r7, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_fsub+0x10a>
 8000834:	e10d      	b.n	8000a52 <__aeabi_fsub+0x326>
 8000836:	2fff      	cmp	r7, #255	; 0xff
 8000838:	d071      	beq.n	800091e <__aeabi_fsub+0x1f2>
 800083a:	001f      	movs	r7, r3
 800083c:	e098      	b.n	8000970 <__aeabi_fsub+0x244>
 800083e:	2e00      	cmp	r6, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x118>
 8000842:	e0a7      	b.n	8000994 <__aeabi_fsub+0x268>
 8000844:	1e42      	subs	r2, r0, #1
 8000846:	2801      	cmp	r0, #1
 8000848:	d100      	bne.n	800084c <__aeabi_fsub+0x120>
 800084a:	e0e6      	b.n	8000a1a <__aeabi_fsub+0x2ee>
 800084c:	28ff      	cmp	r0, #255	; 0xff
 800084e:	d068      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 8000850:	0010      	movs	r0, r2
 8000852:	e78f      	b.n	8000774 <__aeabi_fsub+0x48>
 8000854:	2001      	movs	r0, #1
 8000856:	4041      	eors	r1, r0
 8000858:	42a1      	cmp	r1, r4
 800085a:	d000      	beq.n	800085e <__aeabi_fsub+0x132>
 800085c:	e77f      	b.n	800075e <__aeabi_fsub+0x32>
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	4240      	negs	r0, r0
 8000862:	4680      	mov	r8, r0
 8000864:	44a8      	add	r8, r5
 8000866:	4640      	mov	r0, r8
 8000868:	2800      	cmp	r0, #0
 800086a:	d038      	beq.n	80008de <__aeabi_fsub+0x1b2>
 800086c:	1b51      	subs	r1, r2, r5
 800086e:	2d00      	cmp	r5, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fsub+0x148>
 8000872:	e0ae      	b.n	80009d2 <__aeabi_fsub+0x2a6>
 8000874:	2aff      	cmp	r2, #255	; 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fsub+0x14e>
 8000878:	e0df      	b.n	8000a3a <__aeabi_fsub+0x30e>
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	4660      	mov	r0, ip
 800087e:	04db      	lsls	r3, r3, #19
 8000880:	4318      	orrs	r0, r3
 8000882:	4684      	mov	ip, r0
 8000884:	291b      	cmp	r1, #27
 8000886:	dc00      	bgt.n	800088a <__aeabi_fsub+0x15e>
 8000888:	e0d9      	b.n	8000a3e <__aeabi_fsub+0x312>
 800088a:	2001      	movs	r0, #1
 800088c:	0015      	movs	r5, r2
 800088e:	1980      	adds	r0, r0, r6
 8000890:	e7b1      	b.n	80007f6 <__aeabi_fsub+0xca>
 8000892:	20fe      	movs	r0, #254	; 0xfe
 8000894:	1c6a      	adds	r2, r5, #1
 8000896:	4210      	tst	r0, r2
 8000898:	d171      	bne.n	800097e <__aeabi_fsub+0x252>
 800089a:	2d00      	cmp	r5, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fsub+0x174>
 800089e:	e0a6      	b.n	80009ee <__aeabi_fsub+0x2c2>
 80008a0:	4663      	mov	r3, ip
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fsub+0x17c>
 80008a6:	e0d9      	b.n	8000a5c <__aeabi_fsub+0x330>
 80008a8:	2200      	movs	r2, #0
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fsub+0x184>
 80008ae:	e788      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008b0:	1b98      	subs	r0, r3, r6
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fsub+0x18c>
 80008b6:	e0e1      	b.n	8000a7c <__aeabi_fsub+0x350>
 80008b8:	4663      	mov	r3, ip
 80008ba:	000c      	movs	r4, r1
 80008bc:	1af0      	subs	r0, r6, r3
 80008be:	e76f      	b.n	80007a0 <__aeabi_fsub+0x74>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fsub+0x19a>
 80008c4:	e0b7      	b.n	8000a36 <__aeabi_fsub+0x30a>
 80008c6:	0002      	movs	r2, r0
 80008c8:	3a01      	subs	r2, #1
 80008ca:	2801      	cmp	r0, #1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x1a4>
 80008ce:	e09c      	b.n	8000a0a <__aeabi_fsub+0x2de>
 80008d0:	28ff      	cmp	r0, #255	; 0xff
 80008d2:	d026      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 80008d4:	4690      	mov	r8, r2
 80008d6:	e788      	b.n	80007ea <__aeabi_fsub+0xbe>
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	2700      	movs	r7, #0
 80008dc:	e771      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008de:	20fe      	movs	r0, #254	; 0xfe
 80008e0:	1c6a      	adds	r2, r5, #1
 80008e2:	4210      	tst	r0, r2
 80008e4:	d064      	beq.n	80009b0 <__aeabi_fsub+0x284>
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d0f6      	beq.n	80008d8 <__aeabi_fsub+0x1ac>
 80008ea:	0015      	movs	r5, r2
 80008ec:	4466      	add	r6, ip
 80008ee:	0870      	lsrs	r0, r6, #1
 80008f0:	0743      	lsls	r3, r0, #29
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fsub+0x1ca>
 80008f4:	e756      	b.n	80007a4 <__aeabi_fsub+0x78>
 80008f6:	08c3      	lsrs	r3, r0, #3
 80008f8:	2dff      	cmp	r5, #255	; 0xff
 80008fa:	d012      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 80008fc:	025b      	lsls	r3, r3, #9
 80008fe:	0a5f      	lsrs	r7, r3, #9
 8000900:	b2ea      	uxtb	r2, r5
 8000902:	e75e      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000904:	4662      	mov	r2, ip
 8000906:	2a00      	cmp	r2, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0x1e0>
 800090a:	e096      	b.n	8000a3a <__aeabi_fsub+0x30e>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d008      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	03d2      	lsls	r2, r2, #15
 8000914:	4213      	tst	r3, r2
 8000916:	d004      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 8000918:	4648      	mov	r0, r9
 800091a:	4210      	tst	r0, r2
 800091c:	d101      	bne.n	8000922 <__aeabi_fsub+0x1f6>
 800091e:	000c      	movs	r4, r1
 8000920:	464b      	mov	r3, r9
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0d8      	beq.n	80008d8 <__aeabi_fsub+0x1ac>
 8000926:	2780      	movs	r7, #128	; 0x80
 8000928:	03ff      	lsls	r7, r7, #15
 800092a:	431f      	orrs	r7, r3
 800092c:	027f      	lsls	r7, r7, #9
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	0a7f      	lsrs	r7, r7, #9
 8000932:	e746      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000934:	2320      	movs	r3, #32
 8000936:	003a      	movs	r2, r7
 8000938:	1b45      	subs	r5, r0, r5
 800093a:	0038      	movs	r0, r7
 800093c:	3501      	adds	r5, #1
 800093e:	40ea      	lsrs	r2, r5
 8000940:	1b5d      	subs	r5, r3, r5
 8000942:	40a8      	lsls	r0, r5
 8000944:	1e43      	subs	r3, r0, #1
 8000946:	4198      	sbcs	r0, r3
 8000948:	2500      	movs	r5, #0
 800094a:	4310      	orrs	r0, r2
 800094c:	e728      	b.n	80007a0 <__aeabi_fsub+0x74>
 800094e:	2320      	movs	r3, #32
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	0032      	movs	r2, r6
 8000954:	409e      	lsls	r6, r3
 8000956:	40c2      	lsrs	r2, r0
 8000958:	0030      	movs	r0, r6
 800095a:	1e43      	subs	r3, r0, #1
 800095c:	4198      	sbcs	r0, r3
 800095e:	4310      	orrs	r0, r2
 8000960:	e70c      	b.n	800077c <__aeabi_fsub+0x50>
 8000962:	2aff      	cmp	r2, #255	; 0xff
 8000964:	d0db      	beq.n	800091e <__aeabi_fsub+0x1f2>
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	4660      	mov	r0, ip
 800096a:	04db      	lsls	r3, r3, #19
 800096c:	4318      	orrs	r0, r3
 800096e:	4684      	mov	ip, r0
 8000970:	2f1b      	cmp	r7, #27
 8000972:	dd56      	ble.n	8000a22 <__aeabi_fsub+0x2f6>
 8000974:	2001      	movs	r0, #1
 8000976:	000c      	movs	r4, r1
 8000978:	0015      	movs	r5, r2
 800097a:	1a30      	subs	r0, r6, r0
 800097c:	e700      	b.n	8000780 <__aeabi_fsub+0x54>
 800097e:	4663      	mov	r3, ip
 8000980:	1b9f      	subs	r7, r3, r6
 8000982:	017b      	lsls	r3, r7, #5
 8000984:	d43d      	bmi.n	8000a02 <__aeabi_fsub+0x2d6>
 8000986:	2f00      	cmp	r7, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fsub+0x260>
 800098a:	e6fe      	b.n	800078a <__aeabi_fsub+0x5e>
 800098c:	2400      	movs	r4, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2700      	movs	r7, #0
 8000992:	e716      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000994:	0005      	movs	r5, r0
 8000996:	e7af      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 8000998:	0032      	movs	r2, r6
 800099a:	4643      	mov	r3, r8
 800099c:	4641      	mov	r1, r8
 800099e:	40da      	lsrs	r2, r3
 80009a0:	2320      	movs	r3, #32
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	409e      	lsls	r6, r3
 80009a6:	0030      	movs	r0, r6
 80009a8:	1e43      	subs	r3, r0, #1
 80009aa:	4198      	sbcs	r0, r3
 80009ac:	4310      	orrs	r0, r2
 80009ae:	e721      	b.n	80007f4 <__aeabi_fsub+0xc8>
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d1a7      	bne.n	8000904 <__aeabi_fsub+0x1d8>
 80009b4:	4663      	mov	r3, ip
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d059      	beq.n	8000a6e <__aeabi_fsub+0x342>
 80009ba:	2200      	movs	r2, #0
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fsub+0x296>
 80009c0:	e6ff      	b.n	80007c2 <__aeabi_fsub+0x96>
 80009c2:	0030      	movs	r0, r6
 80009c4:	4460      	add	r0, ip
 80009c6:	0143      	lsls	r3, r0, #5
 80009c8:	d592      	bpl.n	80008f0 <__aeabi_fsub+0x1c4>
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <__aeabi_fsub+0x348>)
 80009cc:	3501      	adds	r5, #1
 80009ce:	4018      	ands	r0, r3
 80009d0:	e78e      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 80009d2:	4663      	mov	r3, ip
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d047      	beq.n	8000a68 <__aeabi_fsub+0x33c>
 80009d8:	1e4b      	subs	r3, r1, #1
 80009da:	2901      	cmp	r1, #1
 80009dc:	d015      	beq.n	8000a0a <__aeabi_fsub+0x2de>
 80009de:	29ff      	cmp	r1, #255	; 0xff
 80009e0:	d02b      	beq.n	8000a3a <__aeabi_fsub+0x30e>
 80009e2:	0019      	movs	r1, r3
 80009e4:	e74e      	b.n	8000884 <__aeabi_fsub+0x158>
 80009e6:	000c      	movs	r4, r1
 80009e8:	464b      	mov	r3, r9
 80009ea:	003d      	movs	r5, r7
 80009ec:	e784      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 80009ee:	4662      	mov	r2, ip
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	d18b      	bne.n	800090c <__aeabi_fsub+0x1e0>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d192      	bne.n	800091e <__aeabi_fsub+0x1f2>
 80009f8:	2780      	movs	r7, #128	; 0x80
 80009fa:	2400      	movs	r4, #0
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	03ff      	lsls	r7, r7, #15
 8000a00:	e6df      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a02:	4663      	mov	r3, ip
 8000a04:	000c      	movs	r4, r1
 8000a06:	1af7      	subs	r7, r6, r3
 8000a08:	e6bf      	b.n	800078a <__aeabi_fsub+0x5e>
 8000a0a:	0030      	movs	r0, r6
 8000a0c:	4460      	add	r0, ip
 8000a0e:	2501      	movs	r5, #1
 8000a10:	0143      	lsls	r3, r0, #5
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_fsub+0x2ea>
 8000a14:	e76c      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 8000a16:	2502      	movs	r5, #2
 8000a18:	e6f2      	b.n	8000800 <__aeabi_fsub+0xd4>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	2501      	movs	r5, #1
 8000a1e:	1b98      	subs	r0, r3, r6
 8000a20:	e6ae      	b.n	8000780 <__aeabi_fsub+0x54>
 8000a22:	2320      	movs	r3, #32
 8000a24:	4664      	mov	r4, ip
 8000a26:	4660      	mov	r0, ip
 8000a28:	40fc      	lsrs	r4, r7
 8000a2a:	1bdf      	subs	r7, r3, r7
 8000a2c:	40b8      	lsls	r0, r7
 8000a2e:	1e43      	subs	r3, r0, #1
 8000a30:	4198      	sbcs	r0, r3
 8000a32:	4320      	orrs	r0, r4
 8000a34:	e79f      	b.n	8000976 <__aeabi_fsub+0x24a>
 8000a36:	0005      	movs	r5, r0
 8000a38:	e75e      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	e771      	b.n	8000922 <__aeabi_fsub+0x1f6>
 8000a3e:	2320      	movs	r3, #32
 8000a40:	4665      	mov	r5, ip
 8000a42:	4660      	mov	r0, ip
 8000a44:	40cd      	lsrs	r5, r1
 8000a46:	1a59      	subs	r1, r3, r1
 8000a48:	4088      	lsls	r0, r1
 8000a4a:	1e43      	subs	r3, r0, #1
 8000a4c:	4198      	sbcs	r0, r3
 8000a4e:	4328      	orrs	r0, r5
 8000a50:	e71c      	b.n	800088c <__aeabi_fsub+0x160>
 8000a52:	4663      	mov	r3, ip
 8000a54:	000c      	movs	r4, r1
 8000a56:	2501      	movs	r5, #1
 8000a58:	1af0      	subs	r0, r6, r3
 8000a5a:	e691      	b.n	8000780 <__aeabi_fsub+0x54>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d095      	beq.n	800098c <__aeabi_fsub+0x260>
 8000a60:	000c      	movs	r4, r1
 8000a62:	464f      	mov	r7, r9
 8000a64:	2200      	movs	r2, #0
 8000a66:	e6ac      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	000d      	movs	r5, r1
 8000a6c:	e744      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 8000a6e:	464f      	mov	r7, r9
 8000a70:	2200      	movs	r2, #0
 8000a72:	e6a6      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a74:	fbffffff 	.word	0xfbffffff
 8000a78:	7dffffff 	.word	0x7dffffff
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0x356>
 8000a80:	e736      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 8000a82:	2400      	movs	r4, #0
 8000a84:	2700      	movs	r7, #0
 8000a86:	e69c      	b.n	80007c2 <__aeabi_fsub+0x96>

08000a88 <__aeabi_ui2f>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	1e05      	subs	r5, r0, #0
 8000a8c:	d00e      	beq.n	8000aac <__aeabi_ui2f+0x24>
 8000a8e:	f001 fbb1 	bl	80021f4 <__clzsi2>
 8000a92:	239e      	movs	r3, #158	; 0x9e
 8000a94:	0004      	movs	r4, r0
 8000a96:	1a1b      	subs	r3, r3, r0
 8000a98:	2b96      	cmp	r3, #150	; 0x96
 8000a9a:	dc0c      	bgt.n	8000ab6 <__aeabi_ui2f+0x2e>
 8000a9c:	2808      	cmp	r0, #8
 8000a9e:	dd01      	ble.n	8000aa4 <__aeabi_ui2f+0x1c>
 8000aa0:	3c08      	subs	r4, #8
 8000aa2:	40a5      	lsls	r5, r4
 8000aa4:	026d      	lsls	r5, r5, #9
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	e001      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	2500      	movs	r5, #0
 8000ab0:	05c0      	lsls	r0, r0, #23
 8000ab2:	4328      	orrs	r0, r5
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	2b99      	cmp	r3, #153	; 0x99
 8000ab8:	dd09      	ble.n	8000ace <__aeabi_ui2f+0x46>
 8000aba:	0002      	movs	r2, r0
 8000abc:	0029      	movs	r1, r5
 8000abe:	321b      	adds	r2, #27
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	1e4a      	subs	r2, r1, #1
 8000ac4:	4191      	sbcs	r1, r2
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	1a12      	subs	r2, r2, r0
 8000aca:	40d5      	lsrs	r5, r2
 8000acc:	430d      	orrs	r5, r1
 8000ace:	2c05      	cmp	r4, #5
 8000ad0:	dc12      	bgt.n	8000af8 <__aeabi_ui2f+0x70>
 8000ad2:	0029      	movs	r1, r5
 8000ad4:	4e0c      	ldr	r6, [pc, #48]	; (8000b08 <__aeabi_ui2f+0x80>)
 8000ad6:	4031      	ands	r1, r6
 8000ad8:	076a      	lsls	r2, r5, #29
 8000ada:	d009      	beq.n	8000af0 <__aeabi_ui2f+0x68>
 8000adc:	200f      	movs	r0, #15
 8000ade:	4028      	ands	r0, r5
 8000ae0:	2804      	cmp	r0, #4
 8000ae2:	d005      	beq.n	8000af0 <__aeabi_ui2f+0x68>
 8000ae4:	3104      	adds	r1, #4
 8000ae6:	014a      	lsls	r2, r1, #5
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_ui2f+0x68>
 8000aea:	239f      	movs	r3, #159	; 0x9f
 8000aec:	4031      	ands	r1, r6
 8000aee:	1b1b      	subs	r3, r3, r4
 8000af0:	0189      	lsls	r1, r1, #6
 8000af2:	0a4d      	lsrs	r5, r1, #9
 8000af4:	b2d8      	uxtb	r0, r3
 8000af6:	e7db      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000af8:	1f62      	subs	r2, r4, #5
 8000afa:	4095      	lsls	r5, r2
 8000afc:	0029      	movs	r1, r5
 8000afe:	4e02      	ldr	r6, [pc, #8]	; (8000b08 <__aeabi_ui2f+0x80>)
 8000b00:	4031      	ands	r1, r6
 8000b02:	076a      	lsls	r2, r5, #29
 8000b04:	d0f4      	beq.n	8000af0 <__aeabi_ui2f+0x68>
 8000b06:	e7e9      	b.n	8000adc <__aeabi_ui2f+0x54>
 8000b08:	fbffffff 	.word	0xfbffffff

08000b0c <__aeabi_dadd>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	464f      	mov	r7, r9
 8000b10:	4646      	mov	r6, r8
 8000b12:	46d6      	mov	lr, sl
 8000b14:	000d      	movs	r5, r1
 8000b16:	0004      	movs	r4, r0
 8000b18:	b5c0      	push	{r6, r7, lr}
 8000b1a:	001f      	movs	r7, r3
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0328      	lsls	r0, r5, #12
 8000b20:	0f62      	lsrs	r2, r4, #29
 8000b22:	0a40      	lsrs	r0, r0, #9
 8000b24:	4310      	orrs	r0, r2
 8000b26:	007a      	lsls	r2, r7, #1
 8000b28:	0d52      	lsrs	r2, r2, #21
 8000b2a:	00e3      	lsls	r3, r4, #3
 8000b2c:	033c      	lsls	r4, r7, #12
 8000b2e:	4691      	mov	r9, r2
 8000b30:	0a64      	lsrs	r4, r4, #9
 8000b32:	0ffa      	lsrs	r2, r7, #31
 8000b34:	0f4f      	lsrs	r7, r1, #29
 8000b36:	006e      	lsls	r6, r5, #1
 8000b38:	4327      	orrs	r7, r4
 8000b3a:	4692      	mov	sl, r2
 8000b3c:	46b8      	mov	r8, r7
 8000b3e:	0d76      	lsrs	r6, r6, #21
 8000b40:	0fed      	lsrs	r5, r5, #31
 8000b42:	00c9      	lsls	r1, r1, #3
 8000b44:	4295      	cmp	r5, r2
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x3e>
 8000b48:	e099      	b.n	8000c7e <__aeabi_dadd+0x172>
 8000b4a:	464c      	mov	r4, r9
 8000b4c:	1b34      	subs	r4, r6, r4
 8000b4e:	46a4      	mov	ip, r4
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_dadd+0x4a>
 8000b54:	e07c      	b.n	8000c50 <__aeabi_dadd+0x144>
 8000b56:	464a      	mov	r2, r9
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x52>
 8000b5c:	e0b8      	b.n	8000cd0 <__aeabi_dadd+0x1c4>
 8000b5e:	4ac5      	ldr	r2, [pc, #788]	; (8000e74 <__aeabi_dadd+0x368>)
 8000b60:	4296      	cmp	r6, r2
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x5a>
 8000b64:	e11c      	b.n	8000da0 <__aeabi_dadd+0x294>
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	003c      	movs	r4, r7
 8000b6a:	0412      	lsls	r2, r2, #16
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	46a0      	mov	r8, r4
 8000b70:	4662      	mov	r2, ip
 8000b72:	2a38      	cmp	r2, #56	; 0x38
 8000b74:	dd00      	ble.n	8000b78 <__aeabi_dadd+0x6c>
 8000b76:	e161      	b.n	8000e3c <__aeabi_dadd+0x330>
 8000b78:	2a1f      	cmp	r2, #31
 8000b7a:	dd00      	ble.n	8000b7e <__aeabi_dadd+0x72>
 8000b7c:	e1cc      	b.n	8000f18 <__aeabi_dadd+0x40c>
 8000b7e:	4664      	mov	r4, ip
 8000b80:	2220      	movs	r2, #32
 8000b82:	1b12      	subs	r2, r2, r4
 8000b84:	4644      	mov	r4, r8
 8000b86:	4094      	lsls	r4, r2
 8000b88:	000f      	movs	r7, r1
 8000b8a:	46a1      	mov	r9, r4
 8000b8c:	4664      	mov	r4, ip
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	40e7      	lsrs	r7, r4
 8000b92:	464c      	mov	r4, r9
 8000b94:	1e4a      	subs	r2, r1, #1
 8000b96:	4191      	sbcs	r1, r2
 8000b98:	433c      	orrs	r4, r7
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	4321      	orrs	r1, r4
 8000b9e:	4664      	mov	r4, ip
 8000ba0:	40e2      	lsrs	r2, r4
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	1a5c      	subs	r4, r3, r1
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	419b      	sbcs	r3, r3
 8000baa:	425f      	negs	r7, r3
 8000bac:	1bc7      	subs	r7, r0, r7
 8000bae:	023b      	lsls	r3, r7, #8
 8000bb0:	d400      	bmi.n	8000bb4 <__aeabi_dadd+0xa8>
 8000bb2:	e0d0      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8000bb4:	027f      	lsls	r7, r7, #9
 8000bb6:	0a7f      	lsrs	r7, r7, #9
 8000bb8:	2f00      	cmp	r7, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0xb2>
 8000bbc:	e0ff      	b.n	8000dbe <__aeabi_dadd+0x2b2>
 8000bbe:	0038      	movs	r0, r7
 8000bc0:	f001 fb18 	bl	80021f4 <__clzsi2>
 8000bc4:	0001      	movs	r1, r0
 8000bc6:	3908      	subs	r1, #8
 8000bc8:	2320      	movs	r3, #32
 8000bca:	0022      	movs	r2, r4
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	408f      	lsls	r7, r1
 8000bd0:	40da      	lsrs	r2, r3
 8000bd2:	408c      	lsls	r4, r1
 8000bd4:	4317      	orrs	r7, r2
 8000bd6:	42b1      	cmp	r1, r6
 8000bd8:	da00      	bge.n	8000bdc <__aeabi_dadd+0xd0>
 8000bda:	e0ff      	b.n	8000ddc <__aeabi_dadd+0x2d0>
 8000bdc:	1b89      	subs	r1, r1, r6
 8000bde:	1c4b      	adds	r3, r1, #1
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_dadd+0xda>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_dadd+0x22c>
 8000be6:	2220      	movs	r2, #32
 8000be8:	0039      	movs	r1, r7
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	0020      	movs	r0, r4
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	1e62      	subs	r2, r4, #1
 8000bf6:	4194      	sbcs	r4, r2
 8000bf8:	40df      	lsrs	r7, r3
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	4301      	orrs	r1, r0
 8000bfe:	430c      	orrs	r4, r1
 8000c00:	0763      	lsls	r3, r4, #29
 8000c02:	d009      	beq.n	8000c18 <__aeabi_dadd+0x10c>
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d005      	beq.n	8000c18 <__aeabi_dadd+0x10c>
 8000c0c:	1d23      	adds	r3, r4, #4
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	41a4      	sbcs	r4, r4
 8000c12:	4264      	negs	r4, r4
 8000c14:	193f      	adds	r7, r7, r4
 8000c16:	001c      	movs	r4, r3
 8000c18:	023b      	lsls	r3, r7, #8
 8000c1a:	d400      	bmi.n	8000c1e <__aeabi_dadd+0x112>
 8000c1c:	e09e      	b.n	8000d5c <__aeabi_dadd+0x250>
 8000c1e:	4b95      	ldr	r3, [pc, #596]	; (8000e74 <__aeabi_dadd+0x368>)
 8000c20:	3601      	adds	r6, #1
 8000c22:	429e      	cmp	r6, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x11c>
 8000c26:	e0b7      	b.n	8000d98 <__aeabi_dadd+0x28c>
 8000c28:	4a93      	ldr	r2, [pc, #588]	; (8000e78 <__aeabi_dadd+0x36c>)
 8000c2a:	08e4      	lsrs	r4, r4, #3
 8000c2c:	4017      	ands	r7, r2
 8000c2e:	077b      	lsls	r3, r7, #29
 8000c30:	0571      	lsls	r1, r6, #21
 8000c32:	027f      	lsls	r7, r7, #9
 8000c34:	4323      	orrs	r3, r4
 8000c36:	0b3f      	lsrs	r7, r7, #12
 8000c38:	0d4a      	lsrs	r2, r1, #21
 8000c3a:	0512      	lsls	r2, r2, #20
 8000c3c:	433a      	orrs	r2, r7
 8000c3e:	07ed      	lsls	r5, r5, #31
 8000c40:	432a      	orrs	r2, r5
 8000c42:	0018      	movs	r0, r3
 8000c44:	0011      	movs	r1, r2
 8000c46:	bce0      	pop	{r5, r6, r7}
 8000c48:	46ba      	mov	sl, r7
 8000c4a:	46b1      	mov	r9, r6
 8000c4c:	46a8      	mov	r8, r5
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	2c00      	cmp	r4, #0
 8000c52:	d04b      	beq.n	8000cec <__aeabi_dadd+0x1e0>
 8000c54:	464c      	mov	r4, r9
 8000c56:	1ba4      	subs	r4, r4, r6
 8000c58:	46a4      	mov	ip, r4
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_dadd+0x154>
 8000c5e:	e123      	b.n	8000ea8 <__aeabi_dadd+0x39c>
 8000c60:	0004      	movs	r4, r0
 8000c62:	431c      	orrs	r4, r3
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x15c>
 8000c66:	e1af      	b.n	8000fc8 <__aeabi_dadd+0x4bc>
 8000c68:	4662      	mov	r2, ip
 8000c6a:	1e54      	subs	r4, r2, #1
 8000c6c:	2a01      	cmp	r2, #1
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x166>
 8000c70:	e215      	b.n	800109e <__aeabi_dadd+0x592>
 8000c72:	4d80      	ldr	r5, [pc, #512]	; (8000e74 <__aeabi_dadd+0x368>)
 8000c74:	45ac      	cmp	ip, r5
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dadd+0x16e>
 8000c78:	e1c8      	b.n	800100c <__aeabi_dadd+0x500>
 8000c7a:	46a4      	mov	ip, r4
 8000c7c:	e11b      	b.n	8000eb6 <__aeabi_dadd+0x3aa>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	1ab2      	subs	r2, r6, r2
 8000c82:	4694      	mov	ip, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_dadd+0x17e>
 8000c88:	e0ac      	b.n	8000de4 <__aeabi_dadd+0x2d8>
 8000c8a:	464a      	mov	r2, r9
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d043      	beq.n	8000d18 <__aeabi_dadd+0x20c>
 8000c90:	4a78      	ldr	r2, [pc, #480]	; (8000e74 <__aeabi_dadd+0x368>)
 8000c92:	4296      	cmp	r6, r2
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x18c>
 8000c96:	e1af      	b.n	8000ff8 <__aeabi_dadd+0x4ec>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	003c      	movs	r4, r7
 8000c9c:	0412      	lsls	r2, r2, #16
 8000c9e:	4314      	orrs	r4, r2
 8000ca0:	46a0      	mov	r8, r4
 8000ca2:	4662      	mov	r2, ip
 8000ca4:	2a38      	cmp	r2, #56	; 0x38
 8000ca6:	dc67      	bgt.n	8000d78 <__aeabi_dadd+0x26c>
 8000ca8:	2a1f      	cmp	r2, #31
 8000caa:	dc00      	bgt.n	8000cae <__aeabi_dadd+0x1a2>
 8000cac:	e15f      	b.n	8000f6e <__aeabi_dadd+0x462>
 8000cae:	4647      	mov	r7, r8
 8000cb0:	3a20      	subs	r2, #32
 8000cb2:	40d7      	lsrs	r7, r2
 8000cb4:	4662      	mov	r2, ip
 8000cb6:	2a20      	cmp	r2, #32
 8000cb8:	d005      	beq.n	8000cc6 <__aeabi_dadd+0x1ba>
 8000cba:	4664      	mov	r4, ip
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	1b12      	subs	r2, r2, r4
 8000cc0:	4644      	mov	r4, r8
 8000cc2:	4094      	lsls	r4, r2
 8000cc4:	4321      	orrs	r1, r4
 8000cc6:	1e4a      	subs	r2, r1, #1
 8000cc8:	4191      	sbcs	r1, r2
 8000cca:	000c      	movs	r4, r1
 8000ccc:	433c      	orrs	r4, r7
 8000cce:	e057      	b.n	8000d80 <__aeabi_dadd+0x274>
 8000cd0:	003a      	movs	r2, r7
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x1cc>
 8000cd6:	e105      	b.n	8000ee4 <__aeabi_dadd+0x3d8>
 8000cd8:	0022      	movs	r2, r4
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	2c01      	cmp	r4, #1
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x1d6>
 8000ce0:	e182      	b.n	8000fe8 <__aeabi_dadd+0x4dc>
 8000ce2:	4c64      	ldr	r4, [pc, #400]	; (8000e74 <__aeabi_dadd+0x368>)
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d05b      	beq.n	8000da0 <__aeabi_dadd+0x294>
 8000ce8:	4694      	mov	ip, r2
 8000cea:	e741      	b.n	8000b70 <__aeabi_dadd+0x64>
 8000cec:	4c63      	ldr	r4, [pc, #396]	; (8000e7c <__aeabi_dadd+0x370>)
 8000cee:	1c77      	adds	r7, r6, #1
 8000cf0:	4227      	tst	r7, r4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_dadd+0x1ea>
 8000cf4:	e0c4      	b.n	8000e80 <__aeabi_dadd+0x374>
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x1f4>
 8000cfe:	e169      	b.n	8000fd4 <__aeabi_dadd+0x4c8>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dadd+0x1fa>
 8000d04:	e1bf      	b.n	8001086 <__aeabi_dadd+0x57a>
 8000d06:	4644      	mov	r4, r8
 8000d08:	430c      	orrs	r4, r1
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dadd+0x202>
 8000d0c:	e1d0      	b.n	80010b0 <__aeabi_dadd+0x5a4>
 8000d0e:	0742      	lsls	r2, r0, #29
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	08c0      	lsrs	r0, r0, #3
 8000d16:	e029      	b.n	8000d6c <__aeabi_dadd+0x260>
 8000d18:	003a      	movs	r2, r7
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dadd+0x214>
 8000d1e:	e170      	b.n	8001002 <__aeabi_dadd+0x4f6>
 8000d20:	4662      	mov	r2, ip
 8000d22:	4664      	mov	r4, ip
 8000d24:	3a01      	subs	r2, #1
 8000d26:	2c01      	cmp	r4, #1
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x220>
 8000d2a:	e0e0      	b.n	8000eee <__aeabi_dadd+0x3e2>
 8000d2c:	4c51      	ldr	r4, [pc, #324]	; (8000e74 <__aeabi_dadd+0x368>)
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x228>
 8000d32:	e161      	b.n	8000ff8 <__aeabi_dadd+0x4ec>
 8000d34:	4694      	mov	ip, r2
 8000d36:	e7b4      	b.n	8000ca2 <__aeabi_dadd+0x196>
 8000d38:	003a      	movs	r2, r7
 8000d3a:	391f      	subs	r1, #31
 8000d3c:	40ca      	lsrs	r2, r1
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2b20      	cmp	r3, #32
 8000d42:	d003      	beq.n	8000d4c <__aeabi_dadd+0x240>
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	433c      	orrs	r4, r7
 8000d4c:	1e63      	subs	r3, r4, #1
 8000d4e:	419c      	sbcs	r4, r3
 8000d50:	2700      	movs	r7, #0
 8000d52:	2600      	movs	r6, #0
 8000d54:	430c      	orrs	r4, r1
 8000d56:	0763      	lsls	r3, r4, #29
 8000d58:	d000      	beq.n	8000d5c <__aeabi_dadd+0x250>
 8000d5a:	e753      	b.n	8000c04 <__aeabi_dadd+0xf8>
 8000d5c:	46b4      	mov	ip, r6
 8000d5e:	08e4      	lsrs	r4, r4, #3
 8000d60:	077b      	lsls	r3, r7, #29
 8000d62:	4323      	orrs	r3, r4
 8000d64:	08f8      	lsrs	r0, r7, #3
 8000d66:	4a43      	ldr	r2, [pc, #268]	; (8000e74 <__aeabi_dadd+0x368>)
 8000d68:	4594      	cmp	ip, r2
 8000d6a:	d01d      	beq.n	8000da8 <__aeabi_dadd+0x29c>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	0307      	lsls	r7, r0, #12
 8000d70:	0552      	lsls	r2, r2, #21
 8000d72:	0b3f      	lsrs	r7, r7, #12
 8000d74:	0d52      	lsrs	r2, r2, #21
 8000d76:	e760      	b.n	8000c3a <__aeabi_dadd+0x12e>
 8000d78:	4644      	mov	r4, r8
 8000d7a:	430c      	orrs	r4, r1
 8000d7c:	1e62      	subs	r2, r4, #1
 8000d7e:	4194      	sbcs	r4, r2
 8000d80:	18e4      	adds	r4, r4, r3
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	425f      	negs	r7, r3
 8000d88:	183f      	adds	r7, r7, r0
 8000d8a:	023b      	lsls	r3, r7, #8
 8000d8c:	d5e3      	bpl.n	8000d56 <__aeabi_dadd+0x24a>
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <__aeabi_dadd+0x368>)
 8000d90:	3601      	adds	r6, #1
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dadd+0x28c>
 8000d96:	e0b5      	b.n	8000f04 <__aeabi_dadd+0x3f8>
 8000d98:	0032      	movs	r2, r6
 8000d9a:	2700      	movs	r7, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e74c      	b.n	8000c3a <__aeabi_dadd+0x12e>
 8000da0:	0742      	lsls	r2, r0, #29
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	08c0      	lsrs	r0, r0, #3
 8000da8:	001a      	movs	r2, r3
 8000daa:	4302      	orrs	r2, r0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x2a4>
 8000dae:	e1e1      	b.n	8001174 <__aeabi_dadd+0x668>
 8000db0:	2780      	movs	r7, #128	; 0x80
 8000db2:	033f      	lsls	r7, r7, #12
 8000db4:	4307      	orrs	r7, r0
 8000db6:	033f      	lsls	r7, r7, #12
 8000db8:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <__aeabi_dadd+0x368>)
 8000dba:	0b3f      	lsrs	r7, r7, #12
 8000dbc:	e73d      	b.n	8000c3a <__aeabi_dadd+0x12e>
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f001 fa18 	bl	80021f4 <__clzsi2>
 8000dc4:	0001      	movs	r1, r0
 8000dc6:	3118      	adds	r1, #24
 8000dc8:	291f      	cmp	r1, #31
 8000dca:	dc00      	bgt.n	8000dce <__aeabi_dadd+0x2c2>
 8000dcc:	e6fc      	b.n	8000bc8 <__aeabi_dadd+0xbc>
 8000dce:	3808      	subs	r0, #8
 8000dd0:	4084      	lsls	r4, r0
 8000dd2:	0027      	movs	r7, r4
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	42b1      	cmp	r1, r6
 8000dd8:	db00      	blt.n	8000ddc <__aeabi_dadd+0x2d0>
 8000dda:	e6ff      	b.n	8000bdc <__aeabi_dadd+0xd0>
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <__aeabi_dadd+0x36c>)
 8000dde:	1a76      	subs	r6, r6, r1
 8000de0:	4017      	ands	r7, r2
 8000de2:	e70d      	b.n	8000c00 <__aeabi_dadd+0xf4>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d02f      	beq.n	8000e48 <__aeabi_dadd+0x33c>
 8000de8:	464a      	mov	r2, r9
 8000dea:	1b92      	subs	r2, r2, r6
 8000dec:	4694      	mov	ip, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dadd+0x2e8>
 8000df2:	e0ad      	b.n	8000f50 <__aeabi_dadd+0x444>
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <__aeabi_dadd+0x368>)
 8000df6:	4591      	cmp	r9, r2
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dadd+0x2f0>
 8000dfa:	e10f      	b.n	800101c <__aeabi_dadd+0x510>
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0412      	lsls	r2, r2, #16
 8000e00:	4310      	orrs	r0, r2
 8000e02:	4662      	mov	r2, ip
 8000e04:	2a38      	cmp	r2, #56	; 0x38
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dadd+0x2fe>
 8000e08:	e10f      	b.n	800102a <__aeabi_dadd+0x51e>
 8000e0a:	2a1f      	cmp	r2, #31
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_dadd+0x304>
 8000e0e:	e180      	b.n	8001112 <__aeabi_dadd+0x606>
 8000e10:	4664      	mov	r4, ip
 8000e12:	2220      	movs	r2, #32
 8000e14:	001e      	movs	r6, r3
 8000e16:	1b12      	subs	r2, r2, r4
 8000e18:	4667      	mov	r7, ip
 8000e1a:	0004      	movs	r4, r0
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	4094      	lsls	r4, r2
 8000e20:	40fe      	lsrs	r6, r7
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	4193      	sbcs	r3, r2
 8000e26:	40f8      	lsrs	r0, r7
 8000e28:	4334      	orrs	r4, r6
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	4480      	add	r8, r0
 8000e2e:	1864      	adds	r4, r4, r1
 8000e30:	428c      	cmp	r4, r1
 8000e32:	41bf      	sbcs	r7, r7
 8000e34:	427f      	negs	r7, r7
 8000e36:	464e      	mov	r6, r9
 8000e38:	4447      	add	r7, r8
 8000e3a:	e7a6      	b.n	8000d8a <__aeabi_dadd+0x27e>
 8000e3c:	4642      	mov	r2, r8
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	0011      	movs	r1, r2
 8000e42:	1e4a      	subs	r2, r1, #1
 8000e44:	4191      	sbcs	r1, r2
 8000e46:	e6ad      	b.n	8000ba4 <__aeabi_dadd+0x98>
 8000e48:	4c0c      	ldr	r4, [pc, #48]	; (8000e7c <__aeabi_dadd+0x370>)
 8000e4a:	1c72      	adds	r2, r6, #1
 8000e4c:	4222      	tst	r2, r4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x346>
 8000e50:	e0a1      	b.n	8000f96 <__aeabi_dadd+0x48a>
 8000e52:	0002      	movs	r2, r0
 8000e54:	431a      	orrs	r2, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dadd+0x350>
 8000e5a:	e0fa      	b.n	8001052 <__aeabi_dadd+0x546>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x356>
 8000e60:	e145      	b.n	80010ee <__aeabi_dadd+0x5e2>
 8000e62:	003a      	movs	r2, r7
 8000e64:	430a      	orrs	r2, r1
 8000e66:	d000      	beq.n	8000e6a <__aeabi_dadd+0x35e>
 8000e68:	e146      	b.n	80010f8 <__aeabi_dadd+0x5ec>
 8000e6a:	0742      	lsls	r2, r0, #29
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	08c0      	lsrs	r0, r0, #3
 8000e72:	e77b      	b.n	8000d6c <__aeabi_dadd+0x260>
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff
 8000e7c:	000007fe 	.word	0x000007fe
 8000e80:	4647      	mov	r7, r8
 8000e82:	1a5c      	subs	r4, r3, r1
 8000e84:	1bc2      	subs	r2, r0, r7
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	427f      	negs	r7, r7
 8000e8c:	46b9      	mov	r9, r7
 8000e8e:	0017      	movs	r7, r2
 8000e90:	464a      	mov	r2, r9
 8000e92:	1abf      	subs	r7, r7, r2
 8000e94:	023a      	lsls	r2, r7, #8
 8000e96:	d500      	bpl.n	8000e9a <__aeabi_dadd+0x38e>
 8000e98:	e08d      	b.n	8000fb6 <__aeabi_dadd+0x4aa>
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	433b      	orrs	r3, r7
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_dadd+0x396>
 8000ea0:	e68a      	b.n	8000bb8 <__aeabi_dadd+0xac>
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	e761      	b.n	8000d6c <__aeabi_dadd+0x260>
 8000ea8:	4cb4      	ldr	r4, [pc, #720]	; (800117c <__aeabi_dadd+0x670>)
 8000eaa:	45a1      	cmp	r9, r4
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x3a4>
 8000eae:	e0ad      	b.n	800100c <__aeabi_dadd+0x500>
 8000eb0:	2480      	movs	r4, #128	; 0x80
 8000eb2:	0424      	lsls	r4, r4, #16
 8000eb4:	4320      	orrs	r0, r4
 8000eb6:	4664      	mov	r4, ip
 8000eb8:	2c38      	cmp	r4, #56	; 0x38
 8000eba:	dc3d      	bgt.n	8000f38 <__aeabi_dadd+0x42c>
 8000ebc:	4662      	mov	r2, ip
 8000ebe:	2c1f      	cmp	r4, #31
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_dadd+0x3b8>
 8000ec2:	e0b7      	b.n	8001034 <__aeabi_dadd+0x528>
 8000ec4:	2520      	movs	r5, #32
 8000ec6:	001e      	movs	r6, r3
 8000ec8:	1b2d      	subs	r5, r5, r4
 8000eca:	0004      	movs	r4, r0
 8000ecc:	40ab      	lsls	r3, r5
 8000ece:	40ac      	lsls	r4, r5
 8000ed0:	40d6      	lsrs	r6, r2
 8000ed2:	40d0      	lsrs	r0, r2
 8000ed4:	4642      	mov	r2, r8
 8000ed6:	1e5d      	subs	r5, r3, #1
 8000ed8:	41ab      	sbcs	r3, r5
 8000eda:	4334      	orrs	r4, r6
 8000edc:	1a12      	subs	r2, r2, r0
 8000ede:	4690      	mov	r8, r2
 8000ee0:	4323      	orrs	r3, r4
 8000ee2:	e02c      	b.n	8000f3e <__aeabi_dadd+0x432>
 8000ee4:	0742      	lsls	r2, r0, #29
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	08c0      	lsrs	r0, r0, #3
 8000eec:	e73b      	b.n	8000d66 <__aeabi_dadd+0x25a>
 8000eee:	185c      	adds	r4, r3, r1
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	419b      	sbcs	r3, r3
 8000ef4:	4440      	add	r0, r8
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	18c7      	adds	r7, r0, r3
 8000efa:	2601      	movs	r6, #1
 8000efc:	023b      	lsls	r3, r7, #8
 8000efe:	d400      	bmi.n	8000f02 <__aeabi_dadd+0x3f6>
 8000f00:	e729      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8000f02:	2602      	movs	r6, #2
 8000f04:	4a9e      	ldr	r2, [pc, #632]	; (8001180 <__aeabi_dadd+0x674>)
 8000f06:	0863      	lsrs	r3, r4, #1
 8000f08:	4017      	ands	r7, r2
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4014      	ands	r4, r2
 8000f0e:	431c      	orrs	r4, r3
 8000f10:	07fb      	lsls	r3, r7, #31
 8000f12:	431c      	orrs	r4, r3
 8000f14:	087f      	lsrs	r7, r7, #1
 8000f16:	e673      	b.n	8000c00 <__aeabi_dadd+0xf4>
 8000f18:	4644      	mov	r4, r8
 8000f1a:	3a20      	subs	r2, #32
 8000f1c:	40d4      	lsrs	r4, r2
 8000f1e:	4662      	mov	r2, ip
 8000f20:	2a20      	cmp	r2, #32
 8000f22:	d005      	beq.n	8000f30 <__aeabi_dadd+0x424>
 8000f24:	4667      	mov	r7, ip
 8000f26:	2240      	movs	r2, #64	; 0x40
 8000f28:	1bd2      	subs	r2, r2, r7
 8000f2a:	4647      	mov	r7, r8
 8000f2c:	4097      	lsls	r7, r2
 8000f2e:	4339      	orrs	r1, r7
 8000f30:	1e4a      	subs	r2, r1, #1
 8000f32:	4191      	sbcs	r1, r2
 8000f34:	4321      	orrs	r1, r4
 8000f36:	e635      	b.n	8000ba4 <__aeabi_dadd+0x98>
 8000f38:	4303      	orrs	r3, r0
 8000f3a:	1e58      	subs	r0, r3, #1
 8000f3c:	4183      	sbcs	r3, r0
 8000f3e:	1acc      	subs	r4, r1, r3
 8000f40:	42a1      	cmp	r1, r4
 8000f42:	41bf      	sbcs	r7, r7
 8000f44:	4643      	mov	r3, r8
 8000f46:	427f      	negs	r7, r7
 8000f48:	4655      	mov	r5, sl
 8000f4a:	464e      	mov	r6, r9
 8000f4c:	1bdf      	subs	r7, r3, r7
 8000f4e:	e62e      	b.n	8000bae <__aeabi_dadd+0xa2>
 8000f50:	0002      	movs	r2, r0
 8000f52:	431a      	orrs	r2, r3
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x44c>
 8000f56:	e0bd      	b.n	80010d4 <__aeabi_dadd+0x5c8>
 8000f58:	4662      	mov	r2, ip
 8000f5a:	4664      	mov	r4, ip
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	2c01      	cmp	r4, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x458>
 8000f62:	e0e5      	b.n	8001130 <__aeabi_dadd+0x624>
 8000f64:	4c85      	ldr	r4, [pc, #532]	; (800117c <__aeabi_dadd+0x670>)
 8000f66:	45a4      	cmp	ip, r4
 8000f68:	d058      	beq.n	800101c <__aeabi_dadd+0x510>
 8000f6a:	4694      	mov	ip, r2
 8000f6c:	e749      	b.n	8000e02 <__aeabi_dadd+0x2f6>
 8000f6e:	4664      	mov	r4, ip
 8000f70:	2220      	movs	r2, #32
 8000f72:	1b12      	subs	r2, r2, r4
 8000f74:	4644      	mov	r4, r8
 8000f76:	4094      	lsls	r4, r2
 8000f78:	000f      	movs	r7, r1
 8000f7a:	46a1      	mov	r9, r4
 8000f7c:	4664      	mov	r4, ip
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	40e7      	lsrs	r7, r4
 8000f82:	464c      	mov	r4, r9
 8000f84:	1e4a      	subs	r2, r1, #1
 8000f86:	4191      	sbcs	r1, r2
 8000f88:	433c      	orrs	r4, r7
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	430c      	orrs	r4, r1
 8000f8e:	4661      	mov	r1, ip
 8000f90:	40ca      	lsrs	r2, r1
 8000f92:	1880      	adds	r0, r0, r2
 8000f94:	e6f4      	b.n	8000d80 <__aeabi_dadd+0x274>
 8000f96:	4c79      	ldr	r4, [pc, #484]	; (800117c <__aeabi_dadd+0x670>)
 8000f98:	42a2      	cmp	r2, r4
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x492>
 8000f9c:	e6fd      	b.n	8000d9a <__aeabi_dadd+0x28e>
 8000f9e:	1859      	adds	r1, r3, r1
 8000fa0:	4299      	cmp	r1, r3
 8000fa2:	419b      	sbcs	r3, r3
 8000fa4:	4440      	add	r0, r8
 8000fa6:	425f      	negs	r7, r3
 8000fa8:	19c7      	adds	r7, r0, r7
 8000faa:	07fc      	lsls	r4, r7, #31
 8000fac:	0849      	lsrs	r1, r1, #1
 8000fae:	0016      	movs	r6, r2
 8000fb0:	430c      	orrs	r4, r1
 8000fb2:	087f      	lsrs	r7, r7, #1
 8000fb4:	e6cf      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8000fb6:	1acc      	subs	r4, r1, r3
 8000fb8:	42a1      	cmp	r1, r4
 8000fba:	41bf      	sbcs	r7, r7
 8000fbc:	4643      	mov	r3, r8
 8000fbe:	427f      	negs	r7, r7
 8000fc0:	1a18      	subs	r0, r3, r0
 8000fc2:	4655      	mov	r5, sl
 8000fc4:	1bc7      	subs	r7, r0, r7
 8000fc6:	e5f7      	b.n	8000bb8 <__aeabi_dadd+0xac>
 8000fc8:	08c9      	lsrs	r1, r1, #3
 8000fca:	077b      	lsls	r3, r7, #29
 8000fcc:	4655      	mov	r5, sl
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	08f8      	lsrs	r0, r7, #3
 8000fd2:	e6c8      	b.n	8000d66 <__aeabi_dadd+0x25a>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dadd+0x4ce>
 8000fd8:	e081      	b.n	80010de <__aeabi_dadd+0x5d2>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	d115      	bne.n	800100c <__aeabi_dadd+0x500>
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	0300      	lsls	r0, r0, #12
 8000fe6:	e6e3      	b.n	8000db0 <__aeabi_dadd+0x2a4>
 8000fe8:	1a5c      	subs	r4, r3, r1
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	419b      	sbcs	r3, r3
 8000fee:	1bc7      	subs	r7, r0, r7
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	2601      	movs	r6, #1
 8000ff4:	1aff      	subs	r7, r7, r3
 8000ff6:	e5da      	b.n	8000bae <__aeabi_dadd+0xa2>
 8000ff8:	0742      	lsls	r2, r0, #29
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	08c0      	lsrs	r0, r0, #3
 8001000:	e6d2      	b.n	8000da8 <__aeabi_dadd+0x29c>
 8001002:	0742      	lsls	r2, r0, #29
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	4313      	orrs	r3, r2
 8001008:	08c0      	lsrs	r0, r0, #3
 800100a:	e6ac      	b.n	8000d66 <__aeabi_dadd+0x25a>
 800100c:	4643      	mov	r3, r8
 800100e:	4642      	mov	r2, r8
 8001010:	08c9      	lsrs	r1, r1, #3
 8001012:	075b      	lsls	r3, r3, #29
 8001014:	4655      	mov	r5, sl
 8001016:	430b      	orrs	r3, r1
 8001018:	08d0      	lsrs	r0, r2, #3
 800101a:	e6c5      	b.n	8000da8 <__aeabi_dadd+0x29c>
 800101c:	4643      	mov	r3, r8
 800101e:	4642      	mov	r2, r8
 8001020:	075b      	lsls	r3, r3, #29
 8001022:	08c9      	lsrs	r1, r1, #3
 8001024:	430b      	orrs	r3, r1
 8001026:	08d0      	lsrs	r0, r2, #3
 8001028:	e6be      	b.n	8000da8 <__aeabi_dadd+0x29c>
 800102a:	4303      	orrs	r3, r0
 800102c:	001c      	movs	r4, r3
 800102e:	1e63      	subs	r3, r4, #1
 8001030:	419c      	sbcs	r4, r3
 8001032:	e6fc      	b.n	8000e2e <__aeabi_dadd+0x322>
 8001034:	0002      	movs	r2, r0
 8001036:	3c20      	subs	r4, #32
 8001038:	40e2      	lsrs	r2, r4
 800103a:	0014      	movs	r4, r2
 800103c:	4662      	mov	r2, ip
 800103e:	2a20      	cmp	r2, #32
 8001040:	d003      	beq.n	800104a <__aeabi_dadd+0x53e>
 8001042:	2540      	movs	r5, #64	; 0x40
 8001044:	1aad      	subs	r5, r5, r2
 8001046:	40a8      	lsls	r0, r5
 8001048:	4303      	orrs	r3, r0
 800104a:	1e58      	subs	r0, r3, #1
 800104c:	4183      	sbcs	r3, r0
 800104e:	4323      	orrs	r3, r4
 8001050:	e775      	b.n	8000f3e <__aeabi_dadd+0x432>
 8001052:	2a00      	cmp	r2, #0
 8001054:	d0e2      	beq.n	800101c <__aeabi_dadd+0x510>
 8001056:	003a      	movs	r2, r7
 8001058:	430a      	orrs	r2, r1
 800105a:	d0cd      	beq.n	8000ff8 <__aeabi_dadd+0x4ec>
 800105c:	0742      	lsls	r2, r0, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	08c0      	lsrs	r0, r0, #3
 8001066:	0312      	lsls	r2, r2, #12
 8001068:	4210      	tst	r0, r2
 800106a:	d006      	beq.n	800107a <__aeabi_dadd+0x56e>
 800106c:	08fc      	lsrs	r4, r7, #3
 800106e:	4214      	tst	r4, r2
 8001070:	d103      	bne.n	800107a <__aeabi_dadd+0x56e>
 8001072:	0020      	movs	r0, r4
 8001074:	08cb      	lsrs	r3, r1, #3
 8001076:	077a      	lsls	r2, r7, #29
 8001078:	4313      	orrs	r3, r2
 800107a:	0f5a      	lsrs	r2, r3, #29
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	0752      	lsls	r2, r2, #29
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	4313      	orrs	r3, r2
 8001084:	e690      	b.n	8000da8 <__aeabi_dadd+0x29c>
 8001086:	4643      	mov	r3, r8
 8001088:	430b      	orrs	r3, r1
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x582>
 800108c:	e709      	b.n	8000ea2 <__aeabi_dadd+0x396>
 800108e:	4643      	mov	r3, r8
 8001090:	4642      	mov	r2, r8
 8001092:	08c9      	lsrs	r1, r1, #3
 8001094:	075b      	lsls	r3, r3, #29
 8001096:	4655      	mov	r5, sl
 8001098:	430b      	orrs	r3, r1
 800109a:	08d0      	lsrs	r0, r2, #3
 800109c:	e666      	b.n	8000d6c <__aeabi_dadd+0x260>
 800109e:	1acc      	subs	r4, r1, r3
 80010a0:	42a1      	cmp	r1, r4
 80010a2:	4189      	sbcs	r1, r1
 80010a4:	1a3f      	subs	r7, r7, r0
 80010a6:	4249      	negs	r1, r1
 80010a8:	4655      	mov	r5, sl
 80010aa:	2601      	movs	r6, #1
 80010ac:	1a7f      	subs	r7, r7, r1
 80010ae:	e57e      	b.n	8000bae <__aeabi_dadd+0xa2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1a5c      	subs	r4, r3, r1
 80010b4:	1a87      	subs	r7, r0, r2
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	4192      	sbcs	r2, r2
 80010ba:	4252      	negs	r2, r2
 80010bc:	1abf      	subs	r7, r7, r2
 80010be:	023a      	lsls	r2, r7, #8
 80010c0:	d53d      	bpl.n	800113e <__aeabi_dadd+0x632>
 80010c2:	1acc      	subs	r4, r1, r3
 80010c4:	42a1      	cmp	r1, r4
 80010c6:	4189      	sbcs	r1, r1
 80010c8:	4643      	mov	r3, r8
 80010ca:	4249      	negs	r1, r1
 80010cc:	1a1f      	subs	r7, r3, r0
 80010ce:	4655      	mov	r5, sl
 80010d0:	1a7f      	subs	r7, r7, r1
 80010d2:	e595      	b.n	8000c00 <__aeabi_dadd+0xf4>
 80010d4:	077b      	lsls	r3, r7, #29
 80010d6:	08c9      	lsrs	r1, r1, #3
 80010d8:	430b      	orrs	r3, r1
 80010da:	08f8      	lsrs	r0, r7, #3
 80010dc:	e643      	b.n	8000d66 <__aeabi_dadd+0x25a>
 80010de:	4644      	mov	r4, r8
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	430c      	orrs	r4, r1
 80010e4:	d130      	bne.n	8001148 <__aeabi_dadd+0x63c>
 80010e6:	0742      	lsls	r2, r0, #29
 80010e8:	4313      	orrs	r3, r2
 80010ea:	08c0      	lsrs	r0, r0, #3
 80010ec:	e65c      	b.n	8000da8 <__aeabi_dadd+0x29c>
 80010ee:	077b      	lsls	r3, r7, #29
 80010f0:	08c9      	lsrs	r1, r1, #3
 80010f2:	430b      	orrs	r3, r1
 80010f4:	08f8      	lsrs	r0, r7, #3
 80010f6:	e639      	b.n	8000d6c <__aeabi_dadd+0x260>
 80010f8:	185c      	adds	r4, r3, r1
 80010fa:	429c      	cmp	r4, r3
 80010fc:	419b      	sbcs	r3, r3
 80010fe:	4440      	add	r0, r8
 8001100:	425b      	negs	r3, r3
 8001102:	18c7      	adds	r7, r0, r3
 8001104:	023b      	lsls	r3, r7, #8
 8001106:	d400      	bmi.n	800110a <__aeabi_dadd+0x5fe>
 8001108:	e625      	b.n	8000d56 <__aeabi_dadd+0x24a>
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <__aeabi_dadd+0x674>)
 800110c:	2601      	movs	r6, #1
 800110e:	401f      	ands	r7, r3
 8001110:	e621      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8001112:	0004      	movs	r4, r0
 8001114:	3a20      	subs	r2, #32
 8001116:	40d4      	lsrs	r4, r2
 8001118:	4662      	mov	r2, ip
 800111a:	2a20      	cmp	r2, #32
 800111c:	d004      	beq.n	8001128 <__aeabi_dadd+0x61c>
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	4666      	mov	r6, ip
 8001122:	1b92      	subs	r2, r2, r6
 8001124:	4090      	lsls	r0, r2
 8001126:	4303      	orrs	r3, r0
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	4193      	sbcs	r3, r2
 800112c:	431c      	orrs	r4, r3
 800112e:	e67e      	b.n	8000e2e <__aeabi_dadd+0x322>
 8001130:	185c      	adds	r4, r3, r1
 8001132:	428c      	cmp	r4, r1
 8001134:	4189      	sbcs	r1, r1
 8001136:	4440      	add	r0, r8
 8001138:	4249      	negs	r1, r1
 800113a:	1847      	adds	r7, r0, r1
 800113c:	e6dd      	b.n	8000efa <__aeabi_dadd+0x3ee>
 800113e:	0023      	movs	r3, r4
 8001140:	433b      	orrs	r3, r7
 8001142:	d100      	bne.n	8001146 <__aeabi_dadd+0x63a>
 8001144:	e6ad      	b.n	8000ea2 <__aeabi_dadd+0x396>
 8001146:	e606      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8001148:	0744      	lsls	r4, r0, #29
 800114a:	4323      	orrs	r3, r4
 800114c:	2480      	movs	r4, #128	; 0x80
 800114e:	08c0      	lsrs	r0, r0, #3
 8001150:	0324      	lsls	r4, r4, #12
 8001152:	4220      	tst	r0, r4
 8001154:	d008      	beq.n	8001168 <__aeabi_dadd+0x65c>
 8001156:	4642      	mov	r2, r8
 8001158:	08d6      	lsrs	r6, r2, #3
 800115a:	4226      	tst	r6, r4
 800115c:	d104      	bne.n	8001168 <__aeabi_dadd+0x65c>
 800115e:	4655      	mov	r5, sl
 8001160:	0030      	movs	r0, r6
 8001162:	08cb      	lsrs	r3, r1, #3
 8001164:	0751      	lsls	r1, r2, #29
 8001166:	430b      	orrs	r3, r1
 8001168:	0f5a      	lsrs	r2, r3, #29
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	0752      	lsls	r2, r2, #29
 8001170:	4313      	orrs	r3, r2
 8001172:	e619      	b.n	8000da8 <__aeabi_dadd+0x29c>
 8001174:	2300      	movs	r3, #0
 8001176:	4a01      	ldr	r2, [pc, #4]	; (800117c <__aeabi_dadd+0x670>)
 8001178:	001f      	movs	r7, r3
 800117a:	e55e      	b.n	8000c3a <__aeabi_dadd+0x12e>
 800117c:	000007ff 	.word	0x000007ff
 8001180:	ff7fffff 	.word	0xff7fffff

08001184 <__aeabi_ddiv>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4657      	mov	r7, sl
 8001188:	464e      	mov	r6, r9
 800118a:	4645      	mov	r5, r8
 800118c:	46de      	mov	lr, fp
 800118e:	b5e0      	push	{r5, r6, r7, lr}
 8001190:	4681      	mov	r9, r0
 8001192:	0005      	movs	r5, r0
 8001194:	030c      	lsls	r4, r1, #12
 8001196:	0048      	lsls	r0, r1, #1
 8001198:	4692      	mov	sl, r2
 800119a:	001f      	movs	r7, r3
 800119c:	b085      	sub	sp, #20
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	0d40      	lsrs	r0, r0, #21
 80011a2:	0fce      	lsrs	r6, r1, #31
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x26>
 80011a8:	e156      	b.n	8001458 <__aeabi_ddiv+0x2d4>
 80011aa:	4bd4      	ldr	r3, [pc, #848]	; (80014fc <__aeabi_ddiv+0x378>)
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2e>
 80011b0:	e172      	b.n	8001498 <__aeabi_ddiv+0x314>
 80011b2:	0f6b      	lsrs	r3, r5, #29
 80011b4:	00e4      	lsls	r4, r4, #3
 80011b6:	431c      	orrs	r4, r3
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	4323      	orrs	r3, r4
 80011be:	4698      	mov	r8, r3
 80011c0:	4bcf      	ldr	r3, [pc, #828]	; (8001500 <__aeabi_ddiv+0x37c>)
 80011c2:	00ed      	lsls	r5, r5, #3
 80011c4:	469b      	mov	fp, r3
 80011c6:	2300      	movs	r3, #0
 80011c8:	4699      	mov	r9, r3
 80011ca:	4483      	add	fp, r0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	033c      	lsls	r4, r7, #12
 80011d0:	007b      	lsls	r3, r7, #1
 80011d2:	4650      	mov	r0, sl
 80011d4:	0b24      	lsrs	r4, r4, #12
 80011d6:	0d5b      	lsrs	r3, r3, #21
 80011d8:	0fff      	lsrs	r7, r7, #31
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x5c>
 80011de:	e11f      	b.n	8001420 <__aeabi_ddiv+0x29c>
 80011e0:	4ac6      	ldr	r2, [pc, #792]	; (80014fc <__aeabi_ddiv+0x378>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x64>
 80011e6:	e162      	b.n	80014ae <__aeabi_ddiv+0x32a>
 80011e8:	49c5      	ldr	r1, [pc, #788]	; (8001500 <__aeabi_ddiv+0x37c>)
 80011ea:	0f42      	lsrs	r2, r0, #29
 80011ec:	468c      	mov	ip, r1
 80011ee:	00e4      	lsls	r4, r4, #3
 80011f0:	4659      	mov	r1, fp
 80011f2:	4314      	orrs	r4, r2
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	4463      	add	r3, ip
 80011f8:	0412      	lsls	r2, r2, #16
 80011fa:	1acb      	subs	r3, r1, r3
 80011fc:	4314      	orrs	r4, r2
 80011fe:	469b      	mov	fp, r3
 8001200:	00c2      	lsls	r2, r0, #3
 8001202:	2000      	movs	r0, #0
 8001204:	0033      	movs	r3, r6
 8001206:	407b      	eors	r3, r7
 8001208:	469a      	mov	sl, r3
 800120a:	464b      	mov	r3, r9
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d827      	bhi.n	8001260 <__aeabi_ddiv+0xdc>
 8001210:	49bc      	ldr	r1, [pc, #752]	; (8001504 <__aeabi_ddiv+0x380>)
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	58cb      	ldr	r3, [r1, r3]
 8001216:	469f      	mov	pc, r3
 8001218:	46b2      	mov	sl, r6
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d016      	beq.n	800124e <__aeabi_ddiv+0xca>
 8001220:	2b03      	cmp	r3, #3
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0xa2>
 8001224:	e28e      	b.n	8001744 <__aeabi_ddiv+0x5c0>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0xa8>
 800122a:	e0d9      	b.n	80013e0 <__aeabi_ddiv+0x25c>
 800122c:	2300      	movs	r3, #0
 800122e:	2400      	movs	r4, #0
 8001230:	2500      	movs	r5, #0
 8001232:	4652      	mov	r2, sl
 8001234:	051b      	lsls	r3, r3, #20
 8001236:	4323      	orrs	r3, r4
 8001238:	07d2      	lsls	r2, r2, #31
 800123a:	4313      	orrs	r3, r2
 800123c:	0028      	movs	r0, r5
 800123e:	0019      	movs	r1, r3
 8001240:	b005      	add	sp, #20
 8001242:	bcf0      	pop	{r4, r5, r6, r7}
 8001244:	46bb      	mov	fp, r7
 8001246:	46b2      	mov	sl, r6
 8001248:	46a9      	mov	r9, r5
 800124a:	46a0      	mov	r8, r4
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	2400      	movs	r4, #0
 8001250:	2500      	movs	r5, #0
 8001252:	4baa      	ldr	r3, [pc, #680]	; (80014fc <__aeabi_ddiv+0x378>)
 8001254:	e7ed      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001256:	46ba      	mov	sl, r7
 8001258:	46a0      	mov	r8, r4
 800125a:	0015      	movs	r5, r2
 800125c:	9000      	str	r0, [sp, #0]
 800125e:	e7dc      	b.n	800121a <__aeabi_ddiv+0x96>
 8001260:	4544      	cmp	r4, r8
 8001262:	d200      	bcs.n	8001266 <__aeabi_ddiv+0xe2>
 8001264:	e1c7      	b.n	80015f6 <__aeabi_ddiv+0x472>
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0xe6>
 8001268:	e1c2      	b.n	80015f0 <__aeabi_ddiv+0x46c>
 800126a:	2301      	movs	r3, #1
 800126c:	425b      	negs	r3, r3
 800126e:	469c      	mov	ip, r3
 8001270:	002e      	movs	r6, r5
 8001272:	4640      	mov	r0, r8
 8001274:	2500      	movs	r5, #0
 8001276:	44e3      	add	fp, ip
 8001278:	0223      	lsls	r3, r4, #8
 800127a:	0e14      	lsrs	r4, r2, #24
 800127c:	431c      	orrs	r4, r3
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	4699      	mov	r9, r3
 8001282:	0423      	lsls	r3, r4, #16
 8001284:	0c1f      	lsrs	r7, r3, #16
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4649      	mov	r1, r9
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	9701      	str	r7, [sp, #4]
 800128e:	f7fe ffe7 	bl	8000260 <__aeabi_uidivmod>
 8001292:	0002      	movs	r2, r0
 8001294:	437a      	muls	r2, r7
 8001296:	040b      	lsls	r3, r1, #16
 8001298:	0c31      	lsrs	r1, r6, #16
 800129a:	4680      	mov	r8, r0
 800129c:	4319      	orrs	r1, r3
 800129e:	428a      	cmp	r2, r1
 80012a0:	d907      	bls.n	80012b2 <__aeabi_ddiv+0x12e>
 80012a2:	2301      	movs	r3, #1
 80012a4:	425b      	negs	r3, r3
 80012a6:	469c      	mov	ip, r3
 80012a8:	1909      	adds	r1, r1, r4
 80012aa:	44e0      	add	r8, ip
 80012ac:	428c      	cmp	r4, r1
 80012ae:	d800      	bhi.n	80012b2 <__aeabi_ddiv+0x12e>
 80012b0:	e207      	b.n	80016c2 <__aeabi_ddiv+0x53e>
 80012b2:	1a88      	subs	r0, r1, r2
 80012b4:	4649      	mov	r1, r9
 80012b6:	f7fe ffd3 	bl	8000260 <__aeabi_uidivmod>
 80012ba:	0409      	lsls	r1, r1, #16
 80012bc:	468c      	mov	ip, r1
 80012be:	0431      	lsls	r1, r6, #16
 80012c0:	4666      	mov	r6, ip
 80012c2:	9a01      	ldr	r2, [sp, #4]
 80012c4:	0c09      	lsrs	r1, r1, #16
 80012c6:	4342      	muls	r2, r0
 80012c8:	0003      	movs	r3, r0
 80012ca:	4331      	orrs	r1, r6
 80012cc:	428a      	cmp	r2, r1
 80012ce:	d904      	bls.n	80012da <__aeabi_ddiv+0x156>
 80012d0:	1909      	adds	r1, r1, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	428c      	cmp	r4, r1
 80012d6:	d800      	bhi.n	80012da <__aeabi_ddiv+0x156>
 80012d8:	e1ed      	b.n	80016b6 <__aeabi_ddiv+0x532>
 80012da:	1a88      	subs	r0, r1, r2
 80012dc:	4642      	mov	r2, r8
 80012de:	0412      	lsls	r2, r2, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	4690      	mov	r8, r2
 80012e4:	4641      	mov	r1, r8
 80012e6:	9b00      	ldr	r3, [sp, #0]
 80012e8:	040e      	lsls	r6, r1, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	001f      	movs	r7, r3
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	9b00      	ldr	r3, [sp, #0]
 80012f2:	0c36      	lsrs	r6, r6, #16
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	0c19      	lsrs	r1, r3, #16
 80012f8:	000b      	movs	r3, r1
 80012fa:	4373      	muls	r3, r6
 80012fc:	0c12      	lsrs	r2, r2, #16
 80012fe:	437e      	muls	r6, r7
 8001300:	9103      	str	r1, [sp, #12]
 8001302:	4351      	muls	r1, r2
 8001304:	437a      	muls	r2, r7
 8001306:	0c1f      	lsrs	r7, r3, #16
 8001308:	46bc      	mov	ip, r7
 800130a:	1876      	adds	r6, r6, r1
 800130c:	4466      	add	r6, ip
 800130e:	42b1      	cmp	r1, r6
 8001310:	d903      	bls.n	800131a <__aeabi_ddiv+0x196>
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	0249      	lsls	r1, r1, #9
 8001316:	468c      	mov	ip, r1
 8001318:	4462      	add	r2, ip
 800131a:	0c31      	lsrs	r1, r6, #16
 800131c:	188a      	adds	r2, r1, r2
 800131e:	0431      	lsls	r1, r6, #16
 8001320:	041e      	lsls	r6, r3, #16
 8001322:	0c36      	lsrs	r6, r6, #16
 8001324:	198e      	adds	r6, r1, r6
 8001326:	4290      	cmp	r0, r2
 8001328:	d302      	bcc.n	8001330 <__aeabi_ddiv+0x1ac>
 800132a:	d112      	bne.n	8001352 <__aeabi_ddiv+0x1ce>
 800132c:	42b5      	cmp	r5, r6
 800132e:	d210      	bcs.n	8001352 <__aeabi_ddiv+0x1ce>
 8001330:	4643      	mov	r3, r8
 8001332:	1e59      	subs	r1, r3, #1
 8001334:	9b00      	ldr	r3, [sp, #0]
 8001336:	469c      	mov	ip, r3
 8001338:	4465      	add	r5, ip
 800133a:	001f      	movs	r7, r3
 800133c:	429d      	cmp	r5, r3
 800133e:	419b      	sbcs	r3, r3
 8001340:	425b      	negs	r3, r3
 8001342:	191b      	adds	r3, r3, r4
 8001344:	18c0      	adds	r0, r0, r3
 8001346:	4284      	cmp	r4, r0
 8001348:	d200      	bcs.n	800134c <__aeabi_ddiv+0x1c8>
 800134a:	e1a0      	b.n	800168e <__aeabi_ddiv+0x50a>
 800134c:	d100      	bne.n	8001350 <__aeabi_ddiv+0x1cc>
 800134e:	e19b      	b.n	8001688 <__aeabi_ddiv+0x504>
 8001350:	4688      	mov	r8, r1
 8001352:	1bae      	subs	r6, r5, r6
 8001354:	42b5      	cmp	r5, r6
 8001356:	41ad      	sbcs	r5, r5
 8001358:	1a80      	subs	r0, r0, r2
 800135a:	426d      	negs	r5, r5
 800135c:	1b40      	subs	r0, r0, r5
 800135e:	4284      	cmp	r4, r0
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x1e0>
 8001362:	e1d5      	b.n	8001710 <__aeabi_ddiv+0x58c>
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff7b 	bl	8000260 <__aeabi_uidivmod>
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	040b      	lsls	r3, r1, #16
 800136e:	4342      	muls	r2, r0
 8001370:	0c31      	lsrs	r1, r6, #16
 8001372:	0005      	movs	r5, r0
 8001374:	4319      	orrs	r1, r3
 8001376:	428a      	cmp	r2, r1
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x1f8>
 800137a:	e16c      	b.n	8001656 <__aeabi_ddiv+0x4d2>
 800137c:	1a88      	subs	r0, r1, r2
 800137e:	4649      	mov	r1, r9
 8001380:	f7fe ff6e 	bl	8000260 <__aeabi_uidivmod>
 8001384:	9a01      	ldr	r2, [sp, #4]
 8001386:	0436      	lsls	r6, r6, #16
 8001388:	4342      	muls	r2, r0
 800138a:	0409      	lsls	r1, r1, #16
 800138c:	0c36      	lsrs	r6, r6, #16
 800138e:	0003      	movs	r3, r0
 8001390:	430e      	orrs	r6, r1
 8001392:	42b2      	cmp	r2, r6
 8001394:	d900      	bls.n	8001398 <__aeabi_ddiv+0x214>
 8001396:	e153      	b.n	8001640 <__aeabi_ddiv+0x4bc>
 8001398:	9803      	ldr	r0, [sp, #12]
 800139a:	1ab6      	subs	r6, r6, r2
 800139c:	0002      	movs	r2, r0
 800139e:	042d      	lsls	r5, r5, #16
 80013a0:	431d      	orrs	r5, r3
 80013a2:	9f02      	ldr	r7, [sp, #8]
 80013a4:	042b      	lsls	r3, r5, #16
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	435a      	muls	r2, r3
 80013aa:	437b      	muls	r3, r7
 80013ac:	469c      	mov	ip, r3
 80013ae:	0c29      	lsrs	r1, r5, #16
 80013b0:	4348      	muls	r0, r1
 80013b2:	0c13      	lsrs	r3, r2, #16
 80013b4:	4484      	add	ip, r0
 80013b6:	4463      	add	r3, ip
 80013b8:	4379      	muls	r1, r7
 80013ba:	4298      	cmp	r0, r3
 80013bc:	d903      	bls.n	80013c6 <__aeabi_ddiv+0x242>
 80013be:	2080      	movs	r0, #128	; 0x80
 80013c0:	0240      	lsls	r0, r0, #9
 80013c2:	4684      	mov	ip, r0
 80013c4:	4461      	add	r1, ip
 80013c6:	0c18      	lsrs	r0, r3, #16
 80013c8:	0412      	lsls	r2, r2, #16
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	0c12      	lsrs	r2, r2, #16
 80013ce:	1841      	adds	r1, r0, r1
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	428e      	cmp	r6, r1
 80013d4:	d200      	bcs.n	80013d8 <__aeabi_ddiv+0x254>
 80013d6:	e0ff      	b.n	80015d8 <__aeabi_ddiv+0x454>
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x258>
 80013da:	e0fa      	b.n	80015d2 <__aeabi_ddiv+0x44e>
 80013dc:	2301      	movs	r3, #1
 80013de:	431d      	orrs	r5, r3
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <__aeabi_ddiv+0x384>)
 80013e2:	445a      	add	r2, fp
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_ddiv+0x266>
 80013e8:	e0aa      	b.n	8001540 <__aeabi_ddiv+0x3bc>
 80013ea:	076b      	lsls	r3, r5, #29
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x26c>
 80013ee:	e13d      	b.n	800166c <__aeabi_ddiv+0x4e8>
 80013f0:	08ed      	lsrs	r5, r5, #3
 80013f2:	4643      	mov	r3, r8
 80013f4:	01db      	lsls	r3, r3, #7
 80013f6:	d506      	bpl.n	8001406 <__aeabi_ddiv+0x282>
 80013f8:	4642      	mov	r2, r8
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <__aeabi_ddiv+0x388>)
 80013fc:	401a      	ands	r2, r3
 80013fe:	4690      	mov	r8, r2
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	445a      	add	r2, fp
 8001406:	4b42      	ldr	r3, [pc, #264]	; (8001510 <__aeabi_ddiv+0x38c>)
 8001408:	429a      	cmp	r2, r3
 800140a:	dd00      	ble.n	800140e <__aeabi_ddiv+0x28a>
 800140c:	e71f      	b.n	800124e <__aeabi_ddiv+0xca>
 800140e:	4643      	mov	r3, r8
 8001410:	075b      	lsls	r3, r3, #29
 8001412:	431d      	orrs	r5, r3
 8001414:	4643      	mov	r3, r8
 8001416:	0552      	lsls	r2, r2, #21
 8001418:	025c      	lsls	r4, r3, #9
 800141a:	0b24      	lsrs	r4, r4, #12
 800141c:	0d53      	lsrs	r3, r2, #21
 800141e:	e708      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001420:	4652      	mov	r2, sl
 8001422:	4322      	orrs	r2, r4
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x2a4>
 8001426:	e07b      	b.n	8001520 <__aeabi_ddiv+0x39c>
 8001428:	2c00      	cmp	r4, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x2aa>
 800142c:	e0fa      	b.n	8001624 <__aeabi_ddiv+0x4a0>
 800142e:	0020      	movs	r0, r4
 8001430:	f000 fee0 	bl	80021f4 <__clzsi2>
 8001434:	0002      	movs	r2, r0
 8001436:	3a0b      	subs	r2, #11
 8001438:	231d      	movs	r3, #29
 800143a:	0001      	movs	r1, r0
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	4652      	mov	r2, sl
 8001440:	3908      	subs	r1, #8
 8001442:	40da      	lsrs	r2, r3
 8001444:	408c      	lsls	r4, r1
 8001446:	4314      	orrs	r4, r2
 8001448:	4652      	mov	r2, sl
 800144a:	408a      	lsls	r2, r1
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <__aeabi_ddiv+0x390>)
 800144e:	4458      	add	r0, fp
 8001450:	469b      	mov	fp, r3
 8001452:	4483      	add	fp, r0
 8001454:	2000      	movs	r0, #0
 8001456:	e6d5      	b.n	8001204 <__aeabi_ddiv+0x80>
 8001458:	464b      	mov	r3, r9
 800145a:	4323      	orrs	r3, r4
 800145c:	4698      	mov	r8, r3
 800145e:	d044      	beq.n	80014ea <__aeabi_ddiv+0x366>
 8001460:	2c00      	cmp	r4, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_ddiv+0x2e2>
 8001464:	e0ce      	b.n	8001604 <__aeabi_ddiv+0x480>
 8001466:	0020      	movs	r0, r4
 8001468:	f000 fec4 	bl	80021f4 <__clzsi2>
 800146c:	0001      	movs	r1, r0
 800146e:	0002      	movs	r2, r0
 8001470:	390b      	subs	r1, #11
 8001472:	231d      	movs	r3, #29
 8001474:	1a5b      	subs	r3, r3, r1
 8001476:	4649      	mov	r1, r9
 8001478:	0010      	movs	r0, r2
 800147a:	40d9      	lsrs	r1, r3
 800147c:	3808      	subs	r0, #8
 800147e:	4084      	lsls	r4, r0
 8001480:	000b      	movs	r3, r1
 8001482:	464d      	mov	r5, r9
 8001484:	4323      	orrs	r3, r4
 8001486:	4698      	mov	r8, r3
 8001488:	4085      	lsls	r5, r0
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <__aeabi_ddiv+0x394>)
 800148c:	1a83      	subs	r3, r0, r2
 800148e:	469b      	mov	fp, r3
 8001490:	2300      	movs	r3, #0
 8001492:	4699      	mov	r9, r3
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	e69a      	b.n	80011ce <__aeabi_ddiv+0x4a>
 8001498:	464b      	mov	r3, r9
 800149a:	4323      	orrs	r3, r4
 800149c:	4698      	mov	r8, r3
 800149e:	d11d      	bne.n	80014dc <__aeabi_ddiv+0x358>
 80014a0:	2308      	movs	r3, #8
 80014a2:	4699      	mov	r9, r3
 80014a4:	3b06      	subs	r3, #6
 80014a6:	2500      	movs	r5, #0
 80014a8:	4683      	mov	fp, r0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	e68f      	b.n	80011ce <__aeabi_ddiv+0x4a>
 80014ae:	4652      	mov	r2, sl
 80014b0:	4322      	orrs	r2, r4
 80014b2:	d109      	bne.n	80014c8 <__aeabi_ddiv+0x344>
 80014b4:	2302      	movs	r3, #2
 80014b6:	4649      	mov	r1, r9
 80014b8:	4319      	orrs	r1, r3
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <__aeabi_ddiv+0x398>)
 80014bc:	4689      	mov	r9, r1
 80014be:	469c      	mov	ip, r3
 80014c0:	2400      	movs	r4, #0
 80014c2:	2002      	movs	r0, #2
 80014c4:	44e3      	add	fp, ip
 80014c6:	e69d      	b.n	8001204 <__aeabi_ddiv+0x80>
 80014c8:	2303      	movs	r3, #3
 80014ca:	464a      	mov	r2, r9
 80014cc:	431a      	orrs	r2, r3
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <__aeabi_ddiv+0x398>)
 80014d0:	4691      	mov	r9, r2
 80014d2:	469c      	mov	ip, r3
 80014d4:	4652      	mov	r2, sl
 80014d6:	2003      	movs	r0, #3
 80014d8:	44e3      	add	fp, ip
 80014da:	e693      	b.n	8001204 <__aeabi_ddiv+0x80>
 80014dc:	230c      	movs	r3, #12
 80014de:	4699      	mov	r9, r3
 80014e0:	3b09      	subs	r3, #9
 80014e2:	46a0      	mov	r8, r4
 80014e4:	4683      	mov	fp, r0
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	e671      	b.n	80011ce <__aeabi_ddiv+0x4a>
 80014ea:	2304      	movs	r3, #4
 80014ec:	4699      	mov	r9, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	469b      	mov	fp, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	2500      	movs	r5, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	e669      	b.n	80011ce <__aeabi_ddiv+0x4a>
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	fffffc01 	.word	0xfffffc01
 8001504:	0800e708 	.word	0x0800e708
 8001508:	000003ff 	.word	0x000003ff
 800150c:	feffffff 	.word	0xfeffffff
 8001510:	000007fe 	.word	0x000007fe
 8001514:	000003f3 	.word	0x000003f3
 8001518:	fffffc0d 	.word	0xfffffc0d
 800151c:	fffff801 	.word	0xfffff801
 8001520:	4649      	mov	r1, r9
 8001522:	2301      	movs	r3, #1
 8001524:	4319      	orrs	r1, r3
 8001526:	4689      	mov	r9, r1
 8001528:	2400      	movs	r4, #0
 800152a:	2001      	movs	r0, #1
 800152c:	e66a      	b.n	8001204 <__aeabi_ddiv+0x80>
 800152e:	2300      	movs	r3, #0
 8001530:	2480      	movs	r4, #128	; 0x80
 8001532:	469a      	mov	sl, r3
 8001534:	2500      	movs	r5, #0
 8001536:	4b8a      	ldr	r3, [pc, #552]	; (8001760 <__aeabi_ddiv+0x5dc>)
 8001538:	0324      	lsls	r4, r4, #12
 800153a:	e67a      	b.n	8001232 <__aeabi_ddiv+0xae>
 800153c:	2501      	movs	r5, #1
 800153e:	426d      	negs	r5, r5
 8001540:	2301      	movs	r3, #1
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	2b38      	cmp	r3, #56	; 0x38
 8001546:	dd00      	ble.n	800154a <__aeabi_ddiv+0x3c6>
 8001548:	e670      	b.n	800122c <__aeabi_ddiv+0xa8>
 800154a:	2b1f      	cmp	r3, #31
 800154c:	dc00      	bgt.n	8001550 <__aeabi_ddiv+0x3cc>
 800154e:	e0bf      	b.n	80016d0 <__aeabi_ddiv+0x54c>
 8001550:	211f      	movs	r1, #31
 8001552:	4249      	negs	r1, r1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4641      	mov	r1, r8
 8001558:	40d1      	lsrs	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	2b20      	cmp	r3, #32
 800155e:	d004      	beq.n	800156a <__aeabi_ddiv+0x3e6>
 8001560:	4641      	mov	r1, r8
 8001562:	4b80      	ldr	r3, [pc, #512]	; (8001764 <__aeabi_ddiv+0x5e0>)
 8001564:	445b      	add	r3, fp
 8001566:	4099      	lsls	r1, r3
 8001568:	430d      	orrs	r5, r1
 800156a:	1e6b      	subs	r3, r5, #1
 800156c:	419d      	sbcs	r5, r3
 800156e:	2307      	movs	r3, #7
 8001570:	432a      	orrs	r2, r5
 8001572:	001d      	movs	r5, r3
 8001574:	2400      	movs	r4, #0
 8001576:	4015      	ands	r5, r2
 8001578:	4213      	tst	r3, r2
 800157a:	d100      	bne.n	800157e <__aeabi_ddiv+0x3fa>
 800157c:	e0d4      	b.n	8001728 <__aeabi_ddiv+0x5a4>
 800157e:	210f      	movs	r1, #15
 8001580:	2300      	movs	r3, #0
 8001582:	4011      	ands	r1, r2
 8001584:	2904      	cmp	r1, #4
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x406>
 8001588:	e0cb      	b.n	8001722 <__aeabi_ddiv+0x59e>
 800158a:	1d11      	adds	r1, r2, #4
 800158c:	4291      	cmp	r1, r2
 800158e:	4192      	sbcs	r2, r2
 8001590:	4252      	negs	r2, r2
 8001592:	189b      	adds	r3, r3, r2
 8001594:	000a      	movs	r2, r1
 8001596:	0219      	lsls	r1, r3, #8
 8001598:	d400      	bmi.n	800159c <__aeabi_ddiv+0x418>
 800159a:	e0c2      	b.n	8001722 <__aeabi_ddiv+0x59e>
 800159c:	2301      	movs	r3, #1
 800159e:	2400      	movs	r4, #0
 80015a0:	2500      	movs	r5, #0
 80015a2:	e646      	b.n	8001232 <__aeabi_ddiv+0xae>
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	4641      	mov	r1, r8
 80015a8:	031b      	lsls	r3, r3, #12
 80015aa:	4219      	tst	r1, r3
 80015ac:	d008      	beq.n	80015c0 <__aeabi_ddiv+0x43c>
 80015ae:	421c      	tst	r4, r3
 80015b0:	d106      	bne.n	80015c0 <__aeabi_ddiv+0x43c>
 80015b2:	431c      	orrs	r4, r3
 80015b4:	0324      	lsls	r4, r4, #12
 80015b6:	46ba      	mov	sl, r7
 80015b8:	0015      	movs	r5, r2
 80015ba:	4b69      	ldr	r3, [pc, #420]	; (8001760 <__aeabi_ddiv+0x5dc>)
 80015bc:	0b24      	lsrs	r4, r4, #12
 80015be:	e638      	b.n	8001232 <__aeabi_ddiv+0xae>
 80015c0:	2480      	movs	r4, #128	; 0x80
 80015c2:	4643      	mov	r3, r8
 80015c4:	0324      	lsls	r4, r4, #12
 80015c6:	431c      	orrs	r4, r3
 80015c8:	0324      	lsls	r4, r4, #12
 80015ca:	46b2      	mov	sl, r6
 80015cc:	4b64      	ldr	r3, [pc, #400]	; (8001760 <__aeabi_ddiv+0x5dc>)
 80015ce:	0b24      	lsrs	r4, r4, #12
 80015d0:	e62f      	b.n	8001232 <__aeabi_ddiv+0xae>
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0x454>
 80015d6:	e703      	b.n	80013e0 <__aeabi_ddiv+0x25c>
 80015d8:	19a6      	adds	r6, r4, r6
 80015da:	1e68      	subs	r0, r5, #1
 80015dc:	42a6      	cmp	r6, r4
 80015de:	d200      	bcs.n	80015e2 <__aeabi_ddiv+0x45e>
 80015e0:	e08d      	b.n	80016fe <__aeabi_ddiv+0x57a>
 80015e2:	428e      	cmp	r6, r1
 80015e4:	d200      	bcs.n	80015e8 <__aeabi_ddiv+0x464>
 80015e6:	e0a3      	b.n	8001730 <__aeabi_ddiv+0x5ac>
 80015e8:	d100      	bne.n	80015ec <__aeabi_ddiv+0x468>
 80015ea:	e0b3      	b.n	8001754 <__aeabi_ddiv+0x5d0>
 80015ec:	0005      	movs	r5, r0
 80015ee:	e6f5      	b.n	80013dc <__aeabi_ddiv+0x258>
 80015f0:	42aa      	cmp	r2, r5
 80015f2:	d900      	bls.n	80015f6 <__aeabi_ddiv+0x472>
 80015f4:	e639      	b.n	800126a <__aeabi_ddiv+0xe6>
 80015f6:	4643      	mov	r3, r8
 80015f8:	07de      	lsls	r6, r3, #31
 80015fa:	0858      	lsrs	r0, r3, #1
 80015fc:	086b      	lsrs	r3, r5, #1
 80015fe:	431e      	orrs	r6, r3
 8001600:	07ed      	lsls	r5, r5, #31
 8001602:	e639      	b.n	8001278 <__aeabi_ddiv+0xf4>
 8001604:	4648      	mov	r0, r9
 8001606:	f000 fdf5 	bl	80021f4 <__clzsi2>
 800160a:	0001      	movs	r1, r0
 800160c:	0002      	movs	r2, r0
 800160e:	3115      	adds	r1, #21
 8001610:	3220      	adds	r2, #32
 8001612:	291c      	cmp	r1, #28
 8001614:	dc00      	bgt.n	8001618 <__aeabi_ddiv+0x494>
 8001616:	e72c      	b.n	8001472 <__aeabi_ddiv+0x2ee>
 8001618:	464b      	mov	r3, r9
 800161a:	3808      	subs	r0, #8
 800161c:	4083      	lsls	r3, r0
 800161e:	2500      	movs	r5, #0
 8001620:	4698      	mov	r8, r3
 8001622:	e732      	b.n	800148a <__aeabi_ddiv+0x306>
 8001624:	f000 fde6 	bl	80021f4 <__clzsi2>
 8001628:	0003      	movs	r3, r0
 800162a:	001a      	movs	r2, r3
 800162c:	3215      	adds	r2, #21
 800162e:	3020      	adds	r0, #32
 8001630:	2a1c      	cmp	r2, #28
 8001632:	dc00      	bgt.n	8001636 <__aeabi_ddiv+0x4b2>
 8001634:	e700      	b.n	8001438 <__aeabi_ddiv+0x2b4>
 8001636:	4654      	mov	r4, sl
 8001638:	3b08      	subs	r3, #8
 800163a:	2200      	movs	r2, #0
 800163c:	409c      	lsls	r4, r3
 800163e:	e705      	b.n	800144c <__aeabi_ddiv+0x2c8>
 8001640:	1936      	adds	r6, r6, r4
 8001642:	3b01      	subs	r3, #1
 8001644:	42b4      	cmp	r4, r6
 8001646:	d900      	bls.n	800164a <__aeabi_ddiv+0x4c6>
 8001648:	e6a6      	b.n	8001398 <__aeabi_ddiv+0x214>
 800164a:	42b2      	cmp	r2, r6
 800164c:	d800      	bhi.n	8001650 <__aeabi_ddiv+0x4cc>
 800164e:	e6a3      	b.n	8001398 <__aeabi_ddiv+0x214>
 8001650:	1e83      	subs	r3, r0, #2
 8001652:	1936      	adds	r6, r6, r4
 8001654:	e6a0      	b.n	8001398 <__aeabi_ddiv+0x214>
 8001656:	1909      	adds	r1, r1, r4
 8001658:	3d01      	subs	r5, #1
 800165a:	428c      	cmp	r4, r1
 800165c:	d900      	bls.n	8001660 <__aeabi_ddiv+0x4dc>
 800165e:	e68d      	b.n	800137c <__aeabi_ddiv+0x1f8>
 8001660:	428a      	cmp	r2, r1
 8001662:	d800      	bhi.n	8001666 <__aeabi_ddiv+0x4e2>
 8001664:	e68a      	b.n	800137c <__aeabi_ddiv+0x1f8>
 8001666:	1e85      	subs	r5, r0, #2
 8001668:	1909      	adds	r1, r1, r4
 800166a:	e687      	b.n	800137c <__aeabi_ddiv+0x1f8>
 800166c:	230f      	movs	r3, #15
 800166e:	402b      	ands	r3, r5
 8001670:	2b04      	cmp	r3, #4
 8001672:	d100      	bne.n	8001676 <__aeabi_ddiv+0x4f2>
 8001674:	e6bc      	b.n	80013f0 <__aeabi_ddiv+0x26c>
 8001676:	2305      	movs	r3, #5
 8001678:	425b      	negs	r3, r3
 800167a:	42ab      	cmp	r3, r5
 800167c:	419b      	sbcs	r3, r3
 800167e:	3504      	adds	r5, #4
 8001680:	425b      	negs	r3, r3
 8001682:	08ed      	lsrs	r5, r5, #3
 8001684:	4498      	add	r8, r3
 8001686:	e6b4      	b.n	80013f2 <__aeabi_ddiv+0x26e>
 8001688:	42af      	cmp	r7, r5
 800168a:	d900      	bls.n	800168e <__aeabi_ddiv+0x50a>
 800168c:	e660      	b.n	8001350 <__aeabi_ddiv+0x1cc>
 800168e:	4282      	cmp	r2, r0
 8001690:	d804      	bhi.n	800169c <__aeabi_ddiv+0x518>
 8001692:	d000      	beq.n	8001696 <__aeabi_ddiv+0x512>
 8001694:	e65c      	b.n	8001350 <__aeabi_ddiv+0x1cc>
 8001696:	42ae      	cmp	r6, r5
 8001698:	d800      	bhi.n	800169c <__aeabi_ddiv+0x518>
 800169a:	e659      	b.n	8001350 <__aeabi_ddiv+0x1cc>
 800169c:	2302      	movs	r3, #2
 800169e:	425b      	negs	r3, r3
 80016a0:	469c      	mov	ip, r3
 80016a2:	9b00      	ldr	r3, [sp, #0]
 80016a4:	44e0      	add	r8, ip
 80016a6:	469c      	mov	ip, r3
 80016a8:	4465      	add	r5, ip
 80016aa:	429d      	cmp	r5, r3
 80016ac:	419b      	sbcs	r3, r3
 80016ae:	425b      	negs	r3, r3
 80016b0:	191b      	adds	r3, r3, r4
 80016b2:	18c0      	adds	r0, r0, r3
 80016b4:	e64d      	b.n	8001352 <__aeabi_ddiv+0x1ce>
 80016b6:	428a      	cmp	r2, r1
 80016b8:	d800      	bhi.n	80016bc <__aeabi_ddiv+0x538>
 80016ba:	e60e      	b.n	80012da <__aeabi_ddiv+0x156>
 80016bc:	1e83      	subs	r3, r0, #2
 80016be:	1909      	adds	r1, r1, r4
 80016c0:	e60b      	b.n	80012da <__aeabi_ddiv+0x156>
 80016c2:	428a      	cmp	r2, r1
 80016c4:	d800      	bhi.n	80016c8 <__aeabi_ddiv+0x544>
 80016c6:	e5f4      	b.n	80012b2 <__aeabi_ddiv+0x12e>
 80016c8:	1e83      	subs	r3, r0, #2
 80016ca:	4698      	mov	r8, r3
 80016cc:	1909      	adds	r1, r1, r4
 80016ce:	e5f0      	b.n	80012b2 <__aeabi_ddiv+0x12e>
 80016d0:	4925      	ldr	r1, [pc, #148]	; (8001768 <__aeabi_ddiv+0x5e4>)
 80016d2:	0028      	movs	r0, r5
 80016d4:	4459      	add	r1, fp
 80016d6:	408d      	lsls	r5, r1
 80016d8:	4642      	mov	r2, r8
 80016da:	408a      	lsls	r2, r1
 80016dc:	1e69      	subs	r1, r5, #1
 80016de:	418d      	sbcs	r5, r1
 80016e0:	4641      	mov	r1, r8
 80016e2:	40d8      	lsrs	r0, r3
 80016e4:	40d9      	lsrs	r1, r3
 80016e6:	4302      	orrs	r2, r0
 80016e8:	432a      	orrs	r2, r5
 80016ea:	000b      	movs	r3, r1
 80016ec:	0751      	lsls	r1, r2, #29
 80016ee:	d100      	bne.n	80016f2 <__aeabi_ddiv+0x56e>
 80016f0:	e751      	b.n	8001596 <__aeabi_ddiv+0x412>
 80016f2:	210f      	movs	r1, #15
 80016f4:	4011      	ands	r1, r2
 80016f6:	2904      	cmp	r1, #4
 80016f8:	d000      	beq.n	80016fc <__aeabi_ddiv+0x578>
 80016fa:	e746      	b.n	800158a <__aeabi_ddiv+0x406>
 80016fc:	e74b      	b.n	8001596 <__aeabi_ddiv+0x412>
 80016fe:	0005      	movs	r5, r0
 8001700:	428e      	cmp	r6, r1
 8001702:	d000      	beq.n	8001706 <__aeabi_ddiv+0x582>
 8001704:	e66a      	b.n	80013dc <__aeabi_ddiv+0x258>
 8001706:	9a00      	ldr	r2, [sp, #0]
 8001708:	4293      	cmp	r3, r2
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x58a>
 800170c:	e666      	b.n	80013dc <__aeabi_ddiv+0x258>
 800170e:	e667      	b.n	80013e0 <__aeabi_ddiv+0x25c>
 8001710:	4a16      	ldr	r2, [pc, #88]	; (800176c <__aeabi_ddiv+0x5e8>)
 8001712:	445a      	add	r2, fp
 8001714:	2a00      	cmp	r2, #0
 8001716:	dc00      	bgt.n	800171a <__aeabi_ddiv+0x596>
 8001718:	e710      	b.n	800153c <__aeabi_ddiv+0x3b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2500      	movs	r5, #0
 800171e:	4498      	add	r8, r3
 8001720:	e667      	b.n	80013f2 <__aeabi_ddiv+0x26e>
 8001722:	075d      	lsls	r5, r3, #29
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	0b1c      	lsrs	r4, r3, #12
 8001728:	08d2      	lsrs	r2, r2, #3
 800172a:	2300      	movs	r3, #0
 800172c:	4315      	orrs	r5, r2
 800172e:	e580      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001730:	9800      	ldr	r0, [sp, #0]
 8001732:	3d02      	subs	r5, #2
 8001734:	0042      	lsls	r2, r0, #1
 8001736:	4282      	cmp	r2, r0
 8001738:	41bf      	sbcs	r7, r7
 800173a:	427f      	negs	r7, r7
 800173c:	193c      	adds	r4, r7, r4
 800173e:	1936      	adds	r6, r6, r4
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	e7dd      	b.n	8001700 <__aeabi_ddiv+0x57c>
 8001744:	2480      	movs	r4, #128	; 0x80
 8001746:	4643      	mov	r3, r8
 8001748:	0324      	lsls	r4, r4, #12
 800174a:	431c      	orrs	r4, r3
 800174c:	0324      	lsls	r4, r4, #12
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__aeabi_ddiv+0x5dc>)
 8001750:	0b24      	lsrs	r4, r4, #12
 8001752:	e56e      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001754:	9a00      	ldr	r2, [sp, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3ea      	bcc.n	8001730 <__aeabi_ddiv+0x5ac>
 800175a:	0005      	movs	r5, r0
 800175c:	e7d3      	b.n	8001706 <__aeabi_ddiv+0x582>
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	000007ff 	.word	0x000007ff
 8001764:	0000043e 	.word	0x0000043e
 8001768:	0000041e 	.word	0x0000041e
 800176c:	000003ff 	.word	0x000003ff

08001770 <__eqdf2>:
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001772:	464e      	mov	r6, r9
 8001774:	4645      	mov	r5, r8
 8001776:	46de      	mov	lr, fp
 8001778:	4657      	mov	r7, sl
 800177a:	4690      	mov	r8, r2
 800177c:	b5e0      	push	{r5, r6, r7, lr}
 800177e:	0017      	movs	r7, r2
 8001780:	031a      	lsls	r2, r3, #12
 8001782:	0b12      	lsrs	r2, r2, #12
 8001784:	0005      	movs	r5, r0
 8001786:	4684      	mov	ip, r0
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <__eqdf2+0x80>)
 800178a:	030e      	lsls	r6, r1, #12
 800178c:	004c      	lsls	r4, r1, #1
 800178e:	4691      	mov	r9, r2
 8001790:	005a      	lsls	r2, r3, #1
 8001792:	0fdb      	lsrs	r3, r3, #31
 8001794:	469b      	mov	fp, r3
 8001796:	0b36      	lsrs	r6, r6, #12
 8001798:	0d64      	lsrs	r4, r4, #21
 800179a:	0fc9      	lsrs	r1, r1, #31
 800179c:	0d52      	lsrs	r2, r2, #21
 800179e:	4284      	cmp	r4, r0
 80017a0:	d019      	beq.n	80017d6 <__eqdf2+0x66>
 80017a2:	4282      	cmp	r2, r0
 80017a4:	d010      	beq.n	80017c8 <__eqdf2+0x58>
 80017a6:	2001      	movs	r0, #1
 80017a8:	4294      	cmp	r4, r2
 80017aa:	d10e      	bne.n	80017ca <__eqdf2+0x5a>
 80017ac:	454e      	cmp	r6, r9
 80017ae:	d10c      	bne.n	80017ca <__eqdf2+0x5a>
 80017b0:	2001      	movs	r0, #1
 80017b2:	45c4      	cmp	ip, r8
 80017b4:	d109      	bne.n	80017ca <__eqdf2+0x5a>
 80017b6:	4559      	cmp	r1, fp
 80017b8:	d017      	beq.n	80017ea <__eqdf2+0x7a>
 80017ba:	2c00      	cmp	r4, #0
 80017bc:	d105      	bne.n	80017ca <__eqdf2+0x5a>
 80017be:	0030      	movs	r0, r6
 80017c0:	4328      	orrs	r0, r5
 80017c2:	1e43      	subs	r3, r0, #1
 80017c4:	4198      	sbcs	r0, r3
 80017c6:	e000      	b.n	80017ca <__eqdf2+0x5a>
 80017c8:	2001      	movs	r0, #1
 80017ca:	bcf0      	pop	{r4, r5, r6, r7}
 80017cc:	46bb      	mov	fp, r7
 80017ce:	46b2      	mov	sl, r6
 80017d0:	46a9      	mov	r9, r5
 80017d2:	46a0      	mov	r8, r4
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	0033      	movs	r3, r6
 80017d8:	2001      	movs	r0, #1
 80017da:	432b      	orrs	r3, r5
 80017dc:	d1f5      	bne.n	80017ca <__eqdf2+0x5a>
 80017de:	42a2      	cmp	r2, r4
 80017e0:	d1f3      	bne.n	80017ca <__eqdf2+0x5a>
 80017e2:	464b      	mov	r3, r9
 80017e4:	433b      	orrs	r3, r7
 80017e6:	d1f0      	bne.n	80017ca <__eqdf2+0x5a>
 80017e8:	e7e2      	b.n	80017b0 <__eqdf2+0x40>
 80017ea:	2000      	movs	r0, #0
 80017ec:	e7ed      	b.n	80017ca <__eqdf2+0x5a>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff

080017f4 <__gedf2>:
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	4647      	mov	r7, r8
 80017f8:	46ce      	mov	lr, r9
 80017fa:	0004      	movs	r4, r0
 80017fc:	0018      	movs	r0, r3
 80017fe:	0016      	movs	r6, r2
 8001800:	031b      	lsls	r3, r3, #12
 8001802:	0b1b      	lsrs	r3, r3, #12
 8001804:	4d2d      	ldr	r5, [pc, #180]	; (80018bc <__gedf2+0xc8>)
 8001806:	004a      	lsls	r2, r1, #1
 8001808:	4699      	mov	r9, r3
 800180a:	b580      	push	{r7, lr}
 800180c:	0043      	lsls	r3, r0, #1
 800180e:	030f      	lsls	r7, r1, #12
 8001810:	46a4      	mov	ip, r4
 8001812:	46b0      	mov	r8, r6
 8001814:	0b3f      	lsrs	r7, r7, #12
 8001816:	0d52      	lsrs	r2, r2, #21
 8001818:	0fc9      	lsrs	r1, r1, #31
 800181a:	0d5b      	lsrs	r3, r3, #21
 800181c:	0fc0      	lsrs	r0, r0, #31
 800181e:	42aa      	cmp	r2, r5
 8001820:	d021      	beq.n	8001866 <__gedf2+0x72>
 8001822:	42ab      	cmp	r3, r5
 8001824:	d013      	beq.n	800184e <__gedf2+0x5a>
 8001826:	2a00      	cmp	r2, #0
 8001828:	d122      	bne.n	8001870 <__gedf2+0x7c>
 800182a:	433c      	orrs	r4, r7
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <__gedf2+0x42>
 8001830:	464d      	mov	r5, r9
 8001832:	432e      	orrs	r6, r5
 8001834:	d022      	beq.n	800187c <__gedf2+0x88>
 8001836:	2c00      	cmp	r4, #0
 8001838:	d010      	beq.n	800185c <__gedf2+0x68>
 800183a:	4281      	cmp	r1, r0
 800183c:	d022      	beq.n	8001884 <__gedf2+0x90>
 800183e:	2002      	movs	r0, #2
 8001840:	3901      	subs	r1, #1
 8001842:	4008      	ands	r0, r1
 8001844:	3801      	subs	r0, #1
 8001846:	bcc0      	pop	{r6, r7}
 8001848:	46b9      	mov	r9, r7
 800184a:	46b0      	mov	r8, r6
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	464d      	mov	r5, r9
 8001850:	432e      	orrs	r6, r5
 8001852:	d129      	bne.n	80018a8 <__gedf2+0xb4>
 8001854:	2a00      	cmp	r2, #0
 8001856:	d1f0      	bne.n	800183a <__gedf2+0x46>
 8001858:	433c      	orrs	r4, r7
 800185a:	d1ee      	bne.n	800183a <__gedf2+0x46>
 800185c:	2800      	cmp	r0, #0
 800185e:	d1f2      	bne.n	8001846 <__gedf2+0x52>
 8001860:	2001      	movs	r0, #1
 8001862:	4240      	negs	r0, r0
 8001864:	e7ef      	b.n	8001846 <__gedf2+0x52>
 8001866:	003d      	movs	r5, r7
 8001868:	4325      	orrs	r5, r4
 800186a:	d11d      	bne.n	80018a8 <__gedf2+0xb4>
 800186c:	4293      	cmp	r3, r2
 800186e:	d0ee      	beq.n	800184e <__gedf2+0x5a>
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e2      	bne.n	800183a <__gedf2+0x46>
 8001874:	464c      	mov	r4, r9
 8001876:	4326      	orrs	r6, r4
 8001878:	d1df      	bne.n	800183a <__gedf2+0x46>
 800187a:	e7e0      	b.n	800183e <__gedf2+0x4a>
 800187c:	2000      	movs	r0, #0
 800187e:	2c00      	cmp	r4, #0
 8001880:	d0e1      	beq.n	8001846 <__gedf2+0x52>
 8001882:	e7dc      	b.n	800183e <__gedf2+0x4a>
 8001884:	429a      	cmp	r2, r3
 8001886:	dc0a      	bgt.n	800189e <__gedf2+0xaa>
 8001888:	dbe8      	blt.n	800185c <__gedf2+0x68>
 800188a:	454f      	cmp	r7, r9
 800188c:	d8d7      	bhi.n	800183e <__gedf2+0x4a>
 800188e:	d00e      	beq.n	80018ae <__gedf2+0xba>
 8001890:	2000      	movs	r0, #0
 8001892:	454f      	cmp	r7, r9
 8001894:	d2d7      	bcs.n	8001846 <__gedf2+0x52>
 8001896:	2900      	cmp	r1, #0
 8001898:	d0e2      	beq.n	8001860 <__gedf2+0x6c>
 800189a:	0008      	movs	r0, r1
 800189c:	e7d3      	b.n	8001846 <__gedf2+0x52>
 800189e:	4243      	negs	r3, r0
 80018a0:	4158      	adcs	r0, r3
 80018a2:	0040      	lsls	r0, r0, #1
 80018a4:	3801      	subs	r0, #1
 80018a6:	e7ce      	b.n	8001846 <__gedf2+0x52>
 80018a8:	2002      	movs	r0, #2
 80018aa:	4240      	negs	r0, r0
 80018ac:	e7cb      	b.n	8001846 <__gedf2+0x52>
 80018ae:	45c4      	cmp	ip, r8
 80018b0:	d8c5      	bhi.n	800183e <__gedf2+0x4a>
 80018b2:	2000      	movs	r0, #0
 80018b4:	45c4      	cmp	ip, r8
 80018b6:	d2c6      	bcs.n	8001846 <__gedf2+0x52>
 80018b8:	e7ed      	b.n	8001896 <__gedf2+0xa2>
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	000007ff 	.word	0x000007ff

080018c0 <__ledf2>:
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	4647      	mov	r7, r8
 80018c4:	46ce      	mov	lr, r9
 80018c6:	0004      	movs	r4, r0
 80018c8:	0018      	movs	r0, r3
 80018ca:	0016      	movs	r6, r2
 80018cc:	031b      	lsls	r3, r3, #12
 80018ce:	0b1b      	lsrs	r3, r3, #12
 80018d0:	4d2c      	ldr	r5, [pc, #176]	; (8001984 <__ledf2+0xc4>)
 80018d2:	004a      	lsls	r2, r1, #1
 80018d4:	4699      	mov	r9, r3
 80018d6:	b580      	push	{r7, lr}
 80018d8:	0043      	lsls	r3, r0, #1
 80018da:	030f      	lsls	r7, r1, #12
 80018dc:	46a4      	mov	ip, r4
 80018de:	46b0      	mov	r8, r6
 80018e0:	0b3f      	lsrs	r7, r7, #12
 80018e2:	0d52      	lsrs	r2, r2, #21
 80018e4:	0fc9      	lsrs	r1, r1, #31
 80018e6:	0d5b      	lsrs	r3, r3, #21
 80018e8:	0fc0      	lsrs	r0, r0, #31
 80018ea:	42aa      	cmp	r2, r5
 80018ec:	d00d      	beq.n	800190a <__ledf2+0x4a>
 80018ee:	42ab      	cmp	r3, r5
 80018f0:	d010      	beq.n	8001914 <__ledf2+0x54>
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d127      	bne.n	8001946 <__ledf2+0x86>
 80018f6:	433c      	orrs	r4, r7
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <__ledf2+0x60>
 80018fc:	464d      	mov	r5, r9
 80018fe:	432e      	orrs	r6, r5
 8001900:	d10e      	bne.n	8001920 <__ledf2+0x60>
 8001902:	2000      	movs	r0, #0
 8001904:	2c00      	cmp	r4, #0
 8001906:	d015      	beq.n	8001934 <__ledf2+0x74>
 8001908:	e00e      	b.n	8001928 <__ledf2+0x68>
 800190a:	003d      	movs	r5, r7
 800190c:	4325      	orrs	r5, r4
 800190e:	d110      	bne.n	8001932 <__ledf2+0x72>
 8001910:	4293      	cmp	r3, r2
 8001912:	d118      	bne.n	8001946 <__ledf2+0x86>
 8001914:	464d      	mov	r5, r9
 8001916:	432e      	orrs	r6, r5
 8001918:	d10b      	bne.n	8001932 <__ledf2+0x72>
 800191a:	2a00      	cmp	r2, #0
 800191c:	d102      	bne.n	8001924 <__ledf2+0x64>
 800191e:	433c      	orrs	r4, r7
 8001920:	2c00      	cmp	r4, #0
 8001922:	d00b      	beq.n	800193c <__ledf2+0x7c>
 8001924:	4281      	cmp	r1, r0
 8001926:	d014      	beq.n	8001952 <__ledf2+0x92>
 8001928:	2002      	movs	r0, #2
 800192a:	3901      	subs	r1, #1
 800192c:	4008      	ands	r0, r1
 800192e:	3801      	subs	r0, #1
 8001930:	e000      	b.n	8001934 <__ledf2+0x74>
 8001932:	2002      	movs	r0, #2
 8001934:	bcc0      	pop	{r6, r7}
 8001936:	46b9      	mov	r9, r7
 8001938:	46b0      	mov	r8, r6
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193c:	2800      	cmp	r0, #0
 800193e:	d1f9      	bne.n	8001934 <__ledf2+0x74>
 8001940:	2001      	movs	r0, #1
 8001942:	4240      	negs	r0, r0
 8001944:	e7f6      	b.n	8001934 <__ledf2+0x74>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ec      	bne.n	8001924 <__ledf2+0x64>
 800194a:	464c      	mov	r4, r9
 800194c:	4326      	orrs	r6, r4
 800194e:	d1e9      	bne.n	8001924 <__ledf2+0x64>
 8001950:	e7ea      	b.n	8001928 <__ledf2+0x68>
 8001952:	429a      	cmp	r2, r3
 8001954:	dd04      	ble.n	8001960 <__ledf2+0xa0>
 8001956:	4243      	negs	r3, r0
 8001958:	4158      	adcs	r0, r3
 800195a:	0040      	lsls	r0, r0, #1
 800195c:	3801      	subs	r0, #1
 800195e:	e7e9      	b.n	8001934 <__ledf2+0x74>
 8001960:	429a      	cmp	r2, r3
 8001962:	dbeb      	blt.n	800193c <__ledf2+0x7c>
 8001964:	454f      	cmp	r7, r9
 8001966:	d8df      	bhi.n	8001928 <__ledf2+0x68>
 8001968:	d006      	beq.n	8001978 <__ledf2+0xb8>
 800196a:	2000      	movs	r0, #0
 800196c:	454f      	cmp	r7, r9
 800196e:	d2e1      	bcs.n	8001934 <__ledf2+0x74>
 8001970:	2900      	cmp	r1, #0
 8001972:	d0e5      	beq.n	8001940 <__ledf2+0x80>
 8001974:	0008      	movs	r0, r1
 8001976:	e7dd      	b.n	8001934 <__ledf2+0x74>
 8001978:	45c4      	cmp	ip, r8
 800197a:	d8d5      	bhi.n	8001928 <__ledf2+0x68>
 800197c:	2000      	movs	r0, #0
 800197e:	45c4      	cmp	ip, r8
 8001980:	d2d8      	bcs.n	8001934 <__ledf2+0x74>
 8001982:	e7f5      	b.n	8001970 <__ledf2+0xb0>
 8001984:	000007ff 	.word	0x000007ff

08001988 <__aeabi_dsub>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	4657      	mov	r7, sl
 800198c:	464e      	mov	r6, r9
 800198e:	4645      	mov	r5, r8
 8001990:	46de      	mov	lr, fp
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	001e      	movs	r6, r3
 8001996:	0017      	movs	r7, r2
 8001998:	004a      	lsls	r2, r1, #1
 800199a:	030b      	lsls	r3, r1, #12
 800199c:	0d52      	lsrs	r2, r2, #21
 800199e:	0a5b      	lsrs	r3, r3, #9
 80019a0:	4690      	mov	r8, r2
 80019a2:	0f42      	lsrs	r2, r0, #29
 80019a4:	431a      	orrs	r2, r3
 80019a6:	0fcd      	lsrs	r5, r1, #31
 80019a8:	4ccd      	ldr	r4, [pc, #820]	; (8001ce0 <__aeabi_dsub+0x358>)
 80019aa:	0331      	lsls	r1, r6, #12
 80019ac:	00c3      	lsls	r3, r0, #3
 80019ae:	4694      	mov	ip, r2
 80019b0:	0070      	lsls	r0, r6, #1
 80019b2:	0f7a      	lsrs	r2, r7, #29
 80019b4:	0a49      	lsrs	r1, r1, #9
 80019b6:	00ff      	lsls	r7, r7, #3
 80019b8:	469a      	mov	sl, r3
 80019ba:	46b9      	mov	r9, r7
 80019bc:	0d40      	lsrs	r0, r0, #21
 80019be:	0ff6      	lsrs	r6, r6, #31
 80019c0:	4311      	orrs	r1, r2
 80019c2:	42a0      	cmp	r0, r4
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x40>
 80019c6:	e0b1      	b.n	8001b2c <__aeabi_dsub+0x1a4>
 80019c8:	2201      	movs	r2, #1
 80019ca:	4056      	eors	r6, r2
 80019cc:	46b3      	mov	fp, r6
 80019ce:	42b5      	cmp	r5, r6
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x4c>
 80019d2:	e088      	b.n	8001ae6 <__aeabi_dsub+0x15e>
 80019d4:	4642      	mov	r2, r8
 80019d6:	1a12      	subs	r2, r2, r0
 80019d8:	2a00      	cmp	r2, #0
 80019da:	dc00      	bgt.n	80019de <__aeabi_dsub+0x56>
 80019dc:	e0ae      	b.n	8001b3c <__aeabi_dsub+0x1b4>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x5c>
 80019e2:	e0c1      	b.n	8001b68 <__aeabi_dsub+0x1e0>
 80019e4:	48be      	ldr	r0, [pc, #760]	; (8001ce0 <__aeabi_dsub+0x358>)
 80019e6:	4580      	cmp	r8, r0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x64>
 80019ea:	e151      	b.n	8001c90 <__aeabi_dsub+0x308>
 80019ec:	2080      	movs	r0, #128	; 0x80
 80019ee:	0400      	lsls	r0, r0, #16
 80019f0:	4301      	orrs	r1, r0
 80019f2:	2a38      	cmp	r2, #56	; 0x38
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e17b      	b.n	8001cf0 <__aeabi_dsub+0x368>
 80019f8:	2a1f      	cmp	r2, #31
 80019fa:	dd00      	ble.n	80019fe <__aeabi_dsub+0x76>
 80019fc:	e1ee      	b.n	8001ddc <__aeabi_dsub+0x454>
 80019fe:	2020      	movs	r0, #32
 8001a00:	003e      	movs	r6, r7
 8001a02:	1a80      	subs	r0, r0, r2
 8001a04:	000c      	movs	r4, r1
 8001a06:	40d6      	lsrs	r6, r2
 8001a08:	40d1      	lsrs	r1, r2
 8001a0a:	4087      	lsls	r7, r0
 8001a0c:	4662      	mov	r2, ip
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	1a52      	subs	r2, r2, r1
 8001a12:	1e78      	subs	r0, r7, #1
 8001a14:	4187      	sbcs	r7, r0
 8001a16:	4694      	mov	ip, r2
 8001a18:	4334      	orrs	r4, r6
 8001a1a:	4327      	orrs	r7, r4
 8001a1c:	1bdc      	subs	r4, r3, r7
 8001a1e:	42a3      	cmp	r3, r4
 8001a20:	419b      	sbcs	r3, r3
 8001a22:	4662      	mov	r2, ip
 8001a24:	425b      	negs	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4699      	mov	r9, r3
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	d400      	bmi.n	8001a32 <__aeabi_dsub+0xaa>
 8001a30:	e118      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001a32:	464b      	mov	r3, r9
 8001a34:	0258      	lsls	r0, r3, #9
 8001a36:	0a43      	lsrs	r3, r0, #9
 8001a38:	4699      	mov	r9, r3
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0xba>
 8001a40:	e137      	b.n	8001cb2 <__aeabi_dsub+0x32a>
 8001a42:	4648      	mov	r0, r9
 8001a44:	f000 fbd6 	bl	80021f4 <__clzsi2>
 8001a48:	0001      	movs	r1, r0
 8001a4a:	3908      	subs	r1, #8
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	0022      	movs	r2, r4
 8001a50:	4648      	mov	r0, r9
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	40da      	lsrs	r2, r3
 8001a56:	4088      	lsls	r0, r1
 8001a58:	408c      	lsls	r4, r1
 8001a5a:	4643      	mov	r3, r8
 8001a5c:	4310      	orrs	r0, r2
 8001a5e:	4588      	cmp	r8, r1
 8001a60:	dd00      	ble.n	8001a64 <__aeabi_dsub+0xdc>
 8001a62:	e136      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001a64:	1ac9      	subs	r1, r1, r3
 8001a66:	1c4b      	adds	r3, r1, #1
 8001a68:	2b1f      	cmp	r3, #31
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_dsub+0xe6>
 8001a6c:	e0ea      	b.n	8001c44 <__aeabi_dsub+0x2bc>
 8001a6e:	2220      	movs	r2, #32
 8001a70:	0026      	movs	r6, r4
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	0001      	movs	r1, r0
 8001a76:	4094      	lsls	r4, r2
 8001a78:	40de      	lsrs	r6, r3
 8001a7a:	40d8      	lsrs	r0, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4091      	lsls	r1, r2
 8001a80:	1e62      	subs	r2, r4, #1
 8001a82:	4194      	sbcs	r4, r2
 8001a84:	4681      	mov	r9, r0
 8001a86:	4698      	mov	r8, r3
 8001a88:	4331      	orrs	r1, r6
 8001a8a:	430c      	orrs	r4, r1
 8001a8c:	0763      	lsls	r3, r4, #29
 8001a8e:	d009      	beq.n	8001aa4 <__aeabi_dsub+0x11c>
 8001a90:	230f      	movs	r3, #15
 8001a92:	4023      	ands	r3, r4
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dsub+0x11c>
 8001a98:	1d23      	adds	r3, r4, #4
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	41a4      	sbcs	r4, r4
 8001a9e:	4264      	negs	r4, r4
 8001aa0:	44a1      	add	r9, r4
 8001aa2:	001c      	movs	r4, r3
 8001aa4:	464b      	mov	r3, r9
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	d400      	bmi.n	8001aac <__aeabi_dsub+0x124>
 8001aaa:	e0de      	b.n	8001c6a <__aeabi_dsub+0x2e2>
 8001aac:	4641      	mov	r1, r8
 8001aae:	4b8c      	ldr	r3, [pc, #560]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001ab0:	3101      	adds	r1, #1
 8001ab2:	4299      	cmp	r1, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e0e7      	b.n	8001c88 <__aeabi_dsub+0x300>
 8001ab8:	464b      	mov	r3, r9
 8001aba:	488a      	ldr	r0, [pc, #552]	; (8001ce4 <__aeabi_dsub+0x35c>)
 8001abc:	08e4      	lsrs	r4, r4, #3
 8001abe:	4003      	ands	r3, r0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	0549      	lsls	r1, r1, #21
 8001ac4:	075b      	lsls	r3, r3, #29
 8001ac6:	0240      	lsls	r0, r0, #9
 8001ac8:	4323      	orrs	r3, r4
 8001aca:	0d4a      	lsrs	r2, r1, #21
 8001acc:	0b04      	lsrs	r4, r0, #12
 8001ace:	0512      	lsls	r2, r2, #20
 8001ad0:	07ed      	lsls	r5, r5, #31
 8001ad2:	4322      	orrs	r2, r4
 8001ad4:	432a      	orrs	r2, r5
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	0011      	movs	r1, r2
 8001ada:	bcf0      	pop	{r4, r5, r6, r7}
 8001adc:	46bb      	mov	fp, r7
 8001ade:	46b2      	mov	sl, r6
 8001ae0:	46a9      	mov	r9, r5
 8001ae2:	46a0      	mov	r8, r4
 8001ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	1a12      	subs	r2, r2, r0
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	dd52      	ble.n	8001b94 <__aeabi_dsub+0x20c>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x16c>
 8001af2:	e09c      	b.n	8001c2e <__aeabi_dsub+0x2a6>
 8001af4:	45a0      	cmp	r8, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e0ca      	b.n	8001c90 <__aeabi_dsub+0x308>
 8001afa:	2080      	movs	r0, #128	; 0x80
 8001afc:	0400      	lsls	r0, r0, #16
 8001afe:	4301      	orrs	r1, r0
 8001b00:	2a38      	cmp	r2, #56	; 0x38
 8001b02:	dd00      	ble.n	8001b06 <__aeabi_dsub+0x17e>
 8001b04:	e149      	b.n	8001d9a <__aeabi_dsub+0x412>
 8001b06:	2a1f      	cmp	r2, #31
 8001b08:	dc00      	bgt.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e197      	b.n	8001e3c <__aeabi_dsub+0x4b4>
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	000e      	movs	r6, r1
 8001b10:	3820      	subs	r0, #32
 8001b12:	40c6      	lsrs	r6, r0
 8001b14:	2a20      	cmp	r2, #32
 8001b16:	d004      	beq.n	8001b22 <__aeabi_dsub+0x19a>
 8001b18:	2040      	movs	r0, #64	; 0x40
 8001b1a:	1a82      	subs	r2, r0, r2
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	430f      	orrs	r7, r1
 8001b20:	46b9      	mov	r9, r7
 8001b22:	464c      	mov	r4, r9
 8001b24:	1e62      	subs	r2, r4, #1
 8001b26:	4194      	sbcs	r4, r2
 8001b28:	4334      	orrs	r4, r6
 8001b2a:	e13a      	b.n	8001da2 <__aeabi_dsub+0x41a>
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	433a      	orrs	r2, r7
 8001b30:	d028      	beq.n	8001b84 <__aeabi_dsub+0x1fc>
 8001b32:	46b3      	mov	fp, r6
 8001b34:	42b5      	cmp	r5, r6
 8001b36:	d02b      	beq.n	8001b90 <__aeabi_dsub+0x208>
 8001b38:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <__aeabi_dsub+0x360>)
 8001b3a:	4442      	add	r2, r8
 8001b3c:	2a00      	cmp	r2, #0
 8001b3e:	d05d      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001b40:	4642      	mov	r2, r8
 8001b42:	4644      	mov	r4, r8
 8001b44:	1a82      	subs	r2, r0, r2
 8001b46:	2c00      	cmp	r4, #0
 8001b48:	d000      	beq.n	8001b4c <__aeabi_dsub+0x1c4>
 8001b4a:	e0f5      	b.n	8001d38 <__aeabi_dsub+0x3b0>
 8001b4c:	4665      	mov	r5, ip
 8001b4e:	431d      	orrs	r5, r3
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dsub+0x1cc>
 8001b52:	e19c      	b.n	8001e8e <__aeabi_dsub+0x506>
 8001b54:	1e55      	subs	r5, r2, #1
 8001b56:	2a01      	cmp	r2, #1
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x1d4>
 8001b5a:	e1fb      	b.n	8001f54 <__aeabi_dsub+0x5cc>
 8001b5c:	4c60      	ldr	r4, [pc, #384]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001b5e:	42a2      	cmp	r2, r4
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x1dc>
 8001b62:	e1bd      	b.n	8001ee0 <__aeabi_dsub+0x558>
 8001b64:	002a      	movs	r2, r5
 8001b66:	e0f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001b68:	0008      	movs	r0, r1
 8001b6a:	4338      	orrs	r0, r7
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dsub+0x1e8>
 8001b6e:	e0c3      	b.n	8001cf8 <__aeabi_dsub+0x370>
 8001b70:	1e50      	subs	r0, r2, #1
 8001b72:	2a01      	cmp	r2, #1
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x1f0>
 8001b76:	e1a8      	b.n	8001eca <__aeabi_dsub+0x542>
 8001b78:	4c59      	ldr	r4, [pc, #356]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001b7a:	42a2      	cmp	r2, r4
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x1f8>
 8001b7e:	e087      	b.n	8001c90 <__aeabi_dsub+0x308>
 8001b80:	0002      	movs	r2, r0
 8001b82:	e736      	b.n	80019f2 <__aeabi_dsub+0x6a>
 8001b84:	2201      	movs	r2, #1
 8001b86:	4056      	eors	r6, r2
 8001b88:	46b3      	mov	fp, r6
 8001b8a:	42b5      	cmp	r5, r6
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x208>
 8001b8e:	e721      	b.n	80019d4 <__aeabi_dsub+0x4c>
 8001b90:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <__aeabi_dsub+0x360>)
 8001b92:	4442      	add	r2, r8
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x212>
 8001b98:	e0b5      	b.n	8001d06 <__aeabi_dsub+0x37e>
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	4644      	mov	r4, r8
 8001b9e:	1a82      	subs	r2, r0, r2
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x21e>
 8001ba4:	e138      	b.n	8001e18 <__aeabi_dsub+0x490>
 8001ba6:	4e4e      	ldr	r6, [pc, #312]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001ba8:	42b0      	cmp	r0, r6
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x226>
 8001bac:	e1de      	b.n	8001f6c <__aeabi_dsub+0x5e4>
 8001bae:	2680      	movs	r6, #128	; 0x80
 8001bb0:	4664      	mov	r4, ip
 8001bb2:	0436      	lsls	r6, r6, #16
 8001bb4:	4334      	orrs	r4, r6
 8001bb6:	46a4      	mov	ip, r4
 8001bb8:	2a38      	cmp	r2, #56	; 0x38
 8001bba:	dd00      	ble.n	8001bbe <__aeabi_dsub+0x236>
 8001bbc:	e196      	b.n	8001eec <__aeabi_dsub+0x564>
 8001bbe:	2a1f      	cmp	r2, #31
 8001bc0:	dd00      	ble.n	8001bc4 <__aeabi_dsub+0x23c>
 8001bc2:	e224      	b.n	800200e <__aeabi_dsub+0x686>
 8001bc4:	2620      	movs	r6, #32
 8001bc6:	1ab4      	subs	r4, r6, r2
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	4664      	mov	r4, ip
 8001bcc:	4656      	mov	r6, sl
 8001bce:	40b4      	lsls	r4, r6
 8001bd0:	46a1      	mov	r9, r4
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	464e      	mov	r6, r9
 8001bd6:	40d4      	lsrs	r4, r2
 8001bd8:	4326      	orrs	r6, r4
 8001bda:	0034      	movs	r4, r6
 8001bdc:	4656      	mov	r6, sl
 8001bde:	40b3      	lsls	r3, r6
 8001be0:	1e5e      	subs	r6, r3, #1
 8001be2:	41b3      	sbcs	r3, r6
 8001be4:	431c      	orrs	r4, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	40d3      	lsrs	r3, r2
 8001bea:	18c9      	adds	r1, r1, r3
 8001bec:	19e4      	adds	r4, r4, r7
 8001bee:	42bc      	cmp	r4, r7
 8001bf0:	41bf      	sbcs	r7, r7
 8001bf2:	427f      	negs	r7, r7
 8001bf4:	46b9      	mov	r9, r7
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4489      	add	r9, r1
 8001bfa:	e0d8      	b.n	8001dae <__aeabi_dsub+0x426>
 8001bfc:	4640      	mov	r0, r8
 8001bfe:	4c3b      	ldr	r4, [pc, #236]	; (8001cec <__aeabi_dsub+0x364>)
 8001c00:	3001      	adds	r0, #1
 8001c02:	4220      	tst	r0, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x280>
 8001c06:	e0b4      	b.n	8001d72 <__aeabi_dsub+0x3ea>
 8001c08:	4640      	mov	r0, r8
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e144      	b.n	8001e9a <__aeabi_dsub+0x512>
 8001c10:	4660      	mov	r0, ip
 8001c12:	4318      	orrs	r0, r3
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e190      	b.n	8001f3a <__aeabi_dsub+0x5b2>
 8001c18:	0008      	movs	r0, r1
 8001c1a:	4338      	orrs	r0, r7
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dsub+0x298>
 8001c1e:	e1aa      	b.n	8001f76 <__aeabi_dsub+0x5ee>
 8001c20:	4661      	mov	r1, ip
 8001c22:	08db      	lsrs	r3, r3, #3
 8001c24:	0749      	lsls	r1, r1, #29
 8001c26:	430b      	orrs	r3, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	08cc      	lsrs	r4, r1, #3
 8001c2c:	e027      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c2e:	0008      	movs	r0, r1
 8001c30:	4338      	orrs	r0, r7
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dsub+0x370>
 8001c34:	1e50      	subs	r0, r2, #1
 8001c36:	2a01      	cmp	r2, #1
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x2b4>
 8001c3a:	e139      	b.n	8001eb0 <__aeabi_dsub+0x528>
 8001c3c:	42a2      	cmp	r2, r4
 8001c3e:	d027      	beq.n	8001c90 <__aeabi_dsub+0x308>
 8001c40:	0002      	movs	r2, r0
 8001c42:	e75d      	b.n	8001b00 <__aeabi_dsub+0x178>
 8001c44:	0002      	movs	r2, r0
 8001c46:	391f      	subs	r1, #31
 8001c48:	40ca      	lsrs	r2, r1
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d003      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4098      	lsls	r0, r3
 8001c56:	4304      	orrs	r4, r0
 8001c58:	1e63      	subs	r3, r4, #1
 8001c5a:	419c      	sbcs	r4, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4699      	mov	r9, r3
 8001c60:	4698      	mov	r8, r3
 8001c62:	430c      	orrs	r4, r1
 8001c64:	0763      	lsls	r3, r4, #29
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x2e2>
 8001c68:	e712      	b.n	8001a90 <__aeabi_dsub+0x108>
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	464a      	mov	r2, r9
 8001c6e:	08e4      	lsrs	r4, r4, #3
 8001c70:	075b      	lsls	r3, r3, #29
 8001c72:	4323      	orrs	r3, r4
 8001c74:	08d4      	lsrs	r4, r2, #3
 8001c76:	4642      	mov	r2, r8
 8001c78:	4919      	ldr	r1, [pc, #100]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001c7a:	428a      	cmp	r2, r1
 8001c7c:	d00e      	beq.n	8001c9c <__aeabi_dsub+0x314>
 8001c7e:	0324      	lsls	r4, r4, #12
 8001c80:	0552      	lsls	r2, r2, #21
 8001c82:	0b24      	lsrs	r4, r4, #12
 8001c84:	0d52      	lsrs	r2, r2, #21
 8001c86:	e722      	b.n	8001ace <__aeabi_dsub+0x146>
 8001c88:	000a      	movs	r2, r1
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e71e      	b.n	8001ace <__aeabi_dsub+0x146>
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	4662      	mov	r2, ip
 8001c94:	0752      	lsls	r2, r2, #29
 8001c96:	4313      	orrs	r3, r2
 8001c98:	4662      	mov	r2, ip
 8001c9a:	08d4      	lsrs	r4, r2, #3
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	4322      	orrs	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x31c>
 8001ca2:	e1fc      	b.n	800209e <__aeabi_dsub+0x716>
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	0312      	lsls	r2, r2, #12
 8001ca8:	4314      	orrs	r4, r2
 8001caa:	0324      	lsls	r4, r4, #12
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001cae:	0b24      	lsrs	r4, r4, #12
 8001cb0:	e70d      	b.n	8001ace <__aeabi_dsub+0x146>
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	f000 fa9e 	bl	80021f4 <__clzsi2>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	3118      	adds	r1, #24
 8001cbc:	291f      	cmp	r1, #31
 8001cbe:	dc00      	bgt.n	8001cc2 <__aeabi_dsub+0x33a>
 8001cc0:	e6c4      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001cc2:	3808      	subs	r0, #8
 8001cc4:	4084      	lsls	r4, r0
 8001cc6:	4643      	mov	r3, r8
 8001cc8:	0020      	movs	r0, r4
 8001cca:	2400      	movs	r4, #0
 8001ccc:	4588      	cmp	r8, r1
 8001cce:	dc00      	bgt.n	8001cd2 <__aeabi_dsub+0x34a>
 8001cd0:	e6c8      	b.n	8001a64 <__aeabi_dsub+0xdc>
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__aeabi_dsub+0x35c>)
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	4010      	ands	r0, r2
 8001cd8:	4698      	mov	r8, r3
 8001cda:	4681      	mov	r9, r0
 8001cdc:	e6d6      	b.n	8001a8c <__aeabi_dsub+0x104>
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	fffff801 	.word	0xfffff801
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	430f      	orrs	r7, r1
 8001cf2:	1e7a      	subs	r2, r7, #1
 8001cf4:	4197      	sbcs	r7, r2
 8001cf6:	e691      	b.n	8001a1c <__aeabi_dsub+0x94>
 8001cf8:	4661      	mov	r1, ip
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	0749      	lsls	r1, r1, #29
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	4661      	mov	r1, ip
 8001d02:	08cc      	lsrs	r4, r1, #3
 8001d04:	e7b8      	b.n	8001c78 <__aeabi_dsub+0x2f0>
 8001d06:	4640      	mov	r0, r8
 8001d08:	4cd3      	ldr	r4, [pc, #844]	; (8002058 <__aeabi_dsub+0x6d0>)
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	4220      	tst	r0, r4
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e0a2      	b.n	8001e58 <__aeabi_dsub+0x4d0>
 8001d12:	4640      	mov	r0, r8
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x392>
 8001d18:	e101      	b.n	8001f1e <__aeabi_dsub+0x596>
 8001d1a:	4660      	mov	r0, ip
 8001d1c:	4318      	orrs	r0, r3
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x39a>
 8001d20:	e15e      	b.n	8001fe0 <__aeabi_dsub+0x658>
 8001d22:	0008      	movs	r0, r1
 8001d24:	4338      	orrs	r0, r7
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x3a2>
 8001d28:	e15f      	b.n	8001fea <__aeabi_dsub+0x662>
 8001d2a:	4661      	mov	r1, ip
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	0749      	lsls	r1, r1, #29
 8001d30:	430b      	orrs	r3, r1
 8001d32:	4661      	mov	r1, ip
 8001d34:	08cc      	lsrs	r4, r1, #3
 8001d36:	e7a2      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001d38:	4dc8      	ldr	r5, [pc, #800]	; (800205c <__aeabi_dsub+0x6d4>)
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x3b8>
 8001d3e:	e0cf      	b.n	8001ee0 <__aeabi_dsub+0x558>
 8001d40:	2580      	movs	r5, #128	; 0x80
 8001d42:	4664      	mov	r4, ip
 8001d44:	042d      	lsls	r5, r5, #16
 8001d46:	432c      	orrs	r4, r5
 8001d48:	46a4      	mov	ip, r4
 8001d4a:	2a38      	cmp	r2, #56	; 0x38
 8001d4c:	dc56      	bgt.n	8001dfc <__aeabi_dsub+0x474>
 8001d4e:	2a1f      	cmp	r2, #31
 8001d50:	dd00      	ble.n	8001d54 <__aeabi_dsub+0x3cc>
 8001d52:	e0d1      	b.n	8001ef8 <__aeabi_dsub+0x570>
 8001d54:	2520      	movs	r5, #32
 8001d56:	001e      	movs	r6, r3
 8001d58:	1aad      	subs	r5, r5, r2
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	40ab      	lsls	r3, r5
 8001d5e:	40ac      	lsls	r4, r5
 8001d60:	40d6      	lsrs	r6, r2
 8001d62:	1e5d      	subs	r5, r3, #1
 8001d64:	41ab      	sbcs	r3, r5
 8001d66:	4334      	orrs	r4, r6
 8001d68:	4323      	orrs	r3, r4
 8001d6a:	4664      	mov	r4, ip
 8001d6c:	40d4      	lsrs	r4, r2
 8001d6e:	1b09      	subs	r1, r1, r4
 8001d70:	e049      	b.n	8001e06 <__aeabi_dsub+0x47e>
 8001d72:	4660      	mov	r0, ip
 8001d74:	1bdc      	subs	r4, r3, r7
 8001d76:	1a46      	subs	r6, r0, r1
 8001d78:	42a3      	cmp	r3, r4
 8001d7a:	4180      	sbcs	r0, r0
 8001d7c:	4240      	negs	r0, r0
 8001d7e:	4681      	mov	r9, r0
 8001d80:	0030      	movs	r0, r6
 8001d82:	464e      	mov	r6, r9
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	4681      	mov	r9, r0
 8001d88:	0200      	lsls	r0, r0, #8
 8001d8a:	d476      	bmi.n	8001e7a <__aeabi_dsub+0x4f2>
 8001d8c:	464b      	mov	r3, r9
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x40c>
 8001d92:	e652      	b.n	8001a3a <__aeabi_dsub+0xb2>
 8001d94:	2400      	movs	r4, #0
 8001d96:	2500      	movs	r5, #0
 8001d98:	e771      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001d9a:	4339      	orrs	r1, r7
 8001d9c:	000c      	movs	r4, r1
 8001d9e:	1e62      	subs	r2, r4, #1
 8001da0:	4194      	sbcs	r4, r2
 8001da2:	18e4      	adds	r4, r4, r3
 8001da4:	429c      	cmp	r4, r3
 8001da6:	419b      	sbcs	r3, r3
 8001da8:	425b      	negs	r3, r3
 8001daa:	4463      	add	r3, ip
 8001dac:	4699      	mov	r9, r3
 8001dae:	464b      	mov	r3, r9
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	d400      	bmi.n	8001db6 <__aeabi_dsub+0x42e>
 8001db4:	e756      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001db6:	2301      	movs	r3, #1
 8001db8:	469c      	mov	ip, r3
 8001dba:	4ba8      	ldr	r3, [pc, #672]	; (800205c <__aeabi_dsub+0x6d4>)
 8001dbc:	44e0      	add	r8, ip
 8001dbe:	4598      	cmp	r8, r3
 8001dc0:	d038      	beq.n	8001e34 <__aeabi_dsub+0x4ac>
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	48a6      	ldr	r0, [pc, #664]	; (8002060 <__aeabi_dsub+0x6d8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4003      	ands	r3, r0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	0863      	lsrs	r3, r4, #1
 8001dce:	4014      	ands	r4, r2
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	07c3      	lsls	r3, r0, #31
 8001dd4:	431c      	orrs	r4, r3
 8001dd6:	0843      	lsrs	r3, r0, #1
 8001dd8:	4699      	mov	r9, r3
 8001dda:	e657      	b.n	8001a8c <__aeabi_dsub+0x104>
 8001ddc:	0010      	movs	r0, r2
 8001dde:	000e      	movs	r6, r1
 8001de0:	3820      	subs	r0, #32
 8001de2:	40c6      	lsrs	r6, r0
 8001de4:	2a20      	cmp	r2, #32
 8001de6:	d004      	beq.n	8001df2 <__aeabi_dsub+0x46a>
 8001de8:	2040      	movs	r0, #64	; 0x40
 8001dea:	1a82      	subs	r2, r0, r2
 8001dec:	4091      	lsls	r1, r2
 8001dee:	430f      	orrs	r7, r1
 8001df0:	46b9      	mov	r9, r7
 8001df2:	464f      	mov	r7, r9
 8001df4:	1e7a      	subs	r2, r7, #1
 8001df6:	4197      	sbcs	r7, r2
 8001df8:	4337      	orrs	r7, r6
 8001dfa:	e60f      	b.n	8001a1c <__aeabi_dsub+0x94>
 8001dfc:	4662      	mov	r2, ip
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	4193      	sbcs	r3, r2
 8001e06:	1afc      	subs	r4, r7, r3
 8001e08:	42a7      	cmp	r7, r4
 8001e0a:	41bf      	sbcs	r7, r7
 8001e0c:	427f      	negs	r7, r7
 8001e0e:	1bcb      	subs	r3, r1, r7
 8001e10:	4699      	mov	r9, r3
 8001e12:	465d      	mov	r5, fp
 8001e14:	4680      	mov	r8, r0
 8001e16:	e608      	b.n	8001a2a <__aeabi_dsub+0xa2>
 8001e18:	4666      	mov	r6, ip
 8001e1a:	431e      	orrs	r6, r3
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e0be      	b.n	8001f9e <__aeabi_dsub+0x616>
 8001e20:	1e56      	subs	r6, r2, #1
 8001e22:	2a01      	cmp	r2, #1
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x4a0>
 8001e26:	e109      	b.n	800203c <__aeabi_dsub+0x6b4>
 8001e28:	4c8c      	ldr	r4, [pc, #560]	; (800205c <__aeabi_dsub+0x6d4>)
 8001e2a:	42a2      	cmp	r2, r4
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x4a8>
 8001e2e:	e119      	b.n	8002064 <__aeabi_dsub+0x6dc>
 8001e30:	0032      	movs	r2, r6
 8001e32:	e6c1      	b.n	8001bb8 <__aeabi_dsub+0x230>
 8001e34:	4642      	mov	r2, r8
 8001e36:	2400      	movs	r4, #0
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e648      	b.n	8001ace <__aeabi_dsub+0x146>
 8001e3c:	2020      	movs	r0, #32
 8001e3e:	000c      	movs	r4, r1
 8001e40:	1a80      	subs	r0, r0, r2
 8001e42:	003e      	movs	r6, r7
 8001e44:	4087      	lsls	r7, r0
 8001e46:	4084      	lsls	r4, r0
 8001e48:	40d6      	lsrs	r6, r2
 8001e4a:	1e78      	subs	r0, r7, #1
 8001e4c:	4187      	sbcs	r7, r0
 8001e4e:	40d1      	lsrs	r1, r2
 8001e50:	4334      	orrs	r4, r6
 8001e52:	433c      	orrs	r4, r7
 8001e54:	448c      	add	ip, r1
 8001e56:	e7a4      	b.n	8001da2 <__aeabi_dsub+0x41a>
 8001e58:	4a80      	ldr	r2, [pc, #512]	; (800205c <__aeabi_dsub+0x6d4>)
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x4d8>
 8001e5e:	e0e9      	b.n	8002034 <__aeabi_dsub+0x6ac>
 8001e60:	19df      	adds	r7, r3, r7
 8001e62:	429f      	cmp	r7, r3
 8001e64:	419b      	sbcs	r3, r3
 8001e66:	4461      	add	r1, ip
 8001e68:	425b      	negs	r3, r3
 8001e6a:	18c9      	adds	r1, r1, r3
 8001e6c:	07cc      	lsls	r4, r1, #31
 8001e6e:	087f      	lsrs	r7, r7, #1
 8001e70:	084b      	lsrs	r3, r1, #1
 8001e72:	4699      	mov	r9, r3
 8001e74:	4680      	mov	r8, r0
 8001e76:	433c      	orrs	r4, r7
 8001e78:	e6f4      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001e7a:	1afc      	subs	r4, r7, r3
 8001e7c:	42a7      	cmp	r7, r4
 8001e7e:	41bf      	sbcs	r7, r7
 8001e80:	4663      	mov	r3, ip
 8001e82:	427f      	negs	r7, r7
 8001e84:	1ac9      	subs	r1, r1, r3
 8001e86:	1bcb      	subs	r3, r1, r7
 8001e88:	4699      	mov	r9, r3
 8001e8a:	465d      	mov	r5, fp
 8001e8c:	e5d5      	b.n	8001a3a <__aeabi_dsub+0xb2>
 8001e8e:	08ff      	lsrs	r7, r7, #3
 8001e90:	074b      	lsls	r3, r1, #29
 8001e92:	465d      	mov	r5, fp
 8001e94:	433b      	orrs	r3, r7
 8001e96:	08cc      	lsrs	r4, r1, #3
 8001e98:	e6ee      	b.n	8001c78 <__aeabi_dsub+0x2f0>
 8001e9a:	4662      	mov	r2, ip
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x51a>
 8001ea0:	e082      	b.n	8001fa8 <__aeabi_dsub+0x620>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	d11b      	bne.n	8001ee0 <__aeabi_dsub+0x558>
 8001ea8:	2480      	movs	r4, #128	; 0x80
 8001eaa:	2500      	movs	r5, #0
 8001eac:	0324      	lsls	r4, r4, #12
 8001eae:	e6f9      	b.n	8001ca4 <__aeabi_dsub+0x31c>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	425b      	negs	r3, r3
 8001ebc:	4499      	add	r9, r3
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d444      	bmi.n	8001f4e <__aeabi_dsub+0x5c6>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	e6cc      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4662      	mov	r2, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	419b      	sbcs	r3, r3
 8001ed2:	1a51      	subs	r1, r2, r1
 8001ed4:	425b      	negs	r3, r3
 8001ed6:	1acb      	subs	r3, r1, r3
 8001ed8:	4699      	mov	r9, r3
 8001eda:	2301      	movs	r3, #1
 8001edc:	4698      	mov	r8, r3
 8001ede:	e5a4      	b.n	8001a2a <__aeabi_dsub+0xa2>
 8001ee0:	08ff      	lsrs	r7, r7, #3
 8001ee2:	074b      	lsls	r3, r1, #29
 8001ee4:	465d      	mov	r5, fp
 8001ee6:	433b      	orrs	r3, r7
 8001ee8:	08cc      	lsrs	r4, r1, #3
 8001eea:	e6d7      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001eec:	4662      	mov	r2, ip
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	0014      	movs	r4, r2
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	e679      	b.n	8001bec <__aeabi_dsub+0x264>
 8001ef8:	0015      	movs	r5, r2
 8001efa:	4664      	mov	r4, ip
 8001efc:	3d20      	subs	r5, #32
 8001efe:	40ec      	lsrs	r4, r5
 8001f00:	46a0      	mov	r8, r4
 8001f02:	2a20      	cmp	r2, #32
 8001f04:	d005      	beq.n	8001f12 <__aeabi_dsub+0x58a>
 8001f06:	2540      	movs	r5, #64	; 0x40
 8001f08:	4664      	mov	r4, ip
 8001f0a:	1aaa      	subs	r2, r5, r2
 8001f0c:	4094      	lsls	r4, r2
 8001f0e:	4323      	orrs	r3, r4
 8001f10:	469a      	mov	sl, r3
 8001f12:	4654      	mov	r4, sl
 8001f14:	1e63      	subs	r3, r4, #1
 8001f16:	419c      	sbcs	r4, r3
 8001f18:	4643      	mov	r3, r8
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	e773      	b.n	8001e06 <__aeabi_dsub+0x47e>
 8001f1e:	4662      	mov	r2, ip
 8001f20:	431a      	orrs	r2, r3
 8001f22:	d023      	beq.n	8001f6c <__aeabi_dsub+0x5e4>
 8001f24:	000a      	movs	r2, r1
 8001f26:	433a      	orrs	r2, r7
 8001f28:	d000      	beq.n	8001f2c <__aeabi_dsub+0x5a4>
 8001f2a:	e0a0      	b.n	800206e <__aeabi_dsub+0x6e6>
 8001f2c:	4662      	mov	r2, ip
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	0752      	lsls	r2, r2, #29
 8001f32:	4313      	orrs	r3, r2
 8001f34:	4662      	mov	r2, ip
 8001f36:	08d4      	lsrs	r4, r2, #3
 8001f38:	e6b0      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001f3a:	000b      	movs	r3, r1
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0x5ba>
 8001f40:	e728      	b.n	8001d94 <__aeabi_dsub+0x40c>
 8001f42:	08ff      	lsrs	r7, r7, #3
 8001f44:	074b      	lsls	r3, r1, #29
 8001f46:	465d      	mov	r5, fp
 8001f48:	433b      	orrs	r3, r7
 8001f4a:	08cc      	lsrs	r4, r1, #3
 8001f4c:	e697      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	4698      	mov	r8, r3
 8001f52:	e736      	b.n	8001dc2 <__aeabi_dsub+0x43a>
 8001f54:	1afc      	subs	r4, r7, r3
 8001f56:	42a7      	cmp	r7, r4
 8001f58:	41bf      	sbcs	r7, r7
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	427f      	negs	r7, r7
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	1bcb      	subs	r3, r1, r7
 8001f62:	4699      	mov	r9, r3
 8001f64:	2301      	movs	r3, #1
 8001f66:	465d      	mov	r5, fp
 8001f68:	4698      	mov	r8, r3
 8001f6a:	e55e      	b.n	8001a2a <__aeabi_dsub+0xa2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08ff      	lsrs	r7, r7, #3
 8001f70:	433b      	orrs	r3, r7
 8001f72:	08cc      	lsrs	r4, r1, #3
 8001f74:	e692      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001f76:	1bdc      	subs	r4, r3, r7
 8001f78:	4660      	mov	r0, ip
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	1a40      	subs	r0, r0, r1
 8001f80:	4276      	negs	r6, r6
 8001f82:	1b80      	subs	r0, r0, r6
 8001f84:	4681      	mov	r9, r0
 8001f86:	0200      	lsls	r0, r0, #8
 8001f88:	d560      	bpl.n	800204c <__aeabi_dsub+0x6c4>
 8001f8a:	1afc      	subs	r4, r7, r3
 8001f8c:	42a7      	cmp	r7, r4
 8001f8e:	41bf      	sbcs	r7, r7
 8001f90:	4663      	mov	r3, ip
 8001f92:	427f      	negs	r7, r7
 8001f94:	1ac9      	subs	r1, r1, r3
 8001f96:	1bcb      	subs	r3, r1, r7
 8001f98:	4699      	mov	r9, r3
 8001f9a:	465d      	mov	r5, fp
 8001f9c:	e576      	b.n	8001a8c <__aeabi_dsub+0x104>
 8001f9e:	08ff      	lsrs	r7, r7, #3
 8001fa0:	074b      	lsls	r3, r1, #29
 8001fa2:	433b      	orrs	r3, r7
 8001fa4:	08cc      	lsrs	r4, r1, #3
 8001fa6:	e667      	b.n	8001c78 <__aeabi_dsub+0x2f0>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	433a      	orrs	r2, r7
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x62a>
 8001fb0:	e66f      	b.n	8001c92 <__aeabi_dsub+0x30a>
 8001fb2:	4662      	mov	r2, ip
 8001fb4:	0752      	lsls	r2, r2, #29
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	4662      	mov	r2, ip
 8001fba:	08d4      	lsrs	r4, r2, #3
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0312      	lsls	r2, r2, #12
 8001fc0:	4214      	tst	r4, r2
 8001fc2:	d007      	beq.n	8001fd4 <__aeabi_dsub+0x64c>
 8001fc4:	08c8      	lsrs	r0, r1, #3
 8001fc6:	4210      	tst	r0, r2
 8001fc8:	d104      	bne.n	8001fd4 <__aeabi_dsub+0x64c>
 8001fca:	465d      	mov	r5, fp
 8001fcc:	0004      	movs	r4, r0
 8001fce:	08fb      	lsrs	r3, r7, #3
 8001fd0:	0749      	lsls	r1, r1, #29
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	0f5a      	lsrs	r2, r3, #29
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	0752      	lsls	r2, r2, #29
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	e65d      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001fe0:	074b      	lsls	r3, r1, #29
 8001fe2:	08ff      	lsrs	r7, r7, #3
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	08cc      	lsrs	r4, r1, #3
 8001fe8:	e649      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001fea:	19dc      	adds	r4, r3, r7
 8001fec:	429c      	cmp	r4, r3
 8001fee:	419b      	sbcs	r3, r3
 8001ff0:	4461      	add	r1, ip
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	425b      	negs	r3, r3
 8001ff6:	4499      	add	r9, r3
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	d400      	bmi.n	8002000 <__aeabi_dsub+0x678>
 8001ffe:	e631      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8002000:	464a      	mov	r2, r9
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <__aeabi_dsub+0x6d8>)
 8002004:	401a      	ands	r2, r3
 8002006:	2301      	movs	r3, #1
 8002008:	4691      	mov	r9, r2
 800200a:	4698      	mov	r8, r3
 800200c:	e62a      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 800200e:	0016      	movs	r6, r2
 8002010:	4664      	mov	r4, ip
 8002012:	3e20      	subs	r6, #32
 8002014:	40f4      	lsrs	r4, r6
 8002016:	46a0      	mov	r8, r4
 8002018:	2a20      	cmp	r2, #32
 800201a:	d005      	beq.n	8002028 <__aeabi_dsub+0x6a0>
 800201c:	2640      	movs	r6, #64	; 0x40
 800201e:	4664      	mov	r4, ip
 8002020:	1ab2      	subs	r2, r6, r2
 8002022:	4094      	lsls	r4, r2
 8002024:	4323      	orrs	r3, r4
 8002026:	469a      	mov	sl, r3
 8002028:	4654      	mov	r4, sl
 800202a:	1e63      	subs	r3, r4, #1
 800202c:	419c      	sbcs	r4, r3
 800202e:	4643      	mov	r3, r8
 8002030:	431c      	orrs	r4, r3
 8002032:	e5db      	b.n	8001bec <__aeabi_dsub+0x264>
 8002034:	0002      	movs	r2, r0
 8002036:	2400      	movs	r4, #0
 8002038:	2300      	movs	r3, #0
 800203a:	e548      	b.n	8001ace <__aeabi_dsub+0x146>
 800203c:	19dc      	adds	r4, r3, r7
 800203e:	42bc      	cmp	r4, r7
 8002040:	41bf      	sbcs	r7, r7
 8002042:	4461      	add	r1, ip
 8002044:	4689      	mov	r9, r1
 8002046:	427f      	negs	r7, r7
 8002048:	44b9      	add	r9, r7
 800204a:	e738      	b.n	8001ebe <__aeabi_dsub+0x536>
 800204c:	464b      	mov	r3, r9
 800204e:	4323      	orrs	r3, r4
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x6cc>
 8002052:	e69f      	b.n	8001d94 <__aeabi_dsub+0x40c>
 8002054:	e606      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	000007fe 	.word	0x000007fe
 800205c:	000007ff 	.word	0x000007ff
 8002060:	ff7fffff 	.word	0xff7fffff
 8002064:	08ff      	lsrs	r7, r7, #3
 8002066:	074b      	lsls	r3, r1, #29
 8002068:	433b      	orrs	r3, r7
 800206a:	08cc      	lsrs	r4, r1, #3
 800206c:	e616      	b.n	8001c9c <__aeabi_dsub+0x314>
 800206e:	4662      	mov	r2, ip
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	0752      	lsls	r2, r2, #29
 8002074:	4313      	orrs	r3, r2
 8002076:	4662      	mov	r2, ip
 8002078:	08d4      	lsrs	r4, r2, #3
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0312      	lsls	r2, r2, #12
 800207e:	4214      	tst	r4, r2
 8002080:	d007      	beq.n	8002092 <__aeabi_dsub+0x70a>
 8002082:	08c8      	lsrs	r0, r1, #3
 8002084:	4210      	tst	r0, r2
 8002086:	d104      	bne.n	8002092 <__aeabi_dsub+0x70a>
 8002088:	465d      	mov	r5, fp
 800208a:	0004      	movs	r4, r0
 800208c:	08fb      	lsrs	r3, r7, #3
 800208e:	0749      	lsls	r1, r1, #29
 8002090:	430b      	orrs	r3, r1
 8002092:	0f5a      	lsrs	r2, r3, #29
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	0752      	lsls	r2, r2, #29
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	4313      	orrs	r3, r2
 800209c:	e5fe      	b.n	8001c9c <__aeabi_dsub+0x314>
 800209e:	2300      	movs	r3, #0
 80020a0:	4a01      	ldr	r2, [pc, #4]	; (80020a8 <__aeabi_dsub+0x720>)
 80020a2:	001c      	movs	r4, r3
 80020a4:	e513      	b.n	8001ace <__aeabi_dsub+0x146>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	000007ff 	.word	0x000007ff

080020ac <__aeabi_d2iz>:
 80020ac:	000a      	movs	r2, r1
 80020ae:	b530      	push	{r4, r5, lr}
 80020b0:	4c13      	ldr	r4, [pc, #76]	; (8002100 <__aeabi_d2iz+0x54>)
 80020b2:	0053      	lsls	r3, r2, #1
 80020b4:	0309      	lsls	r1, r1, #12
 80020b6:	0005      	movs	r5, r0
 80020b8:	0b09      	lsrs	r1, r1, #12
 80020ba:	2000      	movs	r0, #0
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	0fd2      	lsrs	r2, r2, #31
 80020c0:	42a3      	cmp	r3, r4
 80020c2:	dd04      	ble.n	80020ce <__aeabi_d2iz+0x22>
 80020c4:	480f      	ldr	r0, [pc, #60]	; (8002104 <__aeabi_d2iz+0x58>)
 80020c6:	4283      	cmp	r3, r0
 80020c8:	dd02      	ble.n	80020d0 <__aeabi_d2iz+0x24>
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <__aeabi_d2iz+0x5c>)
 80020cc:	18d0      	adds	r0, r2, r3
 80020ce:	bd30      	pop	{r4, r5, pc}
 80020d0:	2080      	movs	r0, #128	; 0x80
 80020d2:	0340      	lsls	r0, r0, #13
 80020d4:	4301      	orrs	r1, r0
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <__aeabi_d2iz+0x60>)
 80020d8:	1ac0      	subs	r0, r0, r3
 80020da:	281f      	cmp	r0, #31
 80020dc:	dd08      	ble.n	80020f0 <__aeabi_d2iz+0x44>
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <__aeabi_d2iz+0x64>)
 80020e0:	1ac3      	subs	r3, r0, r3
 80020e2:	40d9      	lsrs	r1, r3
 80020e4:	000b      	movs	r3, r1
 80020e6:	4258      	negs	r0, r3
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d1f0      	bne.n	80020ce <__aeabi_d2iz+0x22>
 80020ec:	0018      	movs	r0, r3
 80020ee:	e7ee      	b.n	80020ce <__aeabi_d2iz+0x22>
 80020f0:	4c08      	ldr	r4, [pc, #32]	; (8002114 <__aeabi_d2iz+0x68>)
 80020f2:	40c5      	lsrs	r5, r0
 80020f4:	46a4      	mov	ip, r4
 80020f6:	4463      	add	r3, ip
 80020f8:	4099      	lsls	r1, r3
 80020fa:	000b      	movs	r3, r1
 80020fc:	432b      	orrs	r3, r5
 80020fe:	e7f2      	b.n	80020e6 <__aeabi_d2iz+0x3a>
 8002100:	000003fe 	.word	0x000003fe
 8002104:	0000041d 	.word	0x0000041d
 8002108:	7fffffff 	.word	0x7fffffff
 800210c:	00000433 	.word	0x00000433
 8002110:	00000413 	.word	0x00000413
 8002114:	fffffbed 	.word	0xfffffbed

08002118 <__aeabi_ui2d>:
 8002118:	b510      	push	{r4, lr}
 800211a:	1e04      	subs	r4, r0, #0
 800211c:	d010      	beq.n	8002140 <__aeabi_ui2d+0x28>
 800211e:	f000 f869 	bl	80021f4 <__clzsi2>
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <__aeabi_ui2d+0x48>)
 8002124:	1a1b      	subs	r3, r3, r0
 8002126:	280a      	cmp	r0, #10
 8002128:	dc11      	bgt.n	800214e <__aeabi_ui2d+0x36>
 800212a:	220b      	movs	r2, #11
 800212c:	0021      	movs	r1, r4
 800212e:	1a12      	subs	r2, r2, r0
 8002130:	40d1      	lsrs	r1, r2
 8002132:	3015      	adds	r0, #21
 8002134:	030a      	lsls	r2, r1, #12
 8002136:	055b      	lsls	r3, r3, #21
 8002138:	4084      	lsls	r4, r0
 800213a:	0b12      	lsrs	r2, r2, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	e001      	b.n	8002144 <__aeabi_ui2d+0x2c>
 8002140:	2300      	movs	r3, #0
 8002142:	2200      	movs	r2, #0
 8002144:	051b      	lsls	r3, r3, #20
 8002146:	4313      	orrs	r3, r2
 8002148:	0020      	movs	r0, r4
 800214a:	0019      	movs	r1, r3
 800214c:	bd10      	pop	{r4, pc}
 800214e:	0022      	movs	r2, r4
 8002150:	380b      	subs	r0, #11
 8002152:	4082      	lsls	r2, r0
 8002154:	055b      	lsls	r3, r3, #21
 8002156:	0312      	lsls	r2, r2, #12
 8002158:	2400      	movs	r4, #0
 800215a:	0b12      	lsrs	r2, r2, #12
 800215c:	0d5b      	lsrs	r3, r3, #21
 800215e:	e7f1      	b.n	8002144 <__aeabi_ui2d+0x2c>
 8002160:	0000041e 	.word	0x0000041e

08002164 <__aeabi_f2d>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	0043      	lsls	r3, r0, #1
 8002168:	0246      	lsls	r6, r0, #9
 800216a:	0fc4      	lsrs	r4, r0, #31
 800216c:	20fe      	movs	r0, #254	; 0xfe
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	0a75      	lsrs	r5, r6, #9
 8002174:	4208      	tst	r0, r1
 8002176:	d00c      	beq.n	8002192 <__aeabi_f2d+0x2e>
 8002178:	22e0      	movs	r2, #224	; 0xe0
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4694      	mov	ip, r2
 800217e:	076d      	lsls	r5, r5, #29
 8002180:	0b36      	lsrs	r6, r6, #12
 8002182:	4463      	add	r3, ip
 8002184:	051b      	lsls	r3, r3, #20
 8002186:	4333      	orrs	r3, r6
 8002188:	07e4      	lsls	r4, r4, #31
 800218a:	4323      	orrs	r3, r4
 800218c:	0028      	movs	r0, r5
 800218e:	0019      	movs	r1, r3
 8002190:	bd70      	pop	{r4, r5, r6, pc}
 8002192:	2b00      	cmp	r3, #0
 8002194:	d114      	bne.n	80021c0 <__aeabi_f2d+0x5c>
 8002196:	2d00      	cmp	r5, #0
 8002198:	d01b      	beq.n	80021d2 <__aeabi_f2d+0x6e>
 800219a:	0028      	movs	r0, r5
 800219c:	f000 f82a 	bl	80021f4 <__clzsi2>
 80021a0:	280a      	cmp	r0, #10
 80021a2:	dc1c      	bgt.n	80021de <__aeabi_f2d+0x7a>
 80021a4:	230b      	movs	r3, #11
 80021a6:	002e      	movs	r6, r5
 80021a8:	1a1b      	subs	r3, r3, r0
 80021aa:	40de      	lsrs	r6, r3
 80021ac:	0003      	movs	r3, r0
 80021ae:	3315      	adds	r3, #21
 80021b0:	409d      	lsls	r5, r3
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <__aeabi_f2d+0x88>)
 80021b4:	0336      	lsls	r6, r6, #12
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	0552      	lsls	r2, r2, #21
 80021ba:	0b36      	lsrs	r6, r6, #12
 80021bc:	0d53      	lsrs	r3, r2, #21
 80021be:	e7e1      	b.n	8002184 <__aeabi_f2d+0x20>
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	d009      	beq.n	80021d8 <__aeabi_f2d+0x74>
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0b36      	lsrs	r6, r6, #12
 80021c8:	0312      	lsls	r2, r2, #12
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <__aeabi_f2d+0x8c>)
 80021cc:	076d      	lsls	r5, r5, #29
 80021ce:	4316      	orrs	r6, r2
 80021d0:	e7d8      	b.n	8002184 <__aeabi_f2d+0x20>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2600      	movs	r6, #0
 80021d6:	e7d5      	b.n	8002184 <__aeabi_f2d+0x20>
 80021d8:	2600      	movs	r6, #0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <__aeabi_f2d+0x8c>)
 80021dc:	e7d2      	b.n	8002184 <__aeabi_f2d+0x20>
 80021de:	0003      	movs	r3, r0
 80021e0:	3b0b      	subs	r3, #11
 80021e2:	409d      	lsls	r5, r3
 80021e4:	002e      	movs	r6, r5
 80021e6:	2500      	movs	r5, #0
 80021e8:	e7e3      	b.n	80021b2 <__aeabi_f2d+0x4e>
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	00000389 	.word	0x00000389
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__clzsi2>:
 80021f4:	211c      	movs	r1, #28
 80021f6:	2301      	movs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0xe>
 80021fe:	0c00      	lsrs	r0, r0, #16
 8002200:	3910      	subs	r1, #16
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	4298      	cmp	r0, r3
 8002206:	d301      	bcc.n	800220c <__clzsi2+0x18>
 8002208:	0a00      	lsrs	r0, r0, #8
 800220a:	3908      	subs	r1, #8
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	4298      	cmp	r0, r3
 8002210:	d301      	bcc.n	8002216 <__clzsi2+0x22>
 8002212:	0900      	lsrs	r0, r0, #4
 8002214:	3904      	subs	r1, #4
 8002216:	a202      	add	r2, pc, #8	; (adr r2, 8002220 <__clzsi2+0x2c>)
 8002218:	5c10      	ldrb	r0, [r2, r0]
 800221a:	1840      	adds	r0, r0, r1
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	02020304 	.word	0x02020304
 8002224:	01010101 	.word	0x01010101
	...

08002230 <__clzdi2>:
 8002230:	b510      	push	{r4, lr}
 8002232:	2900      	cmp	r1, #0
 8002234:	d103      	bne.n	800223e <__clzdi2+0xe>
 8002236:	f7ff ffdd 	bl	80021f4 <__clzsi2>
 800223a:	3020      	adds	r0, #32
 800223c:	e002      	b.n	8002244 <__clzdi2+0x14>
 800223e:	0008      	movs	r0, r1
 8002240:	f7ff ffd8 	bl	80021f4 <__clzsi2>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	46c0      	nop			; (mov r8, r8)

08002248 <MX_ADC_Init>:
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
  hadc1.Init.LowPowerAutoWait      = DISABLE;
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002248:	2107      	movs	r1, #7
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800224a:	2201      	movs	r2, #1
{
 800224c:	b510      	push	{r4, lr}
  hadc1.Init.OversamplingMode      = DISABLE;
 800224e:	4c13      	ldr	r4, [pc, #76]	; (800229c <MX_ADC_Init+0x54>)
 8002250:	2300      	movs	r3, #0
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002252:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc1.Instance  = ADC1;
 8002254:	4912      	ldr	r1, [pc, #72]	; (80022a0 <MX_ADC_Init+0x58>)
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8002256:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8002258:	6122      	str	r2, [r4, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800225a:	3203      	adds	r2, #3
  hadc1.Instance  = ADC1;
 800225c:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800225e:	6162      	str	r2, [r4, #20]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002260:	2180      	movs	r1, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002262:	0022      	movs	r2, r4
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002264:	0609      	lsls	r1, r1, #24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002266:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002268:	0020      	movs	r0, r4
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800226a:	8423      	strh	r3, [r4, #32]
  hadc1.Init.OversamplingMode      = DISABLE;
 800226c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800226e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002270:	6061      	str	r1, [r4, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8002272:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002274:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8002276:	61a3      	str	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8002278:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800227a:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800227c:	f001 fede 	bl	800403c <HAL_ADC_Init>
 8002280:	2800      	cmp	r0, #0
 8002282:	d001      	beq.n	8002288 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8002284:	f000 f92e 	bl	80024e4 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	0020      	movs	r0, r4
 800228c:	f002 f904 	bl	8004498 <HAL_ADCEx_Calibration_Start>
 8002290:	2800      	cmp	r0, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8002294:	f000 f926 	bl	80024e4 <Error_Handler>
  }
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	200001ec 	.word	0x200001ec
 80022a0:	40012400 	.word	0x40012400

080022a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_ADC_MspInit+0x18>)
 80022a6:	6802      	ldr	r2, [r0, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_ADC_MspInit+0x1c>)
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 80022b8:	4770      	bx	lr
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40012400 	.word	0x40012400
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_ADC_MspDeInit+0x24>)
 80022c6:	6802      	ldr	r2, [r0, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d10c      	bne.n	80022e6 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_ADC_MspDeInit+0x28>)
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 80022d6:	430a      	orrs	r2, r1
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80022da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022dc:	4001      	ands	r1, r0
 80022de:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80022e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e2:	4002      	ands	r2, r0
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80022e6:	4770      	bx	lr
 80022e8:	40012400 	.word	0x40012400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	fffffdff 	.word	0xfffffdff

080022f4 <SYS_InitMeasurement>:
void SYS_InitMeasurement(void)
{
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <SYS_InitMeasurement+0x8>)
 80022f6:	4a02      	ldr	r2, [pc, #8]	; (8002300 <SYS_InitMeasurement+0xc>)
 80022f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80022fa:	4770      	bx	lr
 80022fc:	200001ec 	.word	0x200001ec
 8002300:	40012400 	.word	0x40012400

08002304 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002304:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002306:	2208      	movs	r2, #8
 8002308:	2100      	movs	r1, #0
{
 800230a:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800230c:	4668      	mov	r0, sp
 800230e:	f00c f946 	bl	800e59e <memset>

  MX_ADC_Init();
 8002312:	f7ff ff99 	bl	8002248 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8002316:	2308      	movs	r3, #8
 8002318:	491f      	ldr	r1, [pc, #124]	; (8002398 <ADC_ReadChannels+0x94>)
 800231a:	684a      	ldr	r2, [r1, #4]
 800231c:	421a      	tst	r2, r3
 800231e:	d0fc      	beq.n	800231a <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	4d1e      	ldr	r5, [pc, #120]	; (800239c <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002324:	4c1e      	ldr	r4, [pc, #120]	; (80023a0 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8002326:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800232c:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 800232e:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002330:	0020      	movs	r0, r4
 8002332:	f002 f8b1 	bl	8004498 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002338:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 800233a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800233e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 8002340:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002342:	f002 f855 	bl	80043f0 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002346:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002348:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800234a:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 800234e:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002350:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002352:	f002 f84d 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8002356:	2800      	cmp	r0, #0
 8002358:	d001      	beq.n	800235e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 800235a:	f000 f8c3 	bl	80024e4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800235e:	0020      	movs	r0, r4
 8002360:	f001 ff9a 	bl	8004298 <HAL_ADC_Start>
 8002364:	2800      	cmp	r0, #0
 8002366:	d001      	beq.n	800236c <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 8002368:	f000 f8bc 	bl	80024e4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800236c:	2101      	movs	r1, #1
 800236e:	0020      	movs	r0, r4
 8002370:	4249      	negs	r1, r1
 8002372:	f001 ffdb 	bl	800432c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8002376:	0020      	movs	r0, r4
 8002378:	f001 ffba 	bl	80042f0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 800237c:	0020      	movs	r0, r4
 800237e:	f002 f833 	bl	80043e8 <HAL_ADC_GetValue>
 8002382:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc1);
 8002384:	0020      	movs	r0, r4
 8002386:	f001 ff33 	bl	80041f0 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 800238a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800238e:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8002390:	4013      	ands	r3, r2
 8002392:	636b      	str	r3, [r5, #52]	; 0x34
}
 8002394:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40007000 	.word	0x40007000
 800239c:	40021000 	.word	0x40021000
 80023a0:	200001ec 	.word	0x200001ec
 80023a4:	0007ffff 	.word	0x0007ffff
 80023a8:	00001001 	.word	0x00001001
 80023ac:	fffffdff 	.word	0xfffffdff

080023b0 <SYS_GetBatteryLevel>:
{
 80023b0:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80023b2:	4808      	ldr	r0, [pc, #32]	; (80023d4 <SYS_GetBatteryLevel+0x24>)
 80023b4:	f7ff ffa6 	bl	8002304 <ADC_ReadChannels>
 80023b8:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 80023ba:	2000      	movs	r0, #0
  if (measuredLevel == 0){
 80023bc:	4281      	cmp	r1, r0
 80023be:	d008      	beq.n	80023d2 <SYS_GetBatteryLevel+0x22>
	  tmp = ((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL));
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SYS_GetBatteryLevel+0x28>)
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <SYS_GetBatteryLevel+0x2c>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	4343      	muls	r3, r0
	  tmp += measuredLevel/2;
 80023c8:	0848      	lsrs	r0, r1, #1
 80023ca:	18c0      	adds	r0, r0, r3
    batteryLevelmV = (tmp / measuredLevel);
 80023cc:	f7fd fec2 	bl	8000154 <__udivsi3>
 80023d0:	b280      	uxth	r0, r0
}
 80023d2:	bd10      	pop	{r4, pc}
 80023d4:	44020000 	.word	0x44020000
 80023d8:	1ff80078 	.word	0x1ff80078
 80023dc:	00000bb8 	.word	0x00000bb8

080023e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80023e2:	2001      	movs	r0, #1
 80023e4:	4a08      	ldr	r2, [pc, #32]	; (8002408 <MX_DMA_Init+0x28>)
 80023e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023e8:	4301      	orrs	r1, r0
 80023ea:	6311      	str	r1, [r2, #48]	; 0x30
 80023ec:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f0:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023f2:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023f6:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023fa:	f002 f89d 	bl	8004538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80023fe:	200b      	movs	r0, #11
 8002400:	f002 f8c4 	bl	800458c <HAL_NVIC_EnableIRQ>

}
 8002404:	bd07      	pop	{r0, r1, r2, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000

0800240c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800240c:	b510      	push	{r4, lr}
 800240e:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002410:	2228      	movs	r2, #40	; 0x28
 8002412:	2100      	movs	r1, #0
 8002414:	a806      	add	r0, sp, #24
 8002416:	f00c f8c2 	bl	800e59e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800241a:	2214      	movs	r2, #20
 800241c:	2100      	movs	r1, #0
 800241e:	4668      	mov	r0, sp
 8002420:	f00c f8bd 	bl	800e59e <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002424:	2302      	movs	r3, #2
 8002426:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;//RCC_PLL_OFF;//RCC_PLL_ON;
 8002428:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;//RCC_PLLMUL_3;//RCC_PLLMUL_6;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	031b      	lsls	r3, r3, #12
 800242e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002430:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002432:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002434:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002436:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002438:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800243a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800243c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800243e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f002 fdde 	bl	8005000 <HAL_RCC_OscConfig>
 8002444:	2800      	cmp	r0, #0
 8002446:	d000      	beq.n	800244a <SystemClock_Config+0x3e>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8002448:	e7fe      	b.n	8002448 <SystemClock_Config+0x3c>
  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <SystemClock_Config+0x88>)
 800244e:	055b      	lsls	r3, r3, #21
 8002450:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002452:	430b      	orrs	r3, r1
 8002454:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <SystemClock_Config+0x8c>)
 8002458:	4910      	ldr	r1, [pc, #64]	; (800249c <SystemClock_Config+0x90>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4011      	ands	r1, r2
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	000a      	movs	r2, r1
 800246a:	4022      	ands	r2, r4
 800246c:	4221      	tst	r1, r4
 800246e:	d1fa      	bne.n	8002466 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002470:	230f      	movs	r3, #15
 8002472:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;//RCC_SYSCLKSOURCE_HSI;//RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	3b0c      	subs	r3, #12
 8002476:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002478:	23e0      	movs	r3, #224	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800247a:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800247c:	00db      	lsls	r3, r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800247e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002480:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002482:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002484:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002486:	f003 f801 	bl	800548c <HAL_RCC_ClockConfig>
 800248a:	2800      	cmp	r0, #0
 800248c:	d000      	beq.n	8002490 <SystemClock_Config+0x84>
  while (1)
 800248e:	e7fe      	b.n	800248e <SystemClock_Config+0x82>
}
 8002490:	b012      	add	sp, #72	; 0x48
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	40007000 	.word	0x40007000
 800249c:	ffffe7ff 	.word	0xffffe7ff

080024a0 <main>:
{
 80024a0:	b510      	push	{r4, lr}
  HAL_Init();
 80024a2:	f001 fced 	bl	8003e80 <HAL_Init>
  SystemClock_Config();//SystemLowClock_Config();//SystemClock_Config();
 80024a6:	f7ff ffb1 	bl	800240c <SystemClock_Config>
  hwwdg.Instance = WWDG;
 80024aa:	4c0c      	ldr	r4, [pc, #48]	; (80024dc <main+0x3c>)
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <main+0x40>)
  HAL_WWDG_Init(&hwwdg);
 80024ae:	0020      	movs	r0, r4
  hwwdg.Instance = WWDG;
 80024b0:	6023      	str	r3, [r4, #0]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	6123      	str	r3, [r4, #16]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80024b6:	3381      	adds	r3, #129	; 0x81
 80024b8:	33ff      	adds	r3, #255	; 0xff
 80024ba:	6063      	str	r3, [r4, #4]
  hwwdg.Init.Window = WWDG_CFR_W;
 80024bc:	3b02      	subs	r3, #2
 80024be:	3bff      	subs	r3, #255	; 0xff
 80024c0:	60a3      	str	r3, [r4, #8]
  hwwdg.Init.Counter = WWDG_CR_T;
 80024c2:	60e3      	str	r3, [r4, #12]
  HAL_WWDG_Init(&hwwdg);
 80024c4:	f004 fc4e 	bl	8006d64 <HAL_WWDG_Init>
  MX_LoRaWAN_Init();
 80024c8:	f004 fc66 	bl	8006d98 <MX_LoRaWAN_Init>
  TxAppInit();
 80024cc:	f001 f8ee 	bl	80036ac <TxAppInit>
    MX_LoRaWAN_Process();
 80024d0:	f004 fc66 	bl	8006da0 <MX_LoRaWAN_Process>
    HAL_WWDG_Refresh(&hwwdg);
 80024d4:	0020      	movs	r0, r4
 80024d6:	f004 fc5a 	bl	8006d8e <HAL_WWDG_Refresh>
  while (1)
 80024da:	e7f9      	b.n	80024d0 <main+0x30>
 80024dc:	20000248 	.word	0x20000248
 80024e0:	40002c00 	.word	0x40002c00

080024e4 <Error_Handler>:
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <Error_Handler>
	...

080024e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024e8:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80024ea:	2500      	movs	r5, #0
{
 80024ec:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80024ee:	2214      	movs	r2, #20
 80024f0:	2100      	movs	r1, #0
 80024f2:	a801      	add	r0, sp, #4
 80024f4:	f00c f853 	bl	800e59e <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80024f8:	2228      	movs	r2, #40	; 0x28
 80024fa:	0029      	movs	r1, r5
 80024fc:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80024fe:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002500:	f00c f84d 	bl	800e59e <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002504:	4c26      	ldr	r4, [pc, #152]	; (80025a0 <MX_RTC_Init+0xb8>)
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <MX_RTC_Init+0xbc>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002508:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 800250a:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800250c:	231f      	movs	r3, #31
 800250e:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <MX_RTC_Init+0xc0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002512:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002514:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002516:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002518:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800251a:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800251c:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800251e:	f003 fa2f 	bl	8005980 <HAL_RTC_Init>
 8002522:	42a8      	cmp	r0, r5
 8002524:	d001      	beq.n	800252a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8002526:	f7ff ffdd 	bl	80024e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800252a:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800252c:	2200      	movs	r2, #0
 800252e:	0020      	movs	r0, r4
  sTime.Hours = 0;
 8002530:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002532:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 8002534:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002536:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002538:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800253a:	f003 fa89 	bl	8005a50 <HAL_RTC_SetTime>
 800253e:	2800      	cmp	r0, #0
 8002540:	d001      	beq.n	8002546 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002542:	f7ff ffcf 	bl	80024e4 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002546:	466a      	mov	r2, sp
 8002548:	2301      	movs	r3, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;
 800254a:	2500      	movs	r5, #0
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800254c:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800254e:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 8002550:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 8002552:	70d5      	strb	r5, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002554:	4669      	mov	r1, sp
 8002556:	002a      	movs	r2, r5
 8002558:	0020      	movs	r0, r4
 800255a:	f003 fafd 	bl	8005b58 <HAL_RTC_SetDate>
 800255e:	42a8      	cmp	r0, r5
 8002560:	d001      	beq.n	8002566 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8002562:	f7ff ffbf 	bl	80024e4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002566:	466b      	mov	r3, sp
 8002568:	831d      	strh	r5, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 800256a:	769d      	strb	r5, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 800256c:	23a0      	movs	r3, #160	; 0xa0
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8002572:	2319      	movs	r3, #25
 8002574:	221e      	movs	r2, #30
 8002576:	446b      	add	r3, sp
 8002578:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800257a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800257c:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 800257e:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002580:	0020      	movs	r0, r4
 8002582:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8002584:	9507      	str	r5, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002586:	9509      	str	r5, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002588:	950a      	str	r5, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800258a:	950b      	str	r5, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800258c:	950d      	str	r5, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 800258e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002590:	f003 fb4e 	bl	8005c30 <HAL_RTC_SetAlarm_IT>
 8002594:	2800      	cmp	r0, #0
 8002596:	d001      	beq.n	800259c <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8002598:	f7ff ffa4 	bl	80024e4 <Error_Handler>
  }

}
 800259c:	b011      	add	sp, #68	; 0x44
 800259e:	bd30      	pop	{r4, r5, pc}
 80025a0:	2000025c 	.word	0x2000025c
 80025a4:	40002800 	.word	0x40002800
 80025a8:	000003ff 	.word	0x000003ff

080025ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80025ac:	b510      	push	{r4, lr}
 80025ae:	0004      	movs	r4, r0
 80025b0:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b2:	2234      	movs	r2, #52	; 0x34
 80025b4:	2100      	movs	r1, #0
 80025b6:	a801      	add	r0, sp, #4
 80025b8:	f00b fff1 	bl	800e59e <memset>
  if (rtcHandle->Instance == RTC)
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_RTC_MspInit+0x50>)
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d118      	bne.n	80025f6 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80025c4:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c6:	a801      	add	r0, sp, #4
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80025c8:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025ca:	33fc      	adds	r3, #252	; 0xfc
 80025cc:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ce:	f002 fd17 	bl	8005000 <HAL_RCC_OscConfig>
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d001      	beq.n	80025da <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80025d6:	f7ff ff85 	bl	80024e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	4a08      	ldr	r2, [pc, #32]	; (8002600 <HAL_RTC_MspInit+0x54>)
 80025de:	02db      	lsls	r3, r3, #11
 80025e0:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80025e2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	0011      	movs	r1, r2
 80025ec:	f001 ffa4 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80025f0:	2002      	movs	r0, #2
 80025f2:	f001 ffcb 	bl	800458c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80025f6:	b00e      	add	sp, #56	; 0x38
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	40002800 	.word	0x40002800
 8002600:	40021000 	.word	0x40021000

08002604 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <RTC_IF_GetTimerContext+0x8>)
 8002606:	6818      	ldr	r0, [r3, #0]
}
 8002608:	4770      	bx	lr
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	200002ac 	.word	0x200002ac

08002610 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8002610:	2003      	movs	r0, #3
 8002612:	4770      	bx	lr

08002614 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002614:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002616:	0e41      	lsrs	r1, r0, #25
 8002618:	227d      	movs	r2, #125	; 0x7d
 800261a:	2300      	movs	r3, #0
 800261c:	01c0      	lsls	r0, r0, #7
 800261e:	f7fd ff4d 	bl	80004bc <__aeabi_uldivmod>
}
 8002622:	bd10      	pop	{r4, pc}

08002624 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8002624:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002626:	227d      	movs	r2, #125	; 0x7d
 8002628:	2300      	movs	r3, #0
 800262a:	2100      	movs	r1, #0
 800262c:	f7fd ff66 	bl	80004fc <__aeabi_lmul>
 8002630:	0649      	lsls	r1, r1, #25
 8002632:	09c0      	lsrs	r0, r0, #7
 8002634:	4308      	orrs	r0, r1
}
 8002636:	bd10      	pop	{r4, pc}

08002638 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <RTC_IF_StopTimer+0x1c>)
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <RTC_IF_StopTimer+0x20>)
 800263c:	6801      	ldr	r1, [r0, #0]
{
 800263e:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002640:	68ca      	ldr	r2, [r1, #12]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4313      	orrs	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	0049      	lsls	r1, r1, #1
 800264c:	f003 f8d0 	bl	80057f0 <HAL_RTC_DeactivateAlarm>
}
 8002650:	2000      	movs	r0, #0
 8002652:	bd10      	pop	{r4, pc}
 8002654:	2000025c 	.word	0x2000025c
 8002658:	fffffe7f 	.word	0xfffffe7f

0800265c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800265c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800265e:	4e25      	ldr	r6, [pc, #148]	; (80026f4 <RTC_GetCalendarValue+0x98>)
{
 8002660:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002662:	2200      	movs	r2, #0
 8002664:	0030      	movs	r0, r6
{
 8002666:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002668:	f003 fbc2 	bl	8005df0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800266c:	4f22      	ldr	r7, [pc, #136]	; (80026f8 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800266e:	2200      	movs	r2, #0
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	0029      	movs	r1, r5
 8002674:	0030      	movs	r0, r6
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	f003 fbe4 	bl	8005e44 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800267c:	2200      	movs	r2, #0
 800267e:	0021      	movs	r1, r4
 8002680:	0030      	movs	r0, r6
 8002682:	f003 fbb5 	bl	8005df0 <HAL_RTC_GetTime>
 8002686:	466b      	mov	r3, sp
 8002688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800268a:	889b      	ldrh	r3, [r3, #4]
 800268c:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800268e:	429a      	cmp	r2, r3
 8002690:	d1ec      	bne.n	800266c <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002692:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002694:	78ea      	ldrb	r2, [r5, #3]
 8002696:	4e19      	ldr	r6, [pc, #100]	; (80026fc <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002698:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800269a:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800269c:	400a      	ands	r2, r1
 800269e:	4253      	negs	r3, r2
 80026a0:	415a      	adcs	r2, r3
 80026a2:	4253      	negs	r3, r2
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026a6:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80026a8:	4013      	ands	r3, r2
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <RTC_GetCalendarValue+0xa8>)
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80026ac:	3603      	adds	r6, #3
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80026ae:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026b0:	223d      	movs	r2, #61	; 0x3d
 80026b2:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80026b4:	007f      	lsls	r7, r7, #1
 80026b6:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026b8:	3201      	adds	r2, #1
 80026ba:	0fd0      	lsrs	r0, r2, #31
 80026bc:	1880      	adds	r0, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 80026be:	78aa      	ldrb	r2, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80026c0:	08b6      	lsrs	r6, r6, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 80026c2:	3a01      	subs	r2, #1
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026c4:	1040      	asrs	r0, r0, #1
 80026c6:	1996      	adds	r6, r2, r6
 80026c8:	1986      	adds	r6, r0, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80026ca:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 80026cc:	480e      	ldr	r0, [pc, #56]	; (8002708 <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 80026ce:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 80026d0:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80026d2:	20e1      	movs	r0, #225	; 0xe1
 80026d4:	7822      	ldrb	r2, [r4, #0]
 80026d6:	0100      	lsls	r0, r0, #4
 80026d8:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80026da:	223c      	movs	r2, #60	; 0x3c
 80026dc:	7861      	ldrb	r1, [r4, #1]
 80026de:	434a      	muls	r2, r1
 80026e0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80026e2:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80026e4:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80026e6:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	0280      	lsls	r0, r0, #10
 80026ec:	1ac0      	subs	r0, r0, r3
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <RTC_GetCalendarValue+0xb0>)
 80026f0:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80026f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026f4:	2000025c 	.word	0x2000025c
 80026f8:	40002800 	.word	0x40002800
 80026fc:	000005b5 	.word	0x000005b5
 8002700:	ffaaaab0 	.word	0xffaaaab0
 8002704:	0099aaa0 	.word	0x0099aaa0
 8002708:	00015180 	.word	0x00015180
 800270c:	000003ff 	.word	0x000003ff

08002710 <RTC_IF_SetTimerContext>:
{
 8002710:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8002712:	4c04      	ldr	r4, [pc, #16]	; (8002724 <RTC_IF_SetTimerContext+0x14>)
 8002714:	0020      	movs	r0, r4
 8002716:	1d21      	adds	r1, r4, #4
 8002718:	3018      	adds	r0, #24
 800271a:	f7ff ff9f 	bl	800265c <RTC_GetCalendarValue>
 800271e:	6020      	str	r0, [r4, #0]
}
 8002720:	bd10      	pop	{r4, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	200002ac 	.word	0x200002ac

08002728 <RTC_IF_GetTimerElapsedTime>:
{
 8002728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800272a:	4668      	mov	r0, sp
 800272c:	a901      	add	r1, sp, #4
 800272e:	f7ff ff95 	bl	800265c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8002732:	4b02      	ldr	r3, [pc, #8]	; (800273c <RTC_IF_GetTimerElapsedTime+0x14>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	1ac0      	subs	r0, r0, r3
}
 8002738:	b007      	add	sp, #28
 800273a:	bd00      	pop	{pc}
 800273c:	200002ac 	.word	0x200002ac

08002740 <RTC_IF_StartTimer>:
{
 8002740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002742:	b087      	sub	sp, #28
 8002744:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002746:	f7ff ffef 	bl	8002728 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800274a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800274c:	1a30      	subs	r0, r6, r0
 800274e:	2803      	cmp	r0, #3
 8002750:	d800      	bhi.n	8002754 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8002752:	2101      	movs	r1, #1
 8002754:	2002      	movs	r0, #2
 8002756:	f00b f919 	bl	800d98c <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800275a:	f00b f943 	bl	800d9e4 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <RTC_IF_StartTimer+0x114>)
 8002760:	795a      	ldrb	r2, [r3, #5]
 8002762:	791d      	ldrb	r5, [r3, #4]
 8002764:	9201      	str	r2, [sp, #4]
 8002766:	799a      	ldrb	r2, [r3, #6]
 8002768:	689f      	ldr	r7, [r3, #8]
 800276a:	9202      	str	r2, [sp, #8]
 800276c:	79da      	ldrb	r2, [r3, #7]
 800276e:	9203      	str	r2, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002770:	7e5a      	ldrb	r2, [r3, #25]
 8002772:	9204      	str	r2, [sp, #16]
 8002774:	7e9c      	ldrb	r4, [r3, #26]
 8002776:	7edb      	ldrb	r3, [r3, #27]
 8002778:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 800277a:	f7ff ff5d 	bl	8002638 <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <RTC_IF_StartTimer+0x118>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002780:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002782:	1bdf      	subs	r7, r3, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002784:	0d92      	lsrs	r2, r2, #22
 8002786:	18ba      	adds	r2, r7, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8002788:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 800278a:	4e34      	ldr	r6, [pc, #208]	; (800285c <RTC_IF_StartTimer+0x11c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800278c:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 800278e:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002790:	42b3      	cmp	r3, r6
 8002792:	d83f      	bhi.n	8002814 <RTC_IF_StartTimer+0xd4>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002794:	21e1      	movs	r1, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8002796:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002798:	0109      	lsls	r1, r1, #4
 800279a:	428b      	cmp	r3, r1
 800279c:	d23f      	bcs.n	800281e <RTC_IF_StartTimer+0xde>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800279e:	4669      	mov	r1, sp
 80027a0:	888e      	ldrh	r6, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80027a2:	2b3b      	cmp	r3, #59	; 0x3b
 80027a4:	d840      	bhi.n	8002828 <RTC_IF_StartTimer+0xe8>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80027a6:	0a97      	lsrs	r7, r2, #10
 80027a8:	02bc      	lsls	r4, r7, #10
 80027aa:	1b14      	subs	r4, r2, r4
 80027ac:	9a02      	ldr	r2, [sp, #8]
 80027ae:	b2a4      	uxth	r4, r4
 80027b0:	18bf      	adds	r7, r7, r2
 80027b2:	18ff      	adds	r7, r7, r3
 80027b4:	b2bf      	uxth	r7, r7
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80027b6:	2f3b      	cmp	r7, #59	; 0x3b
 80027b8:	d83a      	bhi.n	8002830 <RTC_IF_StartTimer+0xf0>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80027ba:	2e3b      	cmp	r6, #59	; 0x3b
 80027bc:	d83d      	bhi.n	800283a <RTC_IF_StartTimer+0xfa>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80027be:	2d17      	cmp	r5, #23
 80027c0:	d840      	bhi.n	8002844 <RTC_IF_StartTimer+0x104>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80027c2:	9b04      	ldr	r3, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 80027c4:	9a05      	ldr	r2, [sp, #20]
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80027c6:	3b01      	subs	r3, #1
  if (RTC_DateStruct.Year % 4 == 0)
 80027c8:	0792      	lsls	r2, r2, #30
 80027ca:	d140      	bne.n	800284e <RTC_IF_StartTimer+0x10e>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80027cc:	4a24      	ldr	r2, [pc, #144]	; (8002860 <RTC_IF_StartTimer+0x120>)
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80027ce:	5cd1      	ldrb	r1, [r2, r3]
 80027d0:	4288      	cmp	r0, r1
 80027d2:	d902      	bls.n	80027da <RTC_IF_StartTimer+0x9a>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80027d4:	f7fd fe2e 	bl	8000434 <__aeabi_idivmod>
 80027d8:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <RTC_IF_StartTimer+0x118>)
 80027dc:	4921      	ldr	r1, [pc, #132]	; (8002864 <RTC_IF_StartTimer+0x124>)
 80027de:	1b1c      	subs	r4, r3, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80027e0:	23a0      	movs	r3, #160	; 0xa0
 80027e2:	051b      	lsls	r3, r3, #20
 80027e4:	618b      	str	r3, [r1, #24]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80027e6:	1c4b      	adds	r3, r1, #1
 80027e8:	77d8      	strb	r0, [r3, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80027ea:	9b03      	ldr	r3, [sp, #12]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80027ec:	604c      	str	r4, [r1, #4]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80027ee:	70cb      	strb	r3, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027f0:	2400      	movs	r4, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80027f2:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80027f4:	0022      	movs	r2, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80027f6:	005b      	lsls	r3, r3, #1
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80027f8:	481b      	ldr	r0, [pc, #108]	; (8002868 <RTC_IF_StartTimer+0x128>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80027fa:	708f      	strb	r7, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80027fc:	704e      	strb	r6, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80027fe:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002800:	61cc      	str	r4, [r1, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8002802:	614c      	str	r4, [r1, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002804:	624b      	str	r3, [r1, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002806:	60cc      	str	r4, [r1, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002808:	610c      	str	r4, [r1, #16]
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800280a:	f003 fa11 	bl	8005c30 <HAL_RTC_SetAlarm_IT>
}
 800280e:	0020      	movs	r0, r4
 8002810:	b007      	add	sp, #28
 8002812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8002814:	4915      	ldr	r1, [pc, #84]	; (800286c <RTC_IF_StartTimer+0x12c>)
    rtcAlarmDays++;
 8002816:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8002818:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 800281a:	b280      	uxth	r0, r0
 800281c:	e7b8      	b.n	8002790 <RTC_IF_StartTimer+0x50>
    timeoutValue -= SECONDS_IN_1HOUR;
 800281e:	4c14      	ldr	r4, [pc, #80]	; (8002870 <RTC_IF_StartTimer+0x130>)
    rtcAlarmHours++;
 8002820:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8002822:	191b      	adds	r3, r3, r4
    rtcAlarmHours++;
 8002824:	b2ad      	uxth	r5, r5
 8002826:	e7b8      	b.n	800279a <RTC_IF_StartTimer+0x5a>
    rtcAlarmMinutes++;
 8002828:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800282a:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 800282c:	b2b6      	uxth	r6, r6
 800282e:	e7b8      	b.n	80027a2 <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002830:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmMinutes++;
 8002832:	3601      	adds	r6, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002834:	b2bf      	uxth	r7, r7
    rtcAlarmMinutes++;
 8002836:	b2b6      	uxth	r6, r6
 8002838:	e7bd      	b.n	80027b6 <RTC_IF_StartTimer+0x76>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800283a:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmHours++;
 800283c:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800283e:	b2b6      	uxth	r6, r6
    rtcAlarmHours++;
 8002840:	b2ad      	uxth	r5, r5
 8002842:	e7ba      	b.n	80027ba <RTC_IF_StartTimer+0x7a>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002844:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8002846:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002848:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800284a:	b280      	uxth	r0, r0
 800284c:	e7b7      	b.n	80027be <RTC_IF_StartTimer+0x7e>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <RTC_IF_StartTimer+0x134>)
 8002850:	e7bd      	b.n	80027ce <RTC_IF_StartTimer+0x8e>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200002ac 	.word	0x200002ac
 8002858:	000003ff 	.word	0x000003ff
 800285c:	0001517f 	.word	0x0001517f
 8002860:	0800e754 	.word	0x0800e754
 8002864:	20000280 	.word	0x20000280
 8002868:	2000025c 	.word	0x2000025c
 800286c:	fffeae80 	.word	0xfffeae80
 8002870:	fffff1f0 	.word	0xfffff1f0
 8002874:	0800e748 	.word	0x0800e748

08002878 <RTC_IF_GetTime>:
{
 8002878:	b530      	push	{r4, r5, lr}
 800287a:	b087      	sub	sp, #28
 800287c:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800287e:	a901      	add	r1, sp, #4
 8002880:	4668      	mov	r0, sp
 8002882:	f7ff feeb 	bl	800265c <RTC_GetCalendarValue>
 8002886:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002888:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800288a:	227d      	movs	r2, #125	; 0x7d
 800288c:	2300      	movs	r3, #0
 800288e:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002890:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002892:	f7fd fe33 	bl	80004fc <__aeabi_lmul>
 8002896:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8002898:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 800289a:	0aa0      	lsrs	r0, r4, #10
}
 800289c:	b007      	add	sp, #28
 800289e:	bd30      	pop	{r4, r5, pc}

080028a0 <RTC_IF_BkUp_Write_Seconds>:
{
 80028a0:	b510      	push	{r4, lr}
 80028a2:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80028a4:	2100      	movs	r1, #0
 80028a6:	4802      	ldr	r0, [pc, #8]	; (80028b0 <RTC_IF_BkUp_Write_Seconds+0x10>)
 80028a8:	f003 faee 	bl	8005e88 <HAL_RTCEx_BKUPWrite>
}
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	2000025c 	.word	0x2000025c

080028b4 <RTC_IF_BkUp_Write_SubSeconds>:
{
 80028b4:	b510      	push	{r4, lr}
 80028b6:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80028b8:	2101      	movs	r1, #1
 80028ba:	4802      	ldr	r0, [pc, #8]	; (80028c4 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 80028bc:	f003 fae4 	bl	8005e88 <HAL_RTCEx_BKUPWrite>
}
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	2000025c 	.word	0x2000025c

080028c8 <RTC_IF_BkUp_Read_Seconds>:
{
 80028c8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80028ca:	2100      	movs	r1, #0
 80028cc:	4801      	ldr	r0, [pc, #4]	; (80028d4 <RTC_IF_BkUp_Read_Seconds+0xc>)
 80028ce:	f003 fae1 	bl	8005e94 <HAL_RTCEx_BKUPRead>
}
 80028d2:	bd10      	pop	{r4, pc}
 80028d4:	2000025c 	.word	0x2000025c

080028d8 <RTC_IF_BkUp_Read_SubSeconds>:
{
 80028d8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80028da:	2101      	movs	r1, #1
 80028dc:	4801      	ldr	r0, [pc, #4]	; (80028e4 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80028de:	f003 fad9 	bl	8005e94 <HAL_RTCEx_BKUPRead>
}
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	2000025c 	.word	0x2000025c

080028e8 <RTC_IF_Init>:
{
 80028e8:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80028ea:	4c11      	ldr	r4, [pc, #68]	; (8002930 <RTC_IF_Init+0x48>)
{
 80028ec:	b089      	sub	sp, #36	; 0x24
  if (RTC_Initalized == false)
 80028ee:	7823      	ldrb	r3, [r4, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d119      	bne.n	8002928 <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028f4:	3320      	adds	r3, #32
 80028f6:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028f8:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fa:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002900:	f002 feb2 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8002904:	2800      	cmp	r0, #0
 8002906:	d000      	beq.n	800290a <RTC_IF_Init+0x22>
      while (1);
 8002908:	e7fe      	b.n	8002908 <RTC_IF_Init+0x20>
    MX_RTC_Init();
 800290a:	f7ff fded 	bl	80024e8 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	4d08      	ldr	r5, [pc, #32]	; (8002934 <RTC_IF_Init+0x4c>)
 8002912:	0049      	lsls	r1, r1, #1
 8002914:	0028      	movs	r0, r5
 8002916:	f002 ff6b 	bl	80057f0 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800291a:	0028      	movs	r0, r5
 800291c:	f003 fac0 	bl	8005ea0 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8002920:	f7ff fef6 	bl	8002710 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8002924:	2301      	movs	r3, #1
 8002926:	7023      	strb	r3, [r4, #0]
}
 8002928:	2000      	movs	r0, #0
 800292a:	b009      	add	sp, #36	; 0x24
 800292c:	bd30      	pop	{r4, r5, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	200002a8 	.word	0x200002a8
 8002934:	2000025c 	.word	0x2000025c

08002938 <RTC_IF_GetTimerValue>:
{
 8002938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 800293a:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <RTC_IF_GetTimerValue+0x18>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4283      	cmp	r3, r0
 8002942:	d003      	beq.n	800294c <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002944:	4668      	mov	r0, sp
 8002946:	a901      	add	r1, sp, #4
 8002948:	f7ff fe88 	bl	800265c <RTC_GetCalendarValue>
}
 800294c:	b007      	add	sp, #28
 800294e:	bd00      	pop	{pc}
 8002950:	200002a8 	.word	0x200002a8

08002954 <RTC_IF_DelayMs>:
{
 8002954:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002956:	227d      	movs	r2, #125	; 0x7d
 8002958:	2300      	movs	r3, #0
 800295a:	0e41      	lsrs	r1, r0, #25
 800295c:	01c0      	lsls	r0, r0, #7
 800295e:	f7fd fdad 	bl	80004bc <__aeabi_uldivmod>
 8002962:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002964:	f7ff ffe8 	bl	8002938 <RTC_IF_GetTimerValue>
 8002968:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800296a:	f7ff ffe5 	bl	8002938 <RTC_IF_GetTimerValue>
 800296e:	1b40      	subs	r0, r0, r5
 8002970:	42a0      	cmp	r0, r4
 8002972:	d300      	bcc.n	8002976 <RTC_IF_DelayMs+0x22>
}
 8002974:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	e7f7      	b.n	800296a <RTC_IF_DelayMs+0x16>

0800297a <HAL_RTC_AlarmAEventCallback>:
{
 800297a:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 800297c:	f00b fc30 	bl	800e1e0 <UTIL_TIMER_IRQ_Handler>
}
 8002980:	bd10      	pop	{r4, pc}

08002982 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002982:	4770      	bx	lr

08002984 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002984:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002986:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800298a:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 800298c:	f001 f9a0 	bl	8003cd0 <SX1262DVK1CAS_RADIO_IoDeInit>
//  HAL_ADC_MspDeInit(&hadc1);
  //APP_LOG(TS_ON, VLEVEL_M, "\r\nAntes de SystemLowClock_Config\r\n");
  //SystemClock_Config();
  //APP_LOG(TS_ON, VLEVEL_M, "\r\nDepois de SystemLowClock_Config\r\n");
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8002990:	2304      	movs	r3, #4
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <PWR_EnterStopMode+0x24>)
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	430b      	orrs	r3, r1
 8002998:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299a:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800299e:	2101      	movs	r1, #1
 80029a0:	0008      	movs	r0, r1
 80029a2:	f002 fa99 	bl	8004ed8 <HAL_PWR_EnterSTOPMode>
}
 80029a6:	bd10      	pop	{r4, pc}
 80029a8:	40007000 	.word	0x40007000

080029ac <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80029ac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80029b2:	b672      	cpsid	i
	//APP_LOG(TS_OFF, VLEVEL_M, "\nA\n");
  UTILS_ENTER_CRITICAL_SECTION();
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 1\r\n");
  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();//__HAL_RCC_MSI_ENABLE();//__HAL_RCC_HSI_ENABLE();
 80029b4:	2201      	movs	r2, #1
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <PWR_ExitStopMode+0x4c>)
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}//while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}//while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80029be:	2204      	movs	r2, #4
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	4211      	tst	r1, r2
 80029c4:	d0fc      	beq.n	80029c0 <PWR_ExitStopMode+0x14>
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 2\r\n");
  //__HAL_RCC_MSI_ENABLE();
  //while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 3\r\n");
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	0452      	lsls	r2, r2, #17
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0492      	lsls	r2, r2, #18
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	4211      	tst	r1, r2
 80029d8:	d0fc      	beq.n	80029d4 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80029da:	2203      	movs	r2, #3
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {};//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80029e0:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80029e2:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {};//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	400a      	ands	r2, r1
 80029e8:	2a0c      	cmp	r2, #12
 80029ea:	d1fb      	bne.n	80029e4 <PWR_ExitStopMode+0x38>

  //SystemClock_Config();
 // APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 4\r\n");
  /* initializes the peripherals */
  Sx_Board_IoInit();
 80029ec:	f001 f8e2 	bl	8003bb4 <SX1262DVK1CAS_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f0:	f384 8810 	msr	PRIMASK, r4

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
  UTILS_EXIT_CRITICAL_SECTION();
  //APP_LOG(TS_OFF, VLEVEL_M, "\nB\n");
}
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000

080029fc <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80029fc:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80029fe:	2101      	movs	r1, #1
 8002a00:	2000      	movs	r0, #0
 8002a02:	f002 fa31 	bl	8004e68 <HAL_PWR_EnterSLEEPMode>
}
 8002a06:	bd10      	pop	{r4, pc}

08002a08 <PWR_ExitSleepMode>:
 8002a08:	4770      	bx	lr

08002a0a <PWR_ExitOffMode>:
 8002a0a:	4770      	bx	lr

08002a0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_MspInit+0x28>)
 8002a10:	055b      	lsls	r3, r3, #21
 8002a12:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002a14:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002a1a:	f002 fa1d 	bl	8004e58 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8002a1e:	f002 fa9d 	bl	8004f5c <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002a22:	2308      	movs	r3, #8
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_MspInit+0x2c>)
 8002a26:	6811      	ldr	r1, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002a2c:	f002 fa8c 	bl	8004f48 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40022000 	.word	0x40022000

08002a3c <HAL_WWDG_MspInit>:
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
  if(hwwdg->Instance==WWDG)
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_WWDG_MspInit+0x18>)
 8002a3e:	6802      	ldr	r2, [r0, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d105      	bne.n	8002a50 <HAL_WWDG_MspInit+0x14>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_WWDG_MspInit+0x1c>)
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8002a50:	4770      	bx	lr
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	40002c00 	.word	0x40002c00
 8002a58:	40021000 	.word	0x40021000

08002a5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a5c:	4770      	bx	lr

08002a5e <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8002a5e:	46c0      	nop			; (mov r8, r8)
  while (1)
 8002a60:	e7fd      	b.n	8002a5e <HardFault_Handler>

08002a62 <SVC_Handler>:
 8002a62:	4770      	bx	lr

08002a64 <PendSV_Handler>:
 8002a64:	4770      	bx	lr

08002a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a66:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a68:	f001 fa1e 	bl	8003ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6c:	bd10      	pop	{r4, pc}

08002a6e <EXTI0_1_IRQHandler>:
 8002a6e:	4770      	bx	lr

08002a70 <EXTI2_3_IRQHandler>:
 8002a70:	4770      	bx	lr
	...

08002a74 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8002a74:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_15);
 8002a76:	4809      	ldr	r0, [pc, #36]	; (8002a9c <EXTI4_15_IRQHandler+0x28>)
 8002a78:	f001 ff48 	bl	800490c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_6);
 8002a7c:	4808      	ldr	r0, [pc, #32]	; (8002aa0 <EXTI4_15_IRQHandler+0x2c>)
 8002a7e:	f001 ff45 	bl	800490c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_7);
 8002a82:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <EXTI4_15_IRQHandler+0x30>)
 8002a84:	f001 ff42 	bl	800490c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_8);
 8002a88:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <EXTI4_15_IRQHandler+0x34>)
 8002a8a:	f001 ff3f 	bl	800490c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_13);
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <EXTI4_15_IRQHandler+0x38>)
 8002a90:	f001 ff3c 	bl	800490c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_14);
 8002a94:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <EXTI4_15_IRQHandler+0x3c>)
 8002a96:	f001 ff39 	bl	800490c <HAL_EXTI_IRQHandler>
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
#endif
}
 8002a9a:	bd10      	pop	{r4, pc}
 8002a9c:	200005d0 	.word	0x200005d0
 8002aa0:	20000470 	.word	0x20000470
 8002aa4:	20000460 	.word	0x20000460
 8002aa8:	20000468 	.word	0x20000468
 8002aac:	20000458 	.word	0x20000458
 8002ab0:	20000450 	.word	0x20000450

08002ab4 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002ab4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
	  HAL_DMA_IRQHandler(husart2.hdmatx);
 8002ab6:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002ab8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002aba:	f001 fe7c 	bl	80047b6 <HAL_DMA_IRQHandler>
  //HAL_DMA_IRQHandler(&hdma_rx);
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	20000534 	.word	0x20000534

08002ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8002ac6:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <USART2_IRQHandler+0xc>)
 8002ac8:	f003 fcba 	bl	8006440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002acc:	bd10      	pop	{r4, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	20000534 	.word	0x20000534

08002ad4 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8002ad4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ad6:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <RTC_IRQHandler+0xc>)
 8002ad8:	f002 feec 	bl	80058b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	2000025c 	.word	0x2000025c

08002ae4 <PVD_IRQHandler>:

/* USER CODE BEGIN 1 */
void PVD_IRQHandler(void){
 8002ae4:	b510      	push	{r4, lr}
	HAL_PWR_PVD_IRQHandler();
 8002ae6:	f002 fa21 	bl	8004f2c <HAL_PWR_PVD_IRQHandler>
}
 8002aea:	bd10      	pop	{r4, pc}

08002aec <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8002aec:	b40c      	push	{r2, r3}
 8002aee:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002af0:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8002af2:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8002af6:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002af8:	f00b f852 	bl	800dba0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002afc:	b003      	add	sp, #12
 8002afe:	bc08      	pop	{r3}
 8002b00:	b002      	add	sp, #8
 8002b02:	4718      	bx	r3
 8002b04:	0800e7b8 	.word	0x0800e7b8

08002b08 <TimestampNow>:
{
 8002b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002b0a:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8002b0c:	ae02      	add	r6, sp, #8
 8002b0e:	0030      	movs	r0, r6
{
 8002b10:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002b12:	f00b f807 	bl	800db24 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002b16:	2204      	movs	r2, #4
 8002b18:	5eb3      	ldrsh	r3, [r6, r2]
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	0020      	movs	r0, r4
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <TimestampNow+0x2c>)
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	9b02      	ldr	r3, [sp, #8]
 8002b24:	f7ff ffe2 	bl	8002aec <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8002b28:	0020      	movs	r0, r4
 8002b2a:	f7fd faed 	bl	8000108 <strlen>
 8002b2e:	8028      	strh	r0, [r5, #0]
}
 8002b30:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	0800e7b8 	.word	0x0800e7b8

08002b38 <SystemApp_Init>:
{
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3c:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	2604      	movs	r6, #4
{
 8002b40:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8002b42:	f00b fa15 	bl	800df70 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b46:	220c      	movs	r2, #12
 8002b48:	2100      	movs	r1, #0
 8002b4a:	a807      	add	r0, sp, #28
 8002b4c:	f00b fd27 	bl	800e59e <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b50:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	4c2b      	ldr	r4, [pc, #172]	; (8002c00 <SystemApp_Init+0xc8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	432b      	orrs	r3, r5
 8002b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b62:	402b      	ands	r3, r5
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b6a:	433b      	orrs	r3, r7
 8002b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b70:	403b      	ands	r3, r7
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b78:	4333      	orrs	r3, r6
 8002b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b7e:	4033      	ands	r3, r6
 8002b80:	9303      	str	r3, [sp, #12]
 8002b82:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b86:	4313      	orrs	r3, r2
 8002b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	9304      	str	r3, [sp, #16]
 8002b90:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b92:	2303      	movs	r3, #3
 8002b94:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <SystemApp_Init+0xcc>)
 8002b98:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f002 f819 	bl	8004bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <SystemApp_Init+0xd0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	a905      	add	r1, sp, #20
 8002ba2:	481a      	ldr	r0, [pc, #104]	; (8002c0c <SystemApp_Init+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002ba4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f002 f813 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002baa:	a905      	add	r1, sp, #20
 8002bac:	4818      	ldr	r0, [pc, #96]	; (8002c10 <SystemApp_Init+0xd8>)
 8002bae:	f002 f80f 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bb2:	a905      	add	r1, sp, #20
 8002bb4:	4817      	ldr	r0, [pc, #92]	; (8002c14 <SystemApp_Init+0xdc>)
 8002bb6:	f002 f80b 	bl	8004bd0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002bba:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bbe:	43ab      	bics	r3, r5
 8002bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bc4:	43bb      	bics	r3, r7
 8002bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002bc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bca:	43b3      	bics	r3, r6
 8002bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	62e3      	str	r3, [r4, #44]	; 0x2c
  UTIL_ADV_TRACE_Init();
 8002bd4:	f00b fb96 	bl	800e304 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002bd8:	480f      	ldr	r0, [pc, #60]	; (8002c18 <SystemApp_Init+0xe0>)
 8002bda:	f00b fbb5 	bl	800e348 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002bde:	0028      	movs	r0, r5
 8002be0:	f00b fbb8 	bl	800e354 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002be4:	f7ff fb86 	bl	80022f4 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8002be8:	f001 f920 	bl	8003e2c <SX1262DVK1CAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002bec:	f000 ffe2 	bl	8003bb4 <SX1262DVK1CAS_RADIO_IoInit>
  UTIL_LPM_Init();
 8002bf0:	f00a fec2 	bl	800d978 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002bf4:	0029      	movs	r1, r5
 8002bf6:	0028      	movs	r0, r5
 8002bf8:	f00a fede 	bl	800d9b8 <UTIL_LPM_SetOffMode>
}
 8002bfc:	b00b      	add	sp, #44	; 0x2c
 8002bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	00009fff 	.word	0x00009fff
 8002c08:	0000ffff 	.word	0x0000ffff
 8002c0c:	50000400 	.word	0x50000400
 8002c10:	50000800 	.word	0x50000800
 8002c14:	50001c00 	.word	0x50001c00
 8002c18:	08002b09 	.word	0x08002b09

08002c1c <UTIL_SEQ_Idle>:
{
 8002c1c:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8002c1e:	f00a fef5 	bl	800da0c <UTIL_LPM_EnterLowPower>
}
 8002c22:	bd10      	pop	{r4, pc}

08002c24 <GetBatteryLevel>:
{
 8002c24:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002c26:	f7ff fbc3 	bl	80023b0 <SYS_GetBatteryLevel>
  batteryLevel = batteryLevelmV/100;
 8002c2a:	2164      	movs	r1, #100	; 0x64
 8002c2c:	f7fd fa92 	bl	8000154 <__udivsi3>
 8002c30:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8002c32:	2201      	movs	r2, #1
 8002c34:	2100      	movs	r1, #0
 8002c36:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <GetBatteryLevel+0x20>)
 8002c38:	9400      	str	r4, [sp, #0]
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	f00b fbd2 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002c40:	0020      	movs	r0, r4
 8002c42:	bd16      	pop	{r1, r2, r4, pc}
 8002c44:	0800e7c1 	.word	0x0800e7c1

08002c48 <GetTemperatureLevel>:
}
 8002c48:	2000      	movs	r0, #0
 8002c4a:	4770      	bx	lr

08002c4c <GetUniqueId>:
void GetUniqueId(uint8_t *id){
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	1e04      	subs	r4, r0, #0
  if(id == NULL){
 8002c50:	d016      	beq.n	8002c80 <GetUniqueId+0x34>
  uid.words[0] = HAL_GetUIDw0();
 8002c52:	f001 f935 	bl	8003ec0 <HAL_GetUIDw0>
 8002c56:	0005      	movs	r5, r0
  uid.words[1] = HAL_GetUIDw1();
 8002c58:	f001 f938 	bl	8003ecc <HAL_GetUIDw1>
  uid.words[2] = HAL_GetUIDw2();
 8002c5c:	f001 f93c 	bl	8003ed8 <HAL_GetUIDw2>
  id[0] = uid.words[0] >> 24;
 8002c60:	0e2b      	lsrs	r3, r5, #24
 8002c62:	7023      	strb	r3, [r4, #0]
  id[1] = uid.words[0] >> 16;
 8002c64:	0c2b      	lsrs	r3, r5, #16
 8002c66:	7063      	strb	r3, [r4, #1]
  id[2] = uid.words[0] >> 8;
 8002c68:	0a2b      	lsrs	r3, r5, #8
 8002c6a:	70a3      	strb	r3, [r4, #2]
  id[4] = devaddr >> 24;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <GetUniqueId+0x38>)
  id[3] = uid.words[0];
 8002c6e:	70e5      	strb	r5, [r4, #3]
  id[4] = devaddr >> 24;
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e1a      	lsrs	r2, r3, #24
 8002c74:	7122      	strb	r2, [r4, #4]
  id[5] = devaddr >> 16;
 8002c76:	0c1a      	lsrs	r2, r3, #16
 8002c78:	7162      	strb	r2, [r4, #5]
  id[6] = devaddr >> 8;
 8002c7a:	0a1a      	lsrs	r2, r3, #8
 8002c7c:	71a2      	strb	r2, [r4, #6]
  id[7] = devaddr;
 8002c7e:	71e3      	strb	r3, [r4, #7]
}
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	200002c8 	.word	0x200002c8

08002c88 <SetDevAddr>:
	devaddr = daddr;
 8002c88:	4b01      	ldr	r3, [pc, #4]	; (8002c90 <SetDevAddr+0x8>)
 8002c8a:	6018      	str	r0, [r3, #0]
}
 8002c8c:	4770      	bx	lr
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	200002c8 	.word	0x200002c8

08002c94 <GetDevAddr>:
	return devaddr;
 8002c94:	4b01      	ldr	r3, [pc, #4]	; (8002c9c <GetDevAddr+0x8>)
 8002c96:	6818      	ldr	r0, [r3, #0]
}
 8002c98:	4770      	bx	lr
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200002c8 	.word	0x200002c8

08002ca0 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002ca0:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	2004      	movs	r0, #4
 8002ca6:	f00a fe71 	bl	800d98c <UTIL_LPM_SetStopMode>
}
 8002caa:	bd10      	pop	{r4, pc}

08002cac <UTIL_ADV_TRACE_PostSendHook>:
{
 8002cac:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2004      	movs	r0, #4
 8002cb2:	f00a fe6b 	bl	800d98c <UTIL_LPM_SetStopMode>
}
 8002cb6:	bd10      	pop	{r4, pc}

08002cb8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002cb8:	2000      	movs	r0, #0
 8002cba:	4770      	bx	lr

08002cbc <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8002cbc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002cbe:	f7ff fe3b 	bl	8002938 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002cc2:	bd10      	pop	{r4, pc}

08002cc4 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002cc4:	b507      	push	{r0, r1, r2, lr}
 8002cc6:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002cc8:	9801      	ldr	r0, [sp, #4]
 8002cca:	f7ff fe43 	bl	8002954 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002cce:	bd07      	pop	{r0, r1, r2, pc}

08002cd0 <OnP2PRxDone>:
}

/*
 * Callback de Recepcao P2P *nao usado
 */
static void OnP2PRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 8002cd0:	b510      	push	{r4, lr}
  //APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
  //APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
  Radio.Sleep();
 8002cd2:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <OnP2PRxDone+0xc>)
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	4798      	blx	r3
}
 8002cd8:	bd10      	pop	{r4, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	0800f22c 	.word	0x0800f22c

08002ce0 <OnP2PRxTimeout>:
}

/*
 * Callback para timeout de recepcao P2P *nao usado
 */
static void OnP2PRxTimeout(void){
 8002ce0:	b510      	push	{r4, lr}
  //APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
  Radio.Sleep();
 8002ce2:	4b02      	ldr	r3, [pc, #8]	; (8002cec <OnP2PRxTimeout+0xc>)
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	4798      	blx	r3
}
 8002ce8:	bd10      	pop	{r4, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	0800f22c 	.word	0x0800f22c

08002cf0 <OnP2PRxError>:
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	f7ff fff5 	bl	8002ce0 <OnP2PRxTimeout>
 8002cf6:	bd10      	pop	{r4, pc}

08002cf8 <OnTxData>:

/*
 * Callback para transmissao LoRaWAN finalizada
 */
static void OnTxData(LmHandlerTxParams_t *params){
	app.stt.lora_state = LORA_IDLE;
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <OnTxData+0xc>)
 8002cfc:	332a      	adds	r3, #42	; 0x2a
 8002cfe:	701a      	strb	r2, [r3, #0]
}
 8002d00:	4770      	bx	lr
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	20000044 	.word	0x20000044

08002d08 <OnJoinRequest>:
/*
 * Callback para Join LoRaWAN *nao usado
 */
static void OnJoinRequest(LmHandlerJoinParams_t *joinParams){

}
 8002d08:	4770      	bx	lr
	...

08002d0c <ReadInput4>:
void ReadInput4(void){
 8002d0c:	b510      	push	{r4, lr}
	tick = UTIL_TIMER_GetCurrentTime();
 8002d0e:	f00b f957 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
	if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <ReadInput4+0x34>)
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	1ac3      	subs	r3, r0, r3
 8002d18:	2b63      	cmp	r3, #99	; 0x63
 8002d1a:	d90b      	bls.n	8002d34 <ReadInput4+0x28>
		last_tick = tick;
 8002d1c:	6010      	str	r0, [r2, #0]
		app.stt.btnCnt++;
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <ReadInput4+0x38>)
		UTIL_TIMER_Stop(&btnTimeOutTimer);
 8002d20:	4c09      	ldr	r4, [pc, #36]	; (8002d48 <ReadInput4+0x3c>)
		app.stt.btnCnt++;
 8002d22:	8a13      	ldrh	r3, [r2, #16]
		UTIL_TIMER_Stop(&btnTimeOutTimer);
 8002d24:	0020      	movs	r0, r4
		app.stt.btnCnt++;
 8002d26:	3301      	adds	r3, #1
 8002d28:	8213      	strh	r3, [r2, #16]
		UTIL_TIMER_Stop(&btnTimeOutTimer);
 8002d2a:	f00b f98d 	bl	800e048 <UTIL_TIMER_Stop>
		UTIL_TIMER_Start(&btnTimeOutTimer);
 8002d2e:	0020      	movs	r0, r4
 8002d30:	f00b f9de 	bl	800e0f0 <UTIL_TIMER_Start>
	HAL_EXTI_ClearPending(&hApp_DIO_exti[4], EXTI_TRIGGER_RISING_FALLING);
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <ReadInput4+0x40>)
 8002d36:	2103      	movs	r1, #3
 8002d38:	3020      	adds	r0, #32
 8002d3a:	f001 fdf9 	bl	8004930 <HAL_EXTI_ClearPending>
}
 8002d3e:	bd10      	pop	{r4, pc}
 8002d40:	200004a0 	.word	0x200004a0
 8002d44:	20000044 	.word	0x20000044
 8002d48:	20000438 	.word	0x20000438
 8002d4c:	20000450 	.word	0x20000450

08002d50 <ReadInput3>:
void ReadInput3(void){
 8002d50:	b510      	push	{r4, lr}
	tick = UTIL_TIMER_GetCurrentTime();
 8002d52:	f00b f935 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
	if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <ReadInput3+0x28>)
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	1ac3      	subs	r3, r0, r3
 8002d5c:	2b63      	cmp	r3, #99	; 0x63
 8002d5e:	d904      	bls.n	8002d6a <ReadInput3+0x1a>
		app.cfg.cfg.pulse_count[3]++;
 8002d60:	4906      	ldr	r1, [pc, #24]	; (8002d7c <ReadInput3+0x2c>)
		last_tick = tick;
 8002d62:	6010      	str	r0, [r2, #0]
		app.cfg.cfg.pulse_count[3]++;
 8002d64:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002d66:	3301      	adds	r3, #1
 8002d68:	638b      	str	r3, [r1, #56]	; 0x38
	HAL_EXTI_ClearPending(&hApp_DIO_exti[3], EXTI_TRIGGER_RISING_FALLING);
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <ReadInput3+0x30>)
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	3018      	adds	r0, #24
 8002d70:	f001 fdde 	bl	8004930 <HAL_EXTI_ClearPending>
}
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	2000049c 	.word	0x2000049c
 8002d7c:	20000044 	.word	0x20000044
 8002d80:	20000450 	.word	0x20000450

08002d84 <ReadInput2>:
void ReadInput2(void){
 8002d84:	b510      	push	{r4, lr}
	tick = UTIL_TIMER_GetCurrentTime();
 8002d86:	f00b f91b 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
	if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <ReadInput2+0x28>)
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	1ac3      	subs	r3, r0, r3
 8002d90:	2b63      	cmp	r3, #99	; 0x63
 8002d92:	d904      	bls.n	8002d9e <ReadInput2+0x1a>
		app.cfg.cfg.pulse_count[2]++;
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <ReadInput2+0x2c>)
		last_tick = tick;
 8002d96:	6010      	str	r0, [r2, #0]
		app.cfg.cfg.pulse_count[2]++;
 8002d98:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	634b      	str	r3, [r1, #52]	; 0x34
	HAL_EXTI_ClearPending(&hApp_DIO_exti[2], EXTI_TRIGGER_RISING_FALLING);
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <ReadInput2+0x30>)
 8002da0:	2103      	movs	r1, #3
 8002da2:	3010      	adds	r0, #16
 8002da4:	f001 fdc4 	bl	8004930 <HAL_EXTI_ClearPending>
}
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	20000498 	.word	0x20000498
 8002db0:	20000044 	.word	0x20000044
 8002db4:	20000450 	.word	0x20000450

08002db8 <ReadInput1>:
void ReadInput1(void){
 8002db8:	b510      	push	{r4, lr}
	tick = UTIL_TIMER_GetCurrentTime();
 8002dba:	f00b f901 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
	if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <ReadInput1+0x28>)
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	1ac3      	subs	r3, r0, r3
 8002dc4:	2b63      	cmp	r3, #99	; 0x63
 8002dc6:	d904      	bls.n	8002dd2 <ReadInput1+0x1a>
		app.cfg.cfg.pulse_count[1]++;
 8002dc8:	4906      	ldr	r1, [pc, #24]	; (8002de4 <ReadInput1+0x2c>)
		last_tick = tick;
 8002dca:	6010      	str	r0, [r2, #0]
		app.cfg.cfg.pulse_count[1]++;
 8002dcc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002dce:	3301      	adds	r3, #1
 8002dd0:	630b      	str	r3, [r1, #48]	; 0x30
	HAL_EXTI_ClearPending(&hApp_DIO_exti[1], EXTI_TRIGGER_RISING_FALLING);
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <ReadInput1+0x30>)
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	3008      	adds	r0, #8
 8002dd8:	f001 fdaa 	bl	8004930 <HAL_EXTI_ClearPending>
}
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	20000494 	.word	0x20000494
 8002de4:	20000044 	.word	0x20000044
 8002de8:	20000450 	.word	0x20000450

08002dec <ReadInput0>:
void ReadInput0(void){
 8002dec:	b510      	push	{r4, lr}
	tick = UTIL_TIMER_GetCurrentTime();
 8002dee:	f00b f8e7 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
	if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <ReadInput0+0x24>)
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	1ac3      	subs	r3, r0, r3
 8002df8:	2b63      	cmp	r3, #99	; 0x63
 8002dfa:	d904      	bls.n	8002e06 <ReadInput0+0x1a>
		app.cfg.cfg.pulse_count[0]++;
 8002dfc:	4905      	ldr	r1, [pc, #20]	; (8002e14 <ReadInput0+0x28>)
		last_tick = tick;
 8002dfe:	6010      	str	r0, [r2, #0]
		app.cfg.cfg.pulse_count[0]++;
 8002e00:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002e02:	3301      	adds	r3, #1
 8002e04:	62cb      	str	r3, [r1, #44]	; 0x2c
	HAL_EXTI_ClearPending(&hApp_DIO_exti[0], EXTI_TRIGGER_RISING_FALLING);
 8002e06:	2103      	movs	r1, #3
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <ReadInput0+0x2c>)
 8002e0a:	f001 fd91 	bl	8004930 <HAL_EXTI_ClearPending>
}
 8002e0e:	bd10      	pop	{r4, pc}
 8002e10:	20000490 	.word	0x20000490
 8002e14:	20000044 	.word	0x20000044
 8002e18:	20000450 	.word	0x20000450

08002e1c <OnP2PTxTimeout>:
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8002e1c:	2201      	movs	r2, #1
static void OnP2PTxTimeout(void){
 8002e1e:	b510      	push	{r4, lr}
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8002e20:	0010      	movs	r0, r2
 8002e22:	2100      	movs	r1, #0
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <OnP2PTxTimeout+0x20>)
 8002e26:	f00b fadd 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Sleep();
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <OnP2PTxTimeout+0x24>)
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	4798      	blx	r3
	app.stt.lora_state = LORA_IDLE;
 8002e30:	2200      	movs	r2, #0
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <OnP2PTxTimeout+0x28>)
 8002e34:	332a      	adds	r3, #42	; 0x2a
 8002e36:	701a      	strb	r2, [r3, #0]
}
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	0800e7cc 	.word	0x0800e7cc
 8002e40:	0800f22c 	.word	0x0800f22c
 8002e44:	20000044 	.word	0x20000044

08002e48 <OnRxData>:
	APP_LOG(TS_OFF, VLEVEL_L, "Downlink recebido. Rssi: %d\r\n", params->Rssi);
 8002e48:	2303      	movs	r3, #3
static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params){
 8002e4a:	b507      	push	{r0, r1, r2, lr}
	APP_LOG(TS_OFF, VLEVEL_L, "Downlink recebido. Rssi: %d\r\n", params->Rssi);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	56cb      	ldrsb	r3, [r1, r3]
 8002e50:	2001      	movs	r0, #1
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	0011      	movs	r1, r2
 8002e56:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <OnRxData+0x18>)
 8002e58:	f00b fac4 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002e5c:	bd07      	pop	{r0, r1, r2, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	0800e7da 	.word	0x0800e7da

08002e64 <OnMacProcessNotify>:

/*
 * Callback para interrupcoes LoRaWAN
 */
static void OnMacProcessNotify(void){
 8002e64:	b510      	push	{r4, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002e66:	2100      	movs	r1, #0
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f00a ffc3 	bl	800ddf4 <UTIL_SEQ_SetTask>
}
 8002e6e:	bd10      	pop	{r4, pc}

08002e70 <OnP2PTxDone>:
static void OnP2PTxDone(void){
 8002e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8002e72:	2201      	movs	r2, #1
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <OnP2PTxDone+0x48>)
 8002e76:	2100      	movs	r1, #0
 8002e78:	0010      	movs	r0, r2
 8002e7a:	f00b fab3 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  app.stt.tx_cnt++;
 8002e7e:	4c0f      	ldr	r4, [pc, #60]	; (8002ebc <OnP2PTxDone+0x4c>)
 8002e80:	4d0f      	ldr	r5, [pc, #60]	; (8002ec0 <OnP2PTxDone+0x50>)
 8002e82:	8a63      	ldrh	r3, [r4, #18]
 8002e84:	3301      	adds	r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	8263      	strh	r3, [r4, #18]
  if(app.stt.tx_cnt >= SEND_TIMES){
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <OnP2PTxDone+0x2c>
	Radio.Sleep();
 8002e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	app.stt.lora_state = LORA_IDLE;
 8002e90:	342a      	adds	r4, #42	; 0x2a
	Radio.Sleep();
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	4798      	blx	r3
	app.stt.lora_state = LORA_IDLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	7023      	strb	r3, [r4, #0]
}
 8002e9a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	Radio.SetChannel(P2P_RF_FREQUENCY);
 8002e9c:	68eb      	ldr	r3, [r5, #12]
 8002e9e:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <OnP2PTxDone+0x54>)
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	4798      	blx	r3
	Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <OnP2PTxDone+0x58>)
 8002ea6:	4809      	ldr	r0, [pc, #36]	; (8002ecc <OnP2PTxDone+0x5c>)
 8002ea8:	8819      	ldrh	r1, [r3, #0]
 8002eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002eac:	3902      	subs	r1, #2
 8002eae:	b2c9      	uxtb	r1, r1
 8002eb0:	3002      	adds	r0, #2
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	4798      	blx	r3
}
 8002eb6:	e7f0      	b.n	8002e9a <OnP2PTxDone+0x2a>
 8002eb8:	0800e7f8 	.word	0x0800e7f8
 8002ebc:	20000044 	.word	0x20000044
 8002ec0:	0800f22c 	.word	0x0800f22c
 8002ec4:	3689cac0 	.word	0x3689cac0
 8002ec8:	20000042 	.word	0x20000042
 8002ecc:	200003d8 	.word	0x200003d8

08002ed0 <SendTxData>:
static void SendTxData(void){
 8002ed0:	b507      	push	{r0, r1, r2, lr}
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002ed2:	2100      	movs	r1, #0
	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)){
 8002ed4:	4806      	ldr	r0, [pc, #24]	; (8002ef0 <SendTxData+0x20>)
 8002ed6:	000b      	movs	r3, r1
 8002ed8:	aa01      	add	r2, sp, #4
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002eda:	9101      	str	r1, [sp, #4]
	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)){
 8002edc:	f004 ff46 	bl	8007d6c <LmHandlerSend>
 8002ee0:	1e01      	subs	r1, r0, #0
 8002ee2:	d104      	bne.n	8002eee <SendTxData+0x1e>
		APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <SendTxData+0x24>)
 8002ee8:	0010      	movs	r0, r2
 8002eea:	f00b fa7b 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002eee:	bd07      	pop	{r0, r1, r2, pc}
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	0800e803 	.word	0x0800e803

08002ef8 <EEPROM_Write>:
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002ef8:	2201      	movs	r2, #1
void EEPROM_Write(uint32_t d, uint32_t *addr){
 8002efa:	b510      	push	{r4, lr}
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <EEPROM_Write+0x2c>)
 8002efe:	699c      	ldr	r4, [r3, #24]
 8002f00:	4214      	tst	r4, r2
 8002f02:	d1fc      	bne.n	8002efe <EEPROM_Write+0x6>
	if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0){
 8002f04:	685c      	ldr	r4, [r3, #4]
 8002f06:	4214      	tst	r4, r2
 8002f08:	d003      	beq.n	8002f12 <EEPROM_Write+0x1a>
		FLASH->PEKEYR = FLASH_PEKEY1;
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <EEPROM_Write+0x30>)
 8002f0c:	60da      	str	r2, [r3, #12]
		FLASH->PEKEYR = FLASH_PEKEY2;
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <EEPROM_Write+0x34>)
 8002f10:	60da      	str	r2, [r3, #12]
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002f12:	2201      	movs	r2, #1
	*addr = d;
 8002f14:	6008      	str	r0, [r1, #0]
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002f16:	6999      	ldr	r1, [r3, #24]
 8002f18:	4211      	tst	r1, r2
 8002f1a:	d1fc      	bne.n	8002f16 <EEPROM_Write+0x1e>
	FLASH->PECR |= FLASH_PECR_PELOCK;
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
}
 8002f22:	bd10      	pop	{r4, pc}
 8002f24:	40022000 	.word	0x40022000
 8002f28:	89abcdef 	.word	0x89abcdef
 8002f2c:	02030405 	.word	0x02030405

08002f30 <P2P_Radio_Init>:
void P2P_Radio_Init(void){
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(app.stt.lora_state == LORA_IDLE){
 8002f32:	4e1d      	ldr	r6, [pc, #116]	; (8002fa8 <P2P_Radio_Init+0x78>)
void P2P_Radio_Init(void){
 8002f34:	b08d      	sub	sp, #52	; 0x34
	if(app.stt.lora_state == LORA_IDLE){
 8002f36:	362a      	adds	r6, #42	; 0x2a
 8002f38:	960a      	str	r6, [sp, #40]	; 0x28
 8002f3a:	7834      	ldrb	r4, [r6, #0]
 8002f3c:	2c00      	cmp	r4, #0
 8002f3e:	d131      	bne.n	8002fa4 <P2P_Radio_Init+0x74>
		app.stt.lora_state = LORA_BUSY;
 8002f40:	2501      	movs	r5, #1
		RadioEvents.TxDone = OnP2PTxDone;
 8002f42:	481a      	ldr	r0, [pc, #104]	; (8002fac <P2P_Radio_Init+0x7c>)
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <P2P_Radio_Init+0x80>)
		Radio.Init(&RadioEvents);
 8002f46:	4f1b      	ldr	r7, [pc, #108]	; (8002fb4 <P2P_Radio_Init+0x84>)
		RadioEvents.TxDone = OnP2PTxDone;
 8002f48:	6003      	str	r3, [r0, #0]
		RadioEvents.RxDone = OnP2PRxDone;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <P2P_Radio_Init+0x88>)
		app.stt.lora_state = LORA_BUSY;
 8002f4c:	7035      	strb	r5, [r6, #0]
		RadioEvents.RxDone = OnP2PRxDone;
 8002f4e:	6083      	str	r3, [r0, #8]
		RadioEvents.TxTimeout = OnP2PTxTimeout;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <P2P_Radio_Init+0x8c>)
 8002f52:	6043      	str	r3, [r0, #4]
		RadioEvents.RxTimeout = OnP2PRxTimeout;
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <P2P_Radio_Init+0x90>)
 8002f56:	60c3      	str	r3, [r0, #12]
		RadioEvents.RxError = OnP2PRxError;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <P2P_Radio_Init+0x94>)
 8002f5a:	6103      	str	r3, [r0, #16]
		Radio.Init(&RadioEvents);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f60:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, P2P_TX_OUTPUT_POWER, 0, P2P_BANDWIDTH,
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <P2P_Radio_Init+0x98>)
 8002f64:	0022      	movs	r2, r4
 8002f66:	9308      	str	r3, [sp, #32]
 8002f68:	2308      	movs	r3, #8
 8002f6a:	9302      	str	r3, [sp, #8]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2116      	movs	r1, #22
 8002f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f76:	0028      	movs	r0, r5
 8002f78:	0023      	movs	r3, r4
 8002f7a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002f7c:	9407      	str	r4, [sp, #28]
 8002f7e:	9406      	str	r4, [sp, #24]
 8002f80:	9405      	str	r4, [sp, #20]
 8002f82:	9504      	str	r5, [sp, #16]
 8002f84:	9403      	str	r4, [sp, #12]
 8002f86:	9501      	str	r5, [sp, #4]
 8002f88:	47b0      	blx	r6
		Radio.SetMaxPayloadLength(MODEM_LORA, LORA_BUFFER_SIZE);
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	0028      	movs	r0, r5
 8002f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f92:	4798      	blx	r3
		APP_LOG(TS_ON, VLEVEL_L,  "Modo P2P\n\r");
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <P2P_Radio_Init+0x9c>)
 8002f96:	002a      	movs	r2, r5
 8002f98:	0021      	movs	r1, r4
 8002f9a:	0028      	movs	r0, r5
 8002f9c:	f00b fa22 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
		app.stt.lora_state = LORA_IDLE;
 8002fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fa2:	701c      	strb	r4, [r3, #0]
}
 8002fa4:	b00d      	add	sp, #52	; 0x34
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa8:	20000044 	.word	0x20000044
 8002fac:	20000418 	.word	0x20000418
 8002fb0:	08002e71 	.word	0x08002e71
 8002fb4:	0800f22c 	.word	0x0800f22c
 8002fb8:	08002cd1 	.word	0x08002cd1
 8002fbc:	08002e1d 	.word	0x08002e1d
 8002fc0:	08002ce1 	.word	0x08002ce1
 8002fc4:	08002cf1 	.word	0x08002cf1
 8002fc8:	00001388 	.word	0x00001388
 8002fcc:	0800e812 	.word	0x0800e812

08002fd0 <LoRaWAN_Mode_Init>:
void LoRaWAN_Mode_Init(void){
 8002fd0:	b570      	push	{r4, r5, r6, lr}
	if(app.stt.lora_state == LORA_IDLE){
 8002fd2:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <LoRaWAN_Mode_Init+0x38>)
 8002fd4:	342a      	adds	r4, #42	; 0x2a
 8002fd6:	7826      	ldrb	r6, [r4, #0]
 8002fd8:	2e00      	cmp	r6, #0
 8002fda:	d113      	bne.n	8003004 <LoRaWAN_Mode_Init+0x34>
		app.stt.lora_state = LORA_BUSY;
 8002fdc:	2501      	movs	r5, #1
 8002fde:	7025      	strb	r5, [r4, #0]
		LoraInfo_Init();
 8002fe0:	f003 fee4 	bl	8006dac <LoraInfo_Init>
		LmHandlerInit(&LmHandlerCallbacks);
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <LoRaWAN_Mode_Init+0x3c>)
 8002fe6:	f004 ff4f 	bl	8007e88 <LmHandlerInit>
		LmHandlerConfigure(&LmHandlerParams);
 8002fea:	4809      	ldr	r0, [pc, #36]	; (8003010 <LoRaWAN_Mode_Init+0x40>)
 8002fec:	f004 fd56 	bl	8007a9c <LmHandlerConfigure>
		LmHandlerJoin(LORAWAN_DEFAULT_ACTIVATION_TYPE);
 8002ff0:	0028      	movs	r0, r5
 8002ff2:	f004 fe6f 	bl	8007cd4 <LmHandlerJoin>
		APP_LOG(TS_ON, VLEVEL_L,  "Modo LORAWAN\n\r");
 8002ff6:	002a      	movs	r2, r5
 8002ff8:	0031      	movs	r1, r6
 8002ffa:	0028      	movs	r0, r5
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <LoRaWAN_Mode_Init+0x44>)
 8002ffe:	f00b f9f1 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
		app.stt.lora_state = LORA_IDLE;
 8003002:	7026      	strb	r6, [r4, #0]
}
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	20000044 	.word	0x20000044
 800300c:	2000001c 	.word	0x2000001c
 8003010:	2000003c 	.word	0x2000003c
 8003014:	0800e81d 	.word	0x0800e81d

08003018 <rx_bytes>:
}*/

/*
 * Processa comandos recebidos pela serial
 */
void rx_bytes(uint8_t *bytes, uint16_t sz, uint8_t error){
 8003018:	b530      	push	{r4, r5, lr}
 800301a:	b08d      	sub	sp, #52	; 0x34
	if(sz >= 4){
 800301c:	2903      	cmp	r1, #3
 800301e:	d800      	bhi.n	8003022 <rx_bytes+0xa>
 8003020:	e08a      	b.n	8003138 <rx_bytes+0x120>
		if(bytes[0] == '$' && bytes[1] == 'W' && bytes[3] == '#' && bytes[sz-1]){
 8003022:	7803      	ldrb	r3, [r0, #0]
 8003024:	2b24      	cmp	r3, #36	; 0x24
 8003026:	d000      	beq.n	800302a <rx_bytes+0x12>
 8003028:	e086      	b.n	8003138 <rx_bytes+0x120>
 800302a:	7843      	ldrb	r3, [r0, #1]
 800302c:	2b57      	cmp	r3, #87	; 0x57
 800302e:	d000      	beq.n	8003032 <rx_bytes+0x1a>
 8003030:	e082      	b.n	8003138 <rx_bytes+0x120>
 8003032:	78c3      	ldrb	r3, [r0, #3]
 8003034:	2b23      	cmp	r3, #35	; 0x23
 8003036:	d17f      	bne.n	8003138 <rx_bytes+0x120>
 8003038:	1841      	adds	r1, r0, r1
 800303a:	3901      	subs	r1, #1
 800303c:	780b      	ldrb	r3, [r1, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d07a      	beq.n	8003138 <rx_bytes+0x120>
			if(bytes[2] == 'A'){
 8003042:	7883      	ldrb	r3, [r0, #2]
 8003044:	2b41      	cmp	r3, #65	; 0x41
 8003046:	d14b      	bne.n	80030e0 <rx_bytes+0xc8>
 8003048:	4c71      	ldr	r4, [pc, #452]	; (8003210 <rx_bytes+0x1f8>)
 800304a:	1d01      	adds	r1, r0, #4
 800304c:	0022      	movs	r2, r4
 800304e:	300c      	adds	r0, #12
 8003050:	323f      	adds	r2, #63	; 0x3f
				for(int i = 0; i < 4; i++){
					if(bytes[4+i*2] >= 'a' && bytes[4+i*2] <= 'f'){
 8003052:	780b      	ldrb	r3, [r1, #0]
 8003054:	001d      	movs	r5, r3
 8003056:	3d61      	subs	r5, #97	; 0x61
 8003058:	2d05      	cmp	r5, #5
 800305a:	d803      	bhi.n	8003064 <rx_bytes+0x4c>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] = (bytes[4+i*2] - 'a' + 10) * 16;
 800305c:	3b57      	subs	r3, #87	; 0x57
					}else if(bytes[4+i*2] >= '0' && bytes[4+i*2] <= '9'){
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] = (bytes[4+i*2] - '0') * 16;
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	7013      	strb	r3, [r2, #0]
 8003062:	e003      	b.n	800306c <rx_bytes+0x54>
					}else if(bytes[4+i*2] >= '0' && bytes[4+i*2] <= '9'){
 8003064:	3b30      	subs	r3, #48	; 0x30
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b09      	cmp	r3, #9
 800306a:	d9f8      	bls.n	800305e <rx_bytes+0x46>
					}
					if(bytes[5+i*2] >= 'a' && bytes[5+i*2] <= 'f'){
 800306c:	784b      	ldrb	r3, [r1, #1]
 800306e:	001d      	movs	r5, r3
 8003070:	3d61      	subs	r5, #97	; 0x61
 8003072:	2d05      	cmp	r5, #5
 8003074:	d82c      	bhi.n	80030d0 <rx_bytes+0xb8>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - 'a' + 10;
 8003076:	7815      	ldrb	r5, [r2, #0]
 8003078:	195b      	adds	r3, r3, r5
 800307a:	3b57      	subs	r3, #87	; 0x57
					}else if(bytes[5+i*2] >= '0' && bytes[5+i*2] <= '9'){
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - '0';
 800307c:	7013      	strb	r3, [r2, #0]
				for(int i = 0; i < 4; i++){
 800307e:	3102      	adds	r1, #2
 8003080:	3a01      	subs	r2, #1
 8003082:	4288      	cmp	r0, r1
 8003084:	d1e5      	bne.n	8003052 <rx_bytes+0x3a>
					}
				}
				EEPROM_Write(((uint32_t *)(&app.cfg))[offsetof(cfg_t, cfg.dev_addr)/sizeof(uint32_t)], &eeprom_cfg.word[offsetof(cfg_t, cfg.dev_addr)/sizeof(uint32_t)]);
 8003086:	4963      	ldr	r1, [pc, #396]	; (8003214 <rx_bytes+0x1fc>)
 8003088:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800308a:	3110      	adds	r1, #16
 800308c:	f7ff ff34 	bl	8002ef8 <EEPROM_Write>
				SetDevAddr(app.cfg.cfg.dev_addr);
 8003090:	6be0      	ldr	r0, [r4, #60]	; 0x3c
				LoRaWAN_Mode_Init();
				uint8_t eui[8];
				LmHandlerGetDevEUI(&eui[0]);
 8003092:	ac0a      	add	r4, sp, #40	; 0x28
				SetDevAddr(app.cfg.cfg.dev_addr);
 8003094:	f7ff fdf8 	bl	8002c88 <SetDevAddr>
				LoRaWAN_Mode_Init();
 8003098:	f7ff ff9a 	bl	8002fd0 <LoRaWAN_Mode_Init>
				LmHandlerGetDevEUI(&eui[0]);
 800309c:	0020      	movs	r0, r4
 800309e:	f004 fffd 	bl	800809c <LmHandlerGetDevEUI>
				APP_LOG(TS_OFF, VLEVEL_L, "DEV_EUI:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80030a2:	79e3      	ldrb	r3, [r4, #7]
 80030a4:	9307      	str	r3, [sp, #28]
 80030a6:	79a3      	ldrb	r3, [r4, #6]
 80030a8:	9306      	str	r3, [sp, #24]
 80030aa:	7963      	ldrb	r3, [r4, #5]
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	7923      	ldrb	r3, [r4, #4]
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	78e3      	ldrb	r3, [r4, #3]
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	78a3      	ldrb	r3, [r4, #2]
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	7863      	ldrb	r3, [r4, #1]
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	7823      	ldrb	r3, [r4, #0]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4b55      	ldr	r3, [pc, #340]	; (8003218 <rx_bytes+0x200>)
				}
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
			}else if(bytes[2] == 'N'){
				uint8_t eui[8];
				LmHandlerGetDevEUI(&eui[0]);
				APP_LOG(TS_OFF, VLEVEL_L, "%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2001      	movs	r0, #1
 80030c8:	0011      	movs	r1, r2
 80030ca:	f00b f98b 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
			}
		}
	}
}
 80030ce:	e033      	b.n	8003138 <rx_bytes+0x120>
					}else if(bytes[5+i*2] >= '0' && bytes[5+i*2] <= '9'){
 80030d0:	001d      	movs	r5, r3
 80030d2:	3d30      	subs	r5, #48	; 0x30
 80030d4:	2d09      	cmp	r5, #9
 80030d6:	d8d2      	bhi.n	800307e <rx_bytes+0x66>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - '0';
 80030d8:	7815      	ldrb	r5, [r2, #0]
 80030da:	195b      	adds	r3, r3, r5
 80030dc:	3b30      	subs	r3, #48	; 0x30
 80030de:	e7cd      	b.n	800307c <rx_bytes+0x64>
			}else if(bytes[2] == 'R'){
 80030e0:	2b52      	cmp	r3, #82	; 0x52
 80030e2:	d12b      	bne.n	800313c <rx_bytes+0x124>
				SX126xSetStandby( STDBY_XOSC );
 80030e4:	2001      	movs	r0, #1
 80030e6:	f00a f8af 	bl	800d248 <SX126xSetStandby>
				SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 80030ea:	4c49      	ldr	r4, [pc, #292]	; (8003210 <rx_bytes+0x1f8>)
 80030ec:	484b      	ldr	r0, [pc, #300]	; (800321c <rx_bytes+0x204>)
 80030ee:	3442      	adds	r4, #66	; 0x42
 80030f0:	7821      	ldrb	r1, [r4, #0]
 80030f2:	f00a faab 	bl	800d64c <SX126xWriteRegister>
				SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 80030f6:	7821      	ldrb	r1, [r4, #0]
 80030f8:	4849      	ldr	r0, [pc, #292]	; (8003220 <rx_bytes+0x208>)
 80030fa:	f00a faa7 	bl	800d64c <SX126xWriteRegister>
				Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <rx_bytes+0x20c>)
 8003100:	223c      	movs	r2, #60	; 0x3c
 8003102:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003104:	2116      	movs	r1, #22
 8003106:	4848      	ldr	r0, [pc, #288]	; (8003228 <rx_bytes+0x210>)
 8003108:	47a8      	blx	r5
				SX126xSetStandby( STDBY_XOSC );
 800310a:	2001      	movs	r0, #1
 800310c:	f00a f89c 	bl	800d248 <SX126xSetStandby>
				SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 8003110:	7821      	ldrb	r1, [r4, #0]
 8003112:	4842      	ldr	r0, [pc, #264]	; (800321c <rx_bytes+0x204>)
 8003114:	f00a fa9a 	bl	800d64c <SX126xWriteRegister>
				SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 8003118:	7821      	ldrb	r1, [r4, #0]
 800311a:	4841      	ldr	r0, [pc, #260]	; (8003220 <rx_bytes+0x208>)
 800311c:	f00a fa96 	bl	800d64c <SX126xWriteRegister>
				Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 8003120:	223c      	movs	r2, #60	; 0x3c
 8003122:	2116      	movs	r1, #22
 8003124:	4840      	ldr	r0, [pc, #256]	; (8003228 <rx_bytes+0x210>)
 8003126:	47a8      	blx	r5
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%d\n\r", app.cfg.cfg.xta_trim);
 8003128:	7823      	ldrb	r3, [r4, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4b3f      	ldr	r3, [pc, #252]	; (800322c <rx_bytes+0x214>)
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
 800312e:	2200      	movs	r2, #0
 8003130:	2001      	movs	r0, #1
 8003132:	0011      	movs	r1, r2
 8003134:	f00b f956 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 8003138:	b00d      	add	sp, #52	; 0x34
 800313a:	bd30      	pop	{r4, r5, pc}
			}else if(bytes[2] == 'S'){
 800313c:	2b53      	cmp	r3, #83	; 0x53
 800313e:	d100      	bne.n	8003142 <rx_bytes+0x12a>
				while(1);
 8003140:	e7fe      	b.n	8003140 <rx_bytes+0x128>
			}else if(bytes[2] == '+'){
 8003142:	2b2b      	cmp	r3, #43	; 0x2b
 8003144:	d122      	bne.n	800318c <rx_bytes+0x174>
				if(app.cfg.cfg.xta_trim < 0x2F){
 8003146:	4c32      	ldr	r4, [pc, #200]	; (8003210 <rx_bytes+0x1f8>)
 8003148:	0023      	movs	r3, r4
 800314a:	3342      	adds	r3, #66	; 0x42
 800314c:	7818      	ldrb	r0, [r3, #0]
 800314e:	282e      	cmp	r0, #46	; 0x2e
 8003150:	d817      	bhi.n	8003182 <rx_bytes+0x16a>
					app.cfg.cfg.xta_trim++;
 8003152:	001d      	movs	r5, r3
 8003154:	3001      	adds	r0, #1
 8003156:	b2c0      	uxtb	r0, r0
 8003158:	7028      	strb	r0, [r5, #0]
					SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 800315a:	f00a f817 	bl	800d18c <SX126xFreqCorrection>
					SX126xSetStandby( STDBY_XOSC );
 800315e:	2001      	movs	r0, #1
 8003160:	f00a f872 	bl	800d248 <SX126xSetStandby>
					SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 8003164:	7829      	ldrb	r1, [r5, #0]
 8003166:	482d      	ldr	r0, [pc, #180]	; (800321c <rx_bytes+0x204>)
 8003168:	f00a fa70 	bl	800d64c <SX126xWriteRegister>
					SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 800316c:	7829      	ldrb	r1, [r5, #0]
 800316e:	482c      	ldr	r0, [pc, #176]	; (8003220 <rx_bytes+0x208>)
 8003170:	f00a fa6c 	bl	800d64c <SX126xWriteRegister>
					Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <rx_bytes+0x20c>)
 8003176:	223c      	movs	r2, #60	; 0x3c
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	2116      	movs	r1, #22
 800317c:	482a      	ldr	r0, [pc, #168]	; (8003228 <rx_bytes+0x210>)
 800317e:	9309      	str	r3, [sp, #36]	; 0x24
 8003180:	4798      	blx	r3
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
 8003182:	3442      	adds	r4, #66	; 0x42
 8003184:	7823      	ldrb	r3, [r4, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4b29      	ldr	r3, [pc, #164]	; (8003230 <rx_bytes+0x218>)
 800318a:	e7d0      	b.n	800312e <rx_bytes+0x116>
			}else if(bytes[2] == '-'){
 800318c:	2b2d      	cmp	r3, #45	; 0x2d
 800318e:	d108      	bne.n	80031a2 <rx_bytes+0x18a>
				if(app.cfg.cfg.xta_trim > 0){
 8003190:	4c1f      	ldr	r4, [pc, #124]	; (8003210 <rx_bytes+0x1f8>)
 8003192:	0025      	movs	r5, r4
 8003194:	3542      	adds	r5, #66	; 0x42
 8003196:	7828      	ldrb	r0, [r5, #0]
 8003198:	2800      	cmp	r0, #0
 800319a:	d0f2      	beq.n	8003182 <rx_bytes+0x16a>
					app.cfg.cfg.xta_trim--;
 800319c:	3801      	subs	r0, #1
 800319e:	b2c0      	uxtb	r0, r0
 80031a0:	e7da      	b.n	8003158 <rx_bytes+0x140>
			}else if(bytes[2] == 'E' ){
 80031a2:	2b45      	cmp	r3, #69	; 0x45
 80031a4:	d0c8      	beq.n	8003138 <rx_bytes+0x120>
			}else if(bytes[2] == '>'){
 80031a6:	2b3e      	cmp	r3, #62	; 0x3e
 80031a8:	d10d      	bne.n	80031c6 <rx_bytes+0x1ae>
				if(app.cfg.cfg.xta_trim < 47){
 80031aa:	4c19      	ldr	r4, [pc, #100]	; (8003210 <rx_bytes+0x1f8>)
 80031ac:	0023      	movs	r3, r4
 80031ae:	3342      	adds	r3, #66	; 0x42
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b2e      	cmp	r3, #46	; 0x2e
 80031b4:	d8e5      	bhi.n	8003182 <rx_bytes+0x16a>
						app.cfg.cfg.xta_trim = 47;
 80031b6:	202f      	movs	r0, #47	; 0x2f
					if(app.cfg.cfg.xta_trim <= 42){
 80031b8:	2b2a      	cmp	r3, #42	; 0x2a
 80031ba:	d801      	bhi.n	80031c0 <rx_bytes+0x1a8>
						app.cfg.cfg.xta_trim += 5;
 80031bc:	3305      	adds	r3, #5
						app.cfg.cfg.xta_trim -= 5;
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	0025      	movs	r5, r4
 80031c2:	3542      	adds	r5, #66	; 0x42
 80031c4:	e7c8      	b.n	8003158 <rx_bytes+0x140>
			}else if(bytes[2] == '<'){
 80031c6:	2b3c      	cmp	r3, #60	; 0x3c
 80031c8:	d10a      	bne.n	80031e0 <rx_bytes+0x1c8>
				if(app.cfg.cfg.xta_trim > 0){
 80031ca:	4c11      	ldr	r4, [pc, #68]	; (8003210 <rx_bytes+0x1f8>)
 80031cc:	0023      	movs	r3, r4
 80031ce:	3342      	adds	r3, #66	; 0x42
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0d5      	beq.n	8003182 <rx_bytes+0x16a>
						app.cfg.cfg.xta_trim = 0;
 80031d6:	2000      	movs	r0, #0
					if(app.cfg.cfg.xta_trim >= 5){
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d9f1      	bls.n	80031c0 <rx_bytes+0x1a8>
						app.cfg.cfg.xta_trim -= 5;
 80031dc:	3b05      	subs	r3, #5
 80031de:	e7ee      	b.n	80031be <rx_bytes+0x1a6>
			}else if(bytes[2] == 'N'){
 80031e0:	2b4e      	cmp	r3, #78	; 0x4e
 80031e2:	d1a9      	bne.n	8003138 <rx_bytes+0x120>
				LmHandlerGetDevEUI(&eui[0]);
 80031e4:	ac0a      	add	r4, sp, #40	; 0x28
 80031e6:	0020      	movs	r0, r4
 80031e8:	f004 ff58 	bl	800809c <LmHandlerGetDevEUI>
				APP_LOG(TS_OFF, VLEVEL_L, "%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80031ec:	79e3      	ldrb	r3, [r4, #7]
 80031ee:	9307      	str	r3, [sp, #28]
 80031f0:	79a3      	ldrb	r3, [r4, #6]
 80031f2:	9306      	str	r3, [sp, #24]
 80031f4:	7963      	ldrb	r3, [r4, #5]
 80031f6:	9305      	str	r3, [sp, #20]
 80031f8:	7923      	ldrb	r3, [r4, #4]
 80031fa:	9304      	str	r3, [sp, #16]
 80031fc:	78e3      	ldrb	r3, [r4, #3]
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	78a3      	ldrb	r3, [r4, #2]
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	7863      	ldrb	r3, [r4, #1]
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	7823      	ldrb	r3, [r4, #0]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <rx_bytes+0x21c>)
 800320e:	e759      	b.n	80030c4 <rx_bytes+0xac>
 8003210:	20000044 	.word	0x20000044
 8003214:	08080000 	.word	0x08080000
 8003218:	0800e82c 	.word	0x0800e82c
 800321c:	00000911 	.word	0x00000911
 8003220:	00000912 	.word	0x00000912
 8003224:	0800f22c 	.word	0x0800f22c
 8003228:	3695ffc0 	.word	0x3695ffc0
 800322c:	0800e857 	.word	0x0800e857
 8003230:	0800e865 	.word	0x0800e865
 8003234:	0800eef2 	.word	0x0800eef2

08003238 <fillBufferAutoTx>:
	buffer[i++] = 5;
 8003238:	2305      	movs	r3, #5
uint16_t fillBufferAutoTx(uint8_t *buffer){
 800323a:	b570      	push	{r4, r5, r6, lr}
	buffer[i++] = 5;
 800323c:	7003      	strb	r3, [r0, #0]
uint16_t fillBufferAutoTx(uint8_t *buffer){
 800323e:	0004      	movs	r4, r0
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 8003240:	f7ff f8b6 	bl	80023b0 <SYS_GetBatteryLevel>
 8003244:	2164      	movs	r1, #100	; 0x64
 8003246:	3032      	adds	r0, #50	; 0x32
 8003248:	f7fd f80e 	bl	8000268 <__divsi3>
		tmp = app.cfg.cfg.pulse_count[cnt];
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <fillBufferAutoTx+0x98>)
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 800324e:	7060      	strb	r0, [r4, #1]
		tmp = app.cfg.cfg.pulse_count[cnt];
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		app.stt.pulse_count_tmp[cnt] = tmp;
 8003252:	0020      	movs	r0, r4
		buffer[i++] = (tmp >> 24) & 0xff;
 8003254:	0e11      	lsrs	r1, r2, #24
		app.stt.pulse_count_tmp[cnt] = tmp;
 8003256:	601a      	str	r2, [r3, #0]
		buffer[i++] = (tmp >> 24) & 0xff;
 8003258:	70a1      	strb	r1, [r4, #2]
		buffer[i++] = (tmp >> 16) & 0xff;
 800325a:	0c11      	lsrs	r1, r2, #16
 800325c:	70e1      	strb	r1, [r4, #3]
		buffer[i++] = (tmp >> 8) & 0xff;
 800325e:	0a11      	lsrs	r1, r2, #8
 8003260:	7121      	strb	r1, [r4, #4]
		buffer[i++] = tmp & 0xff;
 8003262:	7162      	strb	r2, [r4, #5]
		tmp = app.cfg.cfg.pulse_count[cnt+1];
 8003264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		app.stt.pulse_count_tmp[cnt+1] = tmp;
 8003266:	3014      	adds	r0, #20
		buffer[i++] = (tmp >> 24) & 0xff;
 8003268:	0e11      	lsrs	r1, r2, #24
		app.stt.pulse_count_tmp[cnt+1] = tmp;
 800326a:	605a      	str	r2, [r3, #4]
		buffer[i++] = (tmp >> 24) & 0xff;
 800326c:	71a1      	strb	r1, [r4, #6]
		buffer[i++] = (tmp >> 16) & 0xff;
 800326e:	0c11      	lsrs	r1, r2, #16
 8003270:	71e1      	strb	r1, [r4, #7]
		buffer[i++] = tmp & 0xff;
 8003272:	7262      	strb	r2, [r4, #9]
		buffer[i++] = (tmp >> 8) & 0xff;
 8003274:	0a11      	lsrs	r1, r2, #8
 8003276:	0022      	movs	r2, r4
 8003278:	7221      	strb	r1, [r4, #8]
		for(uint8_t j = 0; j < 5; j++){
 800327a:	0019      	movs	r1, r3
 800327c:	320a      	adds	r2, #10
			buffer[i++] = app.stt.cnt_per_hour[cnt][j];
 800327e:	7d0d      	ldrb	r5, [r1, #20]
		for(uint8_t j = 0; j < 5; j++){
 8003280:	3101      	adds	r1, #1
			buffer[i++] = app.stt.cnt_per_hour[cnt][j];
 8003282:	7015      	strb	r5, [r2, #0]
			buffer[i++] = app.stt.cnt_per_hour[cnt+1][j];
 8003284:	7e0d      	ldrb	r5, [r1, #24]
 8003286:	7055      	strb	r5, [r2, #1]
		for(uint8_t j = 0; j < 5; j++){
 8003288:	3202      	adds	r2, #2
 800328a:	4290      	cmp	r0, r2
 800328c:	d1f7      	bne.n	800327e <fillBufferAutoTx+0x46>
		tmp = app.cfg.cfg.pulse_count[cnt];
 800328e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		buffer[i++] = (tmp >> 24) & 0xff;
 8003290:	0e11      	lsrs	r1, r2, #24
 8003292:	7521      	strb	r1, [r4, #20]
		buffer[i++] = (tmp >> 16) & 0xff;
 8003294:	0c11      	lsrs	r1, r2, #16
 8003296:	7561      	strb	r1, [r4, #21]
		buffer[i++] = (tmp >> 8) & 0xff;
 8003298:	0a11      	lsrs	r1, r2, #8
 800329a:	75a1      	strb	r1, [r4, #22]
		buffer[i++] = tmp & 0xff;
 800329c:	75e2      	strb	r2, [r4, #23]
		app.stt.pulse_count_tmp[cnt] = tmp;
 800329e:	609a      	str	r2, [r3, #8]
		tmp = app.cfg.cfg.pulse_count[cnt+1];
 80032a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		buffer[i++] = (tmp >> 24) & 0xff;
 80032a2:	0e11      	lsrs	r1, r2, #24
 80032a4:	7621      	strb	r1, [r4, #24]
		buffer[i++] = (tmp >> 16) & 0xff;
 80032a6:	0c11      	lsrs	r1, r2, #16
		app.stt.pulse_count_tmp[cnt+1] = tmp;
 80032a8:	60da      	str	r2, [r3, #12]
		buffer[i++] = (tmp >> 16) & 0xff;
 80032aa:	7661      	strb	r1, [r4, #25]
		buffer[i++] = tmp & 0xff;
 80032ac:	76e2      	strb	r2, [r4, #27]
		buffer[i++] = (tmp >> 8) & 0xff;
 80032ae:	0a11      	lsrs	r1, r2, #8
 80032b0:	0022      	movs	r2, r4
 80032b2:	76a1      	strb	r1, [r4, #26]
		for(uint8_t j = 0; j < 5; j++){
 80032b4:	331e      	adds	r3, #30
 80032b6:	321c      	adds	r2, #28
 80032b8:	3426      	adds	r4, #38	; 0x26
			buffer[i++] = app.stt.cnt_per_hour[cnt][j];
 80032ba:	7819      	ldrb	r1, [r3, #0]
		for(uint8_t j = 0; j < 5; j++){
 80032bc:	3301      	adds	r3, #1
			buffer[i++] = app.stt.cnt_per_hour[cnt][j];
 80032be:	7011      	strb	r1, [r2, #0]
			buffer[i++] = app.stt.cnt_per_hour[cnt+1][j];
 80032c0:	7919      	ldrb	r1, [r3, #4]
 80032c2:	7051      	strb	r1, [r2, #1]
		for(uint8_t j = 0; j < 5; j++){
 80032c4:	3202      	adds	r2, #2
 80032c6:	4294      	cmp	r4, r2
 80032c8:	d1f7      	bne.n	80032ba <fillBufferAutoTx+0x82>
}
 80032ca:	2026      	movs	r0, #38	; 0x26
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	20000044 	.word	0x20000044

080032d4 <fillBufferManualTx>:
	buffer[i++] = 0;
 80032d4:	2300      	movs	r3, #0
uint16_t fillBufferManualTx(uint8_t *buffer){
 80032d6:	b510      	push	{r4, lr}
	buffer[i++] = 0;
 80032d8:	7003      	strb	r3, [r0, #0]
uint16_t fillBufferManualTx(uint8_t *buffer){
 80032da:	0004      	movs	r4, r0
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 80032dc:	f7ff f868 	bl	80023b0 <SYS_GetBatteryLevel>
 80032e0:	2164      	movs	r1, #100	; 0x64
 80032e2:	3032      	adds	r0, #50	; 0x32
 80032e4:	f7fc ffc0 	bl	8000268 <__divsi3>
 80032e8:	4908      	ldr	r1, [pc, #32]	; (800330c <fillBufferManualTx+0x38>)
 80032ea:	7060      	strb	r0, [r4, #1]
	for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM;cnt++){
 80032ec:	1ca3      	adds	r3, r4, #2
 80032ee:	3412      	adds	r4, #18
		tmp = app.cfg.cfg.pulse_count[cnt];
 80032f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM;cnt++){
 80032f2:	3104      	adds	r1, #4
		buffer[i++] = (tmp >> 24) & 0xff;
 80032f4:	0e10      	lsrs	r0, r2, #24
 80032f6:	7018      	strb	r0, [r3, #0]
		buffer[i++] = (tmp >> 16) & 0xff;
 80032f8:	0c10      	lsrs	r0, r2, #16
 80032fa:	7058      	strb	r0, [r3, #1]
		buffer[i++] = (tmp >> 8) & 0xff;
 80032fc:	0a10      	lsrs	r0, r2, #8
 80032fe:	7098      	strb	r0, [r3, #2]
		buffer[i++] = tmp & 0xff;
 8003300:	70da      	strb	r2, [r3, #3]
	for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM;cnt++){
 8003302:	3304      	adds	r3, #4
 8003304:	429c      	cmp	r4, r3
 8003306:	d1f3      	bne.n	80032f0 <fillBufferManualTx+0x1c>
}
 8003308:	2012      	movs	r0, #18
 800330a:	bd10      	pop	{r4, pc}
 800330c:	20000044 	.word	0x20000044

08003310 <LED_TX>:
void LED_TX(GPIO_PinState state){
 8003310:	b530      	push	{r4, r5, lr}
	gpio_cfg.Pin = LED_TX_PIN;
 8003312:	2580      	movs	r5, #128	; 0x80
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 8003314:	2300      	movs	r3, #0
void LED_TX(GPIO_PinState state){
 8003316:	b087      	sub	sp, #28
	gpio_cfg.Pin = LED_TX_PIN;
 8003318:	006d      	lsls	r5, r5, #1
void LED_TX(GPIO_PinState state){
 800331a:	0004      	movs	r4, r0
	gpio_cfg.Pin = LED_TX_PIN;
 800331c:	9501      	str	r5, [sp, #4]
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 800331e:	9304      	str	r3, [sp, #16]
	if(state == false){
 8003320:	4298      	cmp	r0, r3
 8003322:	d10f      	bne.n	8003344 <LED_TX+0x34>
		HAL_GPIO_WritePin(LED_TX_PORT, LED_TX_PIN, state);
 8003324:	0002      	movs	r2, r0
 8003326:	20a0      	movs	r0, #160	; 0xa0
 8003328:	0029      	movs	r1, r5
 800332a:	05c0      	lsls	r0, r0, #23
 800332c:	f001 fd8e 	bl	8004e4c <HAL_GPIO_WritePin>
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003330:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Pull = GPIO_PULLDOWN;
 8003332:	2302      	movs	r3, #2
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003334:	a901      	add	r1, sp, #4
 8003336:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Mode = GPIO_MODE_INPUT;
 8003338:	9402      	str	r4, [sp, #8]
		gpio_cfg.Pull = GPIO_PULLDOWN;
 800333a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 800333c:	f001 fc48 	bl	8004bd0 <HAL_GPIO_Init>
}
 8003340:	b007      	add	sp, #28
 8003342:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003344:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	2201      	movs	r2, #1
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003348:	a901      	add	r1, sp, #4
 800334a:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 800334c:	9202      	str	r2, [sp, #8]
		gpio_cfg.Pull = GPIO_NOPULL;
 800334e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003350:	f001 fc3e 	bl	8004bd0 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(LED_TX_PORT, LED_TX_PIN, state);
 8003354:	20a0      	movs	r0, #160	; 0xa0
 8003356:	0022      	movs	r2, r4
 8003358:	0029      	movs	r1, r5
 800335a:	05c0      	lsls	r0, r0, #23
 800335c:	f001 fd76 	bl	8004e4c <HAL_GPIO_WritePin>
}
 8003360:	e7ee      	b.n	8003340 <LED_TX+0x30>
	...

08003364 <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context){
 8003364:	b570      	push	{r4, r5, r6, lr}
	switch(app.stt.led_mode){
 8003366:	4c2e      	ldr	r4, [pc, #184]	; (8003420 <OnTxTimerLedEvent+0xbc>)
 8003368:	0026      	movs	r6, r4
 800336a:	3629      	adds	r6, #41	; 0x29
 800336c:	7833      	ldrb	r3, [r6, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d023      	beq.n	80033ba <OnTxTimerLedEvent+0x56>
 8003372:	2b02      	cmp	r3, #2
 8003374:	d034      	beq.n	80033e0 <OnTxTimerLedEvent+0x7c>
 8003376:	4d2b      	ldr	r5, [pc, #172]	; (8003424 <OnTxTimerLedEvent+0xc0>)
 8003378:	2b00      	cmp	r3, #0
 800337a:	d143      	bne.n	8003404 <OnTxTimerLedEvent+0xa0>
		if(blinkCntTX & 0x01){
 800337c:	782a      	ldrb	r2, [r5, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	0010      	movs	r0, r2
 8003382:	4018      	ands	r0, r3
 8003384:	421a      	tst	r2, r3
 8003386:	d000      	beq.n	800338a <OnTxTimerLedEvent+0x26>
			LED_TX(true);
 8003388:	0018      	movs	r0, r3
			LED_TX(false);
 800338a:	f7ff ffc1 	bl	8003310 <LED_TX>
		if(blinkCntTX){
 800338e:	782b      	ldrb	r3, [r5, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <OnTxTimerLedEvent+0x4a>
			blinkCntTX--;
 8003394:	3b01      	subs	r3, #1
 8003396:	702b      	strb	r3, [r5, #0]
			if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003398:	3443      	adds	r4, #67	; 0x43
 800339a:	7823      	ldrb	r3, [r4, #0]
				UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_LORAWAN_BLINK_TIME);
 800339c:	2164      	movs	r1, #100	; 0x64
 800339e:	4822      	ldr	r0, [pc, #136]	; (8003428 <OnTxTimerLedEvent+0xc4>)
			if(app.cfg.cfg.tx_mode == P2P_MODE){
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <OnTxTimerLedEvent+0x44>
				UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_P2P_BLINK_TIME);
 80033a4:	21fa      	movs	r1, #250	; 0xfa
 80033a6:	0049      	lsls	r1, r1, #1
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 80033a8:	f00a fee4 	bl	800e174 <UTIL_TIMER_StartWithPeriod>
}
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
			blinkCntTX = (LED_TX_BLINK_TIMES*2);
 80033ae:	230a      	movs	r3, #10
			blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 80033b0:	702b      	strb	r3, [r5, #0]
			app.stt.led_mode = LED_MODE_OFF;
 80033b2:	2303      	movs	r3, #3
 80033b4:	3429      	adds	r4, #41	; 0x29
 80033b6:	7023      	strb	r3, [r4, #0]
 80033b8:	e7f8      	b.n	80033ac <OnTxTimerLedEvent+0x48>
		if(blinkCntLoRa & 0x01){
 80033ba:	4d1c      	ldr	r5, [pc, #112]	; (800342c <OnTxTimerLedEvent+0xc8>)
 80033bc:	782a      	ldrb	r2, [r5, #0]
 80033be:	0010      	movs	r0, r2
 80033c0:	4018      	ands	r0, r3
 80033c2:	421a      	tst	r2, r3
 80033c4:	d000      	beq.n	80033c8 <OnTxTimerLedEvent+0x64>
			LED_TX(true);
 80033c6:	0018      	movs	r0, r3
			LED_TX(false);
 80033c8:	f7ff ffa2 	bl	8003310 <LED_TX>
		if(blinkCntLoRa){
 80033cc:	782b      	ldrb	r3, [r5, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <OnTxTimerLedEvent+0x78>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_LORAWAN_BLINK_TIME);
 80033d2:	2164      	movs	r1, #100	; 0x64
			blinkCntLoRa--;
 80033d4:	3b01      	subs	r3, #1
 80033d6:	702b      	strb	r3, [r5, #0]
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 80033d8:	4813      	ldr	r0, [pc, #76]	; (8003428 <OnTxTimerLedEvent+0xc4>)
 80033da:	e7e5      	b.n	80033a8 <OnTxTimerLedEvent+0x44>
			blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 80033dc:	2312      	movs	r3, #18
 80033de:	e7e7      	b.n	80033b0 <OnTxTimerLedEvent+0x4c>
		if(blinkCntP2P & 0x01){
 80033e0:	4d13      	ldr	r5, [pc, #76]	; (8003430 <OnTxTimerLedEvent+0xcc>)
 80033e2:	2301      	movs	r3, #1
 80033e4:	782a      	ldrb	r2, [r5, #0]
 80033e6:	0010      	movs	r0, r2
 80033e8:	4018      	ands	r0, r3
 80033ea:	421a      	tst	r2, r3
 80033ec:	d000      	beq.n	80033f0 <OnTxTimerLedEvent+0x8c>
			LED_TX(true);
 80033ee:	0018      	movs	r0, r3
			LED_TX(false);
 80033f0:	f7ff ff8e 	bl	8003310 <LED_TX>
		if(blinkCntP2P){
 80033f4:	782b      	ldrb	r3, [r5, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0db      	beq.n	80033b2 <OnTxTimerLedEvent+0x4e>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 80033fa:	21fa      	movs	r1, #250	; 0xfa
			blinkCntP2P--;
 80033fc:	3b01      	subs	r3, #1
 80033fe:	702b      	strb	r3, [r5, #0]
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 8003400:	0089      	lsls	r1, r1, #2
 8003402:	e7e9      	b.n	80033d8 <OnTxTimerLedEvent+0x74>
		blinkCntTX = (LED_TX_BLINK_TIMES*2);
 8003404:	230a      	movs	r3, #10
		blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 8003406:	2212      	movs	r2, #18
		blinkCntP2P = (LED_P2P_BLINK_TIMES*2);
 8003408:	2000      	movs	r0, #0
		blinkCntTX = (LED_TX_BLINK_TIMES*2);
 800340a:	702b      	strb	r3, [r5, #0]
		blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <OnTxTimerLedEvent+0xc8>)
 800340e:	701a      	strb	r2, [r3, #0]
		blinkCntP2P = (LED_P2P_BLINK_TIMES*2);
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <OnTxTimerLedEvent+0xcc>)
 8003412:	7018      	strb	r0, [r3, #0]
		LED_TX(false);
 8003414:	f7ff ff7c 	bl	8003310 <LED_TX>
		app.stt.led_mode = LED_MODE_OFF;
 8003418:	2303      	movs	r3, #3
 800341a:	7033      	strb	r3, [r6, #0]
}
 800341c:	e7c6      	b.n	80033ac <OnTxTimerLedEvent+0x48>
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	20000044 	.word	0x20000044
 8003424:	20000089 	.word	0x20000089
 8003428:	200003c0 	.word	0x200003c0
 800342c:	20000088 	.word	0x20000088
 8003430:	20000434 	.word	0x20000434

08003434 <LED_Blink>:
void LED_Blink(led_mode_t mode){
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	0004      	movs	r4, r0
	if(mode > LED_MODE_P2P || app.stt.led_mode != LED_MODE_OFF){
 8003438:	2802      	cmp	r0, #2
 800343a:	d81b      	bhi.n	8003474 <LED_Blink+0x40>
 800343c:	4e10      	ldr	r6, [pc, #64]	; (8003480 <LED_Blink+0x4c>)
 800343e:	0035      	movs	r5, r6
 8003440:	3529      	adds	r5, #41	; 0x29
 8003442:	782b      	ldrb	r3, [r5, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d115      	bne.n	8003474 <LED_Blink+0x40>
	LED_TX(true);
 8003448:	2001      	movs	r0, #1
 800344a:	f7ff ff61 	bl	8003310 <LED_TX>
	app.stt.led_mode = mode;
 800344e:	702c      	strb	r4, [r5, #0]
	UTIL_TIMER_Stop(&LedTimer);
 8003450:	4d0c      	ldr	r5, [pc, #48]	; (8003484 <LED_Blink+0x50>)
 8003452:	0028      	movs	r0, r5
 8003454:	f00a fdf8 	bl	800e048 <UTIL_TIMER_Stop>
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_LORAWAN_ON_TIME);
 8003458:	2164      	movs	r1, #100	; 0x64
	switch(mode){
 800345a:	2c01      	cmp	r4, #1
 800345c:	d007      	beq.n	800346e <LED_Blink+0x3a>
 800345e:	2c02      	cmp	r4, #2
 8003460:	d00b      	beq.n	800347a <LED_Blink+0x46>
		if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003462:	3643      	adds	r6, #67	; 0x43
 8003464:	7833      	ldrb	r3, [r6, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <LED_Blink+0x42>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_P2P_ON_TIME);
 800346a:	21fa      	movs	r1, #250	; 0xfa
 800346c:	0049      	lsls	r1, r1, #1
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_ON_TIME);
 800346e:	0028      	movs	r0, r5
 8003470:	f00a fe80 	bl	800e174 <UTIL_TIMER_StartWithPeriod>
}
 8003474:	bd70      	pop	{r4, r5, r6, pc}
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_LORAWAN_ON_TIME);
 8003476:	4904      	ldr	r1, [pc, #16]	; (8003488 <LED_Blink+0x54>)
 8003478:	e7f9      	b.n	800346e <LED_Blink+0x3a>
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_ON_TIME);
 800347a:	21fa      	movs	r1, #250	; 0xfa
 800347c:	00c9      	lsls	r1, r1, #3
 800347e:	e7f6      	b.n	800346e <LED_Blink+0x3a>
 8003480:	20000044 	.word	0x20000044
 8003484:	200003c0 	.word	0x200003c0
 8003488:	00001770 	.word	0x00001770

0800348c <App_Send>:
void App_Send(send_mode_t mode){
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(app.stt.lora_state == LORA_IDLE){
 800348e:	4e33      	ldr	r6, [pc, #204]	; (800355c <App_Send+0xd0>)
void App_Send(send_mode_t mode){
 8003490:	b08f      	sub	sp, #60	; 0x3c
	if(app.stt.lora_state == LORA_IDLE){
 8003492:	0033      	movs	r3, r6
void App_Send(send_mode_t mode){
 8003494:	9008      	str	r0, [sp, #32]
	if(app.stt.lora_state == LORA_IDLE){
 8003496:	332a      	adds	r3, #42	; 0x2a
 8003498:	781f      	ldrb	r7, [r3, #0]
 800349a:	2f00      	cmp	r7, #0
 800349c:	d130      	bne.n	8003500 <App_Send+0x74>
		app.stt.lora_state = LORA_BUSY;
 800349e:	2501      	movs	r5, #1
		LmHandlerGetDevEUI(&eui[0]);
 80034a0:	ac0b      	add	r4, sp, #44	; 0x2c
 80034a2:	0020      	movs	r0, r4
		app.stt.lora_state = LORA_BUSY;
 80034a4:	701d      	strb	r5, [r3, #0]
		LmHandlerGetDevEUI(&eui[0]);
 80034a6:	f004 fdf9 	bl	800809c <LmHandlerGetDevEUI>
		APP_LOG(TS_OFF, VLEVEL_L, "SN:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80034aa:	79e3      	ldrb	r3, [r4, #7]
 80034ac:	003a      	movs	r2, r7
 80034ae:	9307      	str	r3, [sp, #28]
 80034b0:	79a3      	ldrb	r3, [r4, #6]
 80034b2:	0039      	movs	r1, r7
 80034b4:	9306      	str	r3, [sp, #24]
 80034b6:	7963      	ldrb	r3, [r4, #5]
 80034b8:	0028      	movs	r0, r5
 80034ba:	9305      	str	r3, [sp, #20]
 80034bc:	7923      	ldrb	r3, [r4, #4]
 80034be:	9304      	str	r3, [sp, #16]
 80034c0:	78e3      	ldrb	r3, [r4, #3]
 80034c2:	9303      	str	r3, [sp, #12]
 80034c4:	78a3      	ldrb	r3, [r4, #2]
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	7863      	ldrb	r3, [r4, #1]
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	7823      	ldrb	r3, [r4, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <App_Send+0xd4>)
 80034d2:	f00a ff87 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
		LED_Blink(LED_MODE_TX);
 80034d6:	0038      	movs	r0, r7
 80034d8:	f7ff ffac 	bl	8003434 <LED_Blink>
		if(app.cfg.cfg.tx_mode == LORAWAN_MODE){
 80034dc:	0033      	movs	r3, r6
 80034de:	3343      	adds	r3, #67	; 0x43
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d111      	bne.n	800350a <App_Send+0x7e>
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 80034e6:	4c1f      	ldr	r4, [pc, #124]	; (8003564 <App_Send+0xd8>)
			if(mode == SEND_MODE_AUTO){
 80034e8:	9b08      	ldr	r3, [sp, #32]
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 80034ea:	6860      	ldr	r0, [r4, #4]
				AppData.Port = LORAWAN_USER_APP_PORT;
 80034ec:	7025      	strb	r5, [r4, #0]
			if(mode == SEND_MODE_AUTO){
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d108      	bne.n	8003504 <App_Send+0x78>
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 80034f2:	f7ff fea1 	bl	8003238 <fillBufferAutoTx>
				AppData.BufferSize = fillBufferManualTx(AppData.Buffer);
 80034f6:	7060      	strb	r0, [r4, #1]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80034f8:	2100      	movs	r1, #0
 80034fa:	2002      	movs	r0, #2
 80034fc:	f00a fc7a 	bl	800ddf4 <UTIL_SEQ_SetTask>
}
 8003500:	b00f      	add	sp, #60	; 0x3c
 8003502:	bdf0      	pop	{r4, r5, r6, r7, pc}
				AppData.BufferSize = fillBufferManualTx(AppData.Buffer);
 8003504:	f7ff fee6 	bl	80032d4 <fillBufferManualTx>
 8003508:	e7f5      	b.n	80034f6 <App_Send+0x6a>
		}else if(app.cfg.cfg.tx_mode == P2P_MODE){
 800350a:	2b01      	cmp	r3, #1
 800350c:	d1f8      	bne.n	8003500 <App_Send+0x74>
			Radio.SetChannel(P2P_RF_FREQUENCY);
 800350e:	4f16      	ldr	r7, [pc, #88]	; (8003568 <App_Send+0xdc>)
 8003510:	4816      	ldr	r0, [pc, #88]	; (800356c <App_Send+0xe0>)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	9309      	str	r3, [sp, #36]	; 0x24
 8003516:	4798      	blx	r3
			LmHandlerGetDevEUI(&LoRaBuffer[0]);
 8003518:	4d15      	ldr	r5, [pc, #84]	; (8003570 <App_Send+0xe4>)
 800351a:	0028      	movs	r0, r5
 800351c:	f004 fdbe 	bl	800809c <LmHandlerGetDevEUI>
			LoRaBufferSize = 8;
 8003520:	2308      	movs	r3, #8
 8003522:	4c14      	ldr	r4, [pc, #80]	; (8003574 <App_Send+0xe8>)
 8003524:	18e8      	adds	r0, r5, r3
 8003526:	8023      	strh	r3, [r4, #0]
			if(mode == SEND_MODE_AUTO){
 8003528:	9b08      	ldr	r3, [sp, #32]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d112      	bne.n	8003554 <App_Send+0xc8>
				LoRaBufferSize += fillBufferAutoTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 800352e:	f7ff fe83 	bl	8003238 <fillBufferAutoTx>
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 8003532:	8823      	ldrh	r3, [r4, #0]
			app.stt.send_mode = mode;
 8003534:	9a08      	ldr	r2, [sp, #32]
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 8003536:	18c0      	adds	r0, r0, r3
			app.stt.send_mode = mode;
 8003538:	0033      	movs	r3, r6
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 800353a:	8020      	strh	r0, [r4, #0]
			Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 800353c:	8821      	ldrh	r1, [r4, #0]
			app.stt.send_mode = mode;
 800353e:	3328      	adds	r3, #40	; 0x28
 8003540:	701a      	strb	r2, [r3, #0]
			Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 8003542:	3902      	subs	r1, #2
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	b2c9      	uxtb	r1, r1
 8003548:	1ca8      	adds	r0, r5, #2
 800354a:	9308      	str	r3, [sp, #32]
 800354c:	4798      	blx	r3
			app.stt.tx_cnt = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	8273      	strh	r3, [r6, #18]
}
 8003552:	e7d5      	b.n	8003500 <App_Send+0x74>
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 8003554:	f7ff febe 	bl	80032d4 <fillBufferManualTx>
 8003558:	e7eb      	b.n	8003532 <App_Send+0xa6>
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000044 	.word	0x20000044
 8003560:	0800e875 	.word	0x0800e875
 8003564:	20000000 	.word	0x20000000
 8003568:	0800f22c 	.word	0x0800f22c
 800356c:	3689cac0 	.word	0x3689cac0
 8003570:	200003d8 	.word	0x200003d8
 8003574:	20000042 	.word	0x20000042

08003578 <OnTimer>:
static void OnTimer(void *contextid){
 8003578:	b510      	push	{r4, lr}
	if(ind == 0){
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <OnTimer+0x38>)
 800357c:	7818      	ldrb	r0, [r3, #0]
 800357e:	2800      	cmp	r0, #0
 8003580:	d104      	bne.n	800358c <OnTimer+0x14>
		ind = 5;
 8003582:	2205      	movs	r2, #5
 8003584:	701a      	strb	r2, [r3, #0]
		App_Send(SEND_MODE_AUTO);
 8003586:	f7ff ff81 	bl	800348c <App_Send>
}
 800358a:	bd10      	pop	{r4, pc}
		ind--;
 800358c:	3801      	subs	r0, #1
 800358e:	b2c0      	uxtb	r0, r0
 8003590:	7018      	strb	r0, [r3, #0]
		for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM; cnt++){
 8003592:	2300      	movs	r3, #0
 8003594:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <OnTimer+0x3c>)
 8003596:	1810      	adds	r0, r2, r0
			app.stt.cnt_per_hour[cnt][ind] = app.cfg.cfg.pulse_count[cnt] - app.stt.pulse_count_tmp[cnt];
 8003598:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800359a:	6811      	ldr	r1, [r2, #0]
		for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM; cnt++){
 800359c:	3301      	adds	r3, #1
			app.stt.cnt_per_hour[cnt][ind] = app.cfg.cfg.pulse_count[cnt] - app.stt.pulse_count_tmp[cnt];
 800359e:	1a61      	subs	r1, r4, r1
		for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM; cnt++){
 80035a0:	b2db      	uxtb	r3, r3
			app.stt.cnt_per_hour[cnt][ind] = app.cfg.cfg.pulse_count[cnt] - app.stt.pulse_count_tmp[cnt];
 80035a2:	7501      	strb	r1, [r0, #20]
			app.stt.pulse_count_tmp[cnt] = app.cfg.cfg.pulse_count[cnt];
 80035a4:	c210      	stmia	r2!, {r4}
		for(uint8_t cnt = 0; cnt < APP_EXTI_CNT_NUM; cnt++){
 80035a6:	3005      	adds	r0, #5
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d1f5      	bne.n	8003598 <OnTimer+0x20>
 80035ac:	e7ed      	b.n	800358a <OnTimer+0x12>
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	2000008a 	.word	0x2000008a
 80035b4:	20000044 	.word	0x20000044

080035b8 <OnBtnTimeoutTimer>:
static void OnBtnTimeoutTimer(void *contextid){
 80035b8:	b513      	push	{r0, r1, r4, lr}
	if(app.stt.btnCnt >= CLICKS_TO_TX && app.stt.btnCnt < (CLICKS_TO_CHANGE_MODE/2)){
 80035ba:	4c12      	ldr	r4, [pc, #72]	; (8003604 <OnBtnTimeoutTimer+0x4c>)
 80035bc:	8a23      	ldrh	r3, [r4, #16]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	2a03      	cmp	r2, #3
 80035c2:	d805      	bhi.n	80035d0 <OnBtnTimeoutTimer+0x18>
		App_Send(SEND_MODE_MANUAL);
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7ff ff61 	bl	800348c <App_Send>
	app.stt.btnCnt = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	8223      	strh	r3, [r4, #16]
}
 80035ce:	bd13      	pop	{r0, r1, r4, pc}
	}else if(app.stt.btnCnt > (CLICKS_TO_CHANGE_MODE/2)){
 80035d0:	2b05      	cmp	r3, #5
 80035d2:	d9fa      	bls.n	80035ca <OnBtnTimeoutTimer+0x12>
		if(app.cfg.cfg.tx_mode != P2P_MODE){
 80035d4:	0023      	movs	r3, r4
 80035d6:	3343      	adds	r3, #67	; 0x43
 80035d8:	7818      	ldrb	r0, [r3, #0]
 80035da:	2801      	cmp	r0, #1
 80035dc:	d00b      	beq.n	80035f6 <OnBtnTimeoutTimer+0x3e>
			app.cfg.cfg.tx_mode = P2P_MODE;
 80035de:	2201      	movs	r2, #1
			LED_Blink(LED_MODE_P2P);
 80035e0:	2002      	movs	r0, #2
			app.cfg.cfg.tx_mode = P2P_MODE;
 80035e2:	701a      	strb	r2, [r3, #0]
			LED_Blink(LED_MODE_P2P);
 80035e4:	f7ff ff26 	bl	8003434 <LED_Blink>
			P2P_Radio_Init();
 80035e8:	f7ff fca2 	bl	8002f30 <P2P_Radio_Init>
			Radio.Sleep();
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <OnBtnTimeoutTimer+0x50>)
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e7e9      	b.n	80035ca <OnBtnTimeoutTimer+0x12>
			app.cfg.cfg.tx_mode = LORAWAN_MODE;
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
			LED_Blink(LED_MODE_LORAWAN);
 80035fa:	f7ff ff1b 	bl	8003434 <LED_Blink>
			LoRaWAN_Mode_Init();
 80035fe:	f7ff fce7 	bl	8002fd0 <LoRaWAN_Mode_Init>
 8003602:	e7e2      	b.n	80035ca <OnBtnTimeoutTimer+0x12>
 8003604:	20000044 	.word	0x20000044
 8003608:	0800f22c 	.word	0x0800f22c

0800360c <EXTI_Init>:
	pExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 800360c:	2301      	movs	r3, #1
void EXTI_Init(AppDioIrqHandler **irqHandlers){
 800360e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003610:	b089      	sub	sp, #36	; 0x24
	pExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 8003612:	9305      	str	r3, [sp, #20]
	pExtiConfig.Trigger = EXTI_TRIGGER_FALLING;
 8003614:	18db      	adds	r3, r3, r3
void EXTI_Init(AppDioIrqHandler **irqHandlers){
 8003616:	0007      	movs	r7, r0
	pExtiConfig.Trigger = EXTI_TRIGGER_FALLING;
 8003618:	9306      	str	r3, [sp, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361a:	f3ef 8310 	mrs	r3, PRIMASK
 800361e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003620:	b672      	cpsid	i
	for (uint32_t i = 0; i < APP_EXTI_CNT_NUM ; i++){
 8003622:	0003      	movs	r3, r0
 8003624:	0006      	movs	r6, r0
 8003626:	3310      	adds	r3, #16
 8003628:	4c1d      	ldr	r4, [pc, #116]	; (80036a0 <EXTI_Init+0x94>)
 800362a:	4d1e      	ldr	r5, [pc, #120]	; (80036a4 <EXTI_Init+0x98>)
 800362c:	9302      	str	r3, [sp, #8]
		pExtiConfig.Line = app_exti_cnt[i].line;
 800362e:	6823      	ldr	r3, [r4, #0]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 8003630:	0028      	movs	r0, r5
		pExtiConfig.Line = app_exti_cnt[i].line;
 8003632:	9304      	str	r3, [sp, #16]
		pExtiConfig.GPIOSel = app_exti_cnt[i].exti_port;
 8003634:	68a3      	ldr	r3, [r4, #8]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 8003636:	a904      	add	r1, sp, #16
		pExtiConfig.GPIOSel = app_exti_cnt[i].exti_port;
 8003638:	9307      	str	r3, [sp, #28]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 800363a:	f001 f907 	bl	800484c <HAL_EXTI_SetConfigLine>
		HAL_EXTI_RegisterCallback(&hApp_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 800363e:	2100      	movs	r1, #0
 8003640:	0028      	movs	r0, r5
 8003642:	ce04      	ldmia	r6!, {r2}
 8003644:	f001 f954 	bl	80048f0 <HAL_EXTI_RegisterCallback>
		HAL_NVIC_SetPriority(app_exti_cnt[i].irqn, app_exti_cnt[i].prio, 0x00);
 8003648:	2312      	movs	r3, #18
 800364a:	56e3      	ldrsb	r3, [r4, r3]
 800364c:	6861      	ldr	r1, [r4, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	2200      	movs	r2, #0
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	f000 ff70 	bl	8004538 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(app_exti_cnt[i].irqn);
 8003658:	9801      	ldr	r0, [sp, #4]
 800365a:	f000 ff97 	bl	800458c <HAL_NVIC_EnableIRQ>
	for (uint32_t i = 0; i < APP_EXTI_CNT_NUM ; i++){
 800365e:	9b02      	ldr	r3, [sp, #8]
 8003660:	3414      	adds	r4, #20
 8003662:	3508      	adds	r5, #8
 8003664:	429e      	cmp	r6, r3
 8003666:	d1e2      	bne.n	800362e <EXTI_Init+0x22>
		pExtiConfig.Line = app_exti_btn[i].line;
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <EXTI_Init+0x9c>)
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 800366a:	4c0e      	ldr	r4, [pc, #56]	; (80036a4 <EXTI_Init+0x98>)
		pExtiConfig.Line = app_exti_btn[i].line;
 800366c:	9304      	str	r3, [sp, #16]
		pExtiConfig.GPIOSel = app_exti_btn[i].exti_port;
 800366e:	2301      	movs	r3, #1
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 8003670:	3420      	adds	r4, #32
 8003672:	a904      	add	r1, sp, #16
 8003674:	0020      	movs	r0, r4
		pExtiConfig.GPIOSel = app_exti_btn[i].exti_port;
 8003676:	9307      	str	r3, [sp, #28]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 8003678:	f001 f8e8 	bl	800484c <HAL_EXTI_SetConfigLine>
		HAL_EXTI_RegisterCallback(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], HAL_EXTI_COMMON_CB_ID, irqHandlers[i+APP_EXTI_CNT_NUM]);
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	2100      	movs	r1, #0
 8003680:	0020      	movs	r0, r4
 8003682:	f001 f935 	bl	80048f0 <HAL_EXTI_RegisterCallback>
		HAL_NVIC_SetPriority(app_exti_btn[i].irqn, app_exti_btn[i].prio, 0x00);
 8003686:	2200      	movs	r2, #0
 8003688:	2007      	movs	r0, #7
 800368a:	0011      	movs	r1, r2
 800368c:	f000 ff54 	bl	8004538 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(app_exti_btn[i].irqn);
 8003690:	2007      	movs	r0, #7
 8003692:	f000 ff7b 	bl	800458c <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	b009      	add	sp, #36	; 0x24
 800369e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a0:	0800e8a0 	.word	0x0800e8a0
 80036a4:	20000450 	.word	0x20000450
 80036a8:	06000006 	.word	0x06000006

080036ac <TxAppInit>:
void TxAppInit(void){
 80036ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80036ae:	2100      	movs	r1, #0
void TxAppInit(void){
 80036b0:	b095      	sub	sp, #84	; 0x54
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80036b2:	2001      	movs	r0, #1
 80036b4:	4a62      	ldr	r2, [pc, #392]	; (8003840 <TxAppInit+0x194>)
 80036b6:	f00a fc4b 	bl	800df50 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80036ba:	2100      	movs	r1, #0
 80036bc:	2002      	movs	r0, #2
 80036be:	4a61      	ldr	r2, [pc, #388]	; (8003844 <TxAppInit+0x198>)
 80036c0:	f00a fc46 	bl	800df50 <UTIL_SEQ_RegTask>
		((uint32_t *)(&app.cfg))[i] = ((uint32_t *)(&eeprom_cfg))[i];
 80036c4:	4d60      	ldr	r5, [pc, #384]	; (8003848 <TxAppInit+0x19c>)
 80036c6:	4a61      	ldr	r2, [pc, #388]	; (800384c <TxAppInit+0x1a0>)
 80036c8:	002b      	movs	r3, r5
 80036ca:	332c      	adds	r3, #44	; 0x2c
 80036cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036ce:	c313      	stmia	r3!, {r0, r1, r4}
 80036d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036d2:	c313      	stmia	r3!, {r0, r1, r4}
	app.cfg.cfg.pulse_count[0] = 0;
 80036d4:	2400      	movs	r4, #0
	SetDevAddr(app.cfg.cfg.dev_addr);
 80036d6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80036d8:	f7ff fad6 	bl	8002c88 <SetDevAddr>
	app.cfg.cfg.tx_time = DEFAULT_TIME_TX;
 80036dc:	4b5c      	ldr	r3, [pc, #368]	; (8003850 <TxAppInit+0x1a4>)
	SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 80036de:	2014      	movs	r0, #20
	app.cfg.cfg.tx_time = DEFAULT_TIME_TX;
 80036e0:	642b      	str	r3, [r5, #64]	; 0x40
	app.cfg.cfg.pulse_count[0] = 0;
 80036e2:	62ec      	str	r4, [r5, #44]	; 0x2c
	app.cfg.cfg.pulse_count[1] = 0;
 80036e4:	632c      	str	r4, [r5, #48]	; 0x30
	app.cfg.cfg.pulse_count[2] = 0;
 80036e6:	636c      	str	r4, [r5, #52]	; 0x34
	app.cfg.cfg.pulse_count[3] = 0;
 80036e8:	63ac      	str	r4, [r5, #56]	; 0x38
	SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 80036ea:	f009 fd4f 	bl	800d18c <SX126xFreqCorrection>
	UTIL_ADV_TRACE_StartRxProcess(rx_bytes);
 80036ee:	4859      	ldr	r0, [pc, #356]	; (8003854 <TxAppInit+0x1a8>)
 80036f0:	f00a fe22 	bl	800e338 <UTIL_ADV_TRACE_StartRxProcess>
	LoRaWAN_Mode_Init();
 80036f4:	f7ff fc6c 	bl	8002fd0 <LoRaWAN_Mode_Init>
	FLASH_OBProgramInitTypeDef pOBInit = {
 80036f8:	0021      	movs	r1, r4
 80036fa:	220c      	movs	r2, #12
 80036fc:	a80c      	add	r0, sp, #48	; 0x30
 80036fe:	f00a ff4e 	bl	800e59e <memset>
 8003702:	2308      	movs	r3, #8
	HAL_FLASHEx_OBProgram(&pOBInit);
 8003704:	a80b      	add	r0, sp, #44	; 0x2c
	FLASH_OBProgramInitTypeDef pOBInit = {
 8003706:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_FLASHEx_OBProgram(&pOBInit);
 8003708:	f001 f9d8 	bl	8004abc <HAL_FLASHEx_OBProgram>
	EXTI_Init(AppDioIrq);
 800370c:	4852      	ldr	r0, [pc, #328]	; (8003858 <TxAppInit+0x1ac>)
 800370e:	f7ff ff7d 	bl	800360c <EXTI_Init>
	GPIO_InitTypeDef gpio_cfg = {
 8003712:	0021      	movs	r1, r4
 8003714:	2210      	movs	r2, #16
 8003716:	a810      	add	r0, sp, #64	; 0x40
 8003718:	f00a ff41 	bl	800e59e <memset>
	for(uint8_t i = 0; i < APP_EXTI_CNT_NUM; i++){
 800371c:	4c4f      	ldr	r4, [pc, #316]	; (800385c <TxAppInit+0x1b0>)
 800371e:	002e      	movs	r6, r5
 8003720:	0027      	movs	r7, r4
 8003722:	3750      	adds	r7, #80	; 0x50
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003724:	8a23      	ldrh	r3, [r4, #16]
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003726:	68e0      	ldr	r0, [r4, #12]
 8003728:	a90f      	add	r1, sp, #60	; 0x3c
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 800372a:	930f      	str	r3, [sp, #60]	; 0x3c
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 800372c:	f001 fa50 	bl	8004bd0 <HAL_GPIO_Init>
		app.stt.pulse_count_tmp[i] = 0;
 8003730:	2300      	movs	r3, #0
	for(uint8_t i = 0; i < APP_EXTI_CNT_NUM; i++){
 8003732:	3414      	adds	r4, #20
		app.stt.pulse_count_tmp[i] = 0;
 8003734:	c608      	stmia	r6!, {r3}
	for(uint8_t i = 0; i < APP_EXTI_CNT_NUM; i++){
 8003736:	42a7      	cmp	r7, r4
 8003738:	d1f4      	bne.n	8003724 <TxAppInit+0x78>
	if(app.cfg.cfg.tx_mode == P2P_MODE){
 800373a:	002b      	movs	r3, r5
 800373c:	3343      	adds	r3, #67	; 0x43
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <TxAppInit+0x9c>
		P2P_Radio_Init();
 8003744:	f7ff fbf4 	bl	8002f30 <P2P_Radio_Init>
	gpio_cfg.Speed = GPIO_SPEED_FAST;
 8003748:	2302      	movs	r3, #2
	gpio_cfg.Pull = GPIO_PULLUP;
 800374a:	2601      	movs	r6, #1
	gpio_cfg.Speed = GPIO_SPEED_FAST;
 800374c:	9312      	str	r3, [sp, #72]	; 0x48
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 800374e:	a90f      	add	r1, sp, #60	; 0x3c
		gpio_cfg.Pin = app_exti_btn[i].pin;
 8003750:	333e      	adds	r3, #62	; 0x3e
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003752:	4843      	ldr	r0, [pc, #268]	; (8003860 <TxAppInit+0x1b4>)
		gpio_cfg.Pin = app_exti_btn[i].pin;
 8003754:	930f      	str	r3, [sp, #60]	; 0x3c
	gpio_cfg.Pull = GPIO_PULLUP;
 8003756:	9611      	str	r6, [sp, #68]	; 0x44
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003758:	f001 fa3a 	bl	8004bd0 <HAL_GPIO_Init>
		gpio_cfg.Pin = output_pin[i].pin;
 800375c:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 800375e:	20a0      	movs	r0, #160	; 0xa0
	gpio_cfg.Pull = GPIO_NOPULL;
 8003760:	2400      	movs	r4, #0
		gpio_cfg.Pin = output_pin[i].pin;
 8003762:	2720      	movs	r7, #32
 8003764:	005b      	lsls	r3, r3, #1
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003766:	a90f      	add	r1, sp, #60	; 0x3c
 8003768:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Pin = output_pin[i].pin;
 800376a:	930f      	str	r3, [sp, #60]	; 0x3c
	gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 800376c:	9610      	str	r6, [sp, #64]	; 0x40
	gpio_cfg.Pull = GPIO_NOPULL;
 800376e:	9411      	str	r4, [sp, #68]	; 0x44
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 8003770:	9412      	str	r4, [sp, #72]	; 0x48
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003772:	f001 fa2d 	bl	8004bd0 <HAL_GPIO_Init>
 8003776:	a90f      	add	r1, sp, #60	; 0x3c
 8003778:	4839      	ldr	r0, [pc, #228]	; (8003860 <TxAppInit+0x1b4>)
		gpio_cfg.Pin = output_pin[i].pin;
 800377a:	970f      	str	r7, [sp, #60]	; 0x3c
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 800377c:	f001 fa28 	bl	8004bd0 <HAL_GPIO_Init>
	LED_TX(false);
 8003780:	0020      	movs	r0, r4
 8003782:	f7ff fdc5 	bl	8003310 <LED_TX>
	HAL_GPIO_WritePin(EN_INPUT_PULSE_PORT, EN_INPUT_PULSE_PIN, GPIO_PIN_SET);
 8003786:	0032      	movs	r2, r6
 8003788:	0039      	movs	r1, r7
 800378a:	4835      	ldr	r0, [pc, #212]	; (8003860 <TxAppInit+0x1b4>)
 800378c:	f001 fb5e 	bl	8004e4c <HAL_GPIO_WritePin>
	UTIL_TIMER_Create(&inputTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnTimer, NULL);
 8003790:	2101      	movs	r1, #1
 8003792:	4f34      	ldr	r7, [pc, #208]	; (8003864 <TxAppInit+0x1b8>)
 8003794:	0032      	movs	r2, r6
 8003796:	0038      	movs	r0, r7
 8003798:	4b33      	ldr	r3, [pc, #204]	; (8003868 <TxAppInit+0x1bc>)
 800379a:	9400      	str	r4, [sp, #0]
 800379c:	4249      	negs	r1, r1
	UTIL_TIMER_SetPeriod(&inputTimer, app.cfg.cfg.tx_time*60000);
 800379e:	3502      	adds	r5, #2
	UTIL_TIMER_Create(&inputTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnTimer, NULL);
 80037a0:	f00a fbf2 	bl	800df88 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&inputTimer, app.cfg.cfg.tx_time*60000);
 80037a4:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80037a6:	4931      	ldr	r1, [pc, #196]	; (800386c <TxAppInit+0x1c0>)
 80037a8:	0038      	movs	r0, r7
 80037aa:	4359      	muls	r1, r3
 80037ac:	f00a fcfc 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Start(&inputTimer);
 80037b0:	0038      	movs	r0, r7
 80037b2:	f00a fc9d 	bl	800e0f0 <UTIL_TIMER_Start>
	UTIL_TIMER_Create(&btnTimeOutTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnBtnTimeoutTimer, NULL);
 80037b6:	2101      	movs	r1, #1
 80037b8:	4d2d      	ldr	r5, [pc, #180]	; (8003870 <TxAppInit+0x1c4>)
 80037ba:	0022      	movs	r2, r4
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <TxAppInit+0x1c8>)
 80037be:	0028      	movs	r0, r5
 80037c0:	9400      	str	r4, [sp, #0]
 80037c2:	4249      	negs	r1, r1
 80037c4:	f00a fbe0 	bl	800df88 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&btnTimeOutTimer, BTN_TIMEOUT);
 80037c8:	21fa      	movs	r1, #250	; 0xfa
 80037ca:	0028      	movs	r0, r5
 80037cc:	0089      	lsls	r1, r1, #2
 80037ce:	f00a fceb 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Create(&LedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80037d2:	2101      	movs	r1, #1
	LmHandlerGetDevEUI(&eui[0]);
 80037d4:	ad09      	add	r5, sp, #36	; 0x24
	UTIL_TIMER_Create(&LedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80037d6:	0022      	movs	r2, r4
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <TxAppInit+0x1cc>)
 80037da:	4249      	negs	r1, r1
 80037dc:	9400      	str	r4, [sp, #0]
 80037de:	4827      	ldr	r0, [pc, #156]	; (800387c <TxAppInit+0x1d0>)
 80037e0:	f00a fbd2 	bl	800df88 <UTIL_TIMER_Create>
	LmHandlerGetDevEUI(&eui[0]);
 80037e4:	0028      	movs	r0, r5
 80037e6:	f004 fc59 	bl	800809c <LmHandlerGetDevEUI>
	APP_LOG(TS_OFF, VLEVEL_L, "SN:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80037ea:	79eb      	ldrb	r3, [r5, #7]
 80037ec:	0022      	movs	r2, r4
 80037ee:	9307      	str	r3, [sp, #28]
 80037f0:	79ab      	ldrb	r3, [r5, #6]
 80037f2:	0021      	movs	r1, r4
 80037f4:	9306      	str	r3, [sp, #24]
 80037f6:	796b      	ldrb	r3, [r5, #5]
 80037f8:	0030      	movs	r0, r6
 80037fa:	9305      	str	r3, [sp, #20]
 80037fc:	792b      	ldrb	r3, [r5, #4]
 80037fe:	9304      	str	r3, [sp, #16]
 8003800:	78eb      	ldrb	r3, [r5, #3]
 8003802:	9303      	str	r3, [sp, #12]
 8003804:	78ab      	ldrb	r3, [r5, #2]
 8003806:	9302      	str	r3, [sp, #8]
 8003808:	786b      	ldrb	r3, [r5, #1]
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	782b      	ldrb	r3, [r5, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <TxAppInit+0x1d4>)
 8003812:	f00a fde7 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", fver);
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <TxAppInit+0x1a0>)
 8003818:	4d1a      	ldr	r5, [pc, #104]	; (8003884 <TxAppInit+0x1d8>)
 800381a:	3318      	adds	r3, #24
 800381c:	0022      	movs	r2, r4
 800381e:	0021      	movs	r1, r4
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	0030      	movs	r0, r6
 8003824:	002b      	movs	r3, r5
 8003826:	f00a fddd 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", model);
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <TxAppInit+0x1a0>)
 800382c:	0022      	movs	r2, r4
 800382e:	331f      	adds	r3, #31
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	0021      	movs	r1, r4
 8003834:	002b      	movs	r3, r5
 8003836:	0030      	movs	r0, r6
 8003838:	f00a fdd4 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 800383c:	b015      	add	sp, #84	; 0x54
 800383e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003840:	08007bf1 	.word	0x08007bf1
 8003844:	08002ed1 	.word	0x08002ed1
 8003848:	20000044 	.word	0x20000044
 800384c:	08080000 	.word	0x08080000
 8003850:	0014003c 	.word	0x0014003c
 8003854:	08003019 	.word	0x08003019
 8003858:	20000008 	.word	0x20000008
 800385c:	0800e8a0 	.word	0x0800e8a0
 8003860:	50000400 	.word	0x50000400
 8003864:	20000478 	.word	0x20000478
 8003868:	08003579 	.word	0x08003579
 800386c:	0000ea60 	.word	0x0000ea60
 8003870:	20000438 	.word	0x20000438
 8003874:	080035b9 	.word	0x080035b9
 8003878:	08003365 	.word	0x08003365
 800387c:	200003c0 	.word	0x200003c0
 8003880:	0800e875 	.word	0x0800e875
 8003884:	0800e89b 	.word	0x0800e89b

08003888 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8003888:	480a      	ldr	r0, [pc, #40]	; (80038b4 <MX_USART2_Init+0x2c>)
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <MX_USART2_Init+0x30>)
{
 800388c:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 800388e:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003890:	2396      	movs	r3, #150	; 0x96
 8003892:	019b      	lsls	r3, r3, #6
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX_RX;//UART_MODE_TX;
 8003894:	220c      	movs	r2, #12
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003896:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003898:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX_RX;//UART_MODE_TX;
 800389a:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 800389c:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 800389e:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 80038a0:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80038a2:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 80038a4:	f003 f954 	bl	8006b50 <HAL_UART_Init>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d001      	beq.n	80038b0 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 80038ac:	f7fe fe1a 	bl	80024e4 <Error_Handler>
  }
}
 80038b0:	bd10      	pop	{r4, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	20000534 	.word	0x20000534
 80038b8:	40004400 	.word	0x40004400

080038bc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038be:	0004      	movs	r4, r0
 80038c0:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c2:	2214      	movs	r2, #20
 80038c4:	2100      	movs	r1, #0
 80038c6:	a804      	add	r0, sp, #16
 80038c8:	f00a fe69 	bl	800e59e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038cc:	221c      	movs	r2, #28
 80038ce:	2100      	movs	r1, #0
 80038d0:	a809      	add	r0, sp, #36	; 0x24
 80038d2:	f00a fe64 	bl	800e59e <memset>
  if (uartHandle->Instance == USART2)
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_UART_MspInit+0x12c>)
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d000      	beq.n	80038e0 <HAL_UART_MspInit+0x24>
 80038de:	e081      	b.n	80039e4 <HAL_UART_MspInit+0x128>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80038e0:	2201      	movs	r2, #1
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <HAL_UART_MspInit+0x130>)
 80038e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e6:	4311      	orrs	r1, r2
 80038e8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80038ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ec:	4011      	ands	r1, r2
 80038ee:	9101      	str	r1, [sp, #4]
 80038f0:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 80038f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038f4:	4311      	orrs	r1, r2
 80038f6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80038f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038fa:	4011      	ands	r1, r2
 80038fc:	9102      	str	r1, [sp, #8]
 80038fe:	9902      	ldr	r1, [sp, #8]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003904:	0289      	lsls	r1, r1, #10
 8003906:	4308      	orrs	r0, r1
 8003908:	6398      	str	r0, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 800390a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800390c:	4310      	orrs	r0, r2
 800390e:	6318      	str	r0, [r3, #48]	; 0x30
 8003910:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003912:	4002      	ands	r2, r0
 8003914:	9203      	str	r2, [sp, #12]
 8003916:	9a03      	ldr	r2, [sp, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003918:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;//RCC_USART2CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391a:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 800391c:	4311      	orrs	r1, r2
 800391e:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003920:	2302      	movs	r3, #2
 8003922:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;//RCC_USART2CLKSOURCE_SYSCLK;
 8003924:	3306      	adds	r3, #6
 8003926:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003928:	f001 fe9e 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 800392c:	2800      	cmp	r0, #0
 800392e:	d001      	beq.n	8003934 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8003930:	f7fe fdd8 	bl	80024e4 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003934:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003938:	2604      	movs	r6, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800393c:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800393e:	a904      	add	r1, sp, #16
 8003940:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003944:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003946:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800394a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800394c:	f001 f940 	bl	8004bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003950:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003952:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003954:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003956:	3b07      	subs	r3, #7
 8003958:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800395a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800395c:	19db      	adds	r3, r3, r7
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800395e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003962:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003964:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003966:	f001 f933 	bl	8004bd0 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800396a:	4f21      	ldr	r7, [pc, #132]	; (80039f0 <HAL_UART_MspInit+0x134>)
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_UART_MspInit+0x138>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 800396e:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003970:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003972:	2310      	movs	r3, #16
 8003974:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003976:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8003978:	607e      	str	r6, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800397a:	60fd      	str	r5, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800397c:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800397e:	617d      	str	r5, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8003980:	61bd      	str	r5, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8003982:	61fd      	str	r5, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8003984:	623d      	str	r5, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003986:	f000 fe1d 	bl	80045c4 <HAL_DMA_Init>
 800398a:	42a8      	cmp	r0, r5
 800398c:	d001      	beq.n	8003992 <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 800398e:	f7fe fda9 	bl	80024e4 <Error_Handler>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* USART2_RX Init */
    hdma_rx.Instance = USARTx_RX_DMA_CHANNEL;
 8003992:	4d19      	ldr	r5, [pc, #100]	; (80039f8 <HAL_UART_MspInit+0x13c>)
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_UART_MspInit+0x140>)
    hdma_rx.Init.Request = USARTx_RX_DMA_REQUEST;
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003996:	2280      	movs	r2, #128	; 0x80
    hdma_rx.Instance = USARTx_RX_DMA_CHANNEL;
 8003998:	602b      	str	r3, [r5, #0]
    hdma_rx.Init.Request = USARTx_RX_DMA_REQUEST;
 800399a:	2304      	movs	r3, #4
 800399c:	606b      	str	r3, [r5, #4]
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399e:	2300      	movs	r3, #0
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_rx.Init.Mode = DMA_NORMAL;
    hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 80039a0:	0028      	movs	r0, r5
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 80039a2:	66e7      	str	r7, [r4, #108]	; 0x6c
 80039a4:	62bc      	str	r4, [r7, #40]	; 0x28
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a6:	60ab      	str	r3, [r5, #8]
    hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a8:	60eb      	str	r3, [r5, #12]
    hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	612a      	str	r2, [r5, #16]
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ac:	616b      	str	r3, [r5, #20]
    hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ae:	61ab      	str	r3, [r5, #24]
    hdma_rx.Init.Mode = DMA_NORMAL;
 80039b0:	61eb      	str	r3, [r5, #28]
    hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039b2:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 80039b4:	f000 fe06 	bl	80045c4 <HAL_DMA_Init>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80039bc:	f7fe fd92 	bl	80024e4 <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_rx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80039c0:	2201      	movs	r2, #1
 80039c2:	2100      	movs	r1, #0
 80039c4:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_rx);
 80039c6:	6725      	str	r5, [r4, #112]	; 0x70
 80039c8:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80039ca:	f000 fdb5 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80039ce:	200b      	movs	r0, #11
 80039d0:	f000 fddc 	bl	800458c <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80039d4:	201c      	movs	r0, #28
 80039d6:	2201      	movs	r2, #1
 80039d8:	2100      	movs	r1, #0
 80039da:	f000 fdad 	bl	8004538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80039de:	201c      	movs	r0, #28
 80039e0:	f000 fdd4 	bl	800458c <HAL_NVIC_EnableIRQ>
    //HAL_UART_ReceiverTimeout_Config(uartHandle, 2);
    //HAL_UART_EnableReceiverTimeout(uartHandle);
    //HAL_UART_Receive_IT(uartHandle, rxBuffer, RX_BUFFER_SIZE);
    /* USER CODE END USART2_MspInit 1 */
  }
}
 80039e4:	b011      	add	sp, #68	; 0x44
 80039e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40021000 	.word	0x40021000
 80039f0:	200004ec 	.word	0x200004ec
 80039f4:	40020080 	.word	0x40020080
 80039f8:	200004a4 	.word	0x200004a4
 80039fc:	4002006c 	.word	0x4002006c

08003a00 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_UART_MspDeInit+0x30>)
 8003a02:	6802      	ldr	r2, [r0, #0]
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d10f      	bne.n	8003a2c <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003a0c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_UART_MspDeInit+0x34>)
 8003a10:	4909      	ldr	r1, [pc, #36]	; (8003a38 <HAL_UART_MspDeInit+0x38>)
 8003a12:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003a14:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8003a16:	400b      	ands	r3, r1
 8003a18:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003a1a:	210c      	movs	r1, #12
 8003a1c:	f001 f996 	bl	8004d4c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003a20:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003a22:	f000 fe13 	bl	800464c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003a26:	201c      	movs	r0, #28
 8003a28:	f000 fdbc 	bl	80045a4 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	40004400 	.word	0x40004400
 8003a34:	40021000 	.word	0x40021000
 8003a38:	fffdffff 	.word	0xfffdffff

08003a3c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003a3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <vcom_Init+0x14>)
 8003a40:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8003a42:	f7fe fccd 	bl	80023e0 <MX_DMA_Init>
  MX_USART2_Init();
 8003a46:	f7ff ff1f 	bl	8003888 <MX_USART2_Init>
  //HAL_UART_ReceiverTimeout_Config(&UartHandle, 2);
  //HAL_UART_EnableReceiverTimeout(&UartHandle);
  //HAL_UART_Receive_IT(&UartHandle, rxBuffer, USART_RX_BUFFER_SIZE);
  /* USER CODE END vcom_Init_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	200005bc 	.word	0x200005bc

08003a54 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <vcom_DeInit+0x28>)
 8003a58:	0292      	lsls	r2, r2, #10
 8003a5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8003a5c:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8003a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a64:	4906      	ldr	r1, [pc, #24]	; (8003a80 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8003a66:	4807      	ldr	r0, [pc, #28]	; (8003a84 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8003a68:	400a      	ands	r2, r1
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8003a6c:	f7ff ffc8 	bl	8003a00 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003a70:	200b      	movs	r0, #11
 8003a72:	f000 fd97 	bl	80045a4 <HAL_NVIC_DisableIRQ>
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003a76:	2000      	movs	r0, #0
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	fffdffff 	.word	0xfffdffff
 8003a84:	20000534 	.word	0x20000534

08003a88 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8003a8c:	0001      	movs	r1, r0
 8003a8e:	4802      	ldr	r0, [pc, #8]	; (8003a98 <vcom_Trace_DMA+0x10>)
 8003a90:	f002 fc2c 	bl	80062ec <HAL_UART_Transmit_DMA>
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003a94:	2000      	movs	r0, #0
 8003a96:	bd10      	pop	{r4, pc}
 8003a98:	20000534 	.word	0x20000534

08003a9c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003a9c:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003a9e:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003aa2:	4c11      	ldr	r4, [pc, #68]	; (8003ae8 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8003aa4:	6018      	str	r0, [r3, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003aa6:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003aa8:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003aaa:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003aac:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003aae:	f003 f901 	bl	8006cb4 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	0252      	lsls	r2, r2, #9
 8003ab8:	69d9      	ldr	r1, [r3, #28]
 8003aba:	4211      	tst	r1, r2
 8003abc:	d1fc      	bne.n	8003ab8 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	03d2      	lsls	r2, r2, #15
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	4211      	tst	r1, r2
 8003ac6:	d0fc      	beq.n	8003ac2 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);//UART_IT_IDLE);//UART_IT_WUF);
 8003ac8:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003aca:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);//UART_IT_IDLE);//UART_IT_WUF);
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003ad0:	f003 f938 	bl	8006d44 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, rxBuf, sizeof(rxBuf));
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	0020      	movs	r0, r4
 8003ad8:	4904      	ldr	r1, [pc, #16]	; (8003aec <vcom_ReceiveInit+0x50>)
 8003ada:	f003 f8b5 	bl	8006c48 <HAL_UART_Receive_IT>

  /* USER CODE BEGIN vcom_ReceiveInit_2 */
  /* USER CODE END vcom_ReceiveInit_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003ade:	2000      	movs	r0, #0
 8003ae0:	bd16      	pop	{r1, r2, r4, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	200005b8 	.word	0x200005b8
 8003ae8:	20000534 	.word	0x20000534
 8003aec:	200005c0 	.word	0x200005c0

08003af0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003af0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8003af2:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_UART_TxCpltCallback+0xc>)
 8003af4:	2000      	movs	r0, #0
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003afa:	bd10      	pop	{r4, pc}
 8003afc:	200005bc 	.word	0x200005bc

08003b00 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_UART_RxCpltCallback+0x30>)
{
 8003b02:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003b04:	681b      	ldr	r3, [r3, #0]
{
 8003b06:	0004      	movs	r4, r0
 8003b08:	4d0a      	ldr	r5, [pc, #40]	; (8003b34 <HAL_UART_RxCpltCallback+0x34>)
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_UART_RxCpltCallback+0x24>
  {
	    RxCpltCallback(rxBuf, UartHandle->RxXferSize - UartHandle->RxXferCount, 0);
 8003b0e:	0002      	movs	r2, r0
 8003b10:	0001      	movs	r1, r0
 8003b12:	325a      	adds	r2, #90	; 0x5a
 8003b14:	3158      	adds	r1, #88	; 0x58
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	8809      	ldrh	r1, [r1, #0]
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	1a89      	subs	r1, r1, r2
 8003b1e:	b289      	uxth	r1, r1
 8003b20:	2200      	movs	r2, #0
 8003b22:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, rxBuf, sizeof(rxBuf));
 8003b24:	0029      	movs	r1, r5
 8003b26:	2210      	movs	r2, #16
 8003b28:	0020      	movs	r0, r4
 8003b2a:	f003 f88d 	bl	8006c48 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	200005b8 	.word	0x200005b8
 8003b34:	200005c0 	.word	0x200005c0

08003b38 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <HAL_UARTEx_RxEventCallback+0x20>)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
 8003b3a:	b570      	push	{r4, r5, r6, lr}
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003b3c:	681b      	ldr	r3, [r3, #0]
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
 8003b3e:	0004      	movs	r4, r0
 8003b40:	4d06      	ldr	r5, [pc, #24]	; (8003b5c <HAL_UARTEx_RxEventCallback+0x24>)
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_UARTEx_RxEventCallback+0x14>
	{
		RxCpltCallback(rxBuf, size, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	0028      	movs	r0, r5
 8003b4a:	4798      	blx	r3
	}
	HAL_UART_Receive_IT(UartHandle, rxBuf, sizeof(rxBuf));
 8003b4c:	0029      	movs	r1, r5
 8003b4e:	2210      	movs	r2, #16
 8003b50:	0020      	movs	r0, r4
 8003b52:	f003 f879 	bl	8006c48 <HAL_UART_Receive_IT>
}
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	200005b8 	.word	0x200005b8
 8003b5c:	200005c0 	.word	0x200005c0

08003b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b60:	480d      	ldr	r0, [pc, #52]	; (8003b98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8003b66:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <LoopForever+0xe>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b6c:	e002      	b.n	8003b74 <LoopCopyDataInit>

08003b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b72:	3304      	adds	r3, #4

08003b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b78:	d3f9      	bcc.n	8003b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b7c:	4c0b      	ldr	r4, [pc, #44]	; (8003bac <LoopForever+0x16>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b80:	e001      	b.n	8003b86 <LoopFillZerobss>

08003b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b84:	3204      	adds	r2, #4

08003b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b88:	d3fb      	bcc.n	8003b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b8a:	f000 f977 	bl	8003e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f00a fcd9 	bl	800e544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b92:	f7fe fc85 	bl	80024a0 <main>

08003b96 <LoopForever>:

LoopForever:
    b LoopForever
 8003b96:	e7fe      	b.n	8003b96 <LoopForever>
   ldr   r0, =_estack
 8003b98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8003ba4:	0800f300 	.word	0x0800f300
  ldr r2, =_sbss
 8003ba8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8003bac:	20001890 	.word	0x20001890

08003bb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <ADC1_COMP_IRQHandler>
	...

08003bb4 <SX1262DVK1CAS_RADIO_IoInit>:
static void SX1262DVK1CAS_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX1262DVK1CAS_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX1262DVK1CAS_RADIO_IoInit(void)
{
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003bb6:	2501      	movs	r5, #1
{
 8003bb8:	b091      	sub	sp, #68	; 0x44
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003bba:	4c42      	ldr	r4, [pc, #264]	; (8003cc4 <SX1262DVK1CAS_RADIO_IoInit+0x110>)
  GPIO_InitTypeDef initStruct = {0};
 8003bbc:	220c      	movs	r2, #12
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	a808      	add	r0, sp, #32
 8003bc2:	f00a fcec 	bl	800e59e <memset>
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003bc8:	27a0      	movs	r7, #160	; 0xa0
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003bca:	432b      	orrs	r3, r5
 8003bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003bd0:	05ff      	lsls	r7, r7, #23
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003bd2:	402b      	ands	r3, r5
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	9b00      	ldr	r3, [sp, #0]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <SX1262DVK1CAS_RADIO_IoInit+0x114>)
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003bda:	0038      	movs	r0, r7
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8003bdc:	9307      	str	r3, [sp, #28]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003bde:	2303      	movs	r3, #3
 8003be0:	9309      	str	r3, [sp, #36]	; 0x24
  initStruct.Pin = RADIO_DIO_1_PIN;
 8003be2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003be4:	a906      	add	r1, sp, #24
  initStruct.Pin = RADIO_DIO_1_PIN;
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003bea:	f000 fff1 	bl	8004bd0 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_BUSY_CLK_ENABLE();
 8003bee:	2202      	movs	r2, #2
 8003bf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_INPUT;
 8003bf2:	2600      	movs	r6, #0
  RADIO_BUSY_CLK_ENABLE();
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Pin = RADIO_BUSY_PIN;
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003bfa:	a906      	add	r1, sp, #24
  RADIO_BUSY_CLK_ENABLE();
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	9b01      	ldr	r3, [sp, #4]
  initStruct.Pin = RADIO_BUSY_PIN;
 8003c02:	2308      	movs	r3, #8
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003c04:	4831      	ldr	r0, [pc, #196]	; (8003ccc <SX1262DVK1CAS_RADIO_IoInit+0x118>)
  initStruct.Pin = RADIO_BUSY_PIN;
 8003c06:	9306      	str	r3, [sp, #24]
  initStruct.Mode = GPIO_MODE_INPUT;
 8003c08:	9607      	str	r6, [sp, #28]
  initStruct.Pull = GPIO_NOPULL;
 8003c0a:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003c0c:	f000 ffe0 	bl	8004bd0 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003c10:	2202      	movs	r2, #2
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8003c12:	2104      	movs	r1, #4
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8003c16:	482d      	ldr	r0, [pc, #180]	; (8003ccc <SX1262DVK1CAS_RADIO_IoInit+0x118>)
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8003c1e:	9106      	str	r1, [sp, #24]
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003c20:	4013      	ands	r3, r2
 8003c22:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8003c24:	a906      	add	r1, sp, #24
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003c26:	9b02      	ldr	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 8003c28:	9608      	str	r6, [sp, #32]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8003c2c:	f000 ffd0 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8003c30:	0032      	movs	r2, r6
 8003c32:	2104      	movs	r1, #4
 8003c34:	4825      	ldr	r0, [pc, #148]	; (8003ccc <SX1262DVK1CAS_RADIO_IoInit+0x118>)
 8003c36:	f001 f909 	bl	8004e4c <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003c3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	2202      	movs	r2, #2
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003c3e:	432b      	orrs	r3, r5
 8003c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c44:	0038      	movs	r0, r7
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003c46:	402b      	ands	r3, r5
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	9b03      	ldr	r3, [sp, #12]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8003c4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c4e:	a90b      	add	r1, sp, #44	; 0x2c
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8003c50:	432b      	orrs	r3, r5
 8003c52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c56:	402b      	ands	r3, r5
 8003c58:	9304      	str	r3, [sp, #16]
 8003c5a:	9b04      	ldr	r3, [sp, #16]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8003c5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c5e:	432b      	orrs	r3, r5
 8003c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	920c      	str	r2, [sp, #48]	; 0x30
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8003c66:	402b      	ands	r3, r5
 8003c68:	9305      	str	r3, [sp, #20]
 8003c6a:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003c70:	337d      	adds	r3, #125	; 0x7d
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c72:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003c74:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8003c76:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c78:	f000 ffaa 	bl	8004bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003c7c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003c7e:	0038      	movs	r0, r7
 8003c80:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003c82:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8003c84:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003c86:	f000 ffa3 	bl	8004bd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003c8a:	2320      	movs	r3, #32
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003c8c:	0038      	movs	r0, r7
 8003c8e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003c90:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8003c92:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003c94:	f000 ff9c 	bl	8004bd0 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 8003c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8003c9a:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 8003c9c:	432b      	orrs	r3, r5
 8003c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 8003ca2:	2410      	movs	r4, #16
  RADIO_NSS_CLK_ENABLE();
 8003ca4:	402b      	ands	r3, r5
 8003ca6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8003ca8:	a906      	add	r1, sp, #24
  RADIO_NSS_CLK_ENABLE();
 8003caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cac:	9507      	str	r5, [sp, #28]
  initStruct.Pull = GPIO_NOPULL;
 8003cae:	9608      	str	r6, [sp, #32]
  initStruct.Pin = RADIO_NSS_PIN;
 8003cb0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8003cb2:	f000 ff8d 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 8003cb6:	002a      	movs	r2, r5
 8003cb8:	0021      	movs	r1, r4
 8003cba:	0038      	movs	r0, r7
 8003cbc:	f001 f8c6 	bl	8004e4c <HAL_GPIO_WritePin>
}
 8003cc0:	b011      	add	sp, #68	; 0x44
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	10110000 	.word	0x10110000
 8003ccc:	50000400 	.word	0x50000400

08003cd0 <SX1262DVK1CAS_RADIO_IoDeInit>:
{
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8003cd2:	2200      	movs	r2, #0
{
 8003cd4:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	4815      	ldr	r0, [pc, #84]	; (8003d30 <SX1262DVK1CAS_RADIO_IoDeInit+0x60>)
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003cda:	24a0      	movs	r4, #160	; 0xa0
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8003cdc:	f001 f8b6 	bl	8004e4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003ce2:	2780      	movs	r7, #128	; 0x80
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003ce4:	2640      	movs	r6, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003ce6:	2520      	movs	r5, #32
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003ce8:	05e4      	lsls	r4, r4, #23
 8003cea:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cec:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003cee:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cf0:	18db      	adds	r3, r3, r3
 8003cf2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003cf4:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003cf6:	f000 ff6b 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003cfa:	0020      	movs	r0, r4
 8003cfc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003cfe:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003d00:	f000 ff66 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003d04:	0020      	movs	r0, r4
 8003d06:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003d08:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003d0a:	f000 ff61 	bl	8004bd0 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8003d0e:	0039      	movs	r1, r7
 8003d10:	0020      	movs	r0, r4
 8003d12:	2200      	movs	r2, #0
 8003d14:	f001 f89a 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8003d18:	0031      	movs	r1, r6
 8003d1a:	0020      	movs	r0, r4
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f001 f895 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8003d22:	2200      	movs	r2, #0
 8003d24:	0029      	movs	r1, r5
 8003d26:	0020      	movs	r0, r4
 8003d28:	f001 f890 	bl	8004e4c <HAL_GPIO_WritePin>
}
 8003d2c:	b007      	add	sp, #28
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d30:	50000400 	.word	0x50000400

08003d34 <SX1262DVK1CAS_RADIO_IoIrqInit>:
{
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	0004      	movs	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8003d38:	4d09      	ldr	r5, [pc, #36]	; (8003d60 <SX1262DVK1CAS_RADIO_IoIrqInit+0x2c>)
 8003d3a:	490a      	ldr	r1, [pc, #40]	; (8003d64 <SX1262DVK1CAS_RADIO_IoIrqInit+0x30>)
 8003d3c:	0028      	movs	r0, r5
 8003d3e:	f000 fdde 	bl	80048fe <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 8003d42:	0028      	movs	r0, r5
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	2100      	movs	r1, #0
 8003d48:	f000 fdd2 	bl	80048f0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2007      	movs	r0, #7
 8003d50:	0011      	movs	r1, r2
 8003d52:	f000 fbf1 	bl	8004538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 8003d56:	2007      	movs	r0, #7
 8003d58:	f000 fc18 	bl	800458c <HAL_NVIC_EnableIRQ>
}
 8003d5c:	bd70      	pop	{r4, r5, r6, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	200005d0 	.word	0x200005d0
 8003d64:	0600000f 	.word	0x0600000f

08003d68 <SX1262DVK1CAS_RADIO_GetWakeUpTime>:
}
 8003d68:	2005      	movs	r0, #5
 8003d6a:	4770      	bx	lr

08003d6c <SX1262DVK1CAS_RADIO_Reset>:
{
 8003d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 8003d6e:	2614      	movs	r6, #20
{
 8003d70:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8003d72:	0032      	movs	r2, r6
 8003d74:	2100      	movs	r1, #0
 8003d76:	a801      	add	r0, sp, #4
 8003d78:	f00a fc11 	bl	800e59e <memset>
  RADIO_RESET_CLK_ENABLE();
 8003d7c:	2002      	movs	r0, #2
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d7e:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003d80:	2703      	movs	r7, #3
  RADIO_RESET_CLK_ENABLE();
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <SX1262DVK1CAS_RADIO_Reset+0x6c>)
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003d84:	4d15      	ldr	r5, [pc, #84]	; (8003ddc <SX1262DVK1CAS_RADIO_Reset+0x70>)
  RADIO_RESET_CLK_ENABLE();
 8003d86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d88:	4301      	orrs	r1, r0
 8003d8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8e:	9402      	str	r4, [sp, #8]
  RADIO_RESET_CLK_ENABLE();
 8003d90:	4003      	ands	r3, r0
 8003d92:	9300      	str	r3, [sp, #0]
  HAL_Delay(10);
 8003d94:	3008      	adds	r0, #8
  RADIO_RESET_CLK_ENABLE();
 8003d96:	9b00      	ldr	r3, [sp, #0]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003d98:	9704      	str	r7, [sp, #16]
  HAL_Delay(10);
 8003d9a:	f7fe ff93 	bl	8002cc4 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003d9e:	0028      	movs	r0, r5
 8003da0:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 8003da2:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003da4:	f000 ff14 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8003da8:	2200      	movs	r2, #0
 8003daa:	0021      	movs	r1, r4
 8003dac:	0028      	movs	r0, r5
 8003dae:	f001 f84d 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8003db2:	0030      	movs	r0, r6
 8003db4:	f7fe ff86 	bl	8002cc4 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003db8:	0028      	movs	r0, r5
 8003dba:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_MODE_ANALOG;
 8003dbc:	9702      	str	r7, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8003dbe:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8003dc0:	f000 ff06 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	0021      	movs	r1, r4
 8003dc8:	0028      	movs	r0, r5
 8003dca:	f001 f83f 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003dce:	200a      	movs	r0, #10
 8003dd0:	f7fe ff78 	bl	8002cc4 <HAL_Delay>
}
 8003dd4:	b007      	add	sp, #28
 8003dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	50000400 	.word	0x50000400

08003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>:
{
 8003de0:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 8003de2:	2108      	movs	r1, #8
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <SX1262DVK1CAS_RADIO_WaitOnBusy+0x10>)
 8003de6:	f001 f82b 	bl	8004e40 <HAL_GPIO_ReadPin>
 8003dea:	2801      	cmp	r0, #1
 8003dec:	d0f9      	beq.n	8003de2 <SX1262DVK1CAS_RADIO_WaitOnBusy+0x2>
}
 8003dee:	bd10      	pop	{r4, pc}
 8003df0:	50000400 	.word	0x50000400

08003df4 <SX1262DVK1CAS_RADIO_ChipSelect>:
{
 8003df4:	0002      	movs	r2, r0
 8003df6:	b510      	push	{r4, lr}
  if (state == 0)
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d105      	bne.n	8003e08 <SX1262DVK1CAS_RADIO_ChipSelect+0x14>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003dfc:	20a0      	movs	r0, #160	; 0xa0
 8003dfe:	2110      	movs	r1, #16
 8003e00:	05c0      	lsls	r0, r0, #23
 8003e02:	f001 f823 	bl	8004e4c <HAL_GPIO_WritePin>
}
 8003e06:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003e08:	2201      	movs	r2, #1
 8003e0a:	e7f7      	b.n	8003dfc <SX1262DVK1CAS_RADIO_ChipSelect+0x8>

08003e0c <SX1262DVK1CAS_RADIO_SetAntSw>:
{
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	b510      	push	{r4, lr}
  switch (state)
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d104      	bne.n	8003e1e <SX1262DVK1CAS_RADIO_SetAntSw+0x12>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 8003e14:	2104      	movs	r1, #4
 8003e16:	4803      	ldr	r0, [pc, #12]	; (8003e24 <SX1262DVK1CAS_RADIO_SetAntSw+0x18>)
 8003e18:	f001 f818 	bl	8004e4c <HAL_GPIO_WritePin>
}
 8003e1c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 8003e1e:	2201      	movs	r2, #1
 8003e20:	e7f8      	b.n	8003e14 <SX1262DVK1CAS_RADIO_SetAntSw+0x8>
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	50000400 	.word	0x50000400

08003e28 <SX1262DVK1CAS_RADIO_BoardIsTcxo>:
}
 8003e28:	2000      	movs	r0, #0
 8003e2a:	4770      	bx	lr

08003e2c <SX1262DVK1CAS_RADIO_Bus_Init>:
{
 8003e2c:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8003e2e:	f003 f811 	bl	8006e54 <BSP_SPI1_Init>
}
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <SX1262DVK1CAS_RADIO_SendRecv>:
{
 8003e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003e36:	240e      	movs	r4, #14
{
 8003e38:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003e3a:	446c      	add	r4, sp
{
 8003e3c:	80d8      	strh	r0, [r3, #6]
 8003e3e:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8003e40:	2201      	movs	r2, #1
 8003e42:	0021      	movs	r1, r4
 8003e44:	0018      	movs	r0, r3
 8003e46:	f002 ffc1 	bl	8006dcc <BSP_SPI1_SendRecv>
  return rxData;
 8003e4a:	8820      	ldrh	r0, [r4, #0]
}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	bd10      	pop	{r4, pc}

08003e50 <SX1262DVK1CAS_RADIO_WakeUp>:
{
 8003e50:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8003e52:	24a0      	movs	r4, #160	; 0xa0
 8003e54:	05e4      	lsls	r4, r4, #23
 8003e56:	2200      	movs	r2, #0
 8003e58:	2110      	movs	r1, #16
 8003e5a:	0020      	movs	r0, r4
 8003e5c:	f000 fff6 	bl	8004e4c <HAL_GPIO_WritePin>
  SX1262DVK1CAS_RADIO_SendRecv(RADIO_GET_STATUS);
 8003e60:	20c0      	movs	r0, #192	; 0xc0
 8003e62:	f7ff ffe7 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
  SX1262DVK1CAS_RADIO_SendRecv(0);
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7ff ffe4 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2110      	movs	r1, #16
 8003e70:	0020      	movs	r0, r4
 8003e72:	f000 ffeb 	bl	8004e4c <HAL_GPIO_WritePin>
  SX1262DVK1CAS_RADIO_WaitOnBusy();
 8003e76:	f7ff ffb3 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 8003e7a:	bd10      	pop	{r4, pc}

08003e7c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e80:	2302      	movs	r3, #2
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_Init+0x24>)
{
 8003e84:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e86:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e88:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e8e:	f7fe ff13 	bl	8002cb8 <HAL_InitTick>
 8003e92:	1e04      	subs	r4, r0, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e96:	f7fe fdb9 	bl	8002a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003e9e:	2401      	movs	r4, #1
 8003ea0:	e7fb      	b.n	8003e9a <HAL_Init+0x1a>
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	40022000 	.word	0x40022000

08003ea8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003ea8:	4a03      	ldr	r2, [pc, #12]	; (8003eb8 <HAL_IncTick+0x10>)
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_IncTick+0x14>)
 8003eac:	6811      	ldr	r1, [r2, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	185b      	adds	r3, r3, r1
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	4770      	bx	lr
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	200005d8 	.word	0x200005d8
 8003ebc:	20000090 	.word	0x20000090

08003ec0 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <HAL_GetUIDw0+0x8>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
}
 8003ec4:	4770      	bx	lr
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	1ff80050 	.word	0x1ff80050

08003ecc <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8003ecc:	4b01      	ldr	r3, [pc, #4]	; (8003ed4 <HAL_GetUIDw1+0x8>)
 8003ece:	6818      	ldr	r0, [r3, #0]
}
 8003ed0:	4770      	bx	lr
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	1ff80054 	.word	0x1ff80054

08003ed8 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <HAL_GetUIDw2+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
}
 8003edc:	4770      	bx	lr
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	1ff80064 	.word	0x1ff80064

08003ee4 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <ADC_DelayMicroSecond+0x24>)
{
 8003ee6:	b513      	push	{r0, r1, r4, lr}
 8003ee8:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003eea:	4908      	ldr	r1, [pc, #32]	; (8003f0c <ADC_DelayMicroSecond+0x28>)
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	f7fc f931 	bl	8000154 <__udivsi3>
 8003ef2:	4344      	muls	r4, r0
 8003ef4:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8003ef6:	9b01      	ldr	r3, [sp, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d100      	bne.n	8003efe <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003efc:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8003efe:	9b01      	ldr	r3, [sp, #4]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	e7f7      	b.n	8003ef6 <ADC_DelayMicroSecond+0x12>
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	2000008c 	.word	0x2000008c
 8003f0c:	000f4240 	.word	0x000f4240

08003f10 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f10:	2103      	movs	r1, #3
 8003f12:	6803      	ldr	r3, [r0, #0]
{
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f18:	6898      	ldr	r0, [r3, #8]
 8003f1a:	4008      	ands	r0, r1
 8003f1c:	2801      	cmp	r0, #1
 8003f1e:	d001      	beq.n	8003f24 <ADC_Disable+0x14>
  return HAL_OK;
 8003f20:	2000      	movs	r0, #0
}
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4202      	tst	r2, r0
 8003f28:	d0fa      	beq.n	8003f20 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	689d      	ldr	r5, [r3, #8]
 8003f2e:	4015      	ands	r5, r2
 8003f30:	2d01      	cmp	r5, #1
 8003f32:	d119      	bne.n	8003f68 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8003f34:	6898      	ldr	r0, [r3, #8]
 8003f36:	3a03      	subs	r2, #3
 8003f38:	4302      	orrs	r2, r0
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003f3e:	f7fe febd 	bl	8002cbc <HAL_GetTick>
 8003f42:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	422b      	tst	r3, r5
 8003f4a:	d0e9      	beq.n	8003f20 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f4c:	f7fe feb6 	bl	8002cbc <HAL_GetTick>
 8003f50:	1b80      	subs	r0, r0, r6
 8003f52:	280a      	cmp	r0, #10
 8003f54:	d9f6      	bls.n	8003f44 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f56:	2310      	movs	r3, #16
 8003f58:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003f5a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f62:	431d      	orrs	r5, r3
 8003f64:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003f66:	e7dc      	b.n	8003f22 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f68:	2310      	movs	r3, #16
 8003f6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f72:	4303      	orrs	r3, r0
 8003f74:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8003f76:	e7d4      	b.n	8003f22 <ADC_Disable+0x12>

08003f78 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f78:	2103      	movs	r1, #3
 8003f7a:	6803      	ldr	r3, [r0, #0]
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f7e:	689a      	ldr	r2, [r3, #8]
{
 8003f80:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f82:	400a      	ands	r2, r1
 8003f84:	2a01      	cmp	r2, #1
 8003f86:	d104      	bne.n	8003f92 <ADC_Enable+0x1a>
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	4211      	tst	r1, r2
 8003f8c:	d001      	beq.n	8003f92 <ADC_Enable+0x1a>
  return HAL_OK;
 8003f8e:	2000      	movs	r0, #0
}
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <ADC_Enable+0x6c>)
 8003f96:	4211      	tst	r1, r2
 8003f98:	d008      	beq.n	8003fac <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fa6:	4303      	orrs	r3, r0
 8003fa8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8003faa:	e7f1      	b.n	8003f90 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8003fac:	2501      	movs	r5, #1
 8003fae:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003fb0:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8003fb2:	432a      	orrs	r2, r5
 8003fb4:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003fb6:	f7ff ff95 	bl	8003ee4 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8003fba:	f7fe fe7f 	bl	8002cbc <HAL_GetTick>
 8003fbe:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	422b      	tst	r3, r5
 8003fc6:	d1e2      	bne.n	8003f8e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fc8:	f7fe fe78 	bl	8002cbc <HAL_GetTick>
 8003fcc:	1b80      	subs	r0, r0, r6
 8003fce:	280a      	cmp	r0, #10
 8003fd0:	d9f6      	bls.n	8003fc0 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003fd6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fde:	431d      	orrs	r5, r3
 8003fe0:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003fe2:	e7d5      	b.n	8003f90 <ADC_Enable+0x18>
 8003fe4:	80000017 	.word	0x80000017

08003fe8 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003fe8:	2204      	movs	r2, #4
 8003fea:	6803      	ldr	r3, [r0, #0]
{
 8003fec:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003fee:	6899      	ldr	r1, [r3, #8]
{
 8003ff0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003ff2:	4211      	tst	r1, r2
 8003ff4:	d101      	bne.n	8003ffa <ADC_ConversionStop+0x12>
  return HAL_OK;
 8003ff6:	2000      	movs	r0, #0
}
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	4211      	tst	r1, r2
 8003ffe:	d006      	beq.n	800400e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004000:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004002:	0792      	lsls	r2, r2, #30
 8004004:	d403      	bmi.n	800400e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004006:	2210      	movs	r2, #16
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800400e:	f7fe fe55 	bl	8002cbc <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004012:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8004014:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4233      	tst	r3, r6
 800401c:	d0eb      	beq.n	8003ff6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800401e:	f7fe fe4d 	bl	8002cbc <HAL_GetTick>
 8004022:	1b40      	subs	r0, r0, r5
 8004024:	280a      	cmp	r0, #10
 8004026:	d9f6      	bls.n	8004016 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800402a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800402e:	4313      	orrs	r3, r2
 8004030:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004034:	4303      	orrs	r3, r0
 8004036:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004038:	e7de      	b.n	8003ff8 <ADC_ConversionStop+0x10>
	...

0800403c <HAL_ADC_Init>:
{
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004040:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004042:	2c00      	cmp	r4, #0
 8004044:	d01b      	beq.n	800407e <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004046:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800404c:	0022      	movs	r2, r4
 800404e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004050:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004052:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004054:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004056:	f7fe f925 	bl	80022a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800405a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800405c:	06db      	lsls	r3, r3, #27
 800405e:	d406      	bmi.n	800406e <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	2204      	movs	r2, #4
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	0008      	movs	r0, r1
 8004068:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800406a:	4211      	tst	r1, r2
 800406c:	d008      	beq.n	8004080 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406e:	2310      	movs	r3, #16
 8004070:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004072:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004074:	4313      	orrs	r3, r2
 8004076:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004078:	2300      	movs	r3, #0
 800407a:	3450      	adds	r4, #80	; 0x50
 800407c:	7023      	strb	r3, [r4, #0]
}
 800407e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004080:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004082:	4955      	ldr	r1, [pc, #340]	; (80041d8 <HAL_ADC_Init+0x19c>)
 8004084:	4011      	ands	r1, r2
 8004086:	2202      	movs	r2, #2
 8004088:	430a      	orrs	r2, r1
 800408a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800408c:	2203      	movs	r2, #3
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	4011      	ands	r1, r2
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_ADC_Init+0x1a0>)
 8004094:	2901      	cmp	r1, #1
 8004096:	d102      	bne.n	800409e <HAL_ADC_Init+0x62>
 8004098:	681d      	ldr	r5, [r3, #0]
 800409a:	420d      	tst	r5, r1
 800409c:	d119      	bne.n	80040d2 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800409e:	2680      	movs	r6, #128	; 0x80
 80040a0:	6861      	ldr	r1, [r4, #4]
 80040a2:	05f6      	lsls	r6, r6, #23
 80040a4:	004d      	lsls	r5, r1, #1
 80040a6:	086d      	lsrs	r5, r5, #1
 80040a8:	42b5      	cmp	r5, r6
 80040aa:	d003      	beq.n	80040b4 <HAL_ADC_Init+0x78>
 80040ac:	2580      	movs	r5, #128	; 0x80
 80040ae:	062d      	lsls	r5, r5, #24
 80040b0:	42a9      	cmp	r1, r5
 80040b2:	d176      	bne.n	80041a2 <HAL_ADC_Init+0x166>
 80040b4:	691d      	ldr	r5, [r3, #16]
 80040b6:	00ad      	lsls	r5, r5, #2
 80040b8:	08ad      	lsrs	r5, r5, #2
 80040ba:	611d      	str	r5, [r3, #16]
 80040bc:	691d      	ldr	r5, [r3, #16]
 80040be:	4329      	orrs	r1, r5
 80040c0:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80040c2:	2518      	movs	r5, #24
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	43a9      	bics	r1, r5
 80040c8:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80040ca:	68d9      	ldr	r1, [r3, #12]
 80040cc:	68a5      	ldr	r5, [r4, #8]
 80040ce:	4329      	orrs	r1, r5
 80040d0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80040d2:	6811      	ldr	r1, [r2, #0]
 80040d4:	4d42      	ldr	r5, [pc, #264]	; (80041e0 <HAL_ADC_Init+0x1a4>)
 80040d6:	4029      	ands	r1, r5
 80040d8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80040da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040dc:	6815      	ldr	r5, [r2, #0]
 80040de:	0649      	lsls	r1, r1, #25
 80040e0:	4329      	orrs	r1, r5
 80040e2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	0552      	lsls	r2, r2, #21
 80040ea:	4211      	tst	r1, r2
 80040ec:	d102      	bne.n	80040f4 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	493b      	ldr	r1, [pc, #236]	; (80041e4 <HAL_ADC_Init+0x1a8>)
 80040f8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80040fa:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80040fc:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80040fe:	68dd      	ldr	r5, [r3, #12]
 8004100:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004102:	2902      	cmp	r1, #2
 8004104:	d100      	bne.n	8004108 <HAL_ADC_Init+0xcc>
 8004106:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004108:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800410a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800410c:	4332      	orrs	r2, r6
 800410e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004110:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004112:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004114:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004116:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004118:	69e5      	ldr	r5, [r4, #28]
 800411a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800411c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800411e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004120:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004122:	0025      	movs	r5, r4
 8004124:	352c      	adds	r5, #44	; 0x2c
 8004126:	782d      	ldrb	r5, [r5, #0]
 8004128:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800412a:	432a      	orrs	r2, r5
 800412c:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800412e:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004130:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004132:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004134:	30ff      	adds	r0, #255	; 0xff
 8004136:	4282      	cmp	r2, r0
 8004138:	d004      	beq.n	8004144 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800413a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800413c:	68d8      	ldr	r0, [r3, #12]
 800413e:	432a      	orrs	r2, r5
 8004140:	4302      	orrs	r2, r0
 8004142:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004144:	1ca2      	adds	r2, r4, #2
 8004146:	7fd2      	ldrb	r2, [r2, #31]
 8004148:	2a01      	cmp	r2, #1
 800414a:	d106      	bne.n	800415a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800414c:	2900      	cmp	r1, #0
 800414e:	d134      	bne.n	80041ba <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	68d9      	ldr	r1, [r3, #12]
 8004154:	0252      	lsls	r2, r2, #9
 8004156:	430a      	orrs	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800415a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800415c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800415e:	2901      	cmp	r1, #1
 8004160:	d133      	bne.n	80041ca <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004162:	4821      	ldr	r0, [pc, #132]	; (80041e8 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004164:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004166:	4002      	ands	r2, r0
 8004168:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800416a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800416c:	6918      	ldr	r0, [r3, #16]
 800416e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004170:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004172:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004174:	4302      	orrs	r2, r0
 8004176:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	4311      	orrs	r1, r2
 800417c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800417e:	2107      	movs	r1, #7
 8004180:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004182:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004184:	438a      	bics	r2, r1
 8004186:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800418c:	430a      	orrs	r2, r1
 800418e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004190:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8004192:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8004194:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004196:	4393      	bics	r3, r2
 8004198:	001a      	movs	r2, r3
 800419a:	2301      	movs	r3, #1
 800419c:	4313      	orrs	r3, r2
 800419e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80041a0:	e76d      	b.n	800407e <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80041a2:	691d      	ldr	r5, [r3, #16]
 80041a4:	4e11      	ldr	r6, [pc, #68]	; (80041ec <HAL_ADC_Init+0x1b0>)
 80041a6:	00ad      	lsls	r5, r5, #2
 80041a8:	08ad      	lsrs	r5, r5, #2
 80041aa:	611d      	str	r5, [r3, #16]
 80041ac:	6815      	ldr	r5, [r2, #0]
 80041ae:	4035      	ands	r5, r6
 80041b0:	6015      	str	r5, [r2, #0]
 80041b2:	6815      	ldr	r5, [r2, #0]
 80041b4:	4329      	orrs	r1, r5
 80041b6:	6011      	str	r1, [r2, #0]
 80041b8:	e783      	b.n	80040c2 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ba:	2120      	movs	r1, #32
 80041bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041be:	4301      	orrs	r1, r0
 80041c0:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80041c4:	430a      	orrs	r2, r1
 80041c6:	65a2      	str	r2, [r4, #88]	; 0x58
 80041c8:	e7c7      	b.n	800415a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80041ca:	2101      	movs	r1, #1
 80041cc:	420a      	tst	r2, r1
 80041ce:	d0d6      	beq.n	800417e <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	438a      	bics	r2, r1
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	e7d2      	b.n	800417e <HAL_ADC_Init+0x142>
 80041d8:	fffffefd 	.word	0xfffffefd
 80041dc:	40012708 	.word	0x40012708
 80041e0:	fdffffff 	.word	0xfdffffff
 80041e4:	fffe0219 	.word	0xfffe0219
 80041e8:	fffffc03 	.word	0xfffffc03
 80041ec:	ffc3ffff 	.word	0xffc3ffff

080041f0 <HAL_ADC_DeInit>:
{
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80041f4:	2501      	movs	r5, #1
  if(hadc == NULL)
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d011      	beq.n	800421e <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80041fa:	2302      	movs	r3, #2
 80041fc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80041fe:	4313      	orrs	r3, r2
 8004200:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004202:	f7ff fef1 	bl	8003fe8 <ADC_ConversionStop>
 8004206:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004208:	d137      	bne.n	800427a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 800420a:	0020      	movs	r0, r4
 800420c:	f7ff fe80 	bl	8003f10 <ADC_Disable>
 8004210:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8004212:	2801      	cmp	r0, #1
 8004214:	d105      	bne.n	8004222 <HAL_ADC_DeInit+0x32>
{
 8004216:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8004218:	2300      	movs	r3, #0
 800421a:	3450      	adds	r4, #80	; 0x50
 800421c:	7023      	strb	r3, [r4, #0]
}
 800421e:	0028      	movs	r0, r5
 8004220:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8004222:	2301      	movs	r3, #1
 8004224:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	4915      	ldr	r1, [pc, #84]	; (8004280 <HAL_ADC_DeInit+0x90>)
 800422a:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 800422c:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800422e:	400a      	ands	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004234:	4914      	ldr	r1, [pc, #80]	; (8004288 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004236:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	400a      	ands	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	4912      	ldr	r1, [pc, #72]	; (800428c <HAL_ADC_DeInit+0x9c>)
 8004242:	400a      	ands	r2, r1
 8004244:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	4911      	ldr	r1, [pc, #68]	; (8004290 <HAL_ADC_DeInit+0xa0>)
 800424a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800424c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800424e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	438a      	bics	r2, r1
 8004254:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <HAL_ADC_DeInit+0xa4>)
 800425a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800425c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800425e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004260:	33b4      	adds	r3, #180	; 0xb4
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	438a      	bics	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	438a      	bics	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 800426e:	f7fe f829 	bl	80022c4 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004272:	2300      	movs	r3, #0
 8004274:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8004276:	6563      	str	r3, [r4, #84]	; 0x54
 8004278:	e7ce      	b.n	8004218 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800427a:	2801      	cmp	r0, #1
 800427c:	d0cb      	beq.n	8004216 <HAL_ADC_DeInit+0x26>
 800427e:	e7d2      	b.n	8004226 <HAL_ADC_DeInit+0x36>
 8004280:	fffff760 	.word	0xfffff760
 8004284:	0000089f 	.word	0x0000089f
 8004288:	efffffff 	.word	0xefffffff
 800428c:	833e0200 	.word	0x833e0200
 8004290:	3ffffc02 	.word	0x3ffffc02
 8004294:	f000f000 	.word	0xf000f000

08004298 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004298:	6803      	ldr	r3, [r0, #0]
{
 800429a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800429c:	689b      	ldr	r3, [r3, #8]
{
 800429e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80042a0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042a2:	075b      	lsls	r3, r3, #29
 80042a4:	d41a      	bmi.n	80042dc <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80042a6:	0025      	movs	r5, r4
 80042a8:	3550      	adds	r5, #80	; 0x50
 80042aa:	782b      	ldrb	r3, [r5, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d015      	beq.n	80042dc <HAL_ADC_Start+0x44>
 80042b0:	2301      	movs	r3, #1
 80042b2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80042b4:	69e3      	ldr	r3, [r4, #28]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d111      	bne.n	80042de <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80042ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042bc:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80042be:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80042c0:	401a      	ands	r2, r3
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042c8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80042ca:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80042cc:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80042ce:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	3a18      	subs	r2, #24
 80042d8:	430a      	orrs	r2, r1
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80042de:	0020      	movs	r0, r4
 80042e0:	f7ff fe4a 	bl	8003f78 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d0e8      	beq.n	80042ba <HAL_ADC_Start+0x22>
 80042e8:	e7f8      	b.n	80042dc <HAL_ADC_Start+0x44>
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	fffff0fe 	.word	0xfffff0fe

080042f0 <HAL_ADC_Stop>:
{
 80042f0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80042f2:	0006      	movs	r6, r0
 80042f4:	3650      	adds	r6, #80	; 0x50
 80042f6:	7833      	ldrb	r3, [r6, #0]
{
 80042f8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80042fa:	2002      	movs	r0, #2
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d012      	beq.n	8004326 <HAL_ADC_Stop+0x36>
 8004300:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004302:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8004304:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004306:	f7ff fe6f 	bl	8003fe8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800430a:	2800      	cmp	r0, #0
 800430c:	d109      	bne.n	8004322 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800430e:	0020      	movs	r0, r4
 8004310:	f7ff fdfe 	bl	8003f10 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004314:	2800      	cmp	r0, #0
 8004316:	d104      	bne.n	8004322 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8004318:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800431a:	4a03      	ldr	r2, [pc, #12]	; (8004328 <HAL_ADC_Stop+0x38>)
 800431c:	4013      	ands	r3, r2
 800431e:	431d      	orrs	r5, r3
 8004320:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004322:	2300      	movs	r3, #0
 8004324:	7033      	strb	r3, [r6, #0]
}
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	fffffefe 	.word	0xfffffefe

0800432c <HAL_ADC_PollForConversion>:
{
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800432e:	6946      	ldr	r6, [r0, #20]
{
 8004330:	0004      	movs	r4, r0
 8004332:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004334:	2e08      	cmp	r6, #8
 8004336:	d00d      	beq.n	8004354 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004338:	6803      	ldr	r3, [r0, #0]
 800433a:	2001      	movs	r0, #1
 800433c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800433e:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004340:	4203      	tst	r3, r0
 8004342:	d007      	beq.n	8004354 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004344:	2320      	movs	r3, #32
 8004346:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8004348:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434a:	4313      	orrs	r3, r2
 800434c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800434e:	2300      	movs	r3, #0
 8004350:	7023      	strb	r3, [r4, #0]
}
 8004352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004354:	f7fe fcb2 	bl	8002cbc <HAL_GetTick>
 8004358:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4216      	tst	r6, r2
 8004360:	d024      	beq.n	80043ac <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	430a      	orrs	r2, r1
 800436a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800436c:	22c0      	movs	r2, #192	; 0xc0
 800436e:	68d9      	ldr	r1, [r3, #12]
 8004370:	0112      	lsls	r2, r2, #4
 8004372:	4211      	tst	r1, r2
 8004374:	d113      	bne.n	800439e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004376:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004378:	7fd2      	ldrb	r2, [r2, #31]
 800437a:	2a00      	cmp	r2, #0
 800437c:	d10f      	bne.n	800439e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	0712      	lsls	r2, r2, #28
 8004382:	d50c      	bpl.n	800439e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	0752      	lsls	r2, r2, #29
 8004388:	d423      	bmi.n	80043d2 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800438a:	210c      	movs	r1, #12
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	438a      	bics	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8004392:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004394:	4913      	ldr	r1, [pc, #76]	; (80043e4 <HAL_ADC_PollForConversion+0xb8>)
 8004396:	4011      	ands	r1, r2
 8004398:	2201      	movs	r2, #1
 800439a:	430a      	orrs	r2, r1
 800439c:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800439e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80043a0:	69a2      	ldr	r2, [r4, #24]
 80043a2:	4282      	cmp	r2, r0
 80043a4:	d1d5      	bne.n	8004352 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043a6:	220c      	movs	r2, #12
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e7d2      	b.n	8004352 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80043ac:	1c6a      	adds	r2, r5, #1
 80043ae:	d0d5      	beq.n	800435c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d108      	bne.n	80043c6 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043b4:	2304      	movs	r3, #4
 80043b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80043b8:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043ba:	4313      	orrs	r3, r2
 80043bc:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80043be:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80043c0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80043c2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80043c4:	e7c5      	b.n	8004352 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80043c6:	f7fe fc79 	bl	8002cbc <HAL_GetTick>
 80043ca:	1bc0      	subs	r0, r0, r7
 80043cc:	42a8      	cmp	r0, r5
 80043ce:	d9c4      	bls.n	800435a <HAL_ADC_PollForConversion+0x2e>
 80043d0:	e7f0      	b.n	80043b4 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d2:	2220      	movs	r2, #32
 80043d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80043d6:	430a      	orrs	r2, r1
 80043d8:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043da:	2201      	movs	r2, #1
 80043dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80043de:	430a      	orrs	r2, r1
 80043e0:	65a2      	str	r2, [r4, #88]	; 0x58
 80043e2:	e7dc      	b.n	800439e <HAL_ADC_PollForConversion+0x72>
 80043e4:	fffffefe 	.word	0xfffffefe

080043e8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80043e8:	6803      	ldr	r3, [r0, #0]
 80043ea:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_ADC_ConfigChannel>:
{
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80043f2:	0004      	movs	r4, r0
 80043f4:	3450      	adds	r4, #80	; 0x50
 80043f6:	7822      	ldrb	r2, [r4, #0]
{
 80043f8:	0003      	movs	r3, r0
 80043fa:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80043fc:	2002      	movs	r0, #2
 80043fe:	2a01      	cmp	r2, #1
 8004400:	d00b      	beq.n	800441a <HAL_ADC_ConfigChannel+0x2a>
 8004402:	3801      	subs	r0, #1
 8004404:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	6891      	ldr	r1, [r2, #8]
 800440a:	0749      	lsls	r1, r1, #29
 800440c:	d506      	bpl.n	800441c <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800440e:	2220      	movs	r2, #32
 8004410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004412:	430a      	orrs	r2, r1
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004416:	2300      	movs	r3, #0
 8004418:	7023      	strb	r3, [r4, #0]
}
 800441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800441c:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800441e:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8004420:	4e19      	ldr	r6, [pc, #100]	; (8004488 <HAL_ADC_ConfigChannel+0x98>)
 8004422:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004424:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004426:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004428:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800442a:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 800442c:	42b7      	cmp	r7, r6
 800442e:	d019      	beq.n	8004464 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004430:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004432:	4301      	orrs	r1, r0
 8004434:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <HAL_ADC_ConfigChannel+0x9c>)
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004442:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8004444:	430b      	orrs	r3, r1
 8004446:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004448:	f7ff fd4c 	bl	8003ee4 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	039b      	lsls	r3, r3, #14
 8004450:	d505      	bpl.n	800445e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	4a0d      	ldr	r2, [pc, #52]	; (800448c <HAL_ADC_ConfigChannel+0x9c>)
 8004456:	03db      	lsls	r3, r3, #15
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800445c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800445e:	2000      	movs	r0, #0
 8004460:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004462:	e7da      	b.n	800441a <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004464:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8004466:	438d      	bics	r5, r1
 8004468:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800446e:	4a07      	ldr	r2, [pc, #28]	; (800448c <HAL_ADC_ConfigChannel+0x9c>)
 8004470:	4907      	ldr	r1, [pc, #28]	; (8004490 <HAL_ADC_ConfigChannel+0xa0>)
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	400b      	ands	r3, r1
 8004476:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004478:	0383      	lsls	r3, r0, #14
 800447a:	d5f0      	bpl.n	800445e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800447c:	4a03      	ldr	r2, [pc, #12]	; (800448c <HAL_ADC_ConfigChannel+0x9c>)
 800447e:	4905      	ldr	r1, [pc, #20]	; (8004494 <HAL_ADC_ConfigChannel+0xa4>)
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	400b      	ands	r3, r1
 8004484:	e7ea      	b.n	800445c <HAL_ADC_ConfigChannel+0x6c>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	00001001 	.word	0x00001001
 800448c:	40012708 	.word	0x40012708
 8004490:	ff7fffff 	.word	0xff7fffff
 8004494:	ffbfffff 	.word	0xffbfffff

08004498 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800449a:	0005      	movs	r5, r0
 800449c:	3550      	adds	r5, #80	; 0x50
 800449e:	782b      	ldrb	r3, [r5, #0]
{
 80044a0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80044a2:	2002      	movs	r0, #2
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d044      	beq.n	8004532 <HAL_ADCEx_Calibration_Start+0x9a>
 80044a8:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044aa:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80044ac:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	6898      	ldr	r0, [r3, #8]
 80044b2:	4010      	ands	r0, r2
 80044b4:	2801      	cmp	r0, #1
 80044b6:	d109      	bne.n	80044cc <HAL_ADCEx_Calibration_Start+0x34>
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4202      	tst	r2, r0
 80044bc:	d006      	beq.n	80044cc <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044be:	2320      	movs	r3, #32
 80044c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044c2:	4313      	orrs	r3, r2
 80044c4:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c6:	2300      	movs	r3, #0
 80044c8:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80044ca:	e032      	b.n	8004532 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 80044cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044ce:	4919      	ldr	r1, [pc, #100]	; (8004534 <HAL_ADCEx_Calibration_Start+0x9c>)
 80044d0:	4011      	ands	r1, r2
 80044d2:	2202      	movs	r2, #2
 80044d4:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80044d6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80044d8:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80044da:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	438a      	bics	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80044e2:	2280      	movs	r2, #128	; 0x80
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	0612      	lsls	r2, r2, #24
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80044ec:	f7fe fbe6 	bl	8002cbc <HAL_GetTick>
 80044f0:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	db0c      	blt.n	8004514 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80044fa:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80044fc:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80044fe:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004500:	430e      	orrs	r6, r1
 8004502:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004504:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004506:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004508:	4393      	bics	r3, r2
 800450a:	001a      	movs	r2, r3
 800450c:	2301      	movs	r3, #1
 800450e:	4313      	orrs	r3, r2
 8004510:	6563      	str	r3, [r4, #84]	; 0x54
 8004512:	e7d8      	b.n	80044c6 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004514:	f7fe fbd2 	bl	8002cbc <HAL_GetTick>
 8004518:	1bc0      	subs	r0, r0, r7
 800451a:	280a      	cmp	r0, #10
 800451c:	d9e9      	bls.n	80044f2 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800451e:	2212      	movs	r2, #18
 8004520:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004522:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004524:	4393      	bics	r3, r2
 8004526:	001a      	movs	r2, r3
 8004528:	2310      	movs	r3, #16
 800452a:	4313      	orrs	r3, r2
 800452c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800452e:	2300      	movs	r3, #0
 8004530:	702b      	strb	r3, [r5, #0]
}
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004534:	fffffefd 	.word	0xfffffefd

08004538 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004538:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800453a:	25ff      	movs	r5, #255	; 0xff
 800453c:	2403      	movs	r4, #3
 800453e:	002a      	movs	r2, r5
 8004540:	4004      	ands	r4, r0
 8004542:	00e4      	lsls	r4, r4, #3
 8004544:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004546:	0189      	lsls	r1, r1, #6
 8004548:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800454a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800454c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800454e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8004550:	2800      	cmp	r0, #0
 8004552:	db0a      	blt.n	800456a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004554:	24c0      	movs	r4, #192	; 0xc0
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_NVIC_SetPriority+0x4c>)
 8004558:	0880      	lsrs	r0, r0, #2
 800455a:	0080      	lsls	r0, r0, #2
 800455c:	18c0      	adds	r0, r0, r3
 800455e:	00a4      	lsls	r4, r4, #2
 8004560:	5903      	ldr	r3, [r0, r4]
 8004562:	401a      	ands	r2, r3
 8004564:	4311      	orrs	r1, r2
 8004566:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004568:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800456a:	200f      	movs	r0, #15
 800456c:	4003      	ands	r3, r0
 800456e:	3b08      	subs	r3, #8
 8004570:	4805      	ldr	r0, [pc, #20]	; (8004588 <HAL_NVIC_SetPriority+0x50>)
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	181b      	adds	r3, r3, r0
 8004578:	69d8      	ldr	r0, [r3, #28]
 800457a:	4002      	ands	r2, r0
 800457c:	4311      	orrs	r1, r2
 800457e:	61d9      	str	r1, [r3, #28]
 8004580:	e7f2      	b.n	8004568 <HAL_NVIC_SetPriority+0x30>
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800458c:	2800      	cmp	r0, #0
 800458e:	db05      	blt.n	800459c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004590:	231f      	movs	r3, #31
 8004592:	4018      	ands	r0, r3
 8004594:	3b1e      	subs	r3, #30
 8004596:	4083      	lsls	r3, r0
 8004598:	4a01      	ldr	r2, [pc, #4]	; (80045a0 <HAL_NVIC_EnableIRQ+0x14>)
 800459a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800459c:	4770      	bx	lr
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	e000e100 	.word	0xe000e100

080045a4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	db09      	blt.n	80045bc <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a8:	231f      	movs	r3, #31
 80045aa:	4018      	ands	r0, r3
 80045ac:	3b1e      	subs	r3, #30
 80045ae:	4083      	lsls	r3, r0
 80045b0:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <HAL_NVIC_DisableIRQ+0x1c>)
 80045b2:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045b8:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80045bc:	4770      	bx	lr
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	e000e104 	.word	0xe000e104

080045c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80045c8:	2001      	movs	r0, #1
  if(hdma == NULL)
 80045ca:	2c00      	cmp	r4, #0
 80045cc:	d035      	beq.n	800463a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_DMA_Init+0x78>)
 80045d2:	2114      	movs	r1, #20
 80045d4:	18e8      	adds	r0, r5, r3
 80045d6:	f7fb fdbd 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045dc:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80045de:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045e0:	2302      	movs	r3, #2
 80045e2:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045e4:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80045e6:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045e8:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045ec:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045ee:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80045f0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f2:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80045f4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f6:	433b      	orrs	r3, r7
 80045f8:	6967      	ldr	r7, [r4, #20]
 80045fa:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fc:	69a7      	ldr	r7, [r4, #24]
 80045fe:	433b      	orrs	r3, r7
 8004600:	69e7      	ldr	r7, [r4, #28]
 8004602:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004604:	6a27      	ldr	r7, [r4, #32]
 8004606:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004608:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800460a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	4299      	cmp	r1, r3
 8004612:	d00c      	beq.n	800462e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004614:	251c      	movs	r5, #28
 8004616:	4028      	ands	r0, r5
 8004618:	3d0d      	subs	r5, #13
 800461a:	4085      	lsls	r5, r0
 800461c:	490a      	ldr	r1, [pc, #40]	; (8004648 <HAL_DMA_Init+0x84>)
 800461e:	680b      	ldr	r3, [r1, #0]
 8004620:	43ab      	bics	r3, r5
 8004622:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	680d      	ldr	r5, [r1, #0]
 8004628:	4083      	lsls	r3, r0
 800462a:	432b      	orrs	r3, r5
 800462c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004630:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004632:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004634:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8004636:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004638:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463c:	bffdfff8 	.word	0xbffdfff8
 8004640:	40020000 	.word	0x40020000
 8004644:	ffff800f 	.word	0xffff800f
 8004648:	400200a8 	.word	0x400200a8

0800464c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	2501      	movs	r5, #1
 8004650:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8004652:	0028      	movs	r0, r5
  if (NULL == hdma )
 8004654:	2c00      	cmp	r4, #0
 8004656:	d021      	beq.n	800469c <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004658:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800465a:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800465c:	6833      	ldr	r3, [r6, #0]
 800465e:	43ab      	bics	r3, r5
 8004660:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_DMA_DeInit+0x54>)
 8004664:	18f0      	adds	r0, r6, r3
 8004666:	f7fb fd75 	bl	8000154 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800466a:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800466c:	0083      	lsls	r3, r0, #2
 800466e:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004670:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8004672:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004674:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004676:	390d      	subs	r1, #13
 8004678:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 800467a:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800467c:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 800467e:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8004680:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004682:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004684:	4d08      	ldr	r5, [pc, #32]	; (80046a8 <HAL_DMA_DeInit+0x5c>)
 8004686:	682a      	ldr	r2, [r5, #0]
 8004688:	438a      	bics	r2, r1
 800468a:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 800468c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800468e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004690:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004692:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004694:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004696:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8004698:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800469a:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	bffdfff8 	.word	0xbffdfff8
 80046a4:	40020000 	.word	0x40020000
 80046a8:	400200a8 	.word	0x400200a8

080046ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046ae:	1d45      	adds	r5, r0, #5
{
 80046b0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80046b2:	7feb      	ldrb	r3, [r5, #31]
{
 80046b4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80046b6:	2002      	movs	r0, #2
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d029      	beq.n	8004710 <HAL_DMA_Start_IT+0x64>
 80046bc:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80046be:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 80046c0:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	2600      	movs	r6, #0
 80046c6:	469c      	mov	ip, r3
 80046c8:	4660      	mov	r0, ip
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2801      	cmp	r0, #1
 80046ce:	d12a      	bne.n	8004726 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d0:	3001      	adds	r0, #1
 80046d2:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046d4:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d6:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046d8:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80046da:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046dc:	361c      	adds	r6, #28
 80046de:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 80046e0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046e2:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 80046e4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80046e8:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ee:	68a3      	ldr	r3, [r4, #8]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d10e      	bne.n	8004712 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046f4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046f6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80046f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046fe:	230e      	movs	r3, #14
 8004700:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004702:	4313      	orrs	r3, r2
 8004704:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8004706:	2301      	movs	r3, #1
 8004708:	6802      	ldr	r2, [r0, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2000      	movs	r0, #0
}
 8004710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004712:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004714:	60c2      	str	r2, [r0, #12]
 8004716:	e7ef      	b.n	80046f8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004718:	2204      	movs	r2, #4
 800471a:	6803      	ldr	r3, [r0, #0]
 800471c:	4393      	bics	r3, r2
 800471e:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004720:	6802      	ldr	r2, [r0, #0]
 8004722:	230a      	movs	r3, #10
 8004724:	e7ed      	b.n	8004702 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8004726:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8004728:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800472a:	e7f1      	b.n	8004710 <HAL_DMA_Start_IT+0x64>

0800472c <HAL_DMA_Abort>:
{
 800472c:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800472e:	1d85      	adds	r5, r0, #6
 8004730:	7feb      	ldrb	r3, [r5, #31]
 8004732:	1d44      	adds	r4, r0, #5
 8004734:	2b02      	cmp	r3, #2
 8004736:	d005      	beq.n	8004744 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004738:	2304      	movs	r3, #4
 800473a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800473c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800473e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004740:	77e3      	strb	r3, [r4, #31]
}
 8004742:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004744:	210e      	movs	r1, #14
 8004746:	6803      	ldr	r3, [r0, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	438a      	bics	r2, r1
 800474c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800474e:	2201      	movs	r2, #1
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	4391      	bics	r1, r2
 8004754:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004756:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004758:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800475a:	201c      	movs	r0, #28
 800475c:	4003      	ands	r3, r0
 800475e:	0010      	movs	r0, r2
 8004760:	4098      	lsls	r0, r3
 8004762:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004764:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004766:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8004768:	77e0      	strb	r0, [r4, #31]
    return status;
 800476a:	e7ea      	b.n	8004742 <HAL_DMA_Abort+0x16>

0800476c <HAL_DMA_Abort_IT>:
{
 800476c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800476e:	1d84      	adds	r4, r0, #6
 8004770:	7fe3      	ldrb	r3, [r4, #31]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d004      	beq.n	8004780 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004776:	2304      	movs	r3, #4
 8004778:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800477a:	3b03      	subs	r3, #3
}
 800477c:	0018      	movs	r0, r3
 800477e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004780:	210e      	movs	r1, #14
 8004782:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004784:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	438a      	bics	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800478c:	2201      	movs	r2, #1
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	4391      	bics	r1, r2
 8004792:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004794:	231c      	movs	r3, #28
 8004796:	402b      	ands	r3, r5
 8004798:	0015      	movs	r5, r2
 800479a:	409d      	lsls	r5, r3
 800479c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800479e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047a0:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80047a2:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80047a4:	2400      	movs	r4, #0
 80047a6:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80047a8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80047ac:	42a2      	cmp	r2, r4
 80047ae:	d0e5      	beq.n	800477c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80047b0:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	0023      	movs	r3, r4
 80047b4:	e7e2      	b.n	800477c <HAL_DMA_Abort_IT+0x10>

080047b6 <HAL_DMA_IRQHandler>:
{
 80047b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80047b8:	221c      	movs	r2, #28
 80047ba:	2704      	movs	r7, #4
 80047bc:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047be:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80047c0:	4032      	ands	r2, r6
 80047c2:	003e      	movs	r6, r7
 80047c4:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047c6:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80047c8:	6803      	ldr	r3, [r0, #0]
 80047ca:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80047cc:	4235      	tst	r5, r6
 80047ce:	d00d      	beq.n	80047ec <HAL_DMA_IRQHandler+0x36>
 80047d0:	423c      	tst	r4, r7
 80047d2:	d00b      	beq.n	80047ec <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	0692      	lsls	r2, r2, #26
 80047d8:	d402      	bmi.n	80047e0 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	43ba      	bics	r2, r7
 80047de:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80047e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80047e2:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d019      	beq.n	800481c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80047e8:	4798      	blx	r3
  return;
 80047ea:	e017      	b.n	800481c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80047ec:	2702      	movs	r7, #2
 80047ee:	003e      	movs	r6, r7
 80047f0:	4096      	lsls	r6, r2
 80047f2:	4235      	tst	r5, r6
 80047f4:	d013      	beq.n	800481e <HAL_DMA_IRQHandler+0x68>
 80047f6:	423c      	tst	r4, r7
 80047f8:	d011      	beq.n	800481e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	0692      	lsls	r2, r2, #26
 80047fe:	d406      	bmi.n	800480e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004800:	240a      	movs	r4, #10
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	43a2      	bics	r2, r4
 8004806:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004808:	2201      	movs	r2, #1
 800480a:	1d83      	adds	r3, r0, #6
 800480c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800480e:	2200      	movs	r2, #0
 8004810:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004812:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004814:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8004816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8004818:	4293      	cmp	r3, r2
 800481a:	d1e5      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x32>
}
 800481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800481e:	2608      	movs	r6, #8
 8004820:	0037      	movs	r7, r6
 8004822:	4097      	lsls	r7, r2
 8004824:	423d      	tst	r5, r7
 8004826:	d0f9      	beq.n	800481c <HAL_DMA_IRQHandler+0x66>
 8004828:	4234      	tst	r4, r6
 800482a:	d0f7      	beq.n	800481c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482c:	250e      	movs	r5, #14
 800482e:	681c      	ldr	r4, [r3, #0]
 8004830:	43ac      	bics	r4, r5
 8004832:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004834:	2301      	movs	r3, #1
 8004836:	001c      	movs	r4, r3
 8004838:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800483a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800483c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800483e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004840:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004842:	2200      	movs	r2, #0
 8004844:	1d43      	adds	r3, r0, #5
 8004846:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004848:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800484a:	e7e5      	b.n	8004818 <HAL_DMA_IRQHandler+0x62>

0800484c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800484c:	0003      	movs	r3, r0
 800484e:	b570      	push	{r4, r5, r6, lr}
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
  {
    return HAL_ERROR;
 8004850:	2001      	movs	r0, #1
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8004852:	2b00      	cmp	r3, #0
 8004854:	d03a      	beq.n	80048cc <HAL_EXTI_SetConfigLine+0x80>
 8004856:	2900      	cmp	r1, #0
 8004858:	d038      	beq.n	80048cc <HAL_EXTI_SetConfigLine+0x80>

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800485a:	221f      	movs	r2, #31
  maskline = (1uL << linepos);
 800485c:	0005      	movs	r5, r0
  hexti->Line = pExtiConfig->Line;
 800485e:	680c      	ldr	r4, [r1, #0]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8004860:	4022      	ands	r2, r4
  hexti->Line = pExtiConfig->Line;
 8004862:	601c      	str	r4, [r3, #0]
  maskline = (1uL << linepos);
 8004864:	4095      	lsls	r5, r2

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_EXTI_SetConfigLine+0x9c>)
 8004868:	01a6      	lsls	r6, r4, #6
 800486a:	d520      	bpl.n	80048ae <HAL_EXTI_SetConfigLine+0x62>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800486c:	688e      	ldr	r6, [r1, #8]
 800486e:	4206      	tst	r6, r0
 8004870:	d02d      	beq.n	80048ce <HAL_EXTI_SetConfigLine+0x82>
    {
      EXTI->RTSR |= maskline;
 8004872:	6898      	ldr	r0, [r3, #8]
 8004874:	4328      	orrs	r0, r5
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8004876:	6098      	str	r0, [r3, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8004878:	07b0      	lsls	r0, r6, #30
 800487a:	d52b      	bpl.n	80048d4 <HAL_EXTI_SetConfigLine+0x88>
    {
      EXTI->FTSR |= maskline;
 800487c:	68d8      	ldr	r0, [r3, #12]
 800487e:	4328      	orrs	r0, r5
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8004880:	60d8      	str	r0, [r3, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8004882:	20c0      	movs	r0, #192	; 0xc0
 8004884:	0026      	movs	r6, r4
 8004886:	04c0      	lsls	r0, r0, #19
 8004888:	4006      	ands	r6, r0
 800488a:	4286      	cmp	r6, r0
 800488c:	d10f      	bne.n	80048ae <HAL_EXTI_SetConfigLine+0x62>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800488e:	2603      	movs	r6, #3
 8004890:	4034      	ands	r4, r6
 8004892:	00a4      	lsls	r4, r4, #2
 8004894:	360c      	adds	r6, #12
 8004896:	40a6      	lsls	r6, r4
 8004898:	4814      	ldr	r0, [pc, #80]	; (80048ec <HAL_EXTI_SetConfigLine+0xa0>)
      regval = SYSCFG->EXTICR[linepos >> 2u];
 800489a:	0892      	lsrs	r2, r2, #2
 800489c:	0092      	lsls	r2, r2, #2
 800489e:	1812      	adds	r2, r2, r0
 80048a0:	6890      	ldr	r0, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80048a2:	43b0      	bics	r0, r6
 80048a4:	0006      	movs	r6, r0
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80048a6:	68c8      	ldr	r0, [r1, #12]
 80048a8:	40a0      	lsls	r0, r4
 80048aa:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80048ac:	6090      	str	r0, [r2, #8]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 80048ae:	684a      	ldr	r2, [r1, #4]
 80048b0:	07d1      	lsls	r1, r2, #31
 80048b2:	d512      	bpl.n	80048da <HAL_EXTI_SetConfigLine+0x8e>
  {
    EXTI->IMR |= maskline;
 80048b4:	6819      	ldr	r1, [r3, #0]
 80048b6:	4329      	orrs	r1, r5
    EXTI->IMR &= ~maskline;
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 80048b8:	0010      	movs	r0, r2
    EXTI->IMR &= ~maskline;
 80048ba:	6019      	str	r1, [r3, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 80048bc:	2102      	movs	r1, #2
 80048be:	4008      	ands	r0, r1
 80048c0:	420a      	tst	r2, r1
 80048c2:	d00d      	beq.n	80048e0 <HAL_EXTI_SetConfigLine+0x94>
  else
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
 80048c4:	2000      	movs	r0, #0
    EXTI->EMR |= maskline;
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	4315      	orrs	r5, r2
 80048ca:	605d      	str	r5, [r3, #4]
}
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
      EXTI->RTSR &= ~maskline;
 80048ce:	6898      	ldr	r0, [r3, #8]
 80048d0:	43a8      	bics	r0, r5
 80048d2:	e7d0      	b.n	8004876 <HAL_EXTI_SetConfigLine+0x2a>
      EXTI->FTSR &= ~maskline;
 80048d4:	68d8      	ldr	r0, [r3, #12]
 80048d6:	43a8      	bics	r0, r5
 80048d8:	e7d2      	b.n	8004880 <HAL_EXTI_SetConfigLine+0x34>
    EXTI->IMR &= ~maskline;
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	43a9      	bics	r1, r5
 80048de:	e7eb      	b.n	80048b8 <HAL_EXTI_SetConfigLine+0x6c>
    EXTI->EMR &= ~maskline;
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	43aa      	bics	r2, r5
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e7f1      	b.n	80048cc <HAL_EXTI_SetConfigLine+0x80>
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40010000 	.word	0x40010000

080048f0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80048f0:	0003      	movs	r3, r0
 80048f2:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80048f4:	d101      	bne.n	80048fa <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80048f6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80048f8:	4770      	bx	lr
      status = HAL_ERROR;
 80048fa:	2001      	movs	r0, #1
 80048fc:	e7fc      	b.n	80048f8 <HAL_EXTI_RegisterCallback+0x8>

080048fe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80048fe:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8004900:	2001      	movs	r0, #1
  if (hexti == NULL)
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8004906:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8004908:	6019      	str	r1, [r3, #0]
  }
}
 800490a:	4770      	bx	lr

0800490c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800490c:	221f      	movs	r2, #31
 800490e:	6803      	ldr	r3, [r0, #0]
{
 8004910:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004912:	401a      	ands	r2, r3
 8004914:	2301      	movs	r3, #1
 8004916:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004918:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_EXTI_IRQHandler+0x20>)
 800491a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 800491c:	420b      	tst	r3, r1
 800491e:	d004      	beq.n	800492a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004920:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004922:	6843      	ldr	r3, [r0, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d000      	beq.n	800492a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004928:	4798      	blx	r3
    }
  }
}
 800492a:	bd10      	pop	{r4, pc}
 800492c:	40010400 	.word	0x40010400

08004930 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004930:	231f      	movs	r3, #31
 8004932:	6802      	ldr	r2, [r0, #0]
 8004934:	401a      	ands	r2, r3
 8004936:	3b1e      	subs	r3, #30
 8004938:	4093      	lsls	r3, r2

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800493a:	4a01      	ldr	r2, [pc, #4]	; (8004940 <HAL_EXTI_ClearPending+0x10>)
 800493c:	6153      	str	r3, [r2, #20]
}
 800493e:	4770      	bx	lr
 8004940:	40010400 	.word	0x40010400

08004944 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004944:	4a28      	ldr	r2, [pc, #160]	; (80049e8 <FLASH_SetErrorCode+0xa4>)
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	6990      	ldr	r0, [r2, #24]
 800494a:	0049      	lsls	r1, r1, #1
 800494c:	0003      	movs	r3, r0
{
 800494e:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004950:	400b      	ands	r3, r1
 8004952:	4208      	tst	r0, r1
 8004954:	d005      	beq.n	8004962 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004956:	2302      	movs	r3, #2
 8004958:	4824      	ldr	r0, [pc, #144]	; (80049ec <FLASH_SetErrorCode+0xa8>)
 800495a:	6944      	ldr	r4, [r0, #20]
 800495c:	4323      	orrs	r3, r4
 800495e:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004960:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004962:	2080      	movs	r0, #128	; 0x80
 8004964:	6991      	ldr	r1, [r2, #24]
 8004966:	0080      	lsls	r0, r0, #2
 8004968:	4201      	tst	r1, r0
 800496a:	d005      	beq.n	8004978 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800496c:	2101      	movs	r1, #1
 800496e:	4c1f      	ldr	r4, [pc, #124]	; (80049ec <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8004970:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004972:	6965      	ldr	r5, [r4, #20]
 8004974:	4329      	orrs	r1, r5
 8004976:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004978:	2080      	movs	r0, #128	; 0x80
 800497a:	6991      	ldr	r1, [r2, #24]
 800497c:	00c0      	lsls	r0, r0, #3
 800497e:	4201      	tst	r1, r0
 8004980:	d005      	beq.n	800498e <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004982:	2108      	movs	r1, #8
 8004984:	4c19      	ldr	r4, [pc, #100]	; (80049ec <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8004986:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004988:	6965      	ldr	r5, [r4, #20]
 800498a:	4329      	orrs	r1, r5
 800498c:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800498e:	2080      	movs	r0, #128	; 0x80
 8004990:	6991      	ldr	r1, [r2, #24]
 8004992:	0100      	lsls	r0, r0, #4
 8004994:	4201      	tst	r1, r0
 8004996:	d005      	beq.n	80049a4 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004998:	2104      	movs	r1, #4
 800499a:	4c14      	ldr	r4, [pc, #80]	; (80049ec <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 800499c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800499e:	6965      	ldr	r5, [r4, #20]
 80049a0:	4329      	orrs	r1, r5
 80049a2:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80049a4:	2080      	movs	r0, #128	; 0x80
 80049a6:	6991      	ldr	r1, [r2, #24]
 80049a8:	0180      	lsls	r0, r0, #6
 80049aa:	4201      	tst	r1, r0
 80049ac:	d005      	beq.n	80049ba <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80049ae:	2110      	movs	r1, #16
 80049b0:	4c0e      	ldr	r4, [pc, #56]	; (80049ec <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 80049b2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80049b4:	6965      	ldr	r5, [r4, #20]
 80049b6:	4329      	orrs	r1, r5
 80049b8:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80049ba:	6991      	ldr	r1, [r2, #24]
 80049bc:	0389      	lsls	r1, r1, #14
 80049be:	d505      	bpl.n	80049cc <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80049c0:	2020      	movs	r0, #32
 80049c2:	4c0a      	ldr	r4, [pc, #40]	; (80049ec <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80049c4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80049c6:	6961      	ldr	r1, [r4, #20]
 80049c8:	4301      	orrs	r1, r0
 80049ca:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80049cc:	2080      	movs	r0, #128	; 0x80
 80049ce:	6991      	ldr	r1, [r2, #24]
 80049d0:	0240      	lsls	r0, r0, #9
 80049d2:	4201      	tst	r1, r0
 80049d4:	d005      	beq.n	80049e2 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	4c04      	ldr	r4, [pc, #16]	; (80049ec <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 80049da:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80049dc:	6965      	ldr	r5, [r4, #20]
 80049de:	4329      	orrs	r1, r5
 80049e0:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80049e2:	6193      	str	r3, [r2, #24]
}  
 80049e4:	bd30      	pop	{r4, r5, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	40022000 	.word	0x40022000
 80049ec:	200005dc 	.word	0x200005dc

080049f0 <FLASH_WaitForLastOperation>:
{
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7fe f962 	bl	8002cbc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80049f8:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 80049fa:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80049fc:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <FLASH_WaitForLastOperation+0x70>)
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	4232      	tst	r2, r6
 8004a02:	d121      	bne.n	8004a48 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004a04:	2202      	movs	r2, #2
 8004a06:	6999      	ldr	r1, [r3, #24]
 8004a08:	4211      	tst	r1, r2
 8004a0a:	d000      	beq.n	8004a0e <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a0c:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	05d2      	lsls	r2, r2, #23
 8004a12:	d415      	bmi.n	8004a40 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8004a14:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8004a16:	0592      	lsls	r2, r2, #22
 8004a18:	d412      	bmi.n	8004a40 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8004a1a:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8004a1c:	0552      	lsls	r2, r2, #21
 8004a1e:	d40f      	bmi.n	8004a40 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8004a20:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8004a22:	0512      	lsls	r2, r2, #20
 8004a24:	d40c      	bmi.n	8004a40 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004a26:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8004a28:	0492      	lsls	r2, r2, #18
 8004a2a:	d409      	bmi.n	8004a40 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	0008      	movs	r0, r1
 8004a32:	0292      	lsls	r2, r2, #10
 8004a34:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004a36:	4211      	tst	r1, r2
 8004a38:	d102      	bne.n	8004a40 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8004a3a:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004a3c:	03db      	lsls	r3, r3, #15
 8004a3e:	d508      	bpl.n	8004a52 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8004a40:	f7ff ff80 	bl	8004944 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a44:	2001      	movs	r0, #1
 8004a46:	e004      	b.n	8004a52 <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8004a48:	1c62      	adds	r2, r4, #1
 8004a4a:	d0d8      	beq.n	80049fe <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a4c:	2c00      	cmp	r4, #0
 8004a4e:	d101      	bne.n	8004a54 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8004a50:	2003      	movs	r0, #3
}
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a54:	f7fe f932 	bl	8002cbc <HAL_GetTick>
 8004a58:	1b40      	subs	r0, r0, r5
 8004a5a:	42a0      	cmp	r0, r4
 8004a5c:	d9ce      	bls.n	80049fc <FLASH_WaitForLastOperation+0xc>
 8004a5e:	e7f7      	b.n	8004a50 <FLASH_WaitForLastOperation+0x60>
 8004a60:	40022000 	.word	0x40022000

08004a64 <FLASH_OB_ProtectedSectorsConfig>:
  *        @arg @ref OB_WRPSTATE_DISABLE
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef FLASH_OB_ProtectedSectorsConfig(uint32_t Sector, uint32_t NewState)
#endif
{
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t WRP_Data = 0;
  uint32_t OB_WRP = Sector;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a68:	4811      	ldr	r0, [pc, #68]	; (8004ab0 <FLASH_OB_ProtectedSectorsConfig+0x4c>)
{
 8004a6a:	000e      	movs	r6, r1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a6c:	f7ff ffc0 	bl	80049f0 <FLASH_WaitForLastOperation>
 
  if(status == HAL_OK)
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d111      	bne.n	8004a98 <FLASH_OB_ProtectedSectorsConfig+0x34>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <FLASH_OB_ProtectedSectorsConfig+0x50>)
 8004a76:	6158      	str	r0, [r3, #20]

    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 8004a78:	2c00      	cmp	r4, #0
 8004a7a:	d00d      	beq.n	8004a98 <FLASH_OB_ProtectedSectorsConfig+0x34>
    {
      if ((OB_WRP & WRP_MASK_LOW) != 0x00000000U)
 8004a7c:	b2a3      	uxth	r3, r4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <FLASH_OB_ProtectedSectorsConfig+0x34>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
        {
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8004a82:	001c      	movs	r4, r3
 8004a84:	4d0c      	ldr	r5, [pc, #48]	; (8004ab8 <FLASH_OB_ProtectedSectorsConfig+0x54>)
        if (NewState != OB_WRPSTATE_DISABLE)
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d00a      	beq.n	8004aa0 <FLASH_OB_ProtectedSectorsConfig+0x3c>
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8004a8a:	68a8      	ldr	r0, [r5, #8]
 8004a8c:	4304      	orrs	r4, r0
 8004a8e:	b2a4      	uxth	r4, r4
          OB->WRP01 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 8004a90:	43e0      	mvns	r0, r4
 8004a92:	0400      	lsls	r0, r0, #16
 8004a94:	4304      	orrs	r4, r0
 8004a96:	60ac      	str	r4, [r5, #8]
      }
    }
#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a98:	4805      	ldr	r0, [pc, #20]	; (8004ab0 <FLASH_OB_ProtectedSectorsConfig+0x4c>)
 8004a9a:	f7ff ffa9 	bl	80049f0 <FLASH_WaitForLastOperation>

  /* Return the write protection operation Status */
  return status;      
}
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
          WRP_Data = (uint16_t)(~OB_WRP & (WRP_MASK_LOW & OB->WRP01));
 8004aa0:	68ab      	ldr	r3, [r5, #8]
 8004aa2:	43a3      	bics	r3, r4
 8004aa4:	b29b      	uxth	r3, r3
          OB->WRP01 =  (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	0412      	lsls	r2, r2, #16
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60ab      	str	r3, [r5, #8]
 8004aae:	e7f3      	b.n	8004a98 <FLASH_OB_ProtectedSectorsConfig+0x34>
 8004ab0:	0000c350 	.word	0x0000c350
 8004ab4:	200005dc 	.word	0x200005dc
 8004ab8:	1ff80000 	.word	0x1ff80000

08004abc <HAL_FLASHEx_OBProgram>:
{
 8004abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004abe:	4d3f      	ldr	r5, [pc, #252]	; (8004bbc <HAL_FLASHEx_OBProgram+0x100>)
{
 8004ac0:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8004ac2:	7c2b      	ldrb	r3, [r5, #16]
 8004ac4:	2002      	movs	r0, #2
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_FLASHEx_OBProgram+0x28>
 8004aca:	3801      	subs	r0, #1
 8004acc:	7428      	strb	r0, [r5, #16]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	4203      	tst	r3, r0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_FLASHEx_OBProgram+0x2a>
    status = FLASH_OB_ProtectedSectorsConfig(pOBInit->WRPSector, pOBInit->WRPState);
 8004ad4:	6861      	ldr	r1, [r4, #4]
 8004ad6:	68a0      	ldr	r0, [r4, #8]
 8004ad8:	f7ff ffc4 	bl	8004a64 <FLASH_OB_ProtectedSectorsConfig>
    if (status != HAL_OK)
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_FLASHEx_OBProgram+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	742b      	strb	r3, [r5, #16]
}
 8004ae4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	d518      	bpl.n	8004b1e <HAL_FLASHEx_OBProgram+0x62>
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004aec:	7b23      	ldrb	r3, [r4, #12]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8004aee:	4f34      	ldr	r7, [pc, #208]	; (8004bc0 <HAL_FLASHEx_OBProgram+0x104>)
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004af0:	4834      	ldr	r0, [pc, #208]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004af2:	9301      	str	r3, [sp, #4]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8004af4:	683b      	ldr	r3, [r7, #0]
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8004af6:	683e      	ldr	r6, [r7, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004af8:	f7ff ff7a 	bl	80049f0 <FLASH_WaitForLastOperation>
    if(status == HAL_OK)
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d1ef      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	401e      	ands	r6, r3
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8004b06:	9b01      	ldr	r3, [sp, #4]
      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b08:	6168      	str	r0, [r5, #20]
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8004b0a:	431e      	orrs	r6, r3
 8004b0c:	43f3      	mvns	r3, r6
    tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431e      	orrs	r6, r3
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b12:	482c      	ldr	r0, [pc, #176]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
      OB->RDP = tmp2;
 8004b14:	603e      	str	r6, [r7, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b16:	f7ff ff6b 	bl	80049f0 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1e0      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	075b      	lsls	r3, r3, #29
 8004b22:	d518      	bpl.n	8004b56 <HAL_FLASHEx_OBProgram+0x9a>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8004b24:	7ba3      	ldrb	r3, [r4, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004b26:	4f26      	ldr	r7, [pc, #152]	; (8004bc0 <HAL_FLASHEx_OBProgram+0x104>)
  /* Calculate the user option byte to write */ 
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b28:	4826      	ldr	r0, [pc, #152]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004b2a:	687e      	ldr	r6, [r7, #4]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8004b2c:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b2e:	f7ff ff5f 	bl	80049f0 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1d4      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_FLASHEx_OBProgram+0x10c>)
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004b38:	9a01      	ldr	r2, [sp, #4]
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004b3a:	401e      	ands	r6, r3
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004b3c:	2370      	movs	r3, #112	; 0x70
 8004b3e:	401a      	ands	r2, r3
 8004b40:	4316      	orrs	r6, r2
 8004b42:	43f3      	mvns	r3, r6
 8004b44:	041b      	lsls	r3, r3, #16
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 8004b46:	431e      	orrs	r6, r3
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b48:	6168      	str	r0, [r5, #20]

    /* Write the User Option Byte */
    OB->USER = tmp;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b4a:	481e      	ldr	r0, [pc, #120]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
    OB->USER = tmp;
 8004b4c:	607e      	str	r6, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b4e:	f7ff ff4f 	bl	80049f0 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d1c4      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	d516      	bpl.n	8004b8a <HAL_FLASHEx_OBProgram+0xce>
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004b5c:	7b63      	ldrb	r3, [r4, #13]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004b5e:	4f18      	ldr	r7, [pc, #96]	; (8004bc0 <HAL_FLASHEx_OBProgram+0x104>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b60:	4818      	ldr	r0, [pc, #96]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004b62:	687e      	ldr	r6, [r7, #4]
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004b64:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b66:	f7ff ff43 	bl	80049f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d1b8      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004b6e:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <HAL_FLASHEx_OBProgram+0x110>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b70:	6168      	str	r0, [r5, #20]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004b72:	401e      	ands	r6, r3
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004b74:	9b01      	ldr	r3, [sp, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b76:	4813      	ldr	r0, [pc, #76]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004b78:	431e      	orrs	r6, r3
 8004b7a:	43f3      	mvns	r3, r6
 8004b7c:	041b      	lsls	r3, r3, #16
  tmp |= (OB_BOR | tmp1);
 8004b7e:	431e      	orrs	r6, r3
    OB->USER = tmp;
 8004b80:	607e      	str	r6, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b82:	f7ff ff35 	bl	80049f0 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d1aa      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_BIT1) == OPTIONBYTE_BOOT_BIT1)
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	06db      	lsls	r3, r3, #27
 8004b8e:	d5a7      	bpl.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004b90:	4f0b      	ldr	r7, [pc, #44]	; (8004bc0 <HAL_FLASHEx_OBProgram+0x104>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b92:	480c      	ldr	r0, [pc, #48]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
    status = FLASH_OB_BOOTBit1Config(pOBInit->BOOTBit1Config);
 8004b94:	7be4      	ldrb	r4, [r4, #15]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004b96:	687e      	ldr	r6, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b98:	f7ff ff2a 	bl	80049f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d19f      	bne.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004ba0:	0476      	lsls	r6, r6, #17
 8004ba2:	0c76      	lsrs	r6, r6, #17
  uint32_t tmp = 0, tmp1 = 0, OB_Bits = ((uint32_t) OB_BootBit1) << 15;
 8004ba4:	03e4      	lsls	r4, r4, #15
  tmp = (~(OB_Bits | tmp1)) << 16U;
 8004ba6:	4334      	orrs	r4, r6
 8004ba8:	43e6      	mvns	r6, r4
 8004baa:	0436      	lsls	r6, r6, #16
  tmp |= OB_Bits | tmp1;
 8004bac:	4334      	orrs	r4, r6
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bae:	6168      	str	r0, [r5, #20]
    OB->USER = tmp; 
 8004bb0:	607c      	str	r4, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bb2:	4804      	ldr	r0, [pc, #16]	; (8004bc4 <HAL_FLASHEx_OBProgram+0x108>)
 8004bb4:	f7ff ff1c 	bl	80049f0 <FLASH_WaitForLastOperation>
 8004bb8:	e792      	b.n	8004ae0 <HAL_FLASHEx_OBProgram+0x24>
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	200005dc 	.word	0x200005dc
 8004bc0:	1ff80000 	.word	0x1ff80000
 8004bc4:	0000c350 	.word	0x0000c350
 8004bc8:	0000ff8f 	.word	0x0000ff8f
 8004bcc:	0000fff0 	.word	0x0000fff0

08004bd0 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004bd0:	4a57      	ldr	r2, [pc, #348]	; (8004d30 <HAL_GPIO_Init+0x160>)
{
 8004bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004bd4:	1882      	adds	r2, r0, r2
 8004bd6:	1e54      	subs	r4, r2, #1
 8004bd8:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8004bda:	2300      	movs	r3, #0
{
 8004bdc:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004bde:	3205      	adds	r2, #5
 8004be0:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004be2:	680a      	ldr	r2, [r1, #0]
 8004be4:	0014      	movs	r4, r2
 8004be6:	40dc      	lsrs	r4, r3
 8004be8:	d101      	bne.n	8004bee <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004bea:	b005      	add	sp, #20
 8004bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004bee:	2701      	movs	r7, #1
 8004bf0:	003c      	movs	r4, r7
 8004bf2:	0015      	movs	r5, r2
 8004bf4:	409c      	lsls	r4, r3
 8004bf6:	4025      	ands	r5, r4
 8004bf8:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8004bfa:	4222      	tst	r2, r4
 8004bfc:	d100      	bne.n	8004c00 <HAL_GPIO_Init+0x30>
 8004bfe:	e095      	b.n	8004d2c <HAL_GPIO_Init+0x15c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c00:	684a      	ldr	r2, [r1, #4]
 8004c02:	9200      	str	r2, [sp, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	9d00      	ldr	r5, [sp, #0]
 8004c08:	4395      	bics	r5, r2
 8004c0a:	9502      	str	r5, [sp, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c0c:	3a0d      	subs	r2, #13
 8004c0e:	005d      	lsls	r5, r3, #1
 8004c10:	40aa      	lsls	r2, r5
 8004c12:	43d2      	mvns	r2, r2
 8004c14:	4694      	mov	ip, r2
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c16:	9a02      	ldr	r2, [sp, #8]
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	42ba      	cmp	r2, r7
 8004c1c:	d80f      	bhi.n	8004c3e <HAL_GPIO_Init+0x6e>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c1e:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR;
 8004c20:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c22:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c24:	68ca      	ldr	r2, [r1, #12]
 8004c26:	40aa      	lsls	r2, r5
 8004c28:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8004c2a:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8004c2c:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c2e:	43a2      	bics	r2, r4
 8004c30:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c32:	9a00      	ldr	r2, [sp, #0]
 8004c34:	0912      	lsrs	r2, r2, #4
 8004c36:	403a      	ands	r2, r7
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004c3c:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c3e:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8004c40:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c42:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c44:	688a      	ldr	r2, [r1, #8]
 8004c46:	40aa      	lsls	r2, r5
 8004c48:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8004c4a:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c4c:	9a02      	ldr	r2, [sp, #8]
 8004c4e:	2a02      	cmp	r2, #2
 8004c50:	d10d      	bne.n	8004c6e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004c52:	2407      	movs	r4, #7
 8004c54:	270f      	movs	r7, #15
 8004c56:	401c      	ands	r4, r3
 8004c58:	00a4      	lsls	r4, r4, #2
 8004c5a:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8004c5c:	08da      	lsrs	r2, r3, #3
 8004c5e:	0092      	lsls	r2, r2, #2
 8004c60:	1882      	adds	r2, r0, r2
 8004c62:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004c64:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004c66:	690f      	ldr	r7, [r1, #16]
 8004c68:	40a7      	lsls	r7, r4
 8004c6a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004c6c:	6216      	str	r6, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c6e:	4662      	mov	r2, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c70:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8004c72:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c74:	4022      	ands	r2, r4
 8004c76:	0014      	movs	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c78:	9a00      	ldr	r2, [sp, #0]
 8004c7a:	4032      	ands	r2, r6
 8004c7c:	40aa      	lsls	r2, r5
 8004c7e:	4314      	orrs	r4, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c80:	9a00      	ldr	r2, [sp, #0]
      GPIOx->MODER = temp;
 8004c82:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c84:	00d2      	lsls	r2, r2, #3
 8004c86:	d551      	bpl.n	8004d2c <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c88:	2501      	movs	r5, #1
 8004c8a:	4c2a      	ldr	r4, [pc, #168]	; (8004d34 <HAL_GPIO_Init+0x164>)
 8004c8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004c8e:	432a      	orrs	r2, r5
 8004c90:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_GPIO_Init+0x168>)
 8004c94:	089c      	lsrs	r4, r3, #2
 8004c96:	00a4      	lsls	r4, r4, #2
 8004c98:	18a4      	adds	r4, r4, r2
 8004c9a:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004c9c:	001d      	movs	r5, r3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c9e:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	4035      	ands	r5, r6
 8004ca4:	00ad      	lsls	r5, r5, #2
 8004ca6:	40aa      	lsls	r2, r5
 8004ca8:	4667      	mov	r7, ip
 8004caa:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004cac:	22a0      	movs	r2, #160	; 0xa0
 8004cae:	05d2      	lsls	r2, r2, #23
 8004cb0:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004cb2:	9702      	str	r7, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4560      	cmp	r0, ip
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_GPIO_Init+0x106>
 8004cba:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <HAL_GPIO_Init+0x16c>)
 8004cbc:	4694      	mov	ip, r2
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4560      	cmp	r0, ip
 8004cc2:	d008      	beq.n	8004cd6 <HAL_GPIO_Init+0x106>
 8004cc4:	4f1e      	ldr	r7, [pc, #120]	; (8004d40 <HAL_GPIO_Init+0x170>)
 8004cc6:	1892      	adds	r2, r2, r2
 8004cc8:	42b8      	cmp	r0, r7
 8004cca:	d004      	beq.n	8004cd6 <HAL_GPIO_Init+0x106>
 8004ccc:	4f1d      	ldr	r7, [pc, #116]	; (8004d44 <HAL_GPIO_Init+0x174>)
 8004cce:	0032      	movs	r2, r6
 8004cd0:	42b8      	cmp	r0, r7
 8004cd2:	d000      	beq.n	8004cd6 <HAL_GPIO_Init+0x106>
 8004cd4:	9a03      	ldr	r2, [sp, #12]
 8004cd6:	40aa      	lsls	r2, r5
 8004cd8:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cda:	9f00      	ldr	r7, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004cdc:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cde:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8004ce0:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 8004ce2:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8004ce4:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8004ce6:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8004ce8:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004cea:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cec:	03ff      	lsls	r7, r7, #15
 8004cee:	d401      	bmi.n	8004cf4 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8004cf0:	0035      	movs	r5, r6
 8004cf2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8004cf4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004cf6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004cf8:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cfa:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8004cfc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cfe:	03bf      	lsls	r7, r7, #14
 8004d00:	d401      	bmi.n	8004d06 <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8004d02:	0035      	movs	r5, r6
 8004d04:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8004d06:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8004d08:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004d0a:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d0c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8004d0e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d10:	02ff      	lsls	r7, r7, #11
 8004d12:	d401      	bmi.n	8004d18 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8004d14:	0035      	movs	r5, r6
 8004d16:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8004d18:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004d1a:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8004d1c:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d1e:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8004d20:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d22:	02bf      	lsls	r7, r7, #10
 8004d24:	d401      	bmi.n	8004d2a <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 8004d26:	4025      	ands	r5, r4
 8004d28:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8004d2a:	60d6      	str	r6, [r2, #12]
    position++;
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	e758      	b.n	8004be2 <HAL_GPIO_Init+0x12>
 8004d30:	afffe400 	.word	0xafffe400
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	50000400 	.word	0x50000400
 8004d40:	50000800 	.word	0x50000800
 8004d44:	50000c00 	.word	0x50000c00
 8004d48:	40010400 	.word	0x40010400

08004d4c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d4e:	4a36      	ldr	r2, [pc, #216]	; (8004e28 <HAL_GPIO_DeInit+0xdc>)
{
 8004d50:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d52:	1882      	adds	r2, r0, r2
{
 8004d54:	9101      	str	r1, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d56:	1e51      	subs	r1, r2, #1
 8004d58:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8004d5a:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d5c:	3205      	adds	r2, #5
 8004d5e:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 8004d60:	9a01      	ldr	r2, [sp, #4]
 8004d62:	40da      	lsrs	r2, r3
 8004d64:	d101      	bne.n	8004d6a <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8004d66:	b005      	add	sp, #20
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8004d6a:	2701      	movs	r7, #1
 8004d6c:	003a      	movs	r2, r7
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	9c01      	ldr	r4, [sp, #4]
 8004d72:	9200      	str	r2, [sp, #0]
 8004d74:	4014      	ands	r4, r2
    if (iocurrent)
 8004d76:	9900      	ldr	r1, [sp, #0]
 8004d78:	9a01      	ldr	r2, [sp, #4]
 8004d7a:	420a      	tst	r2, r1
 8004d7c:	d051      	beq.n	8004e22 <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d7e:	492b      	ldr	r1, [pc, #172]	; (8004e2c <HAL_GPIO_DeInit+0xe0>)
 8004d80:	089a      	lsrs	r2, r3, #2
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	1852      	adds	r2, r2, r1
 8004d86:	6891      	ldr	r1, [r2, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004d88:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d8a:	000e      	movs	r6, r1
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004d8c:	2103      	movs	r1, #3
 8004d8e:	400d      	ands	r5, r1
 8004d90:	00ad      	lsls	r5, r5, #2
 8004d92:	310c      	adds	r1, #12
 8004d94:	40a9      	lsls	r1, r5
 8004d96:	9102      	str	r1, [sp, #8]
 8004d98:	4031      	ands	r1, r6
 8004d9a:	000e      	movs	r6, r1
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d9c:	21a0      	movs	r1, #160	; 0xa0
 8004d9e:	05c9      	lsls	r1, r1, #23
 8004da0:	468c      	mov	ip, r1
 8004da2:	2100      	movs	r1, #0
 8004da4:	4560      	cmp	r0, ip
 8004da6:	d00d      	beq.n	8004dc4 <HAL_GPIO_DeInit+0x78>
 8004da8:	4921      	ldr	r1, [pc, #132]	; (8004e30 <HAL_GPIO_DeInit+0xe4>)
 8004daa:	468c      	mov	ip, r1
 8004dac:	0039      	movs	r1, r7
 8004dae:	4560      	cmp	r0, ip
 8004db0:	d008      	beq.n	8004dc4 <HAL_GPIO_DeInit+0x78>
 8004db2:	4f20      	ldr	r7, [pc, #128]	; (8004e34 <HAL_GPIO_DeInit+0xe8>)
 8004db4:	1849      	adds	r1, r1, r1
 8004db6:	42b8      	cmp	r0, r7
 8004db8:	d004      	beq.n	8004dc4 <HAL_GPIO_DeInit+0x78>
 8004dba:	4f1f      	ldr	r7, [pc, #124]	; (8004e38 <HAL_GPIO_DeInit+0xec>)
 8004dbc:	3101      	adds	r1, #1
 8004dbe:	42b8      	cmp	r0, r7
 8004dc0:	d000      	beq.n	8004dc4 <HAL_GPIO_DeInit+0x78>
 8004dc2:	9903      	ldr	r1, [sp, #12]
 8004dc4:	40a9      	lsls	r1, r5
 8004dc6:	42b1      	cmp	r1, r6
 8004dc8:	d110      	bne.n	8004dec <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004dca:	491c      	ldr	r1, [pc, #112]	; (8004e3c <HAL_GPIO_DeInit+0xf0>)
 8004dcc:	680d      	ldr	r5, [r1, #0]
 8004dce:	43a5      	bics	r5, r4
 8004dd0:	600d      	str	r5, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004dd2:	684d      	ldr	r5, [r1, #4]
 8004dd4:	43a5      	bics	r5, r4
 8004dd6:	604d      	str	r5, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004dd8:	688d      	ldr	r5, [r1, #8]
 8004dda:	43a5      	bics	r5, r4
 8004ddc:	608d      	str	r5, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004dde:	68cd      	ldr	r5, [r1, #12]
 8004de0:	43a5      	bics	r5, r4
 8004de2:	60cd      	str	r5, [r1, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004de4:	6891      	ldr	r1, [r2, #8]
 8004de6:	9c02      	ldr	r4, [sp, #8]
 8004de8:	43a1      	bics	r1, r4
 8004dea:	6091      	str	r1, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dec:	2103      	movs	r1, #3
 8004dee:	005c      	lsls	r4, r3, #1
 8004df0:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004df2:	2407      	movs	r4, #7
 8004df4:	260f      	movs	r6, #15
 8004df6:	401c      	ands	r4, r3
 8004df8:	00a4      	lsls	r4, r4, #2
 8004dfa:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dfc:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8004dfe:	9c00      	ldr	r4, [sp, #0]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e00:	430a      	orrs	r2, r1
 8004e02:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	0092      	lsls	r2, r2, #2
 8004e08:	1882      	adds	r2, r0, r2
 8004e0a:	6a15      	ldr	r5, [r2, #32]
 8004e0c:	43b5      	bics	r5, r6
 8004e0e:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e10:	68c2      	ldr	r2, [r0, #12]
 8004e12:	438a      	bics	r2, r1
 8004e14:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8004e16:	6842      	ldr	r2, [r0, #4]
 8004e18:	43a2      	bics	r2, r4
 8004e1a:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e1c:	6882      	ldr	r2, [r0, #8]
 8004e1e:	438a      	bics	r2, r1
 8004e20:	6082      	str	r2, [r0, #8]
    position++;
 8004e22:	3301      	adds	r3, #1
 8004e24:	e79c      	b.n	8004d60 <HAL_GPIO_DeInit+0x14>
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	afffe400 	.word	0xafffe400
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	50000400 	.word	0x50000400
 8004e34:	50000800 	.word	0x50000800
 8004e38:	50000c00 	.word	0x50000c00
 8004e3c:	40010400 	.word	0x40010400

08004e40 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e40:	6900      	ldr	r0, [r0, #16]
 8004e42:	4008      	ands	r0, r1
 8004e44:	1e43      	subs	r3, r0, #1
 8004e46:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004e48:	b2c0      	uxtb	r0, r0
}
 8004e4a:	4770      	bx	lr

08004e4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e50:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004e52:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8004e54:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004e56:	e7fc      	b.n	8004e52 <HAL_GPIO_WritePin+0x6>

08004e58 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8004e58:	2110      	movs	r1, #16
 8004e5a:	4a02      	ldr	r2, [pc, #8]	; (8004e64 <HAL_PWR_DisablePVD+0xc>)
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	438b      	bics	r3, r1
 8004e60:	6013      	str	r3, [r2, #0]
}
 8004e62:	4770      	bx	lr
 8004e64:	40007000 	.word	0x40007000

08004e68 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004e68:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8004e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004e6e:	681e      	ldr	r6, [r3, #0]
{
 8004e70:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004e72:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004e74:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004e76:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004e78:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004e7a:	0080      	lsls	r0, r0, #2
 8004e7c:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004e7e:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8004e80:	4206      	tst	r6, r0
 8004e82:	d005      	beq.n	8004e90 <HAL_PWR_EnterSLEEPMode+0x28>
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	4e11      	ldr	r6, [pc, #68]	; (8004ed0 <HAL_PWR_EnterSLEEPMode+0x68>)
 8004e8c:	4030      	ands	r0, r6
 8004e8e:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004e90:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8004e92:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004e94:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004e96:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004e98:	4d0e      	ldr	r5, [pc, #56]	; (8004ed4 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8004e9a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004e9c:	6928      	ldr	r0, [r5, #16]
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	43b0      	bics	r0, r6
 8004ea2:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004ea4:	2901      	cmp	r1, #1
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ea8:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d006      	beq.n	8004ebc <HAL_PWR_EnterSLEEPMode+0x54>
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	d004      	beq.n	8004ebc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	0092      	lsls	r2, r2, #2
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8004ebc:	46c0      	nop			; (mov r8, r8)

}
 8004ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8004ec0:	bf40      	sev
    __WFE();
 8004ec2:	bf20      	wfe
    __WFE();
 8004ec4:	bf20      	wfe
 8004ec6:	e7f0      	b.n	8004eaa <HAL_PWR_EnterSLEEPMode+0x42>
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	fffffdff 	.word	0xfffffdff
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <HAL_PWR_EnterSTOPMode>:
     in Stop mode or in Sleep/Low-power sleep mode */
//  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
//  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
//  if((ulpbit != 0) && (vrefinbit != 0))
//  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004ed8:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_PWR_EnterSTOPMode+0x44>)
{
 8004eda:	b510      	push	{r4, lr}
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004edc:	4a10      	ldr	r2, [pc, #64]	; (8004f20 <HAL_PWR_EnterSTOPMode+0x48>)
 8004ede:	681c      	ldr	r4, [r3, #0]
 8004ee0:	4014      	ands	r4, r2
 8004ee2:	601c      	str	r4, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004ee4:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8004ee6:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004ee8:	43a2      	bics	r2, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004eea:	4302      	orrs	r2, r0

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004eec:	2004      	movs	r0, #4
  PWR->CR = tmpreg;
 8004eee:	601a      	str	r2, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <HAL_PWR_EnterSTOPMode+0x4c>)
 8004ef2:	6914      	ldr	r4, [r2, #16]
 8004ef4:	4320      	orrs	r0, r4
 8004ef6:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004ef8:	2901      	cmp	r1, #1
 8004efa:	d10a      	bne.n	8004f12 <HAL_PWR_EnterSTOPMode+0x3a>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004efc:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004efe:	2004      	movs	r0, #4
 8004f00:	6911      	ldr	r1, [r2, #16]
 8004f02:	4381      	bics	r1, r0
 8004f04:	6111      	str	r1, [r2, #16]

//  if((ulpbit != 0) && (vrefinbit != 0))
//  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004f06:	2280      	movs	r2, #128	; 0x80
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
//  }
}
 8004f10:	bd10      	pop	{r4, pc}
    __SEV();
 8004f12:	bf40      	sev
    __WFE();
 8004f14:	bf20      	wfe
    __WFE();
 8004f16:	bf20      	wfe
 8004f18:	e7f1      	b.n	8004efe <HAL_PWR_EnterSTOPMode+0x26>
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	40007000 	.word	0x40007000
 8004f20:	fffffdff 	.word	0xfffffdff
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_PWR_PVD_IRQHandler>:
{
 8004f2c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004f2e:	2580      	movs	r5, #128	; 0x80
 8004f30:	4c04      	ldr	r4, [pc, #16]	; (8004f44 <HAL_PWR_PVD_IRQHandler+0x18>)
 8004f32:	026d      	lsls	r5, r5, #9
 8004f34:	6963      	ldr	r3, [r4, #20]
 8004f36:	422b      	tst	r3, r5
 8004f38:	d002      	beq.n	8004f40 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8004f3a:	f7ff fff5 	bl	8004f28 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004f3e:	6165      	str	r5, [r4, #20]
}
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	4a03      	ldr	r2, [pc, #12]	; (8004f58 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	6811      	ldr	r1, [r2, #0]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6013      	str	r3, [r2, #0]
}
 8004f54:	4770      	bx	lr
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	40007000 	.word	0x40007000

08004f5c <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	6811      	ldr	r1, [r2, #0]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	4770      	bx	lr
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	40007000 	.word	0x40007000

08004f70 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f70:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004f72:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8004f74:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004f76:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004f78:	4022      	ands	r2, r4
 8004f7a:	2a08      	cmp	r2, #8
 8004f7c:	d031      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x72>
 8004f7e:	2a0c      	cmp	r2, #12
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x26>
 8004f82:	2a04      	cmp	r2, #4
 8004f84:	d125      	bne.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f86:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f8a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004f8c:	17c0      	asrs	r0, r0, #31
 8004f8e:	4018      	ands	r0, r3
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x80>)
 8004f92:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f96:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f98:	4816      	ldr	r0, [pc, #88]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f9a:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f9c:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9e:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004fa0:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa2:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004fa4:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa6:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004fa8:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004faa:	4211      	tst	r1, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x88>)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f7fb faa2 	bl	80004fc <__aeabi_lmul>
 8004fb8:	0022      	movs	r2, r4
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f7fb fa7e 	bl	80004bc <__aeabi_uldivmod>
 8004fc0:	e7e8      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	421a      	tst	r2, r3
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x8c>)
 8004fcc:	e7f0      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004fce:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x80>)
 8004fd0:	e7ee      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004fd2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004fd4:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004fd6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004fdc:	3301      	adds	r3, #1
 8004fde:	4098      	lsls	r0, r3
      break;
 8004fe0:	e7d8      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8004fe2:	4805      	ldr	r0, [pc, #20]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x88>)
 8004fe4:	e7d6      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x24>
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	ff48e500 	.word	0xff48e500
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	0800e918 	.word	0x0800e918
 8004ff8:	007a1200 	.word	0x007a1200
 8004ffc:	003d0900 	.word	0x003d0900

08005000 <HAL_RCC_OscConfig>:
{
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	0005      	movs	r5, r0
 8005004:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8005006:	2800      	cmp	r0, #0
 8005008:	d056      	beq.n	80050b8 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500a:	230c      	movs	r3, #12
 800500c:	4cbc      	ldr	r4, [pc, #752]	; (8005300 <HAL_RCC_OscConfig+0x300>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005010:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005012:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005014:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	025b      	lsls	r3, r3, #9
 800501a:	0019      	movs	r1, r3
 800501c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	07d2      	lsls	r2, r2, #31
 8005020:	d43e      	bmi.n	80050a0 <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	079b      	lsls	r3, r3, #30
 8005026:	d500      	bpl.n	800502a <HAL_RCC_OscConfig+0x2a>
 8005028:	e087      	b.n	800513a <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	06db      	lsls	r3, r3, #27
 800502e:	d529      	bpl.n	8005084 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005030:	2e00      	cmp	r6, #0
 8005032:	d000      	beq.n	8005036 <HAL_RCC_OscConfig+0x36>
 8005034:	e0d8      	b.n	80051e8 <HAL_RCC_OscConfig+0x1e8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	059b      	lsls	r3, r3, #22
 800503a:	d502      	bpl.n	8005042 <HAL_RCC_OscConfig+0x42>
 800503c:	69ab      	ldr	r3, [r5, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03a      	beq.n	80050b8 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005042:	6862      	ldr	r2, [r4, #4]
 8005044:	49af      	ldr	r1, [pc, #700]	; (8005304 <HAL_RCC_OscConfig+0x304>)
 8005046:	6a2b      	ldr	r3, [r5, #32]
 8005048:	400a      	ands	r2, r1
 800504a:	431a      	orrs	r2, r3
 800504c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504e:	6861      	ldr	r1, [r4, #4]
 8005050:	69ea      	ldr	r2, [r5, #28]
 8005052:	0209      	lsls	r1, r1, #8
 8005054:	0a09      	lsrs	r1, r1, #8
 8005056:	0612      	lsls	r2, r2, #24
 8005058:	430a      	orrs	r2, r1
 800505a:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	0b5b      	lsrs	r3, r3, #13
 8005060:	3301      	adds	r3, #1
 8005062:	0212      	lsls	r2, r2, #8
 8005064:	409a      	lsls	r2, r3
 8005066:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005068:	68e1      	ldr	r1, [r4, #12]
 800506a:	060a      	lsls	r2, r1, #24
 800506c:	49a6      	ldr	r1, [pc, #664]	; (8005308 <HAL_RCC_OscConfig+0x308>)
 800506e:	0f12      	lsrs	r2, r2, #28
 8005070:	5c8a      	ldrb	r2, [r1, r2]
 8005072:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005074:	4aa5      	ldr	r2, [pc, #660]	; (800530c <HAL_RCC_OscConfig+0x30c>)
 8005076:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8005078:	4ba5      	ldr	r3, [pc, #660]	; (8005310 <HAL_RCC_OscConfig+0x310>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	f7fd fe1c 	bl	8002cb8 <HAL_InitTick>
        if(status != HAL_OK)
 8005080:	2800      	cmp	r0, #0
 8005082:	d130      	bne.n	80050e6 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	071b      	lsls	r3, r3, #28
 8005088:	d500      	bpl.n	800508c <HAL_RCC_OscConfig+0x8c>
 800508a:	e0e4      	b.n	8005256 <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	075b      	lsls	r3, r3, #29
 8005090:	d500      	bpl.n	8005094 <HAL_RCC_OscConfig+0x94>
 8005092:	e106      	b.n	80052a2 <HAL_RCC_OscConfig+0x2a2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005094:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d000      	beq.n	800509c <HAL_RCC_OscConfig+0x9c>
 800509a:	e18a      	b.n	80053b2 <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 800509c:	2000      	movs	r0, #0
 800509e:	e022      	b.n	80050e6 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a0:	2e08      	cmp	r6, #8
 80050a2:	d003      	beq.n	80050ac <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050a4:	2e0c      	cmp	r6, #12
 80050a6:	d109      	bne.n	80050bc <HAL_RCC_OscConfig+0xbc>
 80050a8:	2f00      	cmp	r7, #0
 80050aa:	d007      	beq.n	80050bc <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	039b      	lsls	r3, r3, #14
 80050b0:	d5b7      	bpl.n	8005022 <HAL_RCC_OscConfig+0x22>
 80050b2:	686b      	ldr	r3, [r5, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1b4      	bne.n	8005022 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80050b8:	2001      	movs	r0, #1
 80050ba:	e014      	b.n	80050e6 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050bc:	686a      	ldr	r2, [r5, #4]
 80050be:	428a      	cmp	r2, r1
 80050c0:	d113      	bne.n	80050ea <HAL_RCC_OscConfig+0xea>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80050c8:	f7fd fdf8 	bl	8002cbc <HAL_GetTick>
 80050cc:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	0292      	lsls	r2, r2, #10
 80050d4:	4213      	tst	r3, r2
 80050d6:	d1a4      	bne.n	8005022 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fd fdf0 	bl	8002cbc <HAL_GetTick>
 80050dc:	9b00      	ldr	r3, [sp, #0]
 80050de:	1ac0      	subs	r0, r0, r3
 80050e0:	2864      	cmp	r0, #100	; 0x64
 80050e2:	d9f4      	bls.n	80050ce <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 80050e4:	2003      	movs	r0, #3
}
 80050e6:	b005      	add	sp, #20
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ea:	21a0      	movs	r1, #160	; 0xa0
 80050ec:	02c9      	lsls	r1, r1, #11
 80050ee:	428a      	cmp	r2, r1
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_OscConfig+0xfe>
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	6821      	ldr	r1, [r4, #0]
 80050f6:	02d2      	lsls	r2, r2, #11
 80050f8:	430a      	orrs	r2, r1
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	e7e1      	b.n	80050c2 <HAL_RCC_OscConfig+0xc2>
 80050fe:	6821      	ldr	r1, [r4, #0]
 8005100:	4884      	ldr	r0, [pc, #528]	; (8005314 <HAL_RCC_OscConfig+0x314>)
 8005102:	4001      	ands	r1, r0
 8005104:	6021      	str	r1, [r4, #0]
 8005106:	6821      	ldr	r1, [r4, #0]
 8005108:	400b      	ands	r3, r1
 800510a:	9303      	str	r3, [sp, #12]
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	4982      	ldr	r1, [pc, #520]	; (8005318 <HAL_RCC_OscConfig+0x318>)
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	400b      	ands	r3, r1
 8005114:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005116:	2a00      	cmp	r2, #0
 8005118:	d1d6      	bne.n	80050c8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 800511a:	f7fd fdcf 	bl	8002cbc <HAL_GetTick>
 800511e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0292      	lsls	r2, r2, #10
 8005126:	4213      	tst	r3, r2
 8005128:	d100      	bne.n	800512c <HAL_RCC_OscConfig+0x12c>
 800512a:	e77a      	b.n	8005022 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800512c:	f7fd fdc6 	bl	8002cbc <HAL_GetTick>
 8005130:	9b00      	ldr	r3, [sp, #0]
 8005132:	1ac0      	subs	r0, r0, r3
 8005134:	2864      	cmp	r0, #100	; 0x64
 8005136:	d9f3      	bls.n	8005120 <HAL_RCC_OscConfig+0x120>
 8005138:	e7d4      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
    hsi_state = RCC_OscInitStruct->HSIState;
 800513a:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800513c:	2e04      	cmp	r6, #4
 800513e:	d003      	beq.n	8005148 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005140:	2e0c      	cmp	r6, #12
 8005142:	d124      	bne.n	800518e <HAL_RCC_OscConfig+0x18e>
 8005144:	2f00      	cmp	r7, #0
 8005146:	d122      	bne.n	800518e <HAL_RCC_OscConfig+0x18e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	075b      	lsls	r3, r3, #29
 800514c:	d501      	bpl.n	8005152 <HAL_RCC_OscConfig+0x152>
 800514e:	2a00      	cmp	r2, #0
 8005150:	d0b2      	beq.n	80050b8 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	6861      	ldr	r1, [r4, #4]
 8005154:	692b      	ldr	r3, [r5, #16]
 8005156:	4871      	ldr	r0, [pc, #452]	; (800531c <HAL_RCC_OscConfig+0x31c>)
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	4001      	ands	r1, r0
 800515c:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800515e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005160:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	438b      	bics	r3, r1
 8005166:	4313      	orrs	r3, r2
 8005168:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800516a:	f7ff ff01 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	4a65      	ldr	r2, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x308>)
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	0f1b      	lsrs	r3, r3, #28
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	40d8      	lsrs	r0, r3
 800517a:	4b64      	ldr	r3, [pc, #400]	; (800530c <HAL_RCC_OscConfig+0x30c>)
 800517c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800517e:	4b64      	ldr	r3, [pc, #400]	; (8005310 <HAL_RCC_OscConfig+0x310>)
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	f7fd fd99 	bl	8002cb8 <HAL_InitTick>
      if(status != HAL_OK)
 8005186:	2800      	cmp	r0, #0
 8005188:	d100      	bne.n	800518c <HAL_RCC_OscConfig+0x18c>
 800518a:	e74e      	b.n	800502a <HAL_RCC_OscConfig+0x2a>
 800518c:	e7ab      	b.n	80050e6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800518e:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8005190:	2a00      	cmp	r2, #0
 8005192:	d018      	beq.n	80051c6 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005194:	2109      	movs	r1, #9
 8005196:	438b      	bics	r3, r1
 8005198:	4313      	orrs	r3, r2
 800519a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800519c:	f7fd fd8e 	bl	8002cbc <HAL_GetTick>
 80051a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a2:	2204      	movs	r2, #4
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	4213      	tst	r3, r2
 80051a8:	d007      	beq.n	80051ba <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	6862      	ldr	r2, [r4, #4]
 80051ac:	692b      	ldr	r3, [r5, #16]
 80051ae:	495b      	ldr	r1, [pc, #364]	; (800531c <HAL_RCC_OscConfig+0x31c>)
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	400a      	ands	r2, r1
 80051b4:	4313      	orrs	r3, r2
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	e737      	b.n	800502a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fd fd7f 	bl	8002cbc <HAL_GetTick>
 80051be:	1bc0      	subs	r0, r0, r7
 80051c0:	2802      	cmp	r0, #2
 80051c2:	d9ee      	bls.n	80051a2 <HAL_RCC_OscConfig+0x1a2>
 80051c4:	e78e      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 80051c6:	2201      	movs	r2, #1
 80051c8:	4393      	bics	r3, r2
 80051ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80051cc:	f7fd fd76 	bl	8002cbc <HAL_GetTick>
 80051d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051d2:	2204      	movs	r2, #4
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	4213      	tst	r3, r2
 80051d8:	d100      	bne.n	80051dc <HAL_RCC_OscConfig+0x1dc>
 80051da:	e726      	b.n	800502a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051dc:	f7fd fd6e 	bl	8002cbc <HAL_GetTick>
 80051e0:	1bc0      	subs	r0, r0, r7
 80051e2:	2802      	cmp	r0, #2
 80051e4:	d9f5      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
 80051e6:	e77d      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051e8:	69ab      	ldr	r3, [r5, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_RCC_OscConfig+0x230>
        __HAL_RCC_MSI_ENABLE();
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4313      	orrs	r3, r2
 80051f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80051f8:	f7fd fd60 	bl	8002cbc <HAL_GetTick>
 80051fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	4213      	tst	r3, r2
 8005206:	d00d      	beq.n	8005224 <HAL_RCC_OscConfig+0x224>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	4a3e      	ldr	r2, [pc, #248]	; (8005304 <HAL_RCC_OscConfig+0x304>)
 800520c:	4013      	ands	r3, r2
 800520e:	6a2a      	ldr	r2, [r5, #32]
 8005210:	4313      	orrs	r3, r2
 8005212:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	69eb      	ldr	r3, [r5, #28]
 8005218:	0212      	lsls	r2, r2, #8
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	0a12      	lsrs	r2, r2, #8
 800521e:	4313      	orrs	r3, r2
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	e72f      	b.n	8005084 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005224:	f7fd fd4a 	bl	8002cbc <HAL_GetTick>
 8005228:	1bc0      	subs	r0, r0, r7
 800522a:	2802      	cmp	r0, #2
 800522c:	d9e7      	bls.n	80051fe <HAL_RCC_OscConfig+0x1fe>
 800522e:	e759      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	4a3b      	ldr	r2, [pc, #236]	; (8005320 <HAL_RCC_OscConfig+0x320>)
 8005234:	4013      	ands	r3, r2
 8005236:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005238:	f7fd fd40 	bl	8002cbc <HAL_GetTick>
 800523c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	4213      	tst	r3, r2
 8005246:	d100      	bne.n	800524a <HAL_RCC_OscConfig+0x24a>
 8005248:	e71c      	b.n	8005084 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800524a:	f7fd fd37 	bl	8002cbc <HAL_GetTick>
 800524e:	1bc0      	subs	r0, r0, r7
 8005250:	2802      	cmp	r0, #2
 8005252:	d9f4      	bls.n	800523e <HAL_RCC_OscConfig+0x23e>
 8005254:	e746      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005256:	696a      	ldr	r2, [r5, #20]
 8005258:	2301      	movs	r3, #1
 800525a:	2a00      	cmp	r2, #0
 800525c:	d010      	beq.n	8005280 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 800525e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005260:	4313      	orrs	r3, r2
 8005262:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005264:	f7fd fd2a 	bl	8002cbc <HAL_GetTick>
 8005268:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800526a:	2202      	movs	r2, #2
 800526c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800526e:	4213      	tst	r3, r2
 8005270:	d000      	beq.n	8005274 <HAL_RCC_OscConfig+0x274>
 8005272:	e70b      	b.n	800508c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005274:	f7fd fd22 	bl	8002cbc <HAL_GetTick>
 8005278:	1bc0      	subs	r0, r0, r7
 800527a:	2802      	cmp	r0, #2
 800527c:	d9f5      	bls.n	800526a <HAL_RCC_OscConfig+0x26a>
 800527e:	e731      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8005280:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005282:	439a      	bics	r2, r3
 8005284:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005286:	f7fd fd19 	bl	8002cbc <HAL_GetTick>
 800528a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800528c:	2202      	movs	r2, #2
 800528e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005290:	4213      	tst	r3, r2
 8005292:	d100      	bne.n	8005296 <HAL_RCC_OscConfig+0x296>
 8005294:	e6fa      	b.n	800508c <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005296:	f7fd fd11 	bl	8002cbc <HAL_GetTick>
 800529a:	1bc0      	subs	r0, r0, r7
 800529c:	2802      	cmp	r0, #2
 800529e:	d9f5      	bls.n	800528c <HAL_RCC_OscConfig+0x28c>
 80052a0:	e720      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80052a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052a8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ac:	421a      	tst	r2, r3
 80052ae:	d104      	bne.n	80052ba <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80052b2:	4313      	orrs	r3, r2
 80052b4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80052b6:	2301      	movs	r3, #1
 80052b8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	4f19      	ldr	r7, [pc, #100]	; (8005324 <HAL_RCC_OscConfig+0x324>)
 80052be:	0052      	lsls	r2, r2, #1
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4213      	tst	r3, r2
 80052c4:	d008      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	68ab      	ldr	r3, [r5, #8]
 80052ca:	0052      	lsls	r2, r2, #1
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d12b      	bne.n	8005328 <HAL_RCC_OscConfig+0x328>
 80052d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80052d2:	4313      	orrs	r3, r2
 80052d4:	6523      	str	r3, [r4, #80]	; 0x50
 80052d6:	e04c      	b.n	8005372 <HAL_RCC_OscConfig+0x372>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d8:	2280      	movs	r2, #128	; 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	0052      	lsls	r2, r2, #1
 80052de:	4313      	orrs	r3, r2
 80052e0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80052e2:	f7fd fceb 	bl	8002cbc <HAL_GetTick>
 80052e6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	0052      	lsls	r2, r2, #1
 80052ee:	4213      	tst	r3, r2
 80052f0:	d1e9      	bne.n	80052c6 <HAL_RCC_OscConfig+0x2c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fd fce3 	bl	8002cbc <HAL_GetTick>
 80052f6:	9b01      	ldr	r3, [sp, #4]
 80052f8:	1ac0      	subs	r0, r0, r3
 80052fa:	2864      	cmp	r0, #100	; 0x64
 80052fc:	d9f4      	bls.n	80052e8 <HAL_RCC_OscConfig+0x2e8>
 80052fe:	e6f1      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
 8005300:	40021000 	.word	0x40021000
 8005304:	ffff1fff 	.word	0xffff1fff
 8005308:	0800e900 	.word	0x0800e900
 800530c:	2000008c 	.word	0x2000008c
 8005310:	20000094 	.word	0x20000094
 8005314:	fffeffff 	.word	0xfffeffff
 8005318:	fffbffff 	.word	0xfffbffff
 800531c:	ffffe0ff 	.word	0xffffe0ff
 8005320:	fffffeff 	.word	0xfffffeff
 8005324:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	2b00      	cmp	r3, #0
 800532a:	d116      	bne.n	800535a <HAL_RCC_OscConfig+0x35a>
 800532c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800532e:	4a51      	ldr	r2, [pc, #324]	; (8005474 <HAL_RCC_OscConfig+0x474>)
 8005330:	4013      	ands	r3, r2
 8005332:	6523      	str	r3, [r4, #80]	; 0x50
 8005334:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005336:	4a50      	ldr	r2, [pc, #320]	; (8005478 <HAL_RCC_OscConfig+0x478>)
 8005338:	4013      	ands	r3, r2
 800533a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800533c:	f7fd fcbe 	bl	8002cbc <HAL_GetTick>
 8005340:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	4213      	tst	r3, r2
 800534a:	d01a      	beq.n	8005382 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fd fcb6 	bl	8002cbc <HAL_GetTick>
 8005350:	4b4a      	ldr	r3, [pc, #296]	; (800547c <HAL_RCC_OscConfig+0x47c>)
 8005352:	1bc0      	subs	r0, r0, r7
 8005354:	4298      	cmp	r0, r3
 8005356:	d9f4      	bls.n	8005342 <HAL_RCC_OscConfig+0x342>
 8005358:	e6c4      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535a:	21a0      	movs	r1, #160	; 0xa0
 800535c:	00c9      	lsls	r1, r1, #3
 800535e:	428b      	cmp	r3, r1
 8005360:	d118      	bne.n	8005394 <HAL_RCC_OscConfig+0x394>
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	430b      	orrs	r3, r1
 800536a:	6523      	str	r3, [r4, #80]	; 0x50
 800536c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800536e:	431a      	orrs	r2, r3
 8005370:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005372:	f7fd fca3 	bl	8002cbc <HAL_GetTick>
 8005376:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005378:	2280      	movs	r2, #128	; 0x80
 800537a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800537c:	0092      	lsls	r2, r2, #2
 800537e:	4213      	tst	r3, r2
 8005380:	d010      	beq.n	80053a4 <HAL_RCC_OscConfig+0x3a4>
    if(pwrclkchanged == SET)
 8005382:	9b00      	ldr	r3, [sp, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d000      	beq.n	800538a <HAL_RCC_OscConfig+0x38a>
 8005388:	e684      	b.n	8005094 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800538c:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <HAL_RCC_OscConfig+0x480>)
 800538e:	4013      	ands	r3, r2
 8005390:	63a3      	str	r3, [r4, #56]	; 0x38
 8005392:	e67f      	b.n	8005094 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005394:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005396:	4a37      	ldr	r2, [pc, #220]	; (8005474 <HAL_RCC_OscConfig+0x474>)
 8005398:	4013      	ands	r3, r2
 800539a:	6523      	str	r3, [r4, #80]	; 0x50
 800539c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800539e:	4a36      	ldr	r2, [pc, #216]	; (8005478 <HAL_RCC_OscConfig+0x478>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	e797      	b.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a4:	f7fd fc8a 	bl	8002cbc <HAL_GetTick>
 80053a8:	4b34      	ldr	r3, [pc, #208]	; (800547c <HAL_RCC_OscConfig+0x47c>)
 80053aa:	1bc0      	subs	r0, r0, r7
 80053ac:	4298      	cmp	r0, r3
 80053ae:	d9e3      	bls.n	8005378 <HAL_RCC_OscConfig+0x378>
 80053b0:	e698      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b2:	2e0c      	cmp	r6, #12
 80053b4:	d043      	beq.n	800543e <HAL_RCC_OscConfig+0x43e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b6:	4a33      	ldr	r2, [pc, #204]	; (8005484 <HAL_RCC_OscConfig+0x484>)
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d12e      	bne.n	800541a <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 80053bc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053be:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4013      	ands	r3, r2
 80053c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053c4:	f7fd fc7a 	bl	8002cbc <HAL_GetTick>
 80053c8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053ca:	04bf      	lsls	r7, r7, #18
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	423b      	tst	r3, r7
 80053d0:	d11d      	bne.n	800540e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80053d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053d6:	68e2      	ldr	r2, [r4, #12]
 80053d8:	430b      	orrs	r3, r1
 80053da:	492b      	ldr	r1, [pc, #172]	; (8005488 <HAL_RCC_OscConfig+0x488>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80053dc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053de:	400a      	ands	r2, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80053e4:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	045b      	lsls	r3, r3, #17
 80053f0:	4313      	orrs	r3, r2
 80053f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053f4:	f7fd fc62 	bl	8002cbc <HAL_GetTick>
 80053f8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	4233      	tst	r3, r6
 80053fe:	d000      	beq.n	8005402 <HAL_RCC_OscConfig+0x402>
 8005400:	e64c      	b.n	800509c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005402:	f7fd fc5b 	bl	8002cbc <HAL_GetTick>
 8005406:	1b40      	subs	r0, r0, r5
 8005408:	2802      	cmp	r0, #2
 800540a:	d9f6      	bls.n	80053fa <HAL_RCC_OscConfig+0x3fa>
 800540c:	e66a      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800540e:	f7fd fc55 	bl	8002cbc <HAL_GetTick>
 8005412:	1b80      	subs	r0, r0, r6
 8005414:	2802      	cmp	r0, #2
 8005416:	d9d9      	bls.n	80053cc <HAL_RCC_OscConfig+0x3cc>
 8005418:	e664      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 800541a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800541c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800541e:	4013      	ands	r3, r2
 8005420:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005422:	f7fd fc4b 	bl	8002cbc <HAL_GetTick>
 8005426:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005428:	04b6      	lsls	r6, r6, #18
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	4233      	tst	r3, r6
 800542e:	d100      	bne.n	8005432 <HAL_RCC_OscConfig+0x432>
 8005430:	e634      	b.n	800509c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005432:	f7fd fc43 	bl	8002cbc <HAL_GetTick>
 8005436:	1b40      	subs	r0, r0, r5
 8005438:	2802      	cmp	r0, #2
 800543a:	d9f6      	bls.n	800542a <HAL_RCC_OscConfig+0x42a>
 800543c:	e652      	b.n	80050e4 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 800543e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005440:	2b01      	cmp	r3, #1
 8005442:	d100      	bne.n	8005446 <HAL_RCC_OscConfig+0x446>
 8005444:	e64f      	b.n	80050e6 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8005448:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800544c:	0252      	lsls	r2, r2, #9
 800544e:	401a      	ands	r2, r3
 8005450:	428a      	cmp	r2, r1
 8005452:	d000      	beq.n	8005456 <HAL_RCC_OscConfig+0x456>
 8005454:	e630      	b.n	80050b8 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005456:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005458:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800545a:	0392      	lsls	r2, r2, #14
 800545c:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	428a      	cmp	r2, r1
 8005460:	d000      	beq.n	8005464 <HAL_RCC_OscConfig+0x464>
 8005462:	e629      	b.n	80050b8 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005464:	22c0      	movs	r2, #192	; 0xc0
 8005466:	0412      	lsls	r2, r2, #16
 8005468:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800546a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800546c:	4293      	cmp	r3, r2
 800546e:	d100      	bne.n	8005472 <HAL_RCC_OscConfig+0x472>
 8005470:	e614      	b.n	800509c <HAL_RCC_OscConfig+0x9c>
 8005472:	e621      	b.n	80050b8 <HAL_RCC_OscConfig+0xb8>
 8005474:	fffffeff 	.word	0xfffffeff
 8005478:	fffffbff 	.word	0xfffffbff
 800547c:	00001388 	.word	0x00001388
 8005480:	efffffff 	.word	0xefffffff
 8005484:	feffffff 	.word	0xfeffffff
 8005488:	ff02ffff 	.word	0xff02ffff

0800548c <HAL_RCC_ClockConfig>:
{
 800548c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800548e:	1e04      	subs	r4, r0, #0
 8005490:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005494:	2001      	movs	r0, #1
}
 8005496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	2501      	movs	r5, #1
 800549a:	4e5b      	ldr	r6, [pc, #364]	; (8005608 <HAL_RCC_ClockConfig+0x17c>)
 800549c:	9a01      	ldr	r2, [sp, #4]
 800549e:	6833      	ldr	r3, [r6, #0]
 80054a0:	402b      	ands	r3, r5
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d331      	bcc.n	800550a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	0793      	lsls	r3, r2, #30
 80054aa:	d443      	bmi.n	8005534 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ac:	07d3      	lsls	r3, r2, #31
 80054ae:	d449      	bmi.n	8005544 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b0:	2501      	movs	r5, #1
 80054b2:	6833      	ldr	r3, [r6, #0]
 80054b4:	9a01      	ldr	r2, [sp, #4]
 80054b6:	402b      	ands	r3, r5
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d909      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	43ab      	bics	r3, r5
 80054c0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80054c2:	f7fd fbfb 	bl	8002cbc <HAL_GetTick>
 80054c6:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c8:	6833      	ldr	r3, [r6, #0]
 80054ca:	422b      	tst	r3, r5
 80054cc:	d000      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x44>
 80054ce:	e08c      	b.n	80055ea <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	4d4e      	ldr	r5, [pc, #312]	; (800560c <HAL_RCC_ClockConfig+0x180>)
 80054d4:	0753      	lsls	r3, r2, #29
 80054d6:	d500      	bpl.n	80054da <HAL_RCC_ClockConfig+0x4e>
 80054d8:	e08f      	b.n	80055fa <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054da:	0713      	lsls	r3, r2, #28
 80054dc:	d506      	bpl.n	80054ec <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054de:	68e9      	ldr	r1, [r5, #12]
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	4a4b      	ldr	r2, [pc, #300]	; (8005610 <HAL_RCC_ClockConfig+0x184>)
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	400a      	ands	r2, r1
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054ec:	f7ff fd40 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 80054f0:	68eb      	ldr	r3, [r5, #12]
 80054f2:	4a48      	ldr	r2, [pc, #288]	; (8005614 <HAL_RCC_ClockConfig+0x188>)
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	0f1b      	lsrs	r3, r3, #28
 80054f8:	5cd3      	ldrb	r3, [r2, r3]
 80054fa:	40d8      	lsrs	r0, r3
 80054fc:	4b46      	ldr	r3, [pc, #280]	; (8005618 <HAL_RCC_ClockConfig+0x18c>)
 80054fe:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005500:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCC_ClockConfig+0x190>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	f7fd fbd8 	bl	8002cb8 <HAL_InitTick>
  if(status != HAL_OK)
 8005508:	e7c5      	b.n	8005496 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550a:	6833      	ldr	r3, [r6, #0]
 800550c:	9a01      	ldr	r2, [sp, #4]
 800550e:	43ab      	bics	r3, r5
 8005510:	4313      	orrs	r3, r2
 8005512:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005514:	f7fd fbd2 	bl	8002cbc <HAL_GetTick>
 8005518:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	6833      	ldr	r3, [r6, #0]
 800551c:	9a01      	ldr	r2, [sp, #4]
 800551e:	402b      	ands	r3, r5
 8005520:	4293      	cmp	r3, r2
 8005522:	d0c0      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005524:	f7fd fbca 	bl	8002cbc <HAL_GetTick>
 8005528:	4b3d      	ldr	r3, [pc, #244]	; (8005620 <HAL_RCC_ClockConfig+0x194>)
 800552a:	1bc0      	subs	r0, r0, r7
 800552c:	4298      	cmp	r0, r3
 800552e:	d9f4      	bls.n	800551a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8005530:	2003      	movs	r0, #3
 8005532:	e7b0      	b.n	8005496 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	20f0      	movs	r0, #240	; 0xf0
 8005536:	4935      	ldr	r1, [pc, #212]	; (800560c <HAL_RCC_ClockConfig+0x180>)
 8005538:	68cb      	ldr	r3, [r1, #12]
 800553a:	4383      	bics	r3, r0
 800553c:	68a0      	ldr	r0, [r4, #8]
 800553e:	4303      	orrs	r3, r0
 8005540:	60cb      	str	r3, [r1, #12]
 8005542:	e7b3      	b.n	80054ac <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005544:	4d31      	ldr	r5, [pc, #196]	; (800560c <HAL_RCC_ClockConfig+0x180>)
 8005546:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005548:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554a:	2a02      	cmp	r2, #2
 800554c:	d118      	bne.n	8005580 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800554e:	039b      	lsls	r3, r3, #14
 8005550:	d5a0      	bpl.n	8005494 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005552:	2103      	movs	r1, #3
 8005554:	68eb      	ldr	r3, [r5, #12]
 8005556:	438b      	bics	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800555c:	f7fd fbae 	bl	8002cbc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005560:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005562:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005564:	2b02      	cmp	r3, #2
 8005566:	d118      	bne.n	800559a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005568:	220c      	movs	r2, #12
 800556a:	68eb      	ldr	r3, [r5, #12]
 800556c:	4013      	ands	r3, r2
 800556e:	2b08      	cmp	r3, #8
 8005570:	d09e      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005572:	f7fd fba3 	bl	8002cbc <HAL_GetTick>
 8005576:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <HAL_RCC_ClockConfig+0x194>)
 8005578:	1bc0      	subs	r0, r0, r7
 800557a:	4298      	cmp	r0, r3
 800557c:	d9f4      	bls.n	8005568 <HAL_RCC_ClockConfig+0xdc>
 800557e:	e7d7      	b.n	8005530 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005580:	2a03      	cmp	r2, #3
 8005582:	d102      	bne.n	800558a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005584:	019b      	lsls	r3, r3, #6
 8005586:	d4e4      	bmi.n	8005552 <HAL_RCC_ClockConfig+0xc6>
 8005588:	e784      	b.n	8005494 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800558a:	2a01      	cmp	r2, #1
 800558c:	d102      	bne.n	8005594 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800558e:	075b      	lsls	r3, r3, #29
 8005590:	d4df      	bmi.n	8005552 <HAL_RCC_ClockConfig+0xc6>
 8005592:	e77f      	b.n	8005494 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005594:	059b      	lsls	r3, r3, #22
 8005596:	d4dc      	bmi.n	8005552 <HAL_RCC_ClockConfig+0xc6>
 8005598:	e77c      	b.n	8005494 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559a:	2b03      	cmp	r3, #3
 800559c:	d10b      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800559e:	220c      	movs	r2, #12
 80055a0:	68eb      	ldr	r3, [r5, #12]
 80055a2:	4013      	ands	r3, r2
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d083      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a8:	f7fd fb88 	bl	8002cbc <HAL_GetTick>
 80055ac:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <HAL_RCC_ClockConfig+0x194>)
 80055ae:	1bc0      	subs	r0, r0, r7
 80055b0:	4298      	cmp	r0, r3
 80055b2:	d9f4      	bls.n	800559e <HAL_RCC_ClockConfig+0x112>
 80055b4:	e7bc      	b.n	8005530 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d011      	beq.n	80055de <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055ba:	220c      	movs	r2, #12
 80055bc:	68eb      	ldr	r3, [r5, #12]
 80055be:	4213      	tst	r3, r2
 80055c0:	d100      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x138>
 80055c2:	e775      	b.n	80054b0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c4:	f7fd fb7a 	bl	8002cbc <HAL_GetTick>
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_RCC_ClockConfig+0x194>)
 80055ca:	1bc0      	subs	r0, r0, r7
 80055cc:	4298      	cmp	r0, r3
 80055ce:	d9f4      	bls.n	80055ba <HAL_RCC_ClockConfig+0x12e>
 80055d0:	e7ae      	b.n	8005530 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d2:	f7fd fb73 	bl	8002cbc <HAL_GetTick>
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_RCC_ClockConfig+0x194>)
 80055d8:	1bc0      	subs	r0, r0, r7
 80055da:	4298      	cmp	r0, r3
 80055dc:	d8a8      	bhi.n	8005530 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055de:	220c      	movs	r2, #12
 80055e0:	68eb      	ldr	r3, [r5, #12]
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d1f4      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x146>
 80055e8:	e762      	b.n	80054b0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ea:	f7fd fb67 	bl	8002cbc <HAL_GetTick>
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <HAL_RCC_ClockConfig+0x194>)
 80055f0:	1bc0      	subs	r0, r0, r7
 80055f2:	4298      	cmp	r0, r3
 80055f4:	d800      	bhi.n	80055f8 <HAL_RCC_ClockConfig+0x16c>
 80055f6:	e767      	b.n	80054c8 <HAL_RCC_ClockConfig+0x3c>
 80055f8:	e79a      	b.n	8005530 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055fa:	68eb      	ldr	r3, [r5, #12]
 80055fc:	4909      	ldr	r1, [pc, #36]	; (8005624 <HAL_RCC_ClockConfig+0x198>)
 80055fe:	400b      	ands	r3, r1
 8005600:	68e1      	ldr	r1, [r4, #12]
 8005602:	430b      	orrs	r3, r1
 8005604:	60eb      	str	r3, [r5, #12]
 8005606:	e768      	b.n	80054da <HAL_RCC_ClockConfig+0x4e>
 8005608:	40022000 	.word	0x40022000
 800560c:	40021000 	.word	0x40021000
 8005610:	ffffc7ff 	.word	0xffffc7ff
 8005614:	0800e900 	.word	0x0800e900
 8005618:	2000008c 	.word	0x2000008c
 800561c:	20000094 	.word	0x20000094
 8005620:	00001388 	.word	0x00001388
 8005624:	fffff8ff 	.word	0xfffff8ff

08005628 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <HAL_RCC_GetPCLK1Freq+0x14>)
 800562a:	4a05      	ldr	r2, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x18>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	055b      	lsls	r3, r3, #21
 8005630:	0f5b      	lsrs	r3, r3, #29
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	4a03      	ldr	r2, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005636:	6810      	ldr	r0, [r2, #0]
 8005638:	40d8      	lsrs	r0, r3
}
 800563a:	4770      	bx	lr
 800563c:	40021000 	.word	0x40021000
 8005640:	0800e910 	.word	0x0800e910
 8005644:	2000008c 	.word	0x2000008c

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <HAL_RCC_GetPCLK2Freq+0x14>)
 800564a:	4a05      	ldr	r2, [pc, #20]	; (8005660 <HAL_RCC_GetPCLK2Freq+0x18>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	049b      	lsls	r3, r3, #18
 8005650:	0f5b      	lsrs	r3, r3, #29
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	4a03      	ldr	r2, [pc, #12]	; (8005664 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005656:	6810      	ldr	r0, [r2, #0]
 8005658:	40d8      	lsrs	r0, r3
}
 800565a:	4770      	bx	lr
 800565c:	40021000 	.word	0x40021000
 8005660:	0800e910 	.word	0x0800e910
 8005664:	2000008c 	.word	0x2000008c

08005668 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005668:	6803      	ldr	r3, [r0, #0]
{
 800566a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800566c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800566e:	069b      	lsls	r3, r3, #26
 8005670:	d53c      	bpl.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005672:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8005674:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005676:	4c54      	ldr	r4, [pc, #336]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005678:	055b      	lsls	r3, r3, #21
 800567a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800567c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567e:	421a      	tst	r2, r3
 8005680:	d104      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005682:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005684:	4313      	orrs	r3, r2
 8005686:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005688:	2301      	movs	r3, #1
 800568a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	2780      	movs	r7, #128	; 0x80
 800568e:	4e4f      	ldr	r6, [pc, #316]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005690:	007f      	lsls	r7, r7, #1
 8005692:	6833      	ldr	r3, [r6, #0]
 8005694:	423b      	tst	r3, r7
 8005696:	d059      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005698:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800569a:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800569c:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800569e:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056a0:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056a2:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056a8:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056aa:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056ac:	428a      	cmp	r2, r1
 80056ae:	d15e      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x106>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80056b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80056b2:	0011      	movs	r1, r2
 80056b4:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80056b6:	421a      	tst	r2, r3
 80056b8:	d160      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ba:	6869      	ldr	r1, [r5, #4]
 80056bc:	23c0      	movs	r3, #192	; 0xc0
 80056be:	000a      	movs	r2, r1
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	401a      	ands	r2, r3
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d107      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	4841      	ldr	r0, [pc, #260]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056cc:	4003      	ands	r3, r0
 80056ce:	20c0      	movs	r0, #192	; 0xc0
 80056d0:	0380      	lsls	r0, r0, #14
 80056d2:	4001      	ands	r1, r0
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056da:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056dc:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056de:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d103      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056e6:	4a3b      	ldr	r2, [pc, #236]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	07da      	lsls	r2, r3, #31
 80056f0:	d506      	bpl.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056f2:	2003      	movs	r0, #3
 80056f4:	4934      	ldr	r1, [pc, #208]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80056f8:	4382      	bics	r2, r0
 80056fa:	68a8      	ldr	r0, [r5, #8]
 80056fc:	4302      	orrs	r2, r0
 80056fe:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005700:	079a      	lsls	r2, r3, #30
 8005702:	d506      	bpl.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005704:	200c      	movs	r0, #12
 8005706:	4930      	ldr	r1, [pc, #192]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005708:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800570a:	4382      	bics	r2, r0
 800570c:	68e8      	ldr	r0, [r5, #12]
 800570e:	4302      	orrs	r2, r0
 8005710:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005712:	075a      	lsls	r2, r3, #29
 8005714:	d506      	bpl.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005716:	492c      	ldr	r1, [pc, #176]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005718:	482f      	ldr	r0, [pc, #188]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800571a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800571c:	4002      	ands	r2, r0
 800571e:	6928      	ldr	r0, [r5, #16]
 8005720:	4302      	orrs	r2, r0
 8005722:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005724:	071a      	lsls	r2, r3, #28
 8005726:	d506      	bpl.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005728:	4927      	ldr	r1, [pc, #156]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	482c      	ldr	r0, [pc, #176]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800572c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800572e:	4002      	ands	r2, r0
 8005730:	6968      	ldr	r0, [r5, #20]
 8005732:	4302      	orrs	r2, r0
 8005734:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8005736:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	d517      	bpl.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x104>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	4928      	ldr	r1, [pc, #160]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8005740:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005742:	400b      	ands	r3, r1
 8005744:	69a9      	ldr	r1, [r5, #24]
 8005746:	430b      	orrs	r3, r1
 8005748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800574a:	e00f      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x104>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574c:	6833      	ldr	r3, [r6, #0]
 800574e:	433b      	orrs	r3, r7
 8005750:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005752:	f7fd fab3 	bl	8002cbc <HAL_GetTick>
 8005756:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	6833      	ldr	r3, [r6, #0]
 800575a:	423b      	tst	r3, r7
 800575c:	d19c      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fd faad 	bl	8002cbc <HAL_GetTick>
 8005762:	9b01      	ldr	r3, [sp, #4]
 8005764:	1ac0      	subs	r0, r0, r3
 8005766:	2864      	cmp	r0, #100	; 0x64
 8005768:	d9f6      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          return HAL_TIMEOUT;
 800576a:	2003      	movs	r0, #3
}
 800576c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800576e:	429e      	cmp	r6, r3
 8005770:	d19e      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005772:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8005774:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005776:	0392      	lsls	r2, r2, #14
 8005778:	d59a      	bpl.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800577a:	e7f7      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800577c:	42b1      	cmp	r1, r6
 800577e:	d09c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	069b      	lsls	r3, r3, #26
 8005784:	d599      	bpl.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005786:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005788:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800578a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800578c:	0312      	lsls	r2, r2, #12
 800578e:	4302      	orrs	r2, r0
 8005790:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005792:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005796:	4814      	ldr	r0, [pc, #80]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005798:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800579a:	4002      	ands	r2, r0
 800579c:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800579e:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80057a0:	05cb      	lsls	r3, r1, #23
 80057a2:	d400      	bmi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80057a4:	e789      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80057a6:	f7fd fa89 	bl	8002cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057aa:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80057ac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ae:	00bf      	lsls	r7, r7, #2
 80057b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057b2:	423b      	tst	r3, r7
 80057b4:	d000      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80057b6:	e780      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fd fa80 	bl	8002cbc <HAL_GetTick>
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057be:	1b80      	subs	r0, r0, r6
 80057c0:	4298      	cmp	r0, r3
 80057c2:	d9f5      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80057c4:	e7d1      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x102>
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
 80057d0:	ffcfffff 	.word	0xffcfffff
 80057d4:	efffffff 	.word	0xefffffff
 80057d8:	fffff3ff 	.word	0xfffff3ff
 80057dc:	ffffcfff 	.word	0xffffcfff
 80057e0:	fff3ffff 	.word	0xfff3ffff
 80057e4:	fffcffff 	.word	0xfffcffff
 80057e8:	fff7ffff 	.word	0xfff7ffff
 80057ec:	00001388 	.word	0x00001388

080057f0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80057f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f2:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057f4:	1c45      	adds	r5, r0, #1
 80057f6:	7feb      	ldrb	r3, [r5, #31]
{
 80057f8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80057fa:	0038      	movs	r0, r7
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d027      	beq.n	8005850 <HAL_RTC_DeactivateAlarm+0x60>
 8005800:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005802:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005804:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8005806:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005808:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
 800580e:	3a77      	subs	r2, #119	; 0x77
 8005810:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005812:	32ad      	adds	r2, #173	; 0xad
 8005814:	4291      	cmp	r1, r2
 8005816:	d12a      	bne.n	800586e <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	4922      	ldr	r1, [pc, #136]	; (80058a4 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800581c:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800581e:	400a      	ands	r2, r1
 8005820:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	4920      	ldr	r1, [pc, #128]	; (80058a8 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005826:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005828:	400a      	ands	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800582c:	f7fd fa46 	bl	8002cbc <HAL_GetTick>
 8005830:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005832:	2201      	movs	r2, #1
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	401a      	ands	r2, r3
 800583a:	9201      	str	r2, [sp, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	4213      	tst	r3, r2
 8005840:	d007      	beq.n	8005852 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005842:	22ff      	movs	r2, #255	; 0xff
 8005844:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005846:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005848:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800584a:	2301      	movs	r3, #1
 800584c:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800584e:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8005850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005852:	f7fd fa33 	bl	8002cbc <HAL_GetTick>
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	1ac0      	subs	r0, r0, r3
 800585a:	42b8      	cmp	r0, r7
 800585c:	d9e9      	bls.n	8005832 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005860:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005866:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 800586c:	e7f0      	b.n	8005850 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	490e      	ldr	r1, [pc, #56]	; (80058ac <HAL_RTC_DeactivateAlarm+0xbc>)
 8005872:	400a      	ands	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	490d      	ldr	r1, [pc, #52]	; (80058b0 <HAL_RTC_DeactivateAlarm+0xc0>)
 800587a:	400a      	ands	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800587e:	f7fd fa1d 	bl	8002cbc <HAL_GetTick>
 8005882:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	001a      	movs	r2, r3
 800588a:	403a      	ands	r2, r7
 800588c:	9201      	str	r2, [sp, #4]
 800588e:	423b      	tst	r3, r7
 8005890:	d1d7      	bne.n	8005842 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005892:	f7fd fa13 	bl	8002cbc <HAL_GetTick>
 8005896:	9b00      	ldr	r3, [sp, #0]
 8005898:	1ac0      	subs	r0, r0, r3
 800589a:	23fa      	movs	r3, #250	; 0xfa
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4298      	cmp	r0, r3
 80058a0:	d9f0      	bls.n	8005884 <HAL_RTC_DeactivateAlarm+0x94>
 80058a2:	e7dc      	b.n	800585e <HAL_RTC_DeactivateAlarm+0x6e>
 80058a4:	fffffeff 	.word	0xfffffeff
 80058a8:	ffffefff 	.word	0xffffefff
 80058ac:	fffffdff 	.word	0xfffffdff
 80058b0:	ffffdfff 	.word	0xffffdfff

080058b4 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80058b4:	6803      	ldr	r3, [r0, #0]
{
 80058b6:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80058b8:	689a      	ldr	r2, [r3, #8]
{
 80058ba:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80058bc:	04d2      	lsls	r2, r2, #19
 80058be:	d50a      	bpl.n	80058d6 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	05db      	lsls	r3, r3, #23
 80058c4:	d507      	bpl.n	80058d6 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80058c6:	f7fd f858 	bl	800297a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80058ca:	6821      	ldr	r1, [r4, #0]
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <HAL_RTC_AlarmIRQHandler+0x54>)
 80058ce:	68ca      	ldr	r2, [r1, #12]
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	0492      	lsls	r2, r2, #18
 80058dc:	d50b      	bpl.n	80058f6 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	059b      	lsls	r3, r3, #22
 80058e2:	d508      	bpl.n	80058f6 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80058e4:	0020      	movs	r0, r4
 80058e6:	f000 faf5 	bl	8005ed4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80058ea:	6821      	ldr	r1, [r4, #0]
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <HAL_RTC_AlarmIRQHandler+0x58>)
 80058ee:	68ca      	ldr	r2, [r1, #12]
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80058fa:	0292      	lsls	r2, r2, #10
 80058fc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80058fe:	2301      	movs	r3, #1
 8005900:	3402      	adds	r4, #2
 8005902:	77e3      	strb	r3, [r4, #31]
}
 8005904:	bd10      	pop	{r4, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	fffffe7f 	.word	0xfffffe7f
 800590c:	fffffd7f 	.word	0xfffffd7f
 8005910:	40010400 	.word	0x40010400

08005914 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005914:	21a0      	movs	r1, #160	; 0xa0
 8005916:	6802      	ldr	r2, [r0, #0]
{
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800591a:	68d3      	ldr	r3, [r2, #12]
{
 800591c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800591e:	438b      	bics	r3, r1
 8005920:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005922:	f7fd f9cb 	bl	8002cbc <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005926:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8005928:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800592a:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800592c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	4233      	tst	r3, r6
 8005934:	d001      	beq.n	800593a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005936:	2000      	movs	r0, #0
}
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800593a:	f7fd f9bf 	bl	8002cbc <HAL_GetTick>
 800593e:	1b40      	subs	r0, r0, r5
 8005940:	42b8      	cmp	r0, r7
 8005942:	d9f4      	bls.n	800592e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8005944:	2003      	movs	r0, #3
 8005946:	e7f7      	b.n	8005938 <HAL_RTC_WaitForSynchro+0x24>

08005948 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800594a:	2640      	movs	r6, #64	; 0x40
 800594c:	6803      	ldr	r3, [r0, #0]
{
 800594e:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	4232      	tst	r2, r6
 8005954:	d001      	beq.n	800595a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005956:	2000      	movs	r0, #0
}
 8005958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800595a:	2201      	movs	r2, #1
 800595c:	4252      	negs	r2, r2
 800595e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005960:	f7fd f9ac 	bl	8002cbc <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005964:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8005966:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005968:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4233      	tst	r3, r6
 8005970:	d1f1      	bne.n	8005956 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005972:	f7fd f9a3 	bl	8002cbc <HAL_GetTick>
 8005976:	1b40      	subs	r0, r0, r5
 8005978:	42b8      	cmp	r0, r7
 800597a:	d9f6      	bls.n	800596a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800597c:	2003      	movs	r0, #3
 800597e:	e7eb      	b.n	8005958 <RTC_EnterInitMode+0x10>

08005980 <HAL_RTC_Init>:
{
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005984:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8005986:	2800      	cmp	r0, #0
 8005988:	d01a      	beq.n	80059c0 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800598a:	1c86      	adds	r6, r0, #2
 800598c:	7ff3      	ldrb	r3, [r6, #31]
 800598e:	b2da      	uxtb	r2, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8005994:	1943      	adds	r3, r0, r5
 8005996:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8005998:	f7fc fe08 	bl	80025ac <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800599c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800599e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059a0:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a2:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059a4:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24
 80059a8:	3a77      	subs	r2, #119	; 0x77
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059ac:	f7ff ffcc 	bl	8005948 <RTC_EnterInitMode>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	1e05      	subs	r5, r0, #0
 80059b4:	d006      	beq.n	80059c4 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b6:	22ff      	movs	r2, #255	; 0xff
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059ba:	2304      	movs	r3, #4
 80059bc:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80059be:	2501      	movs	r5, #1
}
 80059c0:	0028      	movs	r0, r5
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	491b      	ldr	r1, [pc, #108]	; (8005a34 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059c8:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059ca:	400a      	ands	r2, r1
 80059cc:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059ce:	6862      	ldr	r2, [r4, #4]
 80059d0:	6899      	ldr	r1, [r3, #8]
 80059d2:	4302      	orrs	r2, r0
 80059d4:	69a0      	ldr	r0, [r4, #24]
 80059d6:	4302      	orrs	r2, r0
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059dc:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80059de:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059e2:	68a2      	ldr	r2, [r4, #8]
 80059e4:	6919      	ldr	r1, [r3, #16]
 80059e6:	0412      	lsls	r2, r2, #16
 80059e8:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059ea:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	438a      	bics	r2, r1
 80059f2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80059f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f6:	397d      	subs	r1, #125	; 0x7d
 80059f8:	438a      	bics	r2, r1
 80059fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80059fc:	69e2      	ldr	r2, [r4, #28]
 80059fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a00:	4302      	orrs	r2, r0
 8005a02:	430a      	orrs	r2, r1
 8005a04:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	069b      	lsls	r3, r3, #26
 8005a0a:	d40c      	bmi.n	8005a26 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a0c:	0020      	movs	r0, r4
 8005a0e:	f7ff ff81 	bl	8005914 <HAL_RTC_WaitForSynchro>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d007      	beq.n	8005a26 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a16:	22ff      	movs	r2, #255	; 0xff
 8005a18:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8005a1a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a1e:	2304      	movs	r3, #4
 8005a20:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8005a22:	77e5      	strb	r5, [r4, #31]
 8005a24:	e7cb      	b.n	80059be <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	22ff      	movs	r2, #255	; 0xff
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8005a30:	e7c6      	b.n	80059c0 <HAL_RTC_Init+0x40>
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	ff8fffbf 	.word	0xff8fffbf

08005a38 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005a38:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8005a3a:	2809      	cmp	r0, #9
 8005a3c:	d803      	bhi.n	8005a46 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	4318      	orrs	r0, r3
 8005a42:	b2c0      	uxtb	r0, r0
}
 8005a44:	4770      	bx	lr
    Param -= 10U;
 8005a46:	380a      	subs	r0, #10
    bcdhigh++;
 8005a48:	3301      	adds	r3, #1
    Param -= 10U;
 8005a4a:	b2c0      	uxtb	r0, r0
 8005a4c:	e7f5      	b.n	8005a3a <RTC_ByteToBcd2+0x2>
	...

08005a50 <HAL_RTC_SetTime>:
{
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005a52:	1c43      	adds	r3, r0, #1
{
 8005a54:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005a56:	9301      	str	r3, [sp, #4]
{
 8005a58:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005a5a:	7fd9      	ldrb	r1, [r3, #31]
 8005a5c:	2302      	movs	r3, #2
{
 8005a5e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8005a60:	001f      	movs	r7, r3
 8005a62:	2901      	cmp	r1, #1
 8005a64:	d036      	beq.n	8005ad4 <HAL_RTC_SetTime+0x84>
 8005a66:	2101      	movs	r1, #1
 8005a68:	1840      	adds	r0, r0, r1
 8005a6a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a6c:	18e9      	adds	r1, r5, r3
 8005a6e:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a70:	682f      	ldr	r7, [r5, #0]
 8005a72:	7820      	ldrb	r0, [r4, #0]
 8005a74:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a76:	9102      	str	r1, [sp, #8]
 8005a78:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d12d      	bne.n	8005ada <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0011      	movs	r1, r2
 8005a82:	4019      	ands	r1, r3
 8005a84:	421a      	tst	r2, r3
 8005a86:	d100      	bne.n	8005a8a <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8005a88:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a8a:	f7ff ffd5 	bl	8005a38 <RTC_ByteToBcd2>
 8005a8e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a90:	0030      	movs	r0, r6
 8005a92:	f7ff ffd1 	bl	8005a38 <RTC_ByteToBcd2>
 8005a96:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005a98:	78a0      	ldrb	r0, [r4, #2]
 8005a9a:	f7ff ffcd 	bl	8005a38 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a9e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005aa0:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005aa2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005aa4:	4303      	orrs	r3, r0
 8005aa6:	0412      	lsls	r2, r2, #16
 8005aa8:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005aaa:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005aac:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aae:	23ca      	movs	r3, #202	; 0xca
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	3b77      	subs	r3, #119	; 0x77
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	f7ff ff46 	bl	8005948 <RTC_EnterInitMode>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	1e07      	subs	r7, r0, #0
 8005ac0:	d019      	beq.n	8005af6 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac2:	22ff      	movs	r2, #255	; 0xff
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	9a02      	ldr	r2, [sp, #8]
 8005aca:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005acc:	2300      	movs	r3, #0
 8005ace:	9a01      	ldr	r2, [sp, #4]
 8005ad0:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8005ad2:	2701      	movs	r7, #1
}
 8005ad4:	0038      	movs	r0, r7
 8005ad6:	b005      	add	sp, #20
 8005ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	0011      	movs	r1, r2
 8005ade:	4019      	ands	r1, r3
 8005ae0:	421a      	tst	r2, r3
 8005ae2:	d100      	bne.n	8005ae6 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8005ae4:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ae6:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ae8:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005aea:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005aec:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8005aee:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005af0:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005af2:	4306      	orrs	r6, r0
 8005af4:	e7da      	b.n	8005aac <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005af6:	4816      	ldr	r0, [pc, #88]	; (8005b50 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005af8:	4916      	ldr	r1, [pc, #88]	; (8005b54 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005afa:	4006      	ands	r6, r0
 8005afc:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005afe:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b00:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b02:	400a      	ands	r2, r1
 8005b04:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b06:	68e2      	ldr	r2, [r4, #12]
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	4302      	orrs	r2, r0
 8005b0c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b0e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b10:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	438a      	bics	r2, r1
 8005b16:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	069b      	lsls	r3, r3, #26
 8005b1c:	d40d      	bmi.n	8005b3a <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f7ff fef8 	bl	8005914 <HAL_RTC_WaitForSynchro>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b28:	22ff      	movs	r2, #255	; 0xff
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b2e:	2304      	movs	r3, #4
 8005b30:	9a02      	ldr	r2, [sp, #8]
 8005b32:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	77df      	strb	r7, [r3, #31]
 8005b38:	e7cb      	b.n	8005ad2 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b3a:	22ff      	movs	r2, #255	; 0xff
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005b40:	2301      	movs	r3, #1
 8005b42:	9a02      	ldr	r2, [sp, #8]
 8005b44:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005b46:	2300      	movs	r3, #0
 8005b48:	9a01      	ldr	r2, [sp, #4]
 8005b4a:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8005b4c:	e7c2      	b.n	8005ad4 <HAL_RTC_SetTime+0x84>
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	007f7f7f 	.word	0x007f7f7f
 8005b54:	fffbffff 	.word	0xfffbffff

08005b58 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8005b58:	2302      	movs	r3, #2
{
 8005b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005b5c:	1c47      	adds	r7, r0, #1
{
 8005b5e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8005b60:	7ff9      	ldrb	r1, [r7, #31]
{
 8005b62:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005b64:	001d      	movs	r5, r3
{
 8005b66:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005b68:	2901      	cmp	r1, #1
 8005b6a:	d036      	beq.n	8005bda <HAL_RTC_SetDate+0x82>
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b70:	18c1      	adds	r1, r0, r3
 8005b72:	77cb      	strb	r3, [r1, #31]
 8005b74:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 8005b76:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b78:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 8005b7a:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b7c:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005b7e:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8005b80:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	d14c      	bne.n	8005c20 <HAL_RTC_SetDate+0xc8>
 8005b86:	3210      	adds	r2, #16
 8005b88:	4213      	tst	r3, r2
 8005b8a:	d002      	beq.n	8005b92 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b8c:	4393      	bics	r3, r2
 8005b8e:	330a      	adds	r3, #10
 8005b90:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b92:	f7ff ff51 	bl	8005a38 <RTC_ByteToBcd2>
 8005b96:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b98:	7870      	ldrb	r0, [r6, #1]
 8005b9a:	f7ff ff4d 	bl	8005a38 <RTC_ByteToBcd2>
 8005b9e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005ba0:	0028      	movs	r0, r5
 8005ba2:	f7ff ff49 	bl	8005a38 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ba6:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005ba8:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005baa:	041d      	lsls	r5, r3, #16
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	4318      	orrs	r0, r3
 8005bb0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bb2:	22ca      	movs	r2, #202	; 0xca
 8005bb4:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bb6:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bba:	3a77      	subs	r2, #119	; 0x77
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bbe:	f7ff fec3 	bl	8005948 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005bc2:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	1e05      	subs	r5, r0, #0
 8005bc8:	d00a      	beq.n	8005be0 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bca:	22ff      	movs	r2, #255	; 0xff
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bce:	2304      	movs	r3, #4
 8005bd0:	9a01      	ldr	r2, [sp, #4]
 8005bd2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8005bd8:	2501      	movs	r5, #1
}
 8005bda:	0028      	movs	r0, r5
 8005bdc:	b005      	add	sp, #20
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005be0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005be2:	4812      	ldr	r0, [pc, #72]	; (8005c2c <HAL_RTC_SetDate+0xd4>)
 8005be4:	4006      	ands	r6, r0
 8005be6:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	438a      	bics	r2, r1
 8005bec:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	069b      	lsls	r3, r3, #26
 8005bf2:	d40c      	bmi.n	8005c0e <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bf4:	0020      	movs	r0, r4
 8005bf6:	f7ff fe8d 	bl	8005914 <HAL_RTC_WaitForSynchro>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c04:	2304      	movs	r3, #4
 8005c06:	9a01      	ldr	r2, [sp, #4]
 8005c08:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005c0a:	77fd      	strb	r5, [r7, #31]
 8005c0c:	e7e4      	b.n	8005bd8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0e:	22ff      	movs	r2, #255	; 0xff
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005c14:	2301      	movs	r3, #1
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8005c1e:	e7dc      	b.n	8005bda <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c20:	9a02      	ldr	r2, [sp, #8]
 8005c22:	0406      	lsls	r6, r0, #16
 8005c24:	4316      	orrs	r6, r2
 8005c26:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c28:	021e      	lsls	r6, r3, #8
 8005c2a:	e7c2      	b.n	8005bb2 <HAL_RTC_SetDate+0x5a>
 8005c2c:	00ffff3f 	.word	0x00ffff3f

08005c30 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005c30:	2302      	movs	r3, #2
{
 8005c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c34:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8005c36:	1c41      	adds	r1, r0, #1
 8005c38:	7fce      	ldrb	r6, [r1, #31]
{
 8005c3a:	0004      	movs	r4, r0
 8005c3c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005c3e:	0018      	movs	r0, r3
 8005c40:	2e01      	cmp	r6, #1
 8005c42:	d100      	bne.n	8005c46 <HAL_RTC_SetAlarm_IT+0x16>
 8005c44:	e095      	b.n	8005d72 <HAL_RTC_SetAlarm_IT+0x142>
 8005c46:	3801      	subs	r0, #1
 8005c48:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4a:	18e1      	adds	r1, r4, r3
 8005c4c:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8005c4e:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c50:	6826      	ldr	r6, [r4, #0]
 8005c52:	9101      	str	r1, [sp, #4]
 8005c54:	7828      	ldrb	r0, [r5, #0]
 8005c56:	78af      	ldrb	r7, [r5, #2]
 8005c58:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d165      	bne.n	8005d2a <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c5e:	68b2      	ldr	r2, [r6, #8]
 8005c60:	0011      	movs	r1, r2
 8005c62:	4019      	ands	r1, r3
 8005c64:	421a      	tst	r2, r3
 8005c66:	d100      	bne.n	8005c6a <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c68:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c6a:	f7ff fee5 	bl	8005a38 <RTC_ByteToBcd2>
 8005c6e:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005c70:	9801      	ldr	r0, [sp, #4]
 8005c72:	f7ff fee1 	bl	8005a38 <RTC_ByteToBcd2>
 8005c76:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005c78:	0038      	movs	r0, r7
 8005c7a:	f7ff fedd 	bl	8005a38 <RTC_ByteToBcd2>
 8005c7e:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005c80:	1c6b      	adds	r3, r5, #1
 8005c82:	7fd8      	ldrb	r0, [r3, #31]
 8005c84:	f7ff fed8 	bl	8005a38 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c88:	696a      	ldr	r2, [r5, #20]
 8005c8a:	69eb      	ldr	r3, [r5, #28]
 8005c8c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005c8e:	78ea      	ldrb	r2, [r5, #3]
 8005c90:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005c92:	4313      	orrs	r3, r2
 8005c94:	431f      	orrs	r7, r3
 8005c96:	9b02      	ldr	r3, [sp, #8]
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005c9c:	9b01      	ldr	r3, [sp, #4]
 8005c9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ca0:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ca2:	69aa      	ldr	r2, [r5, #24]
 8005ca4:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ca6:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cac:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005cae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb0:	6273      	str	r3, [r6, #36]	; 0x24
 8005cb2:	3b77      	subs	r3, #119	; 0x77
 8005cb4:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005cb6:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005cb8:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d15b      	bne.n	8005d76 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005cbe:	68b3      	ldr	r3, [r6, #8]
 8005cc0:	4a41      	ldr	r2, [pc, #260]	; (8005dc8 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005cc2:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cc8:	68f2      	ldr	r2, [r6, #12]
 8005cca:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <HAL_RTC_SetAlarm_IT+0x19c>)
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fff3 	bl	8002cbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8005cd8:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cda:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	0011      	movs	r1, r2
 8005ce2:	4029      	ands	r1, r5
 8005ce4:	9103      	str	r1, [sp, #12]
 8005ce6:	422a      	tst	r2, r5
 8005ce8:	d034      	beq.n	8005d54 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cea:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005cec:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	6899      	ldr	r1, [r3, #8]
 8005cf4:	0052      	lsls	r2, r2, #1
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005cfa:	2280      	movs	r2, #128	; 0x80
 8005cfc:	6899      	ldr	r1, [r3, #8]
 8005cfe:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	4b32      	ldr	r3, [pc, #200]	; (8005dd0 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8005d08:	0292      	lsls	r2, r2, #10
 8005d0a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8005d0c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005d12:	6899      	ldr	r1, [r3, #8]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005d1e:	3afe      	subs	r2, #254	; 0xfe
 8005d20:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8005d22:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8005d24:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8005d26:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8005d28:	e023      	b.n	8005d72 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d2a:	68b2      	ldr	r2, [r6, #8]
 8005d2c:	0011      	movs	r1, r2
 8005d2e:	4019      	ands	r1, r3
 8005d30:	421a      	tst	r2, r3
 8005d32:	d100      	bne.n	8005d36 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d34:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d36:	69eb      	ldr	r3, [r5, #28]
 8005d38:	696a      	ldr	r2, [r5, #20]
 8005d3a:	0400      	lsls	r0, r0, #16
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d40:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d42:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005d44:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d46:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d48:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d4a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005d4c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005d4e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005d50:	7fd8      	ldrb	r0, [r3, #31]
 8005d52:	e7a6      	b.n	8005ca2 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d54:	f7fc ffb2 	bl	8002cbc <HAL_GetTick>
 8005d58:	9b02      	ldr	r3, [sp, #8]
 8005d5a:	1ac0      	subs	r0, r0, r3
 8005d5c:	42b0      	cmp	r0, r6
 8005d5e:	d9bd      	bls.n	8005cdc <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d60:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d62:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d68:	1ca3      	adds	r3, r4, #2
 8005d6a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	3401      	adds	r4, #1
 8005d70:	77e3      	strb	r3, [r4, #31]
}
 8005d72:	b005      	add	sp, #20
 8005d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d76:	68b3      	ldr	r3, [r6, #8]
 8005d78:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d7a:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d80:	68f2      	ldr	r2, [r6, #12]
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005d8a:	f7fc ff97 	bl	8002cbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d8e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8005d90:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d92:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	0011      	movs	r1, r2
 8005d9a:	4029      	ands	r1, r5
 8005d9c:	9103      	str	r1, [sp, #12]
 8005d9e:	422a      	tst	r2, r5
 8005da0:	d00b      	beq.n	8005dba <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005da2:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005da4:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005da6:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005da8:	2280      	movs	r2, #128	; 0x80
 8005daa:	6899      	ldr	r1, [r3, #8]
 8005dac:	0092      	lsls	r2, r2, #2
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	6899      	ldr	r1, [r3, #8]
 8005db6:	0192      	lsls	r2, r2, #6
 8005db8:	e7a2      	b.n	8005d00 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dba:	f7fc ff7f 	bl	8002cbc <HAL_GetTick>
 8005dbe:	9b02      	ldr	r3, [sp, #8]
 8005dc0:	1ac0      	subs	r0, r0, r3
 8005dc2:	42b0      	cmp	r0, r6
 8005dc4:	d9e6      	bls.n	8005d94 <HAL_RTC_SetAlarm_IT+0x164>
 8005dc6:	e7cb      	b.n	8005d60 <HAL_RTC_SetAlarm_IT+0x130>
 8005dc8:	fffffeff 	.word	0xfffffeff
 8005dcc:	fffffe7f 	.word	0xfffffe7f
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	fffffdff 	.word	0xfffffdff
 8005dd8:	fffffd7f 	.word	0xfffffd7f

08005ddc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005ddc:	0902      	lsrs	r2, r0, #4
{
 8005dde:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005de0:	200a      	movs	r0, #10
 8005de2:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005de4:	220f      	movs	r2, #15
 8005de6:	4013      	ands	r3, r2
 8005de8:	18c0      	adds	r0, r0, r3
 8005dea:	b2c0      	uxtb	r0, r0
}
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_RTC_GetTime>:
{
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005df4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005df6:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005df8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005dfa:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005dfc:	690b      	ldr	r3, [r1, #16]
 8005dfe:	045b      	lsls	r3, r3, #17
 8005e00:	0c5b      	lsrs	r3, r3, #17
 8005e02:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e04:	680b      	ldr	r3, [r1, #0]
 8005e06:	490e      	ldr	r1, [pc, #56]	; (8005e40 <HAL_RTC_GetTime+0x50>)
 8005e08:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005e0a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005e0c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005e0e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005e10:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005e12:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005e14:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005e16:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005e18:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005e1a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005e1c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005e1e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e24:	f7ff ffda 	bl	8005ddc <RTC_Bcd2ToByte>
 8005e28:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e2a:	0030      	movs	r0, r6
 8005e2c:	f7ff ffd6 	bl	8005ddc <RTC_Bcd2ToByte>
 8005e30:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e32:	0028      	movs	r0, r5
 8005e34:	f7ff ffd2 	bl	8005ddc <RTC_Bcd2ToByte>
 8005e38:	70a0      	strb	r0, [r4, #2]
}
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	007f7f7f 	.word	0x007f7f7f

08005e44 <HAL_RTC_GetDate>:
{
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e48:	6803      	ldr	r3, [r0, #0]
 8005e4a:	490e      	ldr	r1, [pc, #56]	; (8005e84 <HAL_RTC_GetDate+0x40>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005e50:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005e52:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e54:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e56:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005e58:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e5a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005e5c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005e5e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e60:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e62:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e68:	f7ff ffb8 	bl	8005ddc <RTC_Bcd2ToByte>
 8005e6c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e6e:	0028      	movs	r0, r5
 8005e70:	f7ff ffb4 	bl	8005ddc <RTC_Bcd2ToByte>
 8005e74:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e76:	0030      	movs	r0, r6
 8005e78:	f7ff ffb0 	bl	8005ddc <RTC_Bcd2ToByte>
 8005e7c:	70a0      	strb	r0, [r4, #2]
}
 8005e7e:	2000      	movs	r0, #0
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	00ffff3f 	.word	0x00ffff3f

08005e88 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005e88:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8005e8a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005e8c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8005e8e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005e90:	600a      	str	r2, [r1, #0]
}
 8005e92:	4770      	bx	lr

08005e94 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005e94:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8005e96:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005e98:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8005e9a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005e9c:	6808      	ldr	r0, [r1, #0]
}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ea0:	2202      	movs	r2, #2
{
 8005ea2:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8005ea4:	1c41      	adds	r1, r0, #1
 8005ea6:	7fcc      	ldrb	r4, [r1, #31]
{
 8005ea8:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8005eaa:	0010      	movs	r0, r2
 8005eac:	2c01      	cmp	r4, #1
 8005eae:	d010      	beq.n	8005ed2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb0:	1898      	adds	r0, r3, r2
 8005eb2:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	32c8      	adds	r2, #200	; 0xc8
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eba:	3a77      	subs	r2, #119	; 0x77
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005ebe:	689c      	ldr	r4, [r3, #8]
 8005ec0:	3a33      	subs	r2, #51	; 0x33
 8005ec2:	4322      	orrs	r2, r4
 8005ec4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ec6:	22ff      	movs	r2, #255	; 0xff
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ece:	2000      	movs	r0, #0
 8005ed0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <HAL_RTCEx_AlarmBEventCallback>:
 8005ed4:	4770      	bx	lr
	...

08005ed8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eda:	001d      	movs	r5, r3
 8005edc:	0017      	movs	r7, r2
 8005ede:	b085      	sub	sp, #20
 8005ee0:	000e      	movs	r6, r1
 8005ee2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ee4:	f7fc feea 	bl	8002cbc <HAL_GetTick>
 8005ee8:	19ed      	adds	r5, r5, r7
 8005eea:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005eec:	f7fc fee6 	bl	8002cbc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ef0:	4b25      	ldr	r3, [pc, #148]	; (8005f88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8005ef2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	015b      	lsls	r3, r3, #5
 8005ef8:	0d1b      	lsrs	r3, r3, #20
 8005efa:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005efc:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8005efe:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f00:	6893      	ldr	r3, [r2, #8]
 8005f02:	4033      	ands	r3, r6
 8005f04:	429e      	cmp	r6, r3
 8005f06:	d001      	beq.n	8005f0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e032      	b.n	8005f72 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8005f0c:	1c7b      	adds	r3, r7, #1
 8005f0e:	d0f7      	beq.n	8005f00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f10:	f7fc fed4 	bl	8002cbc <HAL_GetTick>
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	1ac0      	subs	r0, r0, r3
 8005f18:	42a8      	cmp	r0, r5
 8005f1a:	d32c      	bcc.n	8005f76 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f1c:	21e0      	movs	r1, #224	; 0xe0
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	438a      	bics	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f26:	2282      	movs	r2, #130	; 0x82
 8005f28:	6861      	ldr	r1, [r4, #4]
 8005f2a:	0052      	lsls	r2, r2, #1
 8005f2c:	4291      	cmp	r1, r2
 8005f2e:	d10c      	bne.n	8005f4a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	68a2      	ldr	r2, [r4, #8]
 8005f34:	0209      	lsls	r1, r1, #8
 8005f36:	428a      	cmp	r2, r1
 8005f38:	d003      	beq.n	8005f42 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f3a:	2180      	movs	r1, #128	; 0x80
 8005f3c:	00c9      	lsls	r1, r1, #3
 8005f3e:	428a      	cmp	r2, r1
 8005f40:	d103      	bne.n	8005f4a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8005f42:	2140      	movs	r1, #64	; 0x40
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	438a      	bics	r2, r1
 8005f48:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005f4e:	0189      	lsls	r1, r1, #6
 8005f50:	428a      	cmp	r2, r1
 8005f52:	d106      	bne.n	8005f62 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	480d      	ldr	r0, [pc, #52]	; (8005f8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8005f58:	4001      	ands	r1, r0
 8005f5a:	6019      	str	r1, [r3, #0]
 8005f5c:	6819      	ldr	r1, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005f62:	0023      	movs	r3, r4
 8005f64:	2201      	movs	r2, #1
 8005f66:	3351      	adds	r3, #81	; 0x51
 8005f68:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8005f6a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005f6c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8005f6e:	3450      	adds	r4, #80	; 0x50
 8005f70:	7023      	strb	r3, [r4, #0]
}
 8005f72:	b005      	add	sp, #20
 8005f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8005f76:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	4193      	sbcs	r3, r2
 8005f7c:	425b      	negs	r3, r3
 8005f7e:	401d      	ands	r5, r3
      count--;
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	e7ba      	b.n	8005efc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	2000008c 	.word	0x2000008c
 8005f8c:	ffffdfff 	.word	0xffffdfff

08005f90 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f90:	4b16      	ldr	r3, [pc, #88]	; (8005fec <SPI_EndRxTxTransaction+0x5c>)
{
 8005f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f94:	0004      	movs	r4, r0
 8005f96:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	4915      	ldr	r1, [pc, #84]	; (8005ff0 <SPI_EndRxTxTransaction+0x60>)
{
 8005f9c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f9e:	f7fa f8d9 	bl	8000154 <__udivsi3>
 8005fa2:	23fa      	movs	r3, #250	; 0xfa
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4343      	muls	r3, r0
 8005fa8:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005faa:	2382      	movs	r3, #130	; 0x82
 8005fac:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fae:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d10d      	bne.n	8005fd2 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb6:	0033      	movs	r3, r6
 8005fb8:	002a      	movs	r2, r5
 8005fba:	2180      	movs	r1, #128	; 0x80
 8005fbc:	0020      	movs	r0, r4
 8005fbe:	f7ff ff8b 	bl	8005ed8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d00f      	beq.n	8005fe6 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc6:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8005fc8:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8005fd0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <SPI_EndRxTxTransaction+0x56>
      count--;
 8005fd8:	9b01      	ldr	r3, [sp, #4]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	4213      	tst	r3, r2
 8005fe4:	d1f5      	bne.n	8005fd2 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	e7f2      	b.n	8005fd0 <SPI_EndRxTxTransaction+0x40>
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	2000008c 	.word	0x2000008c
 8005ff0:	016e3600 	.word	0x016e3600

08005ff4 <HAL_SPI_MspInit>:
}
 8005ff4:	4770      	bx	lr
	...

08005ff8 <HAL_SPI_Init>:
{
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005ffc:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005ffe:	2c00      	cmp	r4, #0
 8006000:	d054      	beq.n	80060ac <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	d152      	bne.n	80060ae <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006008:	2282      	movs	r2, #130	; 0x82
 800600a:	6861      	ldr	r1, [r4, #4]
 800600c:	0052      	lsls	r2, r2, #1
 800600e:	4291      	cmp	r1, r2
 8006010:	d000      	beq.n	8006014 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006012:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006014:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006016:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006018:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800601a:	3551      	adds	r5, #81	; 0x51
 800601c:	782b      	ldrb	r3, [r5, #0]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006024:	0023      	movs	r3, r4
 8006026:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8006028:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800602a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800602c:	f7ff ffe2 	bl	8005ff4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006030:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8006032:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006034:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006036:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006038:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800603a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800603c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800603e:	4393      	bics	r3, r2
 8006040:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006042:	2382      	movs	r3, #130	; 0x82
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4033      	ands	r3, r6
 8006048:	2684      	movs	r6, #132	; 0x84
 800604a:	0236      	lsls	r6, r6, #8
 800604c:	403e      	ands	r6, r7
 800604e:	4333      	orrs	r3, r6
 8006050:	2680      	movs	r6, #128	; 0x80
 8006052:	68e7      	ldr	r7, [r4, #12]
 8006054:	0136      	lsls	r6, r6, #4
 8006056:	403e      	ands	r6, r7
 8006058:	4333      	orrs	r3, r6
 800605a:	6926      	ldr	r6, [r4, #16]
 800605c:	69a2      	ldr	r2, [r4, #24]
 800605e:	4030      	ands	r0, r6
 8006060:	2601      	movs	r6, #1
 8006062:	4303      	orrs	r3, r0
 8006064:	6960      	ldr	r0, [r4, #20]
 8006066:	69e7      	ldr	r7, [r4, #28]
 8006068:	4030      	ands	r0, r6
 800606a:	4303      	orrs	r3, r0
 800606c:	2080      	movs	r0, #128	; 0x80
 800606e:	0080      	lsls	r0, r0, #2
 8006070:	4010      	ands	r0, r2
 8006072:	4303      	orrs	r3, r0
 8006074:	2038      	movs	r0, #56	; 0x38
 8006076:	4038      	ands	r0, r7
 8006078:	4303      	orrs	r3, r0
 800607a:	2080      	movs	r0, #128	; 0x80
 800607c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800607e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006080:	4038      	ands	r0, r7
 8006082:	4303      	orrs	r3, r0
 8006084:	2080      	movs	r0, #128	; 0x80
 8006086:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006088:	0180      	lsls	r0, r0, #6
 800608a:	4038      	ands	r0, r7
 800608c:	4303      	orrs	r3, r0
 800608e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006090:	2304      	movs	r3, #4
 8006092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006094:	401a      	ands	r2, r3
 8006096:	330c      	adds	r3, #12
 8006098:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800609a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800609c:	431a      	orrs	r2, r3
 800609e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060a0:	69cb      	ldr	r3, [r1, #28]
 80060a2:	4a05      	ldr	r2, [pc, #20]	; (80060b8 <HAL_SPI_Init+0xc0>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060aa:	702e      	strb	r6, [r5, #0]
}
 80060ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ae:	2300      	movs	r3, #0
 80060b0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	e7ae      	b.n	8006014 <HAL_SPI_Init+0x1c>
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	fffff7ff 	.word	0xfffff7ff

080060bc <HAL_SPI_TransmitReceive>:
{
 80060bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060be:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80060c0:	0003      	movs	r3, r0
 80060c2:	3350      	adds	r3, #80	; 0x50
{
 80060c4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80060c6:	781a      	ldrb	r2, [r3, #0]
{
 80060c8:	0004      	movs	r4, r0
 80060ca:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80060cc:	2002      	movs	r0, #2
{
 80060ce:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80060d0:	2a01      	cmp	r2, #1
 80060d2:	d100      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x1a>
 80060d4:	e092      	b.n	80061fc <HAL_SPI_TransmitReceive+0x140>
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80060da:	f7fc fdef 	bl	8002cbc <HAL_GetTick>
  tmp_state           = hspi->State;
 80060de:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80060e0:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80060e2:	3351      	adds	r3, #81	; 0x51
 80060e4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80060e6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80060e8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d00a      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x48>
 80060ee:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80060f0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4299      	cmp	r1, r3
 80060f6:	d000      	beq.n	80060fa <HAL_SPI_TransmitReceive+0x3e>
 80060f8:	e079      	b.n	80061ee <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d176      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x132>
 8006100:	2a04      	cmp	r2, #4
 8006102:	d174      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8006104:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006106:	2d00      	cmp	r5, #0
 8006108:	d071      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x132>
 800610a:	2f00      	cmp	r7, #0
 800610c:	d06f      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x132>
 800610e:	2e00      	cmp	r6, #0
 8006110:	d06d      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006112:	0023      	movs	r3, r4
 8006114:	3351      	adds	r3, #81	; 0x51
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	2a04      	cmp	r2, #4
 800611a:	d001      	beq.n	8006120 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800611c:	2205      	movs	r2, #5
 800611e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006120:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006122:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006124:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006126:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006128:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800612c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800612e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006130:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006132:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006134:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006136:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006138:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613a:	4210      	tst	r0, r2
 800613c:	d102      	bne.n	8006144 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4302      	orrs	r2, r0
 8006142:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	68e0      	ldr	r0, [r4, #12]
 8006148:	0112      	lsls	r2, r2, #4
 800614a:	4290      	cmp	r0, r2
 800614c:	d158      	bne.n	8006200 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614e:	2900      	cmp	r1, #0
 8006150:	d001      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x9a>
 8006152:	2e01      	cmp	r6, #1
 8006154:	d107      	bne.n	8006166 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006156:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006158:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800615c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800615e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006160:	3b01      	subs	r3, #1
 8006162:	b29b      	uxth	r3, r3
 8006164:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006166:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006168:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800616a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10e      	bne.n	8006190 <HAL_SPI_TransmitReceive+0xd4>
 8006172:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006178:	0020      	movs	r0, r4
 800617a:	9a01      	ldr	r2, [sp, #4]
 800617c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800617e:	f7ff ff07 	bl	8005f90 <SPI_EndRxTxTransaction>
 8006182:	2800      	cmp	r0, #0
 8006184:	d100      	bne.n	8006188 <HAL_SPI_TransmitReceive+0xcc>
 8006186:	e088      	b.n	800629a <HAL_SPI_TransmitReceive+0x1de>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006188:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800618a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800618c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 800618e:	e02e      	b.n	80061ee <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006190:	6821      	ldr	r1, [r4, #0]
 8006192:	688b      	ldr	r3, [r1, #8]
 8006194:	423b      	tst	r3, r7
 8006196:	d00e      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0xfa>
 8006198:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0xfa>
 800619e:	2d01      	cmp	r5, #1
 80061a0:	d109      	bne.n	80061b6 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 80061a2:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80061a6:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061aa:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80061ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b6:	688b      	ldr	r3, [r1, #8]
 80061b8:	001a      	movs	r2, r3
 80061ba:	4032      	ands	r2, r6
 80061bc:	4233      	tst	r3, r6
 80061be:	d00c      	beq.n	80061da <HAL_SPI_TransmitReceive+0x11e>
 80061c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80061c6:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c8:	68c9      	ldr	r1, [r1, #12]
 80061ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061cc:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061ce:	3302      	adds	r3, #2
 80061d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80061d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061da:	f7fc fd6f 	bl	8002cbc <HAL_GetTick>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	1ac0      	subs	r0, r0, r3
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	4298      	cmp	r0, r3
 80061e6:	d3c1      	bcc.n	800616c <HAL_SPI_TransmitReceive+0xb0>
 80061e8:	3301      	adds	r3, #1
 80061ea:	d0bf      	beq.n	800616c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 80061ec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80061ee:	0023      	movs	r3, r4
 80061f0:	2201      	movs	r2, #1
 80061f2:	3351      	adds	r3, #81	; 0x51
 80061f4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80061f6:	2300      	movs	r3, #0
 80061f8:	3450      	adds	r4, #80	; 0x50
 80061fa:	7023      	strb	r3, [r4, #0]
}
 80061fc:	b005      	add	sp, #20
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006200:	2900      	cmp	r1, #0
 8006202:	d001      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x14c>
 8006204:	2e01      	cmp	r6, #1
 8006206:	d108      	bne.n	800621a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006208:	782a      	ldrb	r2, [r5, #0]
 800620a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800620c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800620e:	3301      	adds	r3, #1
 8006210:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006212:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006214:	3b01      	subs	r3, #1
 8006216:	b29b      	uxth	r3, r3
 8006218:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800621a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800621c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800621e:	002e      	movs	r6, r5
 8006220:	e030      	b.n	8006284 <HAL_SPI_TransmitReceive+0x1c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	423a      	tst	r2, r7
 8006228:	d00f      	beq.n	800624a <HAL_SPI_TransmitReceive+0x18e>
 800622a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800622c:	2a00      	cmp	r2, #0
 800622e:	d00c      	beq.n	800624a <HAL_SPI_TransmitReceive+0x18e>
 8006230:	2d01      	cmp	r5, #1
 8006232:	d10a      	bne.n	800624a <HAL_SPI_TransmitReceive+0x18e>
        txallowed = 0U;
 8006234:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006236:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800623c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800623e:	3301      	adds	r3, #1
 8006240:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006242:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006244:	3b01      	subs	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	6899      	ldr	r1, [r3, #8]
 800624e:	000a      	movs	r2, r1
 8006250:	4032      	ands	r2, r6
 8006252:	4231      	tst	r1, r6
 8006254:	d00d      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x1b6>
 8006256:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006258:	2900      	cmp	r1, #0
 800625a:	d00a      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x1b6>
        txallowed = 1U;
 800625c:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006262:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006266:	3301      	adds	r3, #1
 8006268:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800626a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800626c:	3b01      	subs	r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006272:	f7fc fd23 	bl	8002cbc <HAL_GetTick>
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	1ac0      	subs	r0, r0, r3
 800627a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627c:	4298      	cmp	r0, r3
 800627e:	d308      	bcc.n	8006292 <HAL_SPI_TransmitReceive+0x1d6>
 8006280:	3301      	adds	r3, #1
 8006282:	d1b3      	bne.n	80061ec <HAL_SPI_TransmitReceive+0x130>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006284:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1cb      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x166>
 800628a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1c8      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x166>
 8006290:	e772      	b.n	8006178 <HAL_SPI_TransmitReceive+0xbc>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f5      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x1c8>
 8006298:	e7a8      	b.n	80061ec <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800629a:	68a3      	ldr	r3, [r4, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1a6      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	9003      	str	r0, [sp, #12]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	9203      	str	r2, [sp, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	e79e      	b.n	80061ee <HAL_SPI_TransmitReceive+0x132>

080062b0 <HAL_SPI_GetState>:
  return hspi->State;
 80062b0:	3051      	adds	r0, #81	; 0x51
 80062b2:	7800      	ldrb	r0, [r0, #0]
 80062b4:	b2c0      	uxtb	r0, r0
}
 80062b6:	4770      	bx	lr

080062b8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	6803      	ldr	r3, [r0, #0]
 80062ba:	490b      	ldr	r1, [pc, #44]	; (80062e8 <UART_EndRxTransfer+0x30>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	400a      	ands	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	3123      	adds	r1, #35	; 0x23
 80062c6:	31ff      	adds	r1, #255	; 0xff
 80062c8:	438a      	bics	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062cc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80062ce:	428a      	cmp	r2, r1
 80062d0:	d103      	bne.n	80062da <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	310f      	adds	r1, #15
 80062d6:	438a      	bics	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062da:	2320      	movs	r3, #32
 80062dc:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062de:	2300      	movs	r3, #0
 80062e0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062e2:	6643      	str	r3, [r0, #100]	; 0x64
}
 80062e4:	4770      	bx	lr
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	fffffedf 	.word	0xfffffedf

080062ec <HAL_UART_Transmit_DMA>:
{
 80062ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ee:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80062f0:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80062f2:	0004      	movs	r4, r0
    return HAL_BUSY;
 80062f4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80062f6:	2a20      	cmp	r2, #32
 80062f8:	d13a      	bne.n	8006370 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 80062fa:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d037      	beq.n	8006370 <HAL_UART_Transmit_DMA+0x84>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d035      	beq.n	8006370 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	2280      	movs	r2, #128	; 0x80
 8006306:	68a0      	ldr	r0, [r4, #8]
 8006308:	0152      	lsls	r2, r2, #5
 800630a:	4290      	cmp	r0, r2
 800630c:	d106      	bne.n	800631c <HAL_UART_Transmit_DMA+0x30>
 800630e:	6922      	ldr	r2, [r4, #16]
 8006310:	2a00      	cmp	r2, #0
 8006312:	d103      	bne.n	800631c <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006314:	3201      	adds	r2, #1
      return HAL_ERROR;
 8006316:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8006318:	4211      	tst	r1, r2
 800631a:	d129      	bne.n	8006370 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 800631c:	0025      	movs	r5, r4
 800631e:	3574      	adds	r5, #116	; 0x74
 8006320:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8006322:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006324:	2a01      	cmp	r2, #1
 8006326:	d023      	beq.n	8006370 <HAL_UART_Transmit_DMA+0x84>
 8006328:	2201      	movs	r2, #1
 800632a:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 800632c:	0022      	movs	r2, r4
 800632e:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8006330:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006332:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8006334:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006336:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006338:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800633a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633c:	1d27      	adds	r7, r4, #4
 800633e:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006340:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8006342:	42b0      	cmp	r0, r6
 8006344:	d015      	beq.n	8006372 <HAL_UART_Transmit_DMA+0x86>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006346:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006348:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800634a:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800634c:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <HAL_UART_Transmit_DMA+0x9c>)
 800634e:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006350:	4a0e      	ldr	r2, [pc, #56]	; (800638c <HAL_UART_Transmit_DMA+0xa0>)
 8006352:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006354:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <HAL_UART_Transmit_DMA+0xa4>)
 8006356:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006358:	9a01      	ldr	r2, [sp, #4]
 800635a:	3228      	adds	r2, #40	; 0x28
 800635c:	f7fe f9a6 	bl	80046ac <HAL_DMA_Start_IT>
 8006360:	42b0      	cmp	r0, r6
 8006362:	d006      	beq.n	8006372 <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006364:	2310      	movs	r3, #16
        return HAL_ERROR;
 8006366:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006368:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800636a:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800636c:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800636e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006372:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006374:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006376:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8006378:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800637a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800637c:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800637e:	6899      	ldr	r1, [r3, #8]
 8006380:	1892      	adds	r2, r2, r2
 8006382:	430a      	orrs	r2, r1
 8006384:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006386:	e7f3      	b.n	8006370 <HAL_UART_Transmit_DMA+0x84>
 8006388:	08006395 	.word	0x08006395
 800638c:	080063cb 	.word	0x080063cb
 8006390:	080063d7 	.word	0x080063d7

08006394 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006394:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006396:	681b      	ldr	r3, [r3, #0]
{
 8006398:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	2320      	movs	r3, #32
 800639e:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063a2:	4019      	ands	r1, r3
 80063a4:	421a      	tst	r2, r3
 80063a6:	d10c      	bne.n	80063c2 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 80063a8:	0003      	movs	r3, r0
 80063aa:	3352      	adds	r3, #82	; 0x52
 80063ac:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063ae:	2180      	movs	r1, #128	; 0x80
 80063b0:	6803      	ldr	r3, [r0, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	438a      	bics	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063b8:	2240      	movs	r2, #64	; 0x40
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063c0:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80063c2:	f7fd fb95 	bl	8003af0 <HAL_UART_TxCpltCallback>
}
 80063c6:	e7fb      	b.n	80063c0 <UART_DMATransmitCplt+0x2c>

080063c8 <HAL_UART_TxHalfCpltCallback>:
 80063c8:	4770      	bx	lr

080063ca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063ca:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80063ce:	f7ff fffb 	bl	80063c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d2:	bd10      	pop	{r4, pc}

080063d4 <HAL_UART_ErrorCallback>:
 80063d4:	4770      	bx	lr

080063d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063d6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063d8:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80063da:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80063dc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80063de:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80063e0:	6898      	ldr	r0, [r3, #8]
 80063e2:	0600      	lsls	r0, r0, #24
 80063e4:	d50b      	bpl.n	80063fe <UART_DMAError+0x28>
 80063e6:	2a21      	cmp	r2, #33	; 0x21
 80063e8:	d109      	bne.n	80063fe <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80063ea:	0022      	movs	r2, r4
 80063ec:	2000      	movs	r0, #0
 80063ee:	3252      	adds	r2, #82	; 0x52
 80063f0:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	30c0      	adds	r0, #192	; 0xc0
 80063f6:	4382      	bics	r2, r0
 80063f8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063fa:	2220      	movs	r2, #32
 80063fc:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	065b      	lsls	r3, r3, #25
 8006402:	d508      	bpl.n	8006416 <UART_DMAError+0x40>
 8006404:	2922      	cmp	r1, #34	; 0x22
 8006406:	d106      	bne.n	8006416 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006408:	0023      	movs	r3, r4
 800640a:	2200      	movs	r2, #0
 800640c:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 800640e:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006410:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006412:	f7ff ff51 	bl	80062b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006416:	2310      	movs	r3, #16
 8006418:	1d22      	adds	r2, r4, #4
 800641a:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800641c:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800641e:	430b      	orrs	r3, r1
 8006420:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006422:	f7ff ffd7 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006426:	bd10      	pop	{r4, pc}

08006428 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006428:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	0002      	movs	r2, r0
{
 800642e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8006430:	325a      	adds	r2, #90	; 0x5a
 8006432:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006434:	3a08      	subs	r2, #8
 8006436:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006438:	f7ff ffcc 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800643c:	bd10      	pop	{r4, pc}
	...

08006440 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006440:	6803      	ldr	r3, [r0, #0]
{
 8006442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006444:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006446:	4a85      	ldr	r2, [pc, #532]	; (800665c <HAL_UART_IRQHandler+0x21c>)
{
 8006448:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644a:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800644c:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800644e:	4211      	tst	r1, r2
 8006450:	d10b      	bne.n	800646a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006452:	2220      	movs	r2, #32
 8006454:	4211      	tst	r1, r2
 8006456:	d100      	bne.n	800645a <HAL_UART_IRQHandler+0x1a>
 8006458:	e076      	b.n	8006548 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800645a:	4210      	tst	r0, r2
 800645c:	d100      	bne.n	8006460 <HAL_UART_IRQHandler+0x20>
 800645e:	e073      	b.n	8006548 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8006460:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8006462:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006464:	2b00      	cmp	r3, #0
 8006466:	d165      	bne.n	8006534 <HAL_UART_IRQHandler+0xf4>
 8006468:	e065      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800646a:	2201      	movs	r2, #1
 800646c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800646e:	4d7c      	ldr	r5, [pc, #496]	; (8006660 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006470:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006472:	4005      	ands	r5, r0
 8006474:	433d      	orrs	r5, r7
 8006476:	d067      	beq.n	8006548 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006478:	1d25      	adds	r5, r4, #4
 800647a:	4211      	tst	r1, r2
 800647c:	d005      	beq.n	800648a <HAL_UART_IRQHandler+0x4a>
 800647e:	05c6      	lsls	r6, r0, #23
 8006480:	d503      	bpl.n	800648a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006482:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006484:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006486:	4332      	orrs	r2, r6
 8006488:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800648a:	2202      	movs	r2, #2
 800648c:	4211      	tst	r1, r2
 800648e:	d006      	beq.n	800649e <HAL_UART_IRQHandler+0x5e>
 8006490:	2f00      	cmp	r7, #0
 8006492:	d004      	beq.n	800649e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006494:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006496:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006498:	1892      	adds	r2, r2, r2
 800649a:	4332      	orrs	r2, r6
 800649c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800649e:	2204      	movs	r2, #4
 80064a0:	4211      	tst	r1, r2
 80064a2:	d006      	beq.n	80064b2 <HAL_UART_IRQHandler+0x72>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	d004      	beq.n	80064b2 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064a8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064aa:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80064ac:	3a02      	subs	r2, #2
 80064ae:	4332      	orrs	r2, r6
 80064b0:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064b2:	2208      	movs	r2, #8
 80064b4:	4211      	tst	r1, r2
 80064b6:	d007      	beq.n	80064c8 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064b8:	2620      	movs	r6, #32
 80064ba:	4006      	ands	r6, r0
 80064bc:	433e      	orrs	r6, r7
 80064be:	d003      	beq.n	80064c8 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064c2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80064c4:	4332      	orrs	r2, r6
 80064c6:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064c8:	2280      	movs	r2, #128	; 0x80
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	4211      	tst	r1, r2
 80064ce:	d006      	beq.n	80064de <HAL_UART_IRQHandler+0x9e>
 80064d0:	0146      	lsls	r6, r0, #5
 80064d2:	d504      	bpl.n	80064de <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064d6:	2320      	movs	r3, #32
 80064d8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80064da:	4313      	orrs	r3, r2
 80064dc:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064de:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d028      	beq.n	8006536 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064e4:	2320      	movs	r3, #32
 80064e6:	4219      	tst	r1, r3
 80064e8:	d006      	beq.n	80064f8 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ea:	4218      	tst	r0, r3
 80064ec:	d004      	beq.n	80064f8 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80064ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 80064f4:	0020      	movs	r0, r4
 80064f6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f8:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80064fa:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064fc:	2740      	movs	r7, #64	; 0x40
 80064fe:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006500:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006502:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006504:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006506:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006508:	431e      	orrs	r6, r3
 800650a:	d019      	beq.n	8006540 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 800650c:	f7ff fed4 	bl	80062b8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	423a      	tst	r2, r7
 8006516:	d00f      	beq.n	8006538 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006518:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800651a:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800651c:	43ba      	bics	r2, r7
 800651e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006520:	2800      	cmp	r0, #0
 8006522:	d009      	beq.n	8006538 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006524:	4b4f      	ldr	r3, [pc, #316]	; (8006664 <HAL_UART_IRQHandler+0x224>)
 8006526:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006528:	f7fe f920 	bl	800476c <HAL_DMA_Abort_IT>
 800652c:	2800      	cmp	r0, #0
 800652e:	d002      	beq.n	8006536 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006530:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006532:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006534:	4798      	blx	r3
}
 8006536:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006538:	0020      	movs	r0, r4
 800653a:	f7ff ff4b 	bl	80063d4 <HAL_UART_ErrorCallback>
 800653e:	e7fa      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8006540:	f7ff ff48 	bl	80063d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	67ee      	str	r6, [r5, #124]	; 0x7c
 8006546:	e7f6      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800654a:	2d01      	cmp	r5, #1
 800654c:	d161      	bne.n	8006612 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800654e:	2210      	movs	r2, #16
 8006550:	4211      	tst	r1, r2
 8006552:	d05e      	beq.n	8006612 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006554:	4210      	tst	r0, r2
 8006556:	d05c      	beq.n	8006612 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006558:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655a:	6899      	ldr	r1, [r3, #8]
 800655c:	2640      	movs	r6, #64	; 0x40
 800655e:	000f      	movs	r7, r1
 8006560:	4037      	ands	r7, r6
 8006562:	4231      	tst	r1, r6
 8006564:	d038      	beq.n	80065d8 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006566:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006568:	680f      	ldr	r7, [r1, #0]
 800656a:	9100      	str	r1, [sp, #0]
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8006570:	2900      	cmp	r1, #0
 8006572:	d0e0      	beq.n	8006536 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006574:	2058      	movs	r0, #88	; 0x58
 8006576:	4684      	mov	ip, r0
 8006578:	44a4      	add	ip, r4
 800657a:	4660      	mov	r0, ip
 800657c:	8800      	ldrh	r0, [r0, #0]
 800657e:	4288      	cmp	r0, r1
 8006580:	d9d9      	bls.n	8006536 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8006582:	205a      	movs	r0, #90	; 0x5a
 8006584:	4684      	mov	ip, r0
 8006586:	44a4      	add	ip, r4
 8006588:	4660      	mov	r0, ip
 800658a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800658c:	683f      	ldr	r7, [r7, #0]
 800658e:	2120      	movs	r1, #32
 8006590:	0038      	movs	r0, r7
 8006592:	4008      	ands	r0, r1
 8006594:	9001      	str	r0, [sp, #4]
 8006596:	420f      	tst	r7, r1
 8006598:	d112      	bne.n	80065c0 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800659a:	681f      	ldr	r7, [r3, #0]
 800659c:	4832      	ldr	r0, [pc, #200]	; (8006668 <HAL_UART_IRQHandler+0x228>)
 800659e:	4007      	ands	r7, r0
 80065a0:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065a4:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	43af      	bics	r7, r5
 80065a8:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	689d      	ldr	r5, [r3, #8]
 80065ac:	43b5      	bics	r5, r6
 80065ae:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80065b0:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	9901      	ldr	r1, [sp, #4]
 80065b4:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b6:	6819      	ldr	r1, [r3, #0]
 80065b8:	4391      	bics	r1, r2
 80065ba:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065bc:	f7fe f8b6 	bl	800472c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065c0:	0023      	movs	r3, r4
 80065c2:	0022      	movs	r2, r4
 80065c4:	335a      	adds	r3, #90	; 0x5a
 80065c6:	3258      	adds	r2, #88	; 0x58
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	8811      	ldrh	r1, [r2, #0]
 80065cc:	1ac9      	subs	r1, r1, r3
 80065ce:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065d0:	0020      	movs	r0, r4
 80065d2:	f7fd fab1 	bl	8003b38 <HAL_UARTEx_RxEventCallback>
 80065d6:	e7ae      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065d8:	0026      	movs	r6, r4
 80065da:	365a      	adds	r6, #90	; 0x5a
 80065dc:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80065de:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e0:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80065e2:	2900      	cmp	r1, #0
 80065e4:	d0a7      	beq.n	8006536 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e6:	0021      	movs	r1, r4
 80065e8:	3158      	adds	r1, #88	; 0x58
 80065ea:	8809      	ldrh	r1, [r1, #0]
 80065ec:	1a09      	subs	r1, r1, r0
 80065ee:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80065f0:	2900      	cmp	r1, #0
 80065f2:	d0a0      	beq.n	8006536 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	4e1d      	ldr	r6, [pc, #116]	; (800666c <HAL_UART_IRQHandler+0x22c>)
 80065f8:	4030      	ands	r0, r6
 80065fa:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fc:	6898      	ldr	r0, [r3, #8]
 80065fe:	43a8      	bics	r0, r5
 8006600:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8006602:	2020      	movs	r0, #32
 8006604:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006608:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 800660a:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	4390      	bics	r0, r2
 800660e:	6018      	str	r0, [r3, #0]
 8006610:	e7de      	b.n	80065d0 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	0352      	lsls	r2, r2, #13
 8006616:	4211      	tst	r1, r2
 8006618:	d006      	beq.n	8006628 <HAL_UART_IRQHandler+0x1e8>
 800661a:	0275      	lsls	r5, r6, #9
 800661c:	d504      	bpl.n	8006628 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 800661e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006620:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006622:	f000 fb45 	bl	8006cb0 <HAL_UARTEx_WakeupCallback>
    return;
 8006626:	e786      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006628:	2280      	movs	r2, #128	; 0x80
 800662a:	4211      	tst	r1, r2
 800662c:	d003      	beq.n	8006636 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800662e:	4210      	tst	r0, r2
 8006630:	d001      	beq.n	8006636 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8006632:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006634:	e715      	b.n	8006462 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006636:	2540      	movs	r5, #64	; 0x40
 8006638:	4229      	tst	r1, r5
 800663a:	d100      	bne.n	800663e <HAL_UART_IRQHandler+0x1fe>
 800663c:	e77b      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
 800663e:	4228      	tst	r0, r5
 8006640:	d100      	bne.n	8006644 <HAL_UART_IRQHandler+0x204>
 8006642:	e778      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006644:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006646:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006648:	43aa      	bics	r2, r5
 800664a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800664c:	2320      	movs	r3, #32
 800664e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8006654:	f7fd fa4c 	bl	8003af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006658:	e76d      	b.n	8006536 <HAL_UART_IRQHandler+0xf6>
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	0000080f 	.word	0x0000080f
 8006660:	04000120 	.word	0x04000120
 8006664:	08006429 	.word	0x08006429
 8006668:	fffffeff 	.word	0xfffffeff
 800666c:	fffffedf 	.word	0xfffffedf

08006670 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006670:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8006672:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006674:	6803      	ldr	r3, [r0, #0]
{
 8006676:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006678:	2a22      	cmp	r2, #34	; 0x22
 800667a:	d134      	bne.n	80066e6 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 800667c:	0002      	movs	r2, r0
 800667e:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006682:	8812      	ldrh	r2, [r2, #0]
 8006684:	4013      	ands	r3, r2
 8006686:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006688:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800668a:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800668c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800668e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8006690:	3301      	adds	r3, #1
 8006692:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006694:	8813      	ldrh	r3, [r2, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800669c:	8813      	ldrh	r3, [r2, #0]
 800669e:	b299      	uxth	r1, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11b      	bne.n	80066dc <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a4:	6803      	ldr	r3, [r0, #0]
 80066a6:	4812      	ldr	r0, [pc, #72]	; (80066f0 <UART_RxISR_8BIT+0x80>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4002      	ands	r2, r0
 80066ac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	3023      	adds	r0, #35	; 0x23
 80066b2:	30ff      	adds	r0, #255	; 0xff
 80066b4:	4382      	bics	r2, r0
 80066b6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066b8:	2220      	movs	r2, #32
 80066ba:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80066be:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	4282      	cmp	r2, r0
 80066c2:	d10c      	bne.n	80066de <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c4:	2110      	movs	r1, #16
 80066c6:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c8:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ca:	438a      	bics	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ce:	0023      	movs	r3, r4
 80066d0:	3358      	adds	r3, #88	; 0x58
 80066d2:	8819      	ldrh	r1, [r3, #0]
 80066d4:	f7fd fa30 	bl	8003b38 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	2300      	movs	r3, #0
 80066da:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066dc:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80066de:	0020      	movs	r0, r4
 80066e0:	f7fd fa0e 	bl	8003b00 <HAL_UART_RxCpltCallback>
 80066e4:	e7f8      	b.n	80066d8 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066e6:	2208      	movs	r2, #8
 80066e8:	6999      	ldr	r1, [r3, #24]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	619a      	str	r2, [r3, #24]
}
 80066ee:	e7f5      	b.n	80066dc <UART_RxISR_8BIT+0x6c>
 80066f0:	fffffedf 	.word	0xfffffedf

080066f4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80066f6:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f8:	6803      	ldr	r3, [r0, #0]
{
 80066fa:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066fc:	2a22      	cmp	r2, #34	; 0x22
 80066fe:	d131      	bne.n	8006764 <UART_RxISR_16BIT+0x70>
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006700:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8006702:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006704:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8006706:	8800      	ldrh	r0, [r0, #0]
 8006708:	4001      	ands	r1, r0
 800670a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800670c:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 800670e:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8006710:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8006712:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8006714:	880a      	ldrh	r2, [r1, #0]
 8006716:	3a01      	subs	r2, #1
 8006718:	b292      	uxth	r2, r2
 800671a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800671c:	880a      	ldrh	r2, [r1, #0]
 800671e:	b291      	uxth	r1, r2
 8006720:	2a00      	cmp	r2, #0
 8006722:	d11a      	bne.n	800675a <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4812      	ldr	r0, [pc, #72]	; (8006770 <UART_RxISR_16BIT+0x7c>)
 8006728:	4002      	ands	r2, r0
 800672a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	3023      	adds	r0, #35	; 0x23
 8006730:	30ff      	adds	r0, #255	; 0xff
 8006732:	4382      	bics	r2, r0
 8006734:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006736:	2220      	movs	r2, #32
 8006738:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673a:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 800673c:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673e:	4282      	cmp	r2, r0
 8006740:	d10c      	bne.n	800675c <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	2110      	movs	r1, #16
 8006744:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006746:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006748:	438a      	bics	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800674c:	0023      	movs	r3, r4
 800674e:	3358      	adds	r3, #88	; 0x58
 8006750:	8819      	ldrh	r1, [r3, #0]
 8006752:	f7fd f9f1 	bl	8003b38 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	2300      	movs	r3, #0
 8006758:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800675a:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800675c:	0020      	movs	r0, r4
 800675e:	f7fd f9cf 	bl	8003b00 <HAL_UART_RxCpltCallback>
 8006762:	e7f8      	b.n	8006756 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006764:	2208      	movs	r2, #8
 8006766:	6999      	ldr	r1, [r3, #24]
 8006768:	430a      	orrs	r2, r1
 800676a:	619a      	str	r2, [r3, #24]
}
 800676c:	e7f5      	b.n	800675a <UART_RxISR_16BIT+0x66>
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	fffffedf 	.word	0xfffffedf

08006774 <UART_SetConfig>:
{
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006778:	6925      	ldr	r5, [r4, #16]
 800677a:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800677c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800677e:	4329      	orrs	r1, r5
 8006780:	6965      	ldr	r5, [r4, #20]
 8006782:	69c3      	ldr	r3, [r0, #28]
 8006784:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006786:	6810      	ldr	r0, [r2, #0]
 8006788:	4d72      	ldr	r5, [pc, #456]	; (8006954 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800678a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800678c:	4028      	ands	r0, r5
 800678e:	4301      	orrs	r1, r0
 8006790:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006792:	6851      	ldr	r1, [r2, #4]
 8006794:	4870      	ldr	r0, [pc, #448]	; (8006958 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006796:	4d71      	ldr	r5, [pc, #452]	; (800695c <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006798:	4001      	ands	r1, r0
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	4301      	orrs	r1, r0
 800679e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067a0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a2:	42aa      	cmp	r2, r5
 80067a4:	d001      	beq.n	80067aa <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067aa:	6891      	ldr	r1, [r2, #8]
 80067ac:	4e6c      	ldr	r6, [pc, #432]	; (8006960 <UART_SetConfig+0x1ec>)
 80067ae:	4031      	ands	r1, r6
 80067b0:	4301      	orrs	r1, r0
 80067b2:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067b4:	496b      	ldr	r1, [pc, #428]	; (8006964 <UART_SetConfig+0x1f0>)
 80067b6:	428a      	cmp	r2, r1
 80067b8:	d10f      	bne.n	80067da <UART_SetConfig+0x66>
 80067ba:	2103      	movs	r1, #3
 80067bc:	4a6a      	ldr	r2, [pc, #424]	; (8006968 <UART_SetConfig+0x1f4>)
 80067be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067c0:	400a      	ands	r2, r1
 80067c2:	3a01      	subs	r2, #1
 80067c4:	4969      	ldr	r1, [pc, #420]	; (800696c <UART_SetConfig+0x1f8>)
 80067c6:	2a02      	cmp	r2, #2
 80067c8:	d90f      	bls.n	80067ea <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	0212      	lsls	r2, r2, #8
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d100      	bne.n	80067d4 <UART_SetConfig+0x60>
 80067d2:	e069      	b.n	80068a8 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d4:	f7fe ff38 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
        break;
 80067d8:	e09c      	b.n	8006914 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067da:	4965      	ldr	r1, [pc, #404]	; (8006970 <UART_SetConfig+0x1fc>)
 80067dc:	428a      	cmp	r2, r1
 80067de:	d113      	bne.n	8006808 <UART_SetConfig+0x94>
 80067e0:	210c      	movs	r1, #12
 80067e2:	4a61      	ldr	r2, [pc, #388]	; (8006968 <UART_SetConfig+0x1f4>)
 80067e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067e6:	400a      	ands	r2, r1
 80067e8:	4962      	ldr	r1, [pc, #392]	; (8006974 <UART_SetConfig+0x200>)
 80067ea:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ec:	2280      	movs	r2, #128	; 0x80
 80067ee:	0212      	lsls	r2, r2, #8
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d000      	beq.n	80067f6 <UART_SetConfig+0x82>
 80067f4:	e07f      	b.n	80068f6 <UART_SetConfig+0x182>
    switch (clocksource)
 80067f6:	2808      	cmp	r0, #8
 80067f8:	d818      	bhi.n	800682c <UART_SetConfig+0xb8>
 80067fa:	f7f9 fc8d 	bl	8000118 <__gnu_thumb1_case_uqi>
 80067fe:	5550      	.short	0x5550
 8006800:	17791758 	.word	0x17791758
 8006804:	1717      	.short	0x1717
 8006806:	63          	.byte	0x63
 8006807:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006808:	42aa      	cmp	r2, r5
 800680a:	d10f      	bne.n	800682c <UART_SetConfig+0xb8>
 800680c:	21c0      	movs	r1, #192	; 0xc0
 800680e:	2080      	movs	r0, #128	; 0x80
 8006810:	4a55      	ldr	r2, [pc, #340]	; (8006968 <UART_SetConfig+0x1f4>)
 8006812:	0109      	lsls	r1, r1, #4
 8006814:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006816:	0100      	lsls	r0, r0, #4
 8006818:	400b      	ands	r3, r1
 800681a:	4283      	cmp	r3, r0
 800681c:	d016      	beq.n	800684c <UART_SetConfig+0xd8>
 800681e:	d807      	bhi.n	8006830 <UART_SetConfig+0xbc>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_SetConfig+0xc6>
 8006824:	2280      	movs	r2, #128	; 0x80
 8006826:	00d2      	lsls	r2, r2, #3
 8006828:	4293      	cmp	r3, r2
 800682a:	d035      	beq.n	8006898 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800682c:	2001      	movs	r0, #1
 800682e:	e009      	b.n	8006844 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006830:	428b      	cmp	r3, r1
 8006832:	d1fb      	bne.n	800682c <UART_SetConfig+0xb8>
 8006834:	2080      	movs	r0, #128	; 0x80
 8006836:	0200      	lsls	r0, r0, #8
 8006838:	e012      	b.n	8006860 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 800683a:	f7fe fef5 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800683e:	2800      	cmp	r0, #0
 8006840:	d10e      	bne.n	8006860 <UART_SetConfig+0xec>
 8006842:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006844:	2300      	movs	r3, #0
 8006846:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8006848:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800684c:	2310      	movs	r3, #16
 800684e:	6810      	ldr	r0, [r2, #0]
 8006850:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006852:	4243      	negs	r3, r0
 8006854:	4158      	adcs	r0, r3
 8006856:	4b48      	ldr	r3, [pc, #288]	; (8006978 <UART_SetConfig+0x204>)
 8006858:	4240      	negs	r0, r0
 800685a:	4018      	ands	r0, r3
 800685c:	4b47      	ldr	r3, [pc, #284]	; (800697c <UART_SetConfig+0x208>)
 800685e:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006860:	2203      	movs	r2, #3
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	435a      	muls	r2, r3
 8006866:	4282      	cmp	r2, r0
 8006868:	d8e0      	bhi.n	800682c <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800686a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800686c:	4282      	cmp	r2, r0
 800686e:	d3dd      	bcc.n	800682c <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006870:	2700      	movs	r7, #0
 8006872:	0e02      	lsrs	r2, r0, #24
 8006874:	0201      	lsls	r1, r0, #8
 8006876:	085e      	lsrs	r6, r3, #1
 8006878:	1989      	adds	r1, r1, r6
 800687a:	417a      	adcs	r2, r7
 800687c:	0008      	movs	r0, r1
 800687e:	0011      	movs	r1, r2
 8006880:	001a      	movs	r2, r3
 8006882:	003b      	movs	r3, r7
 8006884:	f7f9 fe1a 	bl	80004bc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006888:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <UART_SetConfig+0x20c>)
 800688a:	18c2      	adds	r2, r0, r3
 800688c:	4b3d      	ldr	r3, [pc, #244]	; (8006984 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800688e:	429a      	cmp	r2, r3
 8006890:	d8cc      	bhi.n	800682c <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	60d8      	str	r0, [r3, #12]
 8006896:	e7d4      	b.n	8006842 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8006898:	f7fe fb6a 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
        break;
 800689c:	e7cf      	b.n	800683e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800689e:	f7fe fec3 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80068a2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80068a4:	d0cd      	beq.n	8006842 <UART_SetConfig+0xce>
 80068a6:	e00d      	b.n	80068c4 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fe fece 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 80068ac:	e7f9      	b.n	80068a2 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068ae:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068b0:	4a32      	ldr	r2, [pc, #200]	; (800697c <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	2310      	movs	r3, #16
 80068b6:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068b8:	4243      	negs	r3, r0
 80068ba:	4158      	adcs	r0, r3
 80068bc:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <UART_SetConfig+0x204>)
 80068be:	4240      	negs	r0, r0
 80068c0:	4003      	ands	r3, r0
 80068c2:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068c4:	0058      	lsls	r0, r3, #1
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	18c0      	adds	r0, r0, r3
 80068ce:	f7f9 fc41 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d2:	492d      	ldr	r1, [pc, #180]	; (8006988 <UART_SetConfig+0x214>)
 80068d4:	b282      	uxth	r2, r0
 80068d6:	3a10      	subs	r2, #16
 80068d8:	0403      	lsls	r3, r0, #16
 80068da:	428a      	cmp	r2, r1
 80068dc:	d8a6      	bhi.n	800682c <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068de:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068e0:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e2:	4390      	bics	r0, r2
 80068e4:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80068e6:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068e8:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80068ea:	4318      	orrs	r0, r3
 80068ec:	60d0      	str	r0, [r2, #12]
 80068ee:	e7a8      	b.n	8006842 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80068f0:	f7fe fb3e 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 80068f4:	e7d5      	b.n	80068a2 <UART_SetConfig+0x12e>
    switch (clocksource)
 80068f6:	2808      	cmp	r0, #8
 80068f8:	d898      	bhi.n	800682c <UART_SetConfig+0xb8>
 80068fa:	f7f9 fc17 	bl	800012c <__gnu_thumb1_case_shi>
 80068fe:	0009      	.short	0x0009
 8006900:	000fff6b 	.word	0x000fff6b
 8006904:	0025ff97 	.word	0x0025ff97
 8006908:	ff97ff97 	.word	0xff97ff97
 800690c:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fe fe8a 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006914:	2800      	cmp	r0, #0
 8006916:	d100      	bne.n	800691a <UART_SetConfig+0x1a6>
 8006918:	e793      	b.n	8006842 <UART_SetConfig+0xce>
 800691a:	e00a      	b.n	8006932 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800691c:	4b12      	ldr	r3, [pc, #72]	; (8006968 <UART_SetConfig+0x1f4>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	2310      	movs	r3, #16
 8006922:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006924:	4243      	negs	r3, r0
 8006926:	4158      	adcs	r0, r3
 8006928:	4b13      	ldr	r3, [pc, #76]	; (8006978 <UART_SetConfig+0x204>)
 800692a:	4240      	negs	r0, r0
 800692c:	4018      	ands	r0, r3
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <UART_SetConfig+0x208>)
 8006930:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	6861      	ldr	r1, [r4, #4]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	1818      	adds	r0, r3, r0
 800693a:	f7f9 fc0b 	bl	8000154 <__udivsi3>
 800693e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006940:	0002      	movs	r2, r0
 8006942:	4b11      	ldr	r3, [pc, #68]	; (8006988 <UART_SetConfig+0x214>)
 8006944:	3a10      	subs	r2, #16
 8006946:	e7a2      	b.n	800688e <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006948:	f7fe fb12 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
        break;
 800694c:	e7e2      	b.n	8006914 <UART_SetConfig+0x1a0>
    switch (clocksource)
 800694e:	2080      	movs	r0, #128	; 0x80
 8006950:	0200      	lsls	r0, r0, #8
 8006952:	e7ee      	b.n	8006932 <UART_SetConfig+0x1be>
 8006954:	efff69f3 	.word	0xefff69f3
 8006958:	ffffcfff 	.word	0xffffcfff
 800695c:	40004800 	.word	0x40004800
 8006960:	fffff4ff 	.word	0xfffff4ff
 8006964:	40013800 	.word	0x40013800
 8006968:	40021000 	.word	0x40021000
 800696c:	0800e921 	.word	0x0800e921
 8006970:	40004400 	.word	0x40004400
 8006974:	0800e924 	.word	0x0800e924
 8006978:	00b71b00 	.word	0x00b71b00
 800697c:	003d0900 	.word	0x003d0900
 8006980:	fffffd00 	.word	0xfffffd00
 8006984:	000ffcff 	.word	0x000ffcff
 8006988:	0000ffef 	.word	0x0000ffef

0800698c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800698c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800698e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006990:	07da      	lsls	r2, r3, #31
 8006992:	d506      	bpl.n	80069a2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006994:	6801      	ldr	r1, [r0, #0]
 8006996:	4c28      	ldr	r4, [pc, #160]	; (8006a38 <UART_AdvFeatureConfig+0xac>)
 8006998:	684a      	ldr	r2, [r1, #4]
 800699a:	4022      	ands	r2, r4
 800699c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800699e:	4322      	orrs	r2, r4
 80069a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a2:	079a      	lsls	r2, r3, #30
 80069a4:	d506      	bpl.n	80069b4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069a6:	6801      	ldr	r1, [r0, #0]
 80069a8:	4c24      	ldr	r4, [pc, #144]	; (8006a3c <UART_AdvFeatureConfig+0xb0>)
 80069aa:	684a      	ldr	r2, [r1, #4]
 80069ac:	4022      	ands	r2, r4
 80069ae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80069b0:	4322      	orrs	r2, r4
 80069b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069b4:	075a      	lsls	r2, r3, #29
 80069b6:	d506      	bpl.n	80069c6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	4c21      	ldr	r4, [pc, #132]	; (8006a40 <UART_AdvFeatureConfig+0xb4>)
 80069bc:	684a      	ldr	r2, [r1, #4]
 80069be:	4022      	ands	r2, r4
 80069c0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80069c2:	4322      	orrs	r2, r4
 80069c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c6:	071a      	lsls	r2, r3, #28
 80069c8:	d506      	bpl.n	80069d8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ca:	6801      	ldr	r1, [r0, #0]
 80069cc:	4c1d      	ldr	r4, [pc, #116]	; (8006a44 <UART_AdvFeatureConfig+0xb8>)
 80069ce:	684a      	ldr	r2, [r1, #4]
 80069d0:	4022      	ands	r2, r4
 80069d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80069d4:	4322      	orrs	r2, r4
 80069d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069d8:	06da      	lsls	r2, r3, #27
 80069da:	d506      	bpl.n	80069ea <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069dc:	6801      	ldr	r1, [r0, #0]
 80069de:	4c1a      	ldr	r4, [pc, #104]	; (8006a48 <UART_AdvFeatureConfig+0xbc>)
 80069e0:	688a      	ldr	r2, [r1, #8]
 80069e2:	4022      	ands	r2, r4
 80069e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80069e6:	4322      	orrs	r2, r4
 80069e8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ea:	069a      	lsls	r2, r3, #26
 80069ec:	d506      	bpl.n	80069fc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ee:	6801      	ldr	r1, [r0, #0]
 80069f0:	4c16      	ldr	r4, [pc, #88]	; (8006a4c <UART_AdvFeatureConfig+0xc0>)
 80069f2:	688a      	ldr	r2, [r1, #8]
 80069f4:	4022      	ands	r2, r4
 80069f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80069f8:	4322      	orrs	r2, r4
 80069fa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069fc:	065a      	lsls	r2, r3, #25
 80069fe:	d510      	bpl.n	8006a22 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a00:	6801      	ldr	r1, [r0, #0]
 8006a02:	4d13      	ldr	r5, [pc, #76]	; (8006a50 <UART_AdvFeatureConfig+0xc4>)
 8006a04:	684a      	ldr	r2, [r1, #4]
 8006a06:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006a08:	402a      	ands	r2, r5
 8006a0a:	4322      	orrs	r2, r4
 8006a0c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	0352      	lsls	r2, r2, #13
 8006a12:	4294      	cmp	r4, r2
 8006a14:	d105      	bne.n	8006a22 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a16:	684a      	ldr	r2, [r1, #4]
 8006a18:	4c0e      	ldr	r4, [pc, #56]	; (8006a54 <UART_AdvFeatureConfig+0xc8>)
 8006a1a:	4022      	ands	r2, r4
 8006a1c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006a1e:	4322      	orrs	r2, r4
 8006a20:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a22:	061b      	lsls	r3, r3, #24
 8006a24:	d506      	bpl.n	8006a34 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a26:	6802      	ldr	r2, [r0, #0]
 8006a28:	490b      	ldr	r1, [pc, #44]	; (8006a58 <UART_AdvFeatureConfig+0xcc>)
 8006a2a:	6853      	ldr	r3, [r2, #4]
 8006a2c:	400b      	ands	r3, r1
 8006a2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6053      	str	r3, [r2, #4]
}
 8006a34:	bd30      	pop	{r4, r5, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	fffdffff 	.word	0xfffdffff
 8006a3c:	fffeffff 	.word	0xfffeffff
 8006a40:	fffbffff 	.word	0xfffbffff
 8006a44:	ffff7fff 	.word	0xffff7fff
 8006a48:	ffffefff 	.word	0xffffefff
 8006a4c:	ffffdfff 	.word	0xffffdfff
 8006a50:	ffefffff 	.word	0xffefffff
 8006a54:	ff9fffff 	.word	0xff9fffff
 8006a58:	fff7ffff 	.word	0xfff7ffff

08006a5c <UART_WaitOnFlagUntilTimeout>:
{
 8006a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5e:	2780      	movs	r7, #128	; 0x80
{
 8006a60:	0004      	movs	r4, r0
 8006a62:	000d      	movs	r5, r1
 8006a64:	0016      	movs	r6, r2
 8006a66:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a68:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	69d3      	ldr	r3, [r2, #28]
 8006a6e:	402b      	ands	r3, r5
 8006a70:	1b5b      	subs	r3, r3, r5
 8006a72:	4259      	negs	r1, r3
 8006a74:	414b      	adcs	r3, r1
 8006a76:	42b3      	cmp	r3, r6
 8006a78:	d001      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e01c      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006a7e:	9b08      	ldr	r3, [sp, #32]
 8006a80:	3301      	adds	r3, #1
 8006a82:	d0f3      	beq.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a84:	f7fc f91a 	bl	8002cbc <HAL_GetTick>
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	9a08      	ldr	r2, [sp, #32]
 8006a8c:	1ac0      	subs	r0, r0, r3
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	4290      	cmp	r0, r2
 8006a92:	d801      	bhi.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x3c>
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	d110      	bne.n	8006aba <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4913      	ldr	r1, [pc, #76]	; (8006ae8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	31a3      	adds	r1, #163	; 0xa3
 8006aa4:	31ff      	adds	r1, #255	; 0xff
 8006aa6:	438a      	bics	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006aaa:	2320      	movs	r3, #32
 8006aac:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006aae:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8006ab0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8006ab2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006ab4:	3474      	adds	r4, #116	; 0x74
 8006ab6:	7023      	strb	r3, [r4, #0]
}
 8006ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aba:	2104      	movs	r1, #4
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	420a      	tst	r2, r1
 8006ac0:	d0d3      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	423a      	tst	r2, r7
 8006ac6:	d0d0      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac8:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4906      	ldr	r1, [pc, #24]	; (8006ae8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8006ace:	400a      	ands	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	31a3      	adds	r1, #163	; 0xa3
 8006ad6:	31ff      	adds	r1, #255	; 0xff
 8006ad8:	438a      	bics	r2, r1
 8006ada:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006adc:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ade:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8006ae0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae4:	67d3      	str	r3, [r2, #124]	; 0x7c
 8006ae6:	e7e3      	b.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0x54>
 8006ae8:	fffffe5f 	.word	0xfffffe5f

08006aec <UART_CheckIdleState>:
{
 8006aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aee:	2600      	movs	r6, #0
{
 8006af0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af2:	1d03      	adds	r3, r0, #4
 8006af4:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006af6:	f7fc f8e1 	bl	8002cbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006afa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006afc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	071b      	lsls	r3, r3, #28
 8006b02:	d416      	bmi.n	8006b32 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	075b      	lsls	r3, r3, #29
 8006b0a:	d50a      	bpl.n	8006b22 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0c:	2180      	movs	r1, #128	; 0x80
 8006b0e:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <UART_CheckIdleState+0x60>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	0020      	movs	r0, r4
 8006b16:	002b      	movs	r3, r5
 8006b18:	03c9      	lsls	r1, r1, #15
 8006b1a:	f7ff ff9f 	bl	8006a5c <UART_WaitOnFlagUntilTimeout>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d112      	bne.n	8006b48 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8006b22:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b24:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006b26:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b28:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2a:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8006b2c:	3474      	adds	r4, #116	; 0x74
 8006b2e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8006b30:	e00b      	b.n	8006b4a <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b32:	2180      	movs	r1, #128	; 0x80
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <UART_CheckIdleState+0x60>)
 8006b36:	0032      	movs	r2, r6
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	0389      	lsls	r1, r1, #14
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	0020      	movs	r0, r4
 8006b40:	f7ff ff8c 	bl	8006a5c <UART_WaitOnFlagUntilTimeout>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d0dd      	beq.n	8006b04 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006b48:	2003      	movs	r0, #3
}
 8006b4a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006b4c:	01ffffff 	.word	0x01ffffff

08006b50 <HAL_UART_Init>:
{
 8006b50:	b510      	push	{r4, lr}
 8006b52:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006b56:	2001      	movs	r0, #1
}
 8006b58:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8006b60:	0002      	movs	r2, r0
 8006b62:	3274      	adds	r2, #116	; 0x74
 8006b64:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006b66:	f7fc fea9 	bl	80038bc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b6a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8006b72:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b74:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006b76:	438b      	bics	r3, r1
 8006b78:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b7a:	f7ff fdfb 	bl	8006774 <UART_SetConfig>
 8006b7e:	2801      	cmp	r0, #1
 8006b80:	d0e9      	beq.n	8006b56 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8006b88:	0020      	movs	r0, r4
 8006b8a:	f7ff feff 	bl	800698c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	4907      	ldr	r1, [pc, #28]	; (8006bb0 <HAL_UART_Init+0x60>)
 8006b92:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006b94:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b96:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b98:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	438a      	bics	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	6819      	ldr	r1, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006baa:	f7ff ff9f 	bl	8006aec <UART_CheckIdleState>
 8006bae:	e7d3      	b.n	8006b58 <HAL_UART_Init+0x8>
 8006bb0:	ffffb7ff 	.word	0xffffb7ff

08006bb4 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	3358      	adds	r3, #88	; 0x58
{
 8006bb8:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8006bba:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8006bbc:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8006bbe:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8006bc0:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8006bc2:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8006bc4:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8006bc6:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8006bc8:	0164      	lsls	r4, r4, #5
 8006bca:	3304      	adds	r3, #4
 8006bcc:	42a1      	cmp	r1, r4
 8006bce:	d124      	bne.n	8006c1a <UART_Start_Receive_IT+0x66>
 8006bd0:	6902      	ldr	r2, [r0, #16]
 8006bd2:	2a00      	cmp	r2, #0
 8006bd4:	d11f      	bne.n	8006c16 <UART_Start_Receive_IT+0x62>
 8006bd6:	4a19      	ldr	r2, [pc, #100]	; (8006c3c <UART_Start_Receive_IT+0x88>)
 8006bd8:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bda:	2200      	movs	r2, #0
 8006bdc:	1d03      	adds	r3, r0, #4
 8006bde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be0:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be4:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be6:	6894      	ldr	r4, [r2, #8]
 8006be8:	3b21      	subs	r3, #33	; 0x21
 8006bea:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bec:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf0:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	42a1      	cmp	r1, r4
 8006bf6:	d103      	bne.n	8006c00 <UART_Start_Receive_IT+0x4c>
 8006bf8:	6901      	ldr	r1, [r0, #16]
 8006bfa:	2900      	cmp	r1, #0
 8006bfc:	d100      	bne.n	8006c00 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8006bfe:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <UART_Start_Receive_IT+0x90>)
 8006c00:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8006c02:	0003      	movs	r3, r0
 8006c04:	2000      	movs	r0, #0
 8006c06:	3374      	adds	r3, #116	; 0x74
 8006c08:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c0a:	2390      	movs	r3, #144	; 0x90
 8006c0c:	6811      	ldr	r1, [r2, #0]
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8006c16:	22ff      	movs	r2, #255	; 0xff
 8006c18:	e7de      	b.n	8006bd8 <UART_Start_Receive_IT+0x24>
 8006c1a:	2900      	cmp	r1, #0
 8006c1c:	d104      	bne.n	8006c28 <UART_Start_Receive_IT+0x74>
 8006c1e:	6902      	ldr	r2, [r0, #16]
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	d0f8      	beq.n	8006c16 <UART_Start_Receive_IT+0x62>
 8006c24:	227f      	movs	r2, #127	; 0x7f
 8006c26:	e7d7      	b.n	8006bd8 <UART_Start_Receive_IT+0x24>
 8006c28:	2480      	movs	r4, #128	; 0x80
 8006c2a:	0564      	lsls	r4, r4, #21
 8006c2c:	42a1      	cmp	r1, r4
 8006c2e:	d1d3      	bne.n	8006bd8 <UART_Start_Receive_IT+0x24>
 8006c30:	6902      	ldr	r2, [r0, #16]
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d0f6      	beq.n	8006c24 <UART_Start_Receive_IT+0x70>
 8006c36:	223f      	movs	r2, #63	; 0x3f
 8006c38:	e7ce      	b.n	8006bd8 <UART_Start_Receive_IT+0x24>
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	000001ff 	.word	0x000001ff
 8006c40:	08006671 	.word	0x08006671
 8006c44:	080066f5 	.word	0x080066f5

08006c48 <HAL_UART_Receive_IT>:
{
 8006c48:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c4a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c4e:	2c20      	cmp	r4, #32
 8006c50:	d129      	bne.n	8006ca6 <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8006c52:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d026      	beq.n	8006ca6 <HAL_UART_Receive_IT+0x5e>
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	d024      	beq.n	8006ca6 <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	6884      	ldr	r4, [r0, #8]
 8006c60:	015b      	lsls	r3, r3, #5
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d106      	bne.n	8006c74 <HAL_UART_Receive_IT+0x2c>
 8006c66:	6903      	ldr	r3, [r0, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c6c:	2401      	movs	r4, #1
      return HAL_ERROR;
 8006c6e:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c70:	4221      	tst	r1, r4
 8006c72:	d118      	bne.n	8006ca6 <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8006c74:	0004      	movs	r4, r0
 8006c76:	3474      	adds	r4, #116	; 0x74
 8006c78:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8006c7c:	2d01      	cmp	r5, #1
 8006c7e:	d012      	beq.n	8006ca6 <HAL_UART_Receive_IT+0x5e>
 8006c80:	3b01      	subs	r3, #1
 8006c82:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c84:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c86:	4c09      	ldr	r4, [pc, #36]	; (8006cac <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c8a:	6803      	ldr	r3, [r0, #0]
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	d007      	beq.n	8006ca0 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c90:	685c      	ldr	r4, [r3, #4]
 8006c92:	0224      	lsls	r4, r4, #8
 8006c94:	d504      	bpl.n	8006ca0 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c96:	2480      	movs	r4, #128	; 0x80
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	04e4      	lsls	r4, r4, #19
 8006c9c:	432c      	orrs	r4, r5
 8006c9e:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006ca0:	f7ff ff88 	bl	8006bb4 <UART_Start_Receive_IT>
 8006ca4:	0003      	movs	r3, r0
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	40004800 	.word	0x40004800

08006cb0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb6:	0005      	movs	r5, r0
{
 8006cb8:	b085      	sub	sp, #20
 8006cba:	9203      	str	r2, [sp, #12]
 8006cbc:	9102      	str	r1, [sp, #8]
  __HAL_LOCK(huart);
 8006cbe:	3574      	adds	r5, #116	; 0x74
 8006cc0:	782b      	ldrb	r3, [r5, #0]
{
 8006cc2:	0004      	movs	r4, r0
 8006cc4:	000f      	movs	r7, r1
 8006cc6:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8006cc8:	2002      	movs	r0, #2
{
 8006cca:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d030      	beq.n	8006d32 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd0:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8006cd2:	3801      	subs	r0, #1
 8006cd4:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006cd6:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	6819      	ldr	r1, [r3, #0]
 8006cdc:	4381      	bics	r1, r0
 8006cde:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006ce0:	6899      	ldr	r1, [r3, #8]
 8006ce2:	4816      	ldr	r0, [pc, #88]	; (8006d3c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
 8006ce4:	4001      	ands	r1, r0
 8006ce6:	4339      	orrs	r1, r7
 8006ce8:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	d10c      	bne.n	8006d08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006cee:	6859      	ldr	r1, [r3, #4]
 8006cf0:	3210      	adds	r2, #16
 8006cf2:	4391      	bics	r1, r2
 8006cf4:	88b2      	ldrh	r2, [r6, #4]
 8006cf6:	79b0      	ldrb	r0, [r6, #6]
 8006cf8:	4311      	orrs	r1, r2
 8006cfa:	6059      	str	r1, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	0600      	lsls	r0, r0, #24
 8006d00:	0212      	lsls	r2, r2, #8
 8006d02:	0a12      	lsrs	r2, r2, #8
 8006d04:	4302      	orrs	r2, r0
 8006d06:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8006d08:	2201      	movs	r2, #1
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006d10:	f7fb ffd4 	bl	8002cbc <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d14:	2180      	movs	r1, #128	; 0x80
 8006d16:	4a0a      	ldr	r2, [pc, #40]	; (8006d40 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>)
  tickstart = HAL_GetTick();
 8006d18:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d1a:	9200      	str	r2, [sp, #0]
 8006d1c:	0020      	movs	r0, r4
 8006d1e:	2200      	movs	r2, #0
 8006d20:	03c9      	lsls	r1, r1, #15
 8006d22:	f7ff fe9b 	bl	8006a5c <UART_WaitOnFlagUntilTimeout>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d105      	bne.n	8006d36 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8006d2a:	2320      	movs	r3, #32
 8006d2c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	702b      	strb	r3, [r5, #0]
}
 8006d32:	b005      	add	sp, #20
 8006d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 8006d36:	2003      	movs	r0, #3
 8006d38:	e7f9      	b.n	8006d2e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	ffcfffff 	.word	0xffcfffff
 8006d40:	01ffffff 	.word	0x01ffffff

08006d44 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006d44:	0001      	movs	r1, r0
 8006d46:	2302      	movs	r3, #2
{
 8006d48:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8006d4a:	3174      	adds	r1, #116	; 0x74
 8006d4c:	780c      	ldrb	r4, [r1, #0]
{
 8006d4e:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8006d50:	0018      	movs	r0, r3
 8006d52:	2c01      	cmp	r4, #1
 8006d54:	d005      	beq.n	8006d62 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	6810      	ldr	r0, [r2, #0]
 8006d5a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8006d5c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006d5e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8006d60:	7008      	strb	r0, [r1, #0]
}
 8006d62:	bd10      	pop	{r4, pc}

08006d64 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8006d64:	b510      	push	{r4, lr}
 8006d66:	0004      	movs	r4, r0
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
  {
    return HAL_ERROR;
 8006d68:	2001      	movs	r0, #1
  if (hwwdg == NULL)
 8006d6a:	2c00      	cmp	r4, #0
 8006d6c:	d00e      	beq.n	8006d8c <HAL_WWDG_Init+0x28>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8006d6e:	0020      	movs	r0, r4
 8006d70:	f7fb fe64 	bl	8002a3c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8006d74:	2380      	movs	r3, #128	; 0x80

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));

  /* Return function status */
  return HAL_OK;
 8006d76:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8006d78:	68e1      	ldr	r1, [r4, #12]
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8006d80:	6861      	ldr	r1, [r4, #4]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	430b      	orrs	r3, r1
 8006d86:	68a1      	ldr	r1, [r4, #8]
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6053      	str	r3, [r2, #4]
}
 8006d8c:	bd10      	pop	{r4, pc}

08006d8e <HAL_WWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8006d8e:	6803      	ldr	r3, [r0, #0]
 8006d90:	68c2      	ldr	r2, [r0, #12]

  /* Return function status */
  return HAL_OK;
}
 8006d92:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8006d94:	601a      	str	r2, [r3, #0]
}
 8006d96:	4770      	bx	lr

08006d98 <MX_LoRaWAN_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void){
 8006d98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8006d9a:	f7fb fecd 	bl	8002b38 <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
  //LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8006d9e:	bd10      	pop	{r4, pc}

08006da0 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8006da0:	2001      	movs	r0, #1
{
 8006da2:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8006da4:	4240      	negs	r0, r0
 8006da6:	f007 f855 	bl	800de54 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8006daa:	bd10      	pop	{r4, pc}

08006dac <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8006dac:	2200      	movs	r2, #0
 8006dae:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <LoraInfo_Init+0x14>)
 8006db0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8006db2:	60da      	str	r2, [r3, #12]

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923) ;
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915) ;
 8006db4:	3202      	adds	r2, #2
 8006db6:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8006db8:	3201      	adds	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8006dbc:	4770      	bx	lr
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	200005f4 	.word	0x200005f4

08006dc4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8006dc4:	4800      	ldr	r0, [pc, #0]	; (8006dc8 <LoraInfo_GetPtr+0x4>)
 8006dc6:	4770      	bx	lr
 8006dc8:	200005f4 	.word	0x200005f4

08006dcc <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8006dcc:	23fa      	movs	r3, #250	; 0xfa
{
 8006dce:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8006dd0:	009b      	lsls	r3, r3, #2
{
 8006dd2:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	0013      	movs	r3, r2
 8006dd8:	000a      	movs	r2, r1
 8006dda:	0001      	movs	r1, r0
 8006ddc:	4804      	ldr	r0, [pc, #16]	; (8006df0 <BSP_SPI1_SendRecv+0x24>)
 8006dde:	f7ff f96d 	bl	80060bc <HAL_SPI_TransmitReceive>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d101      	bne.n	8006dea <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8006de6:	0020      	movs	r0, r4
  }
  return ret;
}
 8006de8:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006dea:	2006      	movs	r0, #6
 8006dec:	4240      	negs	r0, r0
  return ret;
 8006dee:	e7fb      	b.n	8006de8 <BSP_SPI1_SendRecv+0x1c>
 8006df0:	20000604 	.word	0x20000604

08006df4 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8006df4:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <MX_SPI1_Init+0x54>)
{
 8006df6:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8006df8:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006dfa:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006dfc:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006e02:	33fc      	adds	r3, #252	; 0xfc
 8006e04:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006e06:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006e08:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e0a:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e0c:	6145      	str	r5, [r0, #20]
{
 8006e0e:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8006e10:	f7fe fc1a 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8006e14:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8006e16:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8006e18:	490d      	ldr	r1, [pc, #52]	; (8006e50 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8006e1a:	4290      	cmp	r0, r2
 8006e1c:	d80d      	bhi.n	8006e3a <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006e22:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e24:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8006e26:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8006e28:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8006e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006e2c:	0020      	movs	r0, r4
 8006e2e:	f7ff f8e3 	bl	8005ff8 <HAL_SPI_Init>
 8006e32:	1e43      	subs	r3, r0, #1
 8006e34:	4198      	sbcs	r0, r3
  return ret;
 8006e36:	b2c0      	uxtb	r0, r0
}
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8006e3a:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8006e3c:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8006e3e:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d0ec      	beq.n	8006e1e <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8006e44:	0840      	lsrs	r0, r0, #1
 8006e46:	e7e8      	b.n	8006e1a <MX_SPI1_Init+0x26>
 8006e48:	40013000 	.word	0x40013000
 8006e4c:	00989680 	.word	0x00989680
 8006e50:	0800e934 	.word	0x0800e934

08006e54 <BSP_SPI1_Init>:
{
 8006e54:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8006e56:	4d1b      	ldr	r5, [pc, #108]	; (8006ec4 <BSP_SPI1_Init+0x70>)
 8006e58:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8006e5a:	0028      	movs	r0, r5
{
 8006e5c:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8006e5e:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8006e60:	f7ff fa26 	bl	80062b0 <HAL_SPI_GetState>
 8006e64:	1e04      	subs	r4, r0, #0
 8006e66:	d002      	beq.n	8006e6e <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006e68:	2000      	movs	r0, #0
}
 8006e6a:	b007      	add	sp, #28
 8006e6c:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <BSP_SPI1_Init+0x78>)
 8006e72:	015b      	lsls	r3, r3, #5
 8006e74:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7a:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7c:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8006e7e:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006e80:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e82:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e84:	3301      	adds	r3, #1
 8006e86:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006e88:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8006e8a:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006e8c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8006e8e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006e90:	f7fd fe9e 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006e94:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8006e96:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006e98:	a901      	add	r1, sp, #4
 8006e9a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8006e9c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8006e9e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006ea0:	f7fd fe96 	bl	8004bd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006ea4:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8006ea6:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006ea8:	05c0      	lsls	r0, r0, #23
 8006eaa:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8006eac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8006eae:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006eb0:	f7fd fe8e 	bl	8004bd0 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8006eb4:	0028      	movs	r0, r5
 8006eb6:	f7ff ff9d 	bl	8006df4 <MX_SPI1_Init>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0d4      	beq.n	8006e68 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8006ebe:	2008      	movs	r0, #8
 8006ec0:	4240      	negs	r0, r0
  return ret;
 8006ec2:	e7d2      	b.n	8006e6a <BSP_SPI1_Init+0x16>
 8006ec4:	20000604 	.word	0x20000604
 8006ec8:	40013000 	.word	0x40013000
 8006ecc:	40021000 	.word	0x40021000

08006ed0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	30f1      	adds	r0, #241	; 0xf1
 8006eda:	f005 fd62 	bl	800c9a2 <memset1>
    ctx->M_n = 0;
 8006ede:	0023      	movs	r3, r4
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006ee4:	22f0      	movs	r2, #240	; 0xf0
 8006ee6:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8006ee8:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006eea:	f005 fd5a 	bl	800c9a2 <memset1>
}
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8006ef6:	2110      	movs	r1, #16
 8006ef8:	f000 f99e 	bl	8007238 <lorawan_aes_set_key>
}
 8006efc:	bd10      	pop	{r4, pc}

08006efe <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8006efe:	0003      	movs	r3, r0
{
 8006f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f02:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 8006f04:	33fc      	adds	r3, #252	; 0xfc
 8006f06:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006f08:	1ca3      	adds	r3, r4, #2
{
 8006f0a:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006f0c:	33ff      	adds	r3, #255	; 0xff
{
 8006f0e:	000e      	movs	r6, r1
 8006f10:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006f12:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d036      	beq.n	8006f86 <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 8006f18:	2710      	movs	r7, #16
 8006f1a:	1a3f      	subs	r7, r7, r0
 8006f1c:	9700      	str	r7, [sp, #0]
 8006f1e:	4297      	cmp	r7, r2
 8006f20:	d900      	bls.n	8006f24 <AES_CMAC_Update+0x26>
 8006f22:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006f24:	466b      	mov	r3, sp
 8006f26:	881a      	ldrh	r2, [r3, #0]
 8006f28:	1ca3      	adds	r3, r4, #2
 8006f2a:	33ff      	adds	r3, #255	; 0xff
 8006f2c:	0031      	movs	r1, r6
 8006f2e:	1818      	adds	r0, r3, r0
 8006f30:	f005 fd22 	bl	800c978 <memcpy1>
        ctx->M_n += mlen;
 8006f34:	0022      	movs	r2, r4
 8006f36:	32fc      	adds	r2, #252	; 0xfc
 8006f38:	6991      	ldr	r1, [r2, #24]
 8006f3a:	9b00      	ldr	r3, [sp, #0]
 8006f3c:	185b      	adds	r3, r3, r1
 8006f3e:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	d929      	bls.n	8006f98 <AES_CMAC_Update+0x9a>
 8006f44:	42af      	cmp	r7, r5
 8006f46:	d227      	bcs.n	8006f98 <AES_CMAC_Update+0x9a>
 8006f48:	0023      	movs	r3, r4
 8006f4a:	1ca1      	adds	r1, r4, #2
 8006f4c:	33f1      	adds	r3, #241	; 0xf1
 8006f4e:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	7c18      	ldrb	r0, [r3, #16]
 8006f54:	4042      	eors	r2, r0
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	428b      	cmp	r3, r1
 8006f5c:	d1f8      	bne.n	8006f50 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006f5e:	0027      	movs	r7, r4
 8006f60:	37f1      	adds	r7, #241	; 0xf1
 8006f62:	2210      	movs	r2, #16
 8006f64:	0039      	movs	r1, r7
 8006f66:	a802      	add	r0, sp, #8
 8006f68:	f005 fd06 	bl	800c978 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006f6c:	a902      	add	r1, sp, #8
 8006f6e:	0022      	movs	r2, r4
 8006f70:	0008      	movs	r0, r1
 8006f72:	f000 f9e9 	bl	8007348 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006f76:	2210      	movs	r2, #16
 8006f78:	0038      	movs	r0, r7
 8006f7a:	a902      	add	r1, sp, #8
 8006f7c:	f005 fcfc 	bl	800c978 <memcpy1>

        data += mlen;
 8006f80:	9b00      	ldr	r3, [sp, #0]
 8006f82:	18f6      	adds	r6, r6, r3
        len -= mlen;
 8006f84:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 8006f86:	2d10      	cmp	r5, #16
 8006f88:	d808      	bhi.n	8006f9c <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8006f8a:	0031      	movs	r1, r6
 8006f8c:	9801      	ldr	r0, [sp, #4]
 8006f8e:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 8006f90:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 8006f92:	f005 fcf1 	bl	800c978 <memcpy1>
    ctx->M_n = len;
 8006f96:	61a5      	str	r5, [r4, #24]
}
 8006f98:	b007      	add	sp, #28
 8006f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9c:	0023      	movs	r3, r4
 8006f9e:	0032      	movs	r2, r6
 8006fa0:	1ca0      	adds	r0, r4, #2
 8006fa2:	33f1      	adds	r3, #241	; 0xf1
 8006fa4:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 8006fa6:	7819      	ldrb	r1, [r3, #0]
 8006fa8:	7817      	ldrb	r7, [r2, #0]
 8006faa:	3201      	adds	r2, #1
 8006fac:	4079      	eors	r1, r7
 8006fae:	7019      	strb	r1, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	4283      	cmp	r3, r0
 8006fb4:	d1f7      	bne.n	8006fa6 <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8006fb6:	0027      	movs	r7, r4
 8006fb8:	37f1      	adds	r7, #241	; 0xf1
 8006fba:	2210      	movs	r2, #16
 8006fbc:	0039      	movs	r1, r7
 8006fbe:	a802      	add	r0, sp, #8
 8006fc0:	f005 fcda 	bl	800c978 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006fc4:	a902      	add	r1, sp, #8
 8006fc6:	0022      	movs	r2, r4
 8006fc8:	0008      	movs	r0, r1
 8006fca:	f000 f9bd 	bl	8007348 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006fce:	2210      	movs	r2, #16
 8006fd0:	0038      	movs	r0, r7
 8006fd2:	a902      	add	r1, sp, #8
 8006fd4:	f005 fcd0 	bl	800c978 <memcpy1>
        data += 16;
 8006fd8:	3610      	adds	r6, #16
        len -= 16;
 8006fda:	3d10      	subs	r5, #16
 8006fdc:	e7d3      	b.n	8006f86 <AES_CMAC_Update+0x88>

08006fde <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8006fde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe0:	000c      	movs	r4, r1
 8006fe2:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8006fe4:	2210      	movs	r2, #16
 8006fe6:	2100      	movs	r1, #0
{
 8006fe8:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 8006fea:	a802      	add	r0, sp, #8
 8006fec:	f005 fcd9 	bl	800c9a2 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8006ff0:	a902      	add	r1, sp, #8
 8006ff2:	0022      	movs	r2, r4
 8006ff4:	0008      	movs	r0, r1
 8006ff6:	f000 f9a7 	bl	8007348 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8006ffa:	ab02      	add	r3, sp, #8
 8006ffc:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8006ffe:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 8007000:	2a7f      	cmp	r2, #127	; 0x7f
 8007002:	d940      	bls.n	8007086 <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	7858      	ldrb	r0, [r3, #1]
 8007008:	0052      	lsls	r2, r2, #1
 800700a:	09c0      	lsrs	r0, r0, #7
 800700c:	4302      	orrs	r2, r0
 800700e:	3101      	adds	r1, #1
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	290f      	cmp	r1, #15
 8007016:	d1f5      	bne.n	8007004 <AES_CMAC_Final+0x26>
 8007018:	ab02      	add	r3, sp, #8
 800701a:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 800701c:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 800701e:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8007020:	425b      	negs	r3, r3
 8007022:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 8007024:	0027      	movs	r7, r4
 8007026:	37fc      	adds	r7, #252	; 0xfc
 8007028:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 800702a:	aa02      	add	r2, sp, #8
 800702c:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 800702e:	2810      	cmp	r0, #16
 8007030:	d137      	bne.n	80070a2 <AES_CMAC_Final+0xc4>
 8007032:	0020      	movs	r0, r4
 8007034:	1ca3      	adds	r3, r4, #2
 8007036:	3012      	adds	r0, #18
 8007038:	33ff      	adds	r3, #255	; 0xff
 800703a:	aa02      	add	r2, sp, #8
 800703c:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800703e:	7819      	ldrb	r1, [r3, #0]
 8007040:	7815      	ldrb	r5, [r2, #0]
 8007042:	3201      	adds	r2, #1
 8007044:	4069      	eors	r1, r5
 8007046:	7019      	strb	r1, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4298      	cmp	r0, r3
 800704c:	d1f7      	bne.n	800703e <AES_CMAC_Final+0x60>
 800704e:	0023      	movs	r3, r4
 8007050:	33f1      	adds	r3, #241	; 0xf1
 8007052:	0019      	movs	r1, r3
 8007054:	1ca0      	adds	r0, r4, #2
 8007056:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8007058:	781a      	ldrb	r2, [r3, #0]
 800705a:	7c1d      	ldrb	r5, [r3, #16]
 800705c:	406a      	eors	r2, r5
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	4283      	cmp	r3, r0
 8007064:	d1f8      	bne.n	8007058 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007066:	a806      	add	r0, sp, #24
 8007068:	2210      	movs	r2, #16
 800706a:	f005 fc85 	bl	800c978 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800706e:	0022      	movs	r2, r4
 8007070:	9901      	ldr	r1, [sp, #4]
 8007072:	a806      	add	r0, sp, #24
 8007074:	f000 f968 	bl	8007348 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8007078:	2210      	movs	r2, #16
 800707a:	2100      	movs	r1, #0
 800707c:	a802      	add	r0, sp, #8
 800707e:	f005 fc90 	bl	800c9a2 <memset1>
}
 8007082:	b00b      	add	sp, #44	; 0x2c
 8007084:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	7858      	ldrb	r0, [r3, #1]
 800708a:	0052      	lsls	r2, r2, #1
 800708c:	09c0      	lsrs	r0, r0, #7
 800708e:	4302      	orrs	r2, r0
 8007090:	3101      	adds	r1, #1
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	290f      	cmp	r1, #15
 8007098:	d1f5      	bne.n	8007086 <AES_CMAC_Final+0xa8>
 800709a:	ab02      	add	r3, sp, #8
 800709c:	7bdb      	ldrb	r3, [r3, #15]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	e7c0      	b.n	8007024 <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 80070a2:	ab02      	add	r3, sp, #8
 80070a4:	781a      	ldrb	r2, [r3, #0]
            LSHIFT( K, K );
 80070a6:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 80070a8:	2a7f      	cmp	r2, #127	; 0x7f
 80070aa:	d933      	bls.n	8007114 <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	785d      	ldrb	r5, [r3, #1]
 80070b0:	0052      	lsls	r2, r2, #1
 80070b2:	09ed      	lsrs	r5, r5, #7
 80070b4:	432a      	orrs	r2, r5
 80070b6:	3101      	adds	r1, #1
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	290f      	cmp	r1, #15
 80070be:	d1f5      	bne.n	80070ac <AES_CMAC_Final+0xce>
 80070c0:	ab02      	add	r3, sp, #8
 80070c2:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 80070c4:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 80070c6:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 80070c8:	425b      	negs	r3, r3
 80070ca:	4053      	eors	r3, r2
            LSHIFT( K, K );
 80070cc:	aa02      	add	r2, sp, #8
 80070ce:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 80070d0:	2280      	movs	r2, #128	; 0x80
 80070d2:	1823      	adds	r3, r4, r0
 80070d4:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 80070d6:	1c46      	adds	r6, r0, #1
 80070d8:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 80070da:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 80070dc:	2e10      	cmp	r6, #16
 80070de:	d801      	bhi.n	80070e4 <AES_CMAC_Final+0x106>
 80070e0:	350f      	adds	r5, #15
 80070e2:	1a2d      	subs	r5, r5, r0
 80070e4:	3003      	adds	r0, #3
 80070e6:	30ff      	adds	r0, #255	; 0xff
 80070e8:	002a      	movs	r2, r5
 80070ea:	2100      	movs	r1, #0
 80070ec:	1820      	adds	r0, r4, r0
 80070ee:	f007 fa56 	bl	800e59e <memset>
 80070f2:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 80070f4:	19ad      	adds	r5, r5, r6
 80070f6:	1ca3      	adds	r3, r4, #2
 80070f8:	3012      	adds	r0, #18
 80070fa:	61bd      	str	r5, [r7, #24]
 80070fc:	33ff      	adds	r3, #255	; 0xff
 80070fe:	aa02      	add	r2, sp, #8
 8007100:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 8007102:	7819      	ldrb	r1, [r3, #0]
 8007104:	7815      	ldrb	r5, [r2, #0]
 8007106:	3201      	adds	r2, #1
 8007108:	4069      	eors	r1, r5
 800710a:	7019      	strb	r1, [r3, #0]
 800710c:	3301      	adds	r3, #1
 800710e:	4298      	cmp	r0, r3
 8007110:	d1f7      	bne.n	8007102 <AES_CMAC_Final+0x124>
 8007112:	e79c      	b.n	800704e <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	785d      	ldrb	r5, [r3, #1]
 8007118:	0052      	lsls	r2, r2, #1
 800711a:	09ed      	lsrs	r5, r5, #7
 800711c:	432a      	orrs	r2, r5
 800711e:	3101      	adds	r1, #1
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	3301      	adds	r3, #1
 8007124:	290f      	cmp	r1, #15
 8007126:	d1f5      	bne.n	8007114 <AES_CMAC_Final+0x136>
 8007128:	ab02      	add	r3, sp, #8
 800712a:	7bdb      	ldrb	r3, [r3, #15]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	e7cd      	b.n	80070cc <AES_CMAC_Final+0xee>

08007130 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007130:	780a      	ldrb	r2, [r1, #0]
 8007132:	7803      	ldrb	r3, [r0, #0]
 8007134:	4053      	eors	r3, r2
 8007136:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007138:	784a      	ldrb	r2, [r1, #1]
 800713a:	7843      	ldrb	r3, [r0, #1]
 800713c:	4053      	eors	r3, r2
 800713e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007140:	788a      	ldrb	r2, [r1, #2]
 8007142:	7883      	ldrb	r3, [r0, #2]
 8007144:	4053      	eors	r3, r2
 8007146:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007148:	78ca      	ldrb	r2, [r1, #3]
 800714a:	78c3      	ldrb	r3, [r0, #3]
 800714c:	4053      	eors	r3, r2
 800714e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007150:	790a      	ldrb	r2, [r1, #4]
 8007152:	7903      	ldrb	r3, [r0, #4]
 8007154:	4053      	eors	r3, r2
 8007156:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007158:	794a      	ldrb	r2, [r1, #5]
 800715a:	7943      	ldrb	r3, [r0, #5]
 800715c:	4053      	eors	r3, r2
 800715e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007160:	798a      	ldrb	r2, [r1, #6]
 8007162:	7983      	ldrb	r3, [r0, #6]
 8007164:	4053      	eors	r3, r2
 8007166:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007168:	79ca      	ldrb	r2, [r1, #7]
 800716a:	79c3      	ldrb	r3, [r0, #7]
 800716c:	4053      	eors	r3, r2
 800716e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007170:	7a0a      	ldrb	r2, [r1, #8]
 8007172:	7a03      	ldrb	r3, [r0, #8]
 8007174:	4053      	eors	r3, r2
 8007176:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007178:	7a4a      	ldrb	r2, [r1, #9]
 800717a:	7a43      	ldrb	r3, [r0, #9]
 800717c:	4053      	eors	r3, r2
 800717e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007180:	7a8a      	ldrb	r2, [r1, #10]
 8007182:	7a83      	ldrb	r3, [r0, #10]
 8007184:	4053      	eors	r3, r2
 8007186:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007188:	7aca      	ldrb	r2, [r1, #11]
 800718a:	7ac3      	ldrb	r3, [r0, #11]
 800718c:	4053      	eors	r3, r2
 800718e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007190:	7b0a      	ldrb	r2, [r1, #12]
 8007192:	7b03      	ldrb	r3, [r0, #12]
 8007194:	4053      	eors	r3, r2
 8007196:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007198:	7b4a      	ldrb	r2, [r1, #13]
 800719a:	7b43      	ldrb	r3, [r0, #13]
 800719c:	4053      	eors	r3, r2
 800719e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80071a0:	7b8a      	ldrb	r2, [r1, #14]
 80071a2:	7b83      	ldrb	r3, [r0, #14]
 80071a4:	4053      	eors	r3, r2
 80071a6:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80071a8:	7bca      	ldrb	r2, [r1, #15]
 80071aa:	7bc3      	ldrb	r3, [r0, #15]
 80071ac:	4053      	eors	r3, r2
 80071ae:	73c3      	strb	r3, [r0, #15]
#endif
}
 80071b0:	4770      	bx	lr

080071b2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80071b2:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80071b4:	780b      	ldrb	r3, [r1, #0]
 80071b6:	7814      	ldrb	r4, [r2, #0]
 80071b8:	4063      	eors	r3, r4
 80071ba:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80071bc:	7854      	ldrb	r4, [r2, #1]
 80071be:	784b      	ldrb	r3, [r1, #1]
 80071c0:	4063      	eors	r3, r4
 80071c2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80071c4:	7894      	ldrb	r4, [r2, #2]
 80071c6:	788b      	ldrb	r3, [r1, #2]
 80071c8:	4063      	eors	r3, r4
 80071ca:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80071cc:	78d4      	ldrb	r4, [r2, #3]
 80071ce:	78cb      	ldrb	r3, [r1, #3]
 80071d0:	4063      	eors	r3, r4
 80071d2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80071d4:	7914      	ldrb	r4, [r2, #4]
 80071d6:	790b      	ldrb	r3, [r1, #4]
 80071d8:	4063      	eors	r3, r4
 80071da:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80071dc:	7954      	ldrb	r4, [r2, #5]
 80071de:	794b      	ldrb	r3, [r1, #5]
 80071e0:	4063      	eors	r3, r4
 80071e2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80071e4:	7994      	ldrb	r4, [r2, #6]
 80071e6:	798b      	ldrb	r3, [r1, #6]
 80071e8:	4063      	eors	r3, r4
 80071ea:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80071ec:	79d4      	ldrb	r4, [r2, #7]
 80071ee:	79cb      	ldrb	r3, [r1, #7]
 80071f0:	4063      	eors	r3, r4
 80071f2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80071f4:	7a14      	ldrb	r4, [r2, #8]
 80071f6:	7a0b      	ldrb	r3, [r1, #8]
 80071f8:	4063      	eors	r3, r4
 80071fa:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80071fc:	7a4b      	ldrb	r3, [r1, #9]
 80071fe:	7a54      	ldrb	r4, [r2, #9]
 8007200:	4063      	eors	r3, r4
 8007202:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007204:	7a8b      	ldrb	r3, [r1, #10]
 8007206:	7a94      	ldrb	r4, [r2, #10]
 8007208:	4063      	eors	r3, r4
 800720a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800720c:	7ad4      	ldrb	r4, [r2, #11]
 800720e:	7acb      	ldrb	r3, [r1, #11]
 8007210:	4063      	eors	r3, r4
 8007212:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007214:	7b14      	ldrb	r4, [r2, #12]
 8007216:	7b0b      	ldrb	r3, [r1, #12]
 8007218:	4063      	eors	r3, r4
 800721a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800721c:	7b54      	ldrb	r4, [r2, #13]
 800721e:	7b4b      	ldrb	r3, [r1, #13]
 8007220:	4063      	eors	r3, r4
 8007222:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007224:	7b94      	ldrb	r4, [r2, #14]
 8007226:	7b8b      	ldrb	r3, [r1, #14]
 8007228:	4063      	eors	r3, r4
 800722a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800722c:	7bcb      	ldrb	r3, [r1, #15]
 800722e:	7bd2      	ldrb	r2, [r2, #15]
 8007230:	4053      	eors	r3, r2
 8007232:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007234:	bd10      	pop	{r4, pc}
	...

08007238 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007238:	000b      	movs	r3, r1
{
 800723a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723c:	3b10      	subs	r3, #16
 800723e:	b2db      	uxtb	r3, r3
 8007240:	000f      	movs	r7, r1
 8007242:	0014      	movs	r4, r2
 8007244:	b087      	sub	sp, #28
 8007246:	2b10      	cmp	r3, #16
 8007248:	d805      	bhi.n	8007256 <lorawan_aes_set_key+0x1e>
 800724a:	2201      	movs	r2, #1
 800724c:	409a      	lsls	r2, r3
 800724e:	0013      	movs	r3, r2
 8007250:	4a3b      	ldr	r2, [pc, #236]	; (8007340 <lorawan_aes_set_key+0x108>)
 8007252:	4213      	tst	r3, r2
 8007254:	d105      	bne.n	8007262 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007256:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007258:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 800725a:	34f0      	adds	r4, #240	; 0xf0
 800725c:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800725e:	b007      	add	sp, #28
 8007260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 8007262:	2300      	movs	r3, #0
 8007264:	429f      	cmp	r7, r3
 8007266:	d155      	bne.n	8007314 <lorawan_aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 8007268:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 800726a:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 800726c:	331c      	adds	r3, #28
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	b2db      	uxtb	r3, r3
 8007272:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8007274:	091b      	lsrs	r3, r3, #4
 8007276:	3b01      	subs	r3, #1
 8007278:	32f0      	adds	r2, #240	; 0xf0
 800727a:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800727c:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 800727e:	003d      	movs	r5, r7
            t0 = s_box(t0);
 8007280:	4e30      	ldr	r6, [pc, #192]	; (8007344 <lorawan_aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007282:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8007284:	1963      	adds	r3, r4, r5
 8007286:	1f1a      	subs	r2, r3, #4
 8007288:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 800728a:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 800728c:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 800728e:	1eda      	subs	r2, r3, #3
 8007290:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007292:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 8007294:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8007296:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8007298:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800729a:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 800729c:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800729e:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 80072a0:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 80072a2:	f7f8 ffdd 	bl	8000260 <__aeabi_uidivmod>
 80072a6:	b2c9      	uxtb	r1, r1
 80072a8:	2900      	cmp	r1, #0
 80072aa:	d137      	bne.n	800731c <lorawan_aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 80072ac:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 80072ae:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 80072b0:	5cf2      	ldrb	r2, [r6, r3]
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	405a      	eors	r2, r3
            t1 = s_box(t2);
 80072b6:	9b02      	ldr	r3, [sp, #8]
 80072b8:	5cf3      	ldrb	r3, [r6, r3]
 80072ba:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	5cf3      	ldrb	r3, [r6, r3]
 80072c0:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 80072c2:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 80072c4:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 80072c6:	5cf3      	ldrb	r3, [r6, r3]
 80072c8:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	434b      	muls	r3, r1
 80072d0:	9904      	ldr	r1, [sp, #16]
 80072d2:	0049      	lsls	r1, r1, #1
 80072d4:	404b      	eors	r3, r1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80072da:	1beb      	subs	r3, r5, r7
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	5ce2      	ldrb	r2, [r4, r3]
 80072e0:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80072e2:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80072e4:	4051      	eors	r1, r2
 80072e6:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80072e8:	785a      	ldrb	r2, [r3, #1]
 80072ea:	9801      	ldr	r0, [sp, #4]
 80072ec:	1c69      	adds	r1, r5, #1
 80072ee:	4050      	eors	r0, r2
 80072f0:	b2c9      	uxtb	r1, r1
 80072f2:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80072f4:	789a      	ldrb	r2, [r3, #2]
 80072f6:	9802      	ldr	r0, [sp, #8]
 80072f8:	1961      	adds	r1, r4, r5
 80072fa:	4050      	eors	r0, r2
 80072fc:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80072fe:	78db      	ldrb	r3, [r3, #3]
 8007300:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007302:	3504      	adds	r5, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007304:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007306:	9b05      	ldr	r3, [sp, #20]
 8007308:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800730a:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800730c:	42ab      	cmp	r3, r5
 800730e:	d8b9      	bhi.n	8007284 <lorawan_aes_set_key+0x4c>
    return 0;
 8007310:	2000      	movs	r0, #0
 8007312:	e7a4      	b.n	800725e <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 8007314:	5cc2      	ldrb	r2, [r0, r3]
 8007316:	54e2      	strb	r2, [r4, r3]
 8007318:	3301      	adds	r3, #1
 800731a:	e7a3      	b.n	8007264 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 800731c:	2f18      	cmp	r7, #24
 800731e:	d9dc      	bls.n	80072da <lorawan_aes_set_key+0xa2>
 8007320:	2910      	cmp	r1, #16
 8007322:	d1da      	bne.n	80072da <lorawan_aes_set_key+0xa2>
            t0 = s_box(t0);
 8007324:	9b00      	ldr	r3, [sp, #0]
 8007326:	5cf3      	ldrb	r3, [r6, r3]
 8007328:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	5cf3      	ldrb	r3, [r6, r3]
 800732e:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	5cf3      	ldrb	r3, [r6, r3]
 8007334:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	5cf3      	ldrb	r3, [r6, r3]
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	e7cd      	b.n	80072da <lorawan_aes_set_key+0xa2>
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	00010101 	.word	0x00010101
 8007344:	0800eb54 	.word	0x0800eb54

08007348 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	b099      	sub	sp, #100	; 0x64
 800734c:	9210      	str	r2, [sp, #64]	; 0x40
 800734e:	9113      	str	r1, [sp, #76]	; 0x4c
    if( ctx->rnd )
 8007350:	32f0      	adds	r2, #240	; 0xf0
 8007352:	7812      	ldrb	r2, [r2, #0]
{
 8007354:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8007356:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8007358:	2a00      	cmp	r2, #0
 800735a:	d072      	beq.n	8007442 <lorawan_aes_encrypt+0xfa>
        copy_and_key( s1, in, ctx->ksch );
 800735c:	0019      	movs	r1, r3
 800735e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007360:	a814      	add	r0, sp, #80	; 0x50
 8007362:	f7ff ff26 	bl	80071b2 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007366:	2301      	movs	r3, #1
 8007368:	9301      	str	r3, [sp, #4]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	011a      	lsls	r2, r3, #4
 800736e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007370:	189b      	adds	r3, r3, r2
 8007372:	9312      	str	r3, [sp, #72]	; 0x48
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007374:	ab14      	add	r3, sp, #80	; 0x50
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800737a:	ab14      	add	r3, sp, #80	; 0x50
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007380:	ab14      	add	r3, sp, #80	; 0x50
 8007382:	789b      	ldrb	r3, [r3, #2]
 8007384:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007386:	ab14      	add	r3, sp, #80	; 0x50
 8007388:	78db      	ldrb	r3, [r3, #3]
 800738a:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800738c:	ab14      	add	r3, sp, #80	; 0x50
 800738e:	791b      	ldrb	r3, [r3, #4]
 8007390:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007392:	ab14      	add	r3, sp, #80	; 0x50
 8007394:	795c      	ldrb	r4, [r3, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007396:	799b      	ldrb	r3, [r3, #6]
 8007398:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800739a:	ab14      	add	r3, sp, #80	; 0x50
 800739c:	79db      	ldrb	r3, [r3, #7]
 800739e:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80073a0:	ab14      	add	r3, sp, #80	; 0x50
 80073a2:	7a1b      	ldrb	r3, [r3, #8]
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80073a6:	ab14      	add	r3, sp, #80	; 0x50
 80073a8:	7a5b      	ldrb	r3, [r3, #9]
 80073aa:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80073ac:	ab14      	add	r3, sp, #80	; 0x50
 80073ae:	7a9f      	ldrb	r7, [r3, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80073b0:	7adb      	ldrb	r3, [r3, #11]
 80073b2:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80073b4:	ab14      	add	r3, sp, #80	; 0x50
 80073b6:	7b1b      	ldrb	r3, [r3, #12]
 80073b8:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80073ba:	ab14      	add	r3, sp, #80	; 0x50
 80073bc:	7b5b      	ldrb	r3, [r3, #13]
 80073be:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80073c0:	ab14      	add	r3, sp, #80	; 0x50
 80073c2:	7b9b      	ldrb	r3, [r3, #14]
 80073c4:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80073c6:	ab14      	add	r3, sp, #80	; 0x50
 80073c8:	7bdb      	ldrb	r3, [r3, #15]
        for( r = 1 ; r < ctx->rnd ; ++r )
 80073ca:	9901      	ldr	r1, [sp, #4]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80073cc:	930f      	str	r3, [sp, #60]	; 0x3c
        for( r = 1 ; r < ctx->rnd ; ++r )
 80073ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073d0:	33f0      	adds	r3, #240	; 0xf0
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	4b74      	ldr	r3, [pc, #464]	; (80075a8 <lorawan_aes_encrypt+0x260>)
 80073d6:	428a      	cmp	r2, r1
 80073d8:	d835      	bhi.n	8007446 <lorawan_aes_encrypt+0xfe>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80073da:	9a02      	ldr	r2, [sp, #8]
 80073dc:	a914      	add	r1, sp, #80	; 0x50
 80073de:	5c9a      	ldrb	r2, [r3, r2]
 80073e0:	700a      	strb	r2, [r1, #0]
 80073e2:	9a06      	ldr	r2, [sp, #24]
 80073e4:	5c9a      	ldrb	r2, [r3, r2]
 80073e6:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80073e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ea:	5c9a      	ldrb	r2, [r3, r2]
 80073ec:	720a      	strb	r2, [r1, #8]
 80073ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073f0:	5c9a      	ldrb	r2, [r3, r2]
 80073f2:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80073f4:	5d1a      	ldrb	r2, [r3, r4]
 80073f6:	704a      	strb	r2, [r1, #1]
 80073f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fa:	5c9a      	ldrb	r2, [r3, r2]
 80073fc:	714a      	strb	r2, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80073fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007400:	5c9a      	ldrb	r2, [r3, r2]
 8007402:	724a      	strb	r2, [r1, #9]
 8007404:	9a03      	ldr	r2, [sp, #12]
 8007406:	5c9a      	ldrb	r2, [r3, r2]
 8007408:	734a      	strb	r2, [r1, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800740a:	5dda      	ldrb	r2, [r3, r7]
 800740c:	708a      	strb	r2, [r1, #2]
 800740e:	9a04      	ldr	r2, [sp, #16]
 8007410:	5c9a      	ldrb	r2, [r3, r2]
 8007412:	728a      	strb	r2, [r1, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007416:	5c9a      	ldrb	r2, [r3, r2]
 8007418:	718a      	strb	r2, [r1, #6]
 800741a:	9a07      	ldr	r2, [sp, #28]
 800741c:	5c9a      	ldrb	r2, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800741e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007420:	738a      	strb	r2, [r1, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007424:	5c9a      	ldrb	r2, [r3, r2]
 8007426:	73ca      	strb	r2, [r1, #15]
 8007428:	9a08      	ldr	r2, [sp, #32]
 800742a:	5c9a      	ldrb	r2, [r3, r2]
 800742c:	72ca      	strb	r2, [r1, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800742e:	9a05      	ldr	r2, [sp, #20]
 8007430:	5c9a      	ldrb	r2, [r3, r2]
 8007432:	71ca      	strb	r2, [r1, #7]
 8007434:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007436:	5c9b      	ldrb	r3, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007438:	9a12      	ldr	r2, [sp, #72]	; 0x48
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800743a:	70cb      	strb	r3, [r1, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800743c:	f7ff feb9 	bl	80071b2 <copy_and_key>
    return 0;
 8007440:	2000      	movs	r0, #0
}
 8007442:	b019      	add	sp, #100	; 0x64
 8007444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007446:	5dda      	ldrb	r2, [r3, r7]
 8007448:	4958      	ldr	r1, [pc, #352]	; (80075ac <lorawan_aes_encrypt+0x264>)
 800744a:	9211      	str	r2, [sp, #68]	; 0x44
 800744c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800744e:	9d02      	ldr	r5, [sp, #8]
 8007450:	5c98      	ldrb	r0, [r3, r2]
 8007452:	4a57      	ldr	r2, [pc, #348]	; (80075b0 <lorawan_aes_encrypt+0x268>)
 8007454:	5d56      	ldrb	r6, [r2, r5]
 8007456:	5d0d      	ldrb	r5, [r1, r4]
 8007458:	406e      	eors	r6, r5
 800745a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800745c:	406e      	eors	r6, r5
 800745e:	4046      	eors	r6, r0
 8007460:	ad14      	add	r5, sp, #80	; 0x50
 8007462:	702e      	strb	r6, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007464:	9d02      	ldr	r5, [sp, #8]
 8007466:	5d5e      	ldrb	r6, [r3, r5]
 8007468:	5d15      	ldrb	r5, [r2, r4]
 800746a:	4070      	eors	r0, r6
 800746c:	4068      	eors	r0, r5
 800746e:	5dcd      	ldrb	r5, [r1, r7]
 8007470:	4068      	eors	r0, r5
 8007472:	ad14      	add	r5, sp, #80	; 0x50
 8007474:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007476:	5d18      	ldrb	r0, [r3, r4]
 8007478:	5dd4      	ldrb	r4, [r2, r7]
 800747a:	4046      	eors	r6, r0
 800747c:	4066      	eors	r6, r4
 800747e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007480:	5d0c      	ldrb	r4, [r1, r4]
 8007482:	4066      	eors	r6, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007484:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007486:	70ae      	strb	r6, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007488:	4060      	eors	r0, r4
 800748a:	9c02      	ldr	r4, [sp, #8]
 800748c:	5d0f      	ldrb	r7, [r1, r4]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800748e:	9c06      	ldr	r4, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007490:	4047      	eors	r7, r0
 8007492:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007494:	5c10      	ldrb	r0, [r2, r0]
 8007496:	4078      	eors	r0, r7
 8007498:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800749a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800749c:	5c1d      	ldrb	r5, [r3, r0]
 800749e:	9805      	ldr	r0, [sp, #20]
 80074a0:	5c18      	ldrb	r0, [r3, r0]
 80074a2:	5d14      	ldrb	r4, [r2, r4]
 80074a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074a6:	5d8e      	ldrb	r6, [r1, r6]
 80074a8:	4074      	eors	r4, r6
 80074aa:	406c      	eors	r4, r5
 80074ac:	4044      	eors	r4, r0
 80074ae:	ae14      	add	r6, sp, #80	; 0x50
 80074b0:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80074b2:	9c06      	ldr	r4, [sp, #24]
 80074b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074b6:	5d1c      	ldrb	r4, [r3, r4]
 80074b8:	5d96      	ldrb	r6, [r2, r6]
 80074ba:	4060      	eors	r0, r4
 80074bc:	4070      	eors	r0, r6
 80074be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80074c0:	5d8e      	ldrb	r6, [r1, r6]
 80074c2:	4070      	eors	r0, r6
 80074c4:	ae14      	add	r6, sp, #80	; 0x50
 80074c6:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80074c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80074cc:	5c18      	ldrb	r0, [r3, r0]
 80074ce:	5d96      	ldrb	r6, [r2, r6]
 80074d0:	4044      	eors	r4, r0
 80074d2:	4074      	eors	r4, r6
 80074d4:	9e05      	ldr	r6, [sp, #20]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074d6:	4068      	eors	r0, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80074d8:	5d8e      	ldrb	r6, [r1, r6]
 80074da:	4074      	eors	r4, r6
 80074dc:	ae14      	add	r6, sp, #80	; 0x50
 80074de:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074e0:	9c06      	ldr	r4, [sp, #24]
 80074e2:	5d0d      	ldrb	r5, [r1, r4]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80074e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074e6:	4045      	eors	r5, r0
 80074e8:	9805      	ldr	r0, [sp, #20]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80074ea:	5d14      	ldrb	r4, [r2, r4]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074ec:	5c10      	ldrb	r0, [r2, r0]
 80074ee:	4068      	eors	r0, r5
 80074f0:	71f0      	strb	r0, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80074f2:	9804      	ldr	r0, [sp, #16]
 80074f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80074f6:	5c1d      	ldrb	r5, [r3, r0]
 80074f8:	5d8e      	ldrb	r6, [r1, r6]
 80074fa:	9808      	ldr	r0, [sp, #32]
 80074fc:	4074      	eors	r4, r6
 80074fe:	5c18      	ldrb	r0, [r3, r0]
 8007500:	406c      	eors	r4, r5
 8007502:	4044      	eors	r4, r0
 8007504:	ae14      	add	r6, sp, #80	; 0x50
 8007506:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007508:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800750a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800750c:	5d1c      	ldrb	r4, [r3, r4]
 800750e:	5d96      	ldrb	r6, [r2, r6]
 8007510:	4060      	eors	r0, r4
 8007512:	4070      	eors	r0, r6
 8007514:	9e04      	ldr	r6, [sp, #16]
 8007516:	5d8e      	ldrb	r6, [r1, r6]
 8007518:	4070      	eors	r0, r6
 800751a:	ae14      	add	r6, sp, #80	; 0x50
 800751c:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800751e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007520:	9e04      	ldr	r6, [sp, #16]
 8007522:	5c18      	ldrb	r0, [r3, r0]
 8007524:	5d96      	ldrb	r6, [r2, r6]
 8007526:	4044      	eors	r4, r0
 8007528:	4074      	eors	r4, r6
 800752a:	9e08      	ldr	r6, [sp, #32]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800752c:	4068      	eors	r0, r5
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800752e:	5d8e      	ldrb	r6, [r1, r6]
 8007530:	4074      	eors	r4, r6
 8007532:	ae14      	add	r6, sp, #80	; 0x50
 8007534:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007536:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007538:	5d0d      	ldrb	r5, [r1, r4]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800753a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800753c:	4045      	eors	r5, r0
 800753e:	9808      	ldr	r0, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007540:	5d14      	ldrb	r4, [r2, r4]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007542:	5c10      	ldrb	r0, [r2, r0]
 8007544:	4068      	eors	r0, r5
 8007546:	72f0      	strb	r0, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007548:	9807      	ldr	r0, [sp, #28]
 800754a:	9e03      	ldr	r6, [sp, #12]
 800754c:	5c1d      	ldrb	r5, [r3, r0]
 800754e:	5d8e      	ldrb	r6, [r1, r6]
 8007550:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007552:	4074      	eors	r4, r6
 8007554:	5c18      	ldrb	r0, [r3, r0]
 8007556:	406c      	eors	r4, r5
 8007558:	4044      	eors	r4, r0
 800755a:	ae14      	add	r6, sp, #80	; 0x50
 800755c:	7334      	strb	r4, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800755e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007560:	9e03      	ldr	r6, [sp, #12]
 8007562:	5d1c      	ldrb	r4, [r3, r4]
 8007564:	5d96      	ldrb	r6, [r2, r6]
 8007566:	4060      	eors	r0, r4
 8007568:	4070      	eors	r0, r6
 800756a:	9e07      	ldr	r6, [sp, #28]
 800756c:	5d8e      	ldrb	r6, [r1, r6]
 800756e:	4070      	eors	r0, r6
 8007570:	ae14      	add	r6, sp, #80	; 0x50
 8007572:	7370      	strb	r0, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007574:	9803      	ldr	r0, [sp, #12]
 8007576:	5c1b      	ldrb	r3, [r3, r0]
 8007578:	9807      	ldr	r0, [sp, #28]
 800757a:	405c      	eors	r4, r3
 800757c:	5c10      	ldrb	r0, [r2, r0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800757e:	406b      	eors	r3, r5
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007580:	4044      	eors	r4, r0
 8007582:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007584:	5c08      	ldrb	r0, [r1, r0]
 8007586:	4044      	eors	r4, r0
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007588:	980c      	ldr	r0, [sp, #48]	; 0x30
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800758a:	73b4      	strb	r4, [r6, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800758c:	5c0d      	ldrb	r5, [r1, r0]
 800758e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007590:	406b      	eors	r3, r5
 8007592:	5c55      	ldrb	r5, [r2, r1]
    xor_block(d, k);
 8007594:	0030      	movs	r0, r6
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007596:	406b      	eors	r3, r5
 8007598:	73f3      	strb	r3, [r6, #15]
    xor_block(d, k);
 800759a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800759c:	f7ff fdc8 	bl	8007130 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e6df      	b.n	8007368 <lorawan_aes_encrypt+0x20>
 80075a8:	0800eb54 	.word	0x0800eb54
 80075ac:	0800ea54 	.word	0x0800ea54
 80075b0:	0800e954 	.word	0x0800e954

080075b4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 80075b4:	b530      	push	{r4, r5, lr}
 80075b6:	4c09      	ldr	r4, [pc, #36]	; (80075dc <GetKeyByID+0x28>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	0025      	movs	r5, r4
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 80075bc:	7c23      	ldrb	r3, [r4, #16]
 80075be:	4283      	cmp	r3, r0
 80075c0:	d106      	bne.n	80075d0 <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 80075c2:	2311      	movs	r3, #17
      return SECURE_ELEMENT_SUCCESS;
 80075c4:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 80075c6:	4353      	muls	r3, r2
 80075c8:	3310      	adds	r3, #16
 80075ca:	18eb      	adds	r3, r5, r3
 80075cc:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 80075ce:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80075d0:	3201      	adds	r2, #1
 80075d2:	3411      	adds	r4, #17
 80075d4:	2a0a      	cmp	r2, #10
 80075d6:	d1f1      	bne.n	80075bc <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80075d8:	2003      	movs	r0, #3
 80075da:	e7f8      	b.n	80075ce <GetKeyByID+0x1a>
 80075dc:	20000098 	.word	0x20000098

080075e0 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 80075e0:	4770      	bx	lr

080075e2 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 80075e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e4:	b0cf      	sub	sp, #316	; 0x13c
 80075e6:	0006      	movs	r6, r0
 80075e8:	000d      	movs	r5, r1
 80075ea:	0017      	movs	r7, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80075ec:	2402      	movs	r4, #2
{
 80075ee:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 80075f0:	2900      	cmp	r1, #0
 80075f2:	d023      	beq.n	800763c <ComputeCmac+0x5a>
 80075f4:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d020      	beq.n	800763c <ComputeCmac+0x5a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 80075fa:	a808      	add	r0, sp, #32
 80075fc:	f7ff fc68 	bl	8006ed0 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 8007600:	9801      	ldr	r0, [sp, #4]
 8007602:	a903      	add	r1, sp, #12
 8007604:	f7ff ffd6 	bl	80075b4 <GetKeyByID>
 8007608:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 800760a:	d117      	bne.n	800763c <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	a808      	add	r0, sp, #32
 8007610:	1c59      	adds	r1, r3, #1
 8007612:	f7ff fc6d 	bl	8006ef0 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 8007616:	2e00      	cmp	r6, #0
 8007618:	d004      	beq.n	8007624 <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800761a:	2210      	movs	r2, #16
 800761c:	0031      	movs	r1, r6
 800761e:	a808      	add	r0, sp, #32
 8007620:	f7ff fc6d 	bl	8006efe <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 8007624:	003a      	movs	r2, r7
 8007626:	0029      	movs	r1, r5
 8007628:	a808      	add	r0, sp, #32
 800762a:	f7ff fc68 	bl	8006efe <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800762e:	a908      	add	r1, sp, #32
 8007630:	a804      	add	r0, sp, #16
 8007632:	f7ff fcd4 	bl	8006fde <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 8007636:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8007638:	9a04      	ldr	r2, [sp, #16]
 800763a:	601a      	str	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 800763c:	0020      	movs	r0, r4
 800763e:	b04f      	add	sp, #316	; 0x13c
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007644 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 8007644:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8007646:	22aa      	movs	r2, #170	; 0xaa
{
 8007648:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800764a:	4968      	ldr	r1, [pc, #416]	; (80077ec <SecureElementInit+0x1a8>)
{
 800764c:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800764e:	4868      	ldr	r0, [pc, #416]	; (80077f0 <SecureElementInit+0x1ac>)
 8007650:	f005 f992 	bl	800c978 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 8007654:	a911      	add	r1, sp, #68	; 0x44
 8007656:	2000      	movs	r0, #0
 8007658:	f7ff ffac 	bl	80075b4 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800765c:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 800765e:	0005      	movs	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8007660:	0011      	movs	r1, r2
 8007662:	2002      	movs	r0, #2
 8007664:	4b63      	ldr	r3, [pc, #396]	; (80077f4 <SecureElementInit+0x1b0>)
 8007666:	f006 febd 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800766a:	2d00      	cmp	r5, #0
 800766c:	d126      	bne.n	80076bc <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 800766e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007670:	0029      	movs	r1, r5
 8007672:	7c1a      	ldrb	r2, [r3, #16]
 8007674:	2002      	movs	r0, #2
 8007676:	920f      	str	r2, [sp, #60]	; 0x3c
 8007678:	7bda      	ldrb	r2, [r3, #15]
 800767a:	920e      	str	r2, [sp, #56]	; 0x38
 800767c:	7b9a      	ldrb	r2, [r3, #14]
 800767e:	920d      	str	r2, [sp, #52]	; 0x34
 8007680:	7b5a      	ldrb	r2, [r3, #13]
 8007682:	920c      	str	r2, [sp, #48]	; 0x30
 8007684:	7b1a      	ldrb	r2, [r3, #12]
 8007686:	920b      	str	r2, [sp, #44]	; 0x2c
 8007688:	7ada      	ldrb	r2, [r3, #11]
 800768a:	920a      	str	r2, [sp, #40]	; 0x28
 800768c:	7a9a      	ldrb	r2, [r3, #10]
 800768e:	9209      	str	r2, [sp, #36]	; 0x24
 8007690:	7a5a      	ldrb	r2, [r3, #9]
 8007692:	9208      	str	r2, [sp, #32]
 8007694:	7a1a      	ldrb	r2, [r3, #8]
 8007696:	9207      	str	r2, [sp, #28]
 8007698:	79da      	ldrb	r2, [r3, #7]
 800769a:	9206      	str	r2, [sp, #24]
 800769c:	799a      	ldrb	r2, [r3, #6]
 800769e:	9205      	str	r2, [sp, #20]
 80076a0:	795a      	ldrb	r2, [r3, #5]
 80076a2:	9204      	str	r2, [sp, #16]
 80076a4:	791a      	ldrb	r2, [r3, #4]
 80076a6:	9203      	str	r2, [sp, #12]
 80076a8:	78da      	ldrb	r2, [r3, #3]
 80076aa:	9202      	str	r2, [sp, #8]
 80076ac:	789a      	ldrb	r2, [r3, #2]
 80076ae:	9201      	str	r2, [sp, #4]
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	002a      	movs	r2, r5
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	4b50      	ldr	r3, [pc, #320]	; (80077f8 <SecureElementInit+0x1b4>)
 80076b8:	f006 fe94 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 80076bc:	a911      	add	r1, sp, #68	; 0x44
 80076be:	2001      	movs	r0, #1
 80076c0:	f7ff ff78 	bl	80075b4 <GetKeyByID>
 80076c4:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 80076c6:	d125      	bne.n	8007714 <SecureElementInit+0xd0>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 80076c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ca:	7c1a      	ldrb	r2, [r3, #16]
 80076cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80076ce:	7bda      	ldrb	r2, [r3, #15]
 80076d0:	920e      	str	r2, [sp, #56]	; 0x38
 80076d2:	7b9a      	ldrb	r2, [r3, #14]
 80076d4:	920d      	str	r2, [sp, #52]	; 0x34
 80076d6:	7b5a      	ldrb	r2, [r3, #13]
 80076d8:	920c      	str	r2, [sp, #48]	; 0x30
 80076da:	7b1a      	ldrb	r2, [r3, #12]
 80076dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80076de:	7ada      	ldrb	r2, [r3, #11]
 80076e0:	920a      	str	r2, [sp, #40]	; 0x28
 80076e2:	7a9a      	ldrb	r2, [r3, #10]
 80076e4:	9209      	str	r2, [sp, #36]	; 0x24
 80076e6:	7a5a      	ldrb	r2, [r3, #9]
 80076e8:	9208      	str	r2, [sp, #32]
 80076ea:	7a1a      	ldrb	r2, [r3, #8]
 80076ec:	9207      	str	r2, [sp, #28]
 80076ee:	79da      	ldrb	r2, [r3, #7]
 80076f0:	9206      	str	r2, [sp, #24]
 80076f2:	799a      	ldrb	r2, [r3, #6]
 80076f4:	9205      	str	r2, [sp, #20]
 80076f6:	795a      	ldrb	r2, [r3, #5]
 80076f8:	9204      	str	r2, [sp, #16]
 80076fa:	791a      	ldrb	r2, [r3, #4]
 80076fc:	9203      	str	r2, [sp, #12]
 80076fe:	78da      	ldrb	r2, [r3, #3]
 8007700:	9202      	str	r2, [sp, #8]
 8007702:	789a      	ldrb	r2, [r3, #2]
 8007704:	9201      	str	r2, [sp, #4]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	0002      	movs	r2, r0
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	2002      	movs	r0, #2
 800770e:	4b3b      	ldr	r3, [pc, #236]	; (80077fc <SecureElementInit+0x1b8>)
 8007710:	f006 fe68 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8007714:	2200      	movs	r2, #0
 8007716:	4b3a      	ldr	r3, [pc, #232]	; (8007800 <SecureElementInit+0x1bc>)
 8007718:	0011      	movs	r1, r2
 800771a:	2002      	movs	r0, #2
 800771c:	f006 fe62 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 8007720:	a911      	add	r1, sp, #68	; 0x44
 8007722:	2003      	movs	r0, #3
 8007724:	f7ff ff46 	bl	80075b4 <GetKeyByID>
 8007728:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 800772a:	d125      	bne.n	8007778 <SecureElementInit+0x134>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 800772c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800772e:	7c1a      	ldrb	r2, [r3, #16]
 8007730:	920f      	str	r2, [sp, #60]	; 0x3c
 8007732:	7bda      	ldrb	r2, [r3, #15]
 8007734:	920e      	str	r2, [sp, #56]	; 0x38
 8007736:	7b9a      	ldrb	r2, [r3, #14]
 8007738:	920d      	str	r2, [sp, #52]	; 0x34
 800773a:	7b5a      	ldrb	r2, [r3, #13]
 800773c:	920c      	str	r2, [sp, #48]	; 0x30
 800773e:	7b1a      	ldrb	r2, [r3, #12]
 8007740:	920b      	str	r2, [sp, #44]	; 0x2c
 8007742:	7ada      	ldrb	r2, [r3, #11]
 8007744:	920a      	str	r2, [sp, #40]	; 0x28
 8007746:	7a9a      	ldrb	r2, [r3, #10]
 8007748:	9209      	str	r2, [sp, #36]	; 0x24
 800774a:	7a5a      	ldrb	r2, [r3, #9]
 800774c:	9208      	str	r2, [sp, #32]
 800774e:	7a1a      	ldrb	r2, [r3, #8]
 8007750:	9207      	str	r2, [sp, #28]
 8007752:	79da      	ldrb	r2, [r3, #7]
 8007754:	9206      	str	r2, [sp, #24]
 8007756:	799a      	ldrb	r2, [r3, #6]
 8007758:	9205      	str	r2, [sp, #20]
 800775a:	795a      	ldrb	r2, [r3, #5]
 800775c:	9204      	str	r2, [sp, #16]
 800775e:	791a      	ldrb	r2, [r3, #4]
 8007760:	9203      	str	r2, [sp, #12]
 8007762:	78da      	ldrb	r2, [r3, #3]
 8007764:	9202      	str	r2, [sp, #8]
 8007766:	789a      	ldrb	r2, [r3, #2]
 8007768:	9201      	str	r2, [sp, #4]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	0002      	movs	r2, r0
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2002      	movs	r0, #2
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <SecureElementInit+0x1c0>)
 8007774:	f006 fe36 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 8007778:	a911      	add	r1, sp, #68	; 0x44
 800777a:	2002      	movs	r0, #2
 800777c:	f7ff ff1a 	bl	80075b4 <GetKeyByID>
 8007780:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8007782:	d125      	bne.n	80077d0 <SecureElementInit+0x18c>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 8007784:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007786:	7c1a      	ldrb	r2, [r3, #16]
 8007788:	920f      	str	r2, [sp, #60]	; 0x3c
 800778a:	7bda      	ldrb	r2, [r3, #15]
 800778c:	920e      	str	r2, [sp, #56]	; 0x38
 800778e:	7b9a      	ldrb	r2, [r3, #14]
 8007790:	920d      	str	r2, [sp, #52]	; 0x34
 8007792:	7b5a      	ldrb	r2, [r3, #13]
 8007794:	920c      	str	r2, [sp, #48]	; 0x30
 8007796:	7b1a      	ldrb	r2, [r3, #12]
 8007798:	920b      	str	r2, [sp, #44]	; 0x2c
 800779a:	7ada      	ldrb	r2, [r3, #11]
 800779c:	920a      	str	r2, [sp, #40]	; 0x28
 800779e:	7a9a      	ldrb	r2, [r3, #10]
 80077a0:	9209      	str	r2, [sp, #36]	; 0x24
 80077a2:	7a5a      	ldrb	r2, [r3, #9]
 80077a4:	9208      	str	r2, [sp, #32]
 80077a6:	7a1a      	ldrb	r2, [r3, #8]
 80077a8:	9207      	str	r2, [sp, #28]
 80077aa:	79da      	ldrb	r2, [r3, #7]
 80077ac:	9206      	str	r2, [sp, #24]
 80077ae:	799a      	ldrb	r2, [r3, #6]
 80077b0:	9205      	str	r2, [sp, #20]
 80077b2:	795a      	ldrb	r2, [r3, #5]
 80077b4:	9204      	str	r2, [sp, #16]
 80077b6:	791a      	ldrb	r2, [r3, #4]
 80077b8:	9203      	str	r2, [sp, #12]
 80077ba:	78da      	ldrb	r2, [r3, #3]
 80077bc:	9202      	str	r2, [sp, #8]
 80077be:	789a      	ldrb	r2, [r3, #2]
 80077c0:	9201      	str	r2, [sp, #4]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	0002      	movs	r2, r0
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	2002      	movs	r0, #2
 80077ca:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <SecureElementInit+0x1c4>)
 80077cc:	f006 fe0a 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 80077d0:	2c00      	cmp	r4, #0
 80077d2:	d100      	bne.n	80077d6 <SecureElementInit+0x192>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 80077d4:	4c0d      	ldr	r4, [pc, #52]	; (800780c <SecureElementInit+0x1c8>)
 80077d6:	4d0e      	ldr	r5, [pc, #56]	; (8007810 <SecureElementInit+0x1cc>)
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 80077d8:	480e      	ldr	r0, [pc, #56]	; (8007814 <SecureElementInit+0x1d0>)
 80077da:	602c      	str	r4, [r5, #0]
 80077dc:	f7fb fa36 	bl	8002c4c <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
}
 80077e4:	2000      	movs	r0, #0
 80077e6:	b013      	add	sp, #76	; 0x4c
 80077e8:	bd30      	pop	{r4, r5, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	0800edca 	.word	0x0800edca
 80077f0:	200000a8 	.word	0x200000a8
 80077f4:	0800ec54 	.word	0x0800ec54
 80077f8:	0800ec69 	.word	0x0800ec69
 80077fc:	0800ecbc 	.word	0x0800ecbc
 8007800:	0800ed0f 	.word	0x0800ed0f
 8007804:	0800ed24 	.word	0x0800ed24
 8007808:	0800ed77 	.word	0x0800ed77
 800780c:	080075e1 	.word	0x080075e1
 8007810:	2000065c 	.word	0x2000065c
 8007814:	20000098 	.word	0x20000098

08007818 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 8007818:	0001      	movs	r1, r0
 800781a:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800781c:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 800781e:	2900      	cmp	r1, #0
 8007820:	d004      	beq.n	800782c <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 8007822:	4803      	ldr	r0, [pc, #12]	; (8007830 <SecureElementRestoreNvmCtx+0x18>)
 8007824:	22ba      	movs	r2, #186	; 0xba
 8007826:	f005 f8a7 	bl	800c978 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800782a:	2000      	movs	r0, #0
  }
}
 800782c:	bd10      	pop	{r4, pc}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	20000098 	.word	0x20000098

08007834 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 8007834:	23ba      	movs	r3, #186	; 0xba
 8007836:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 8007838:	4800      	ldr	r0, [pc, #0]	; (800783c <SecureElementGetNvmCtx+0x8>)
 800783a:	4770      	bx	lr
 800783c:	20000098 	.word	0x20000098

08007840 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 8007840:	b513      	push	{r0, r1, r4, lr}
 8007842:	0004      	movs	r4, r0
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007844:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 8007846:	2b7e      	cmp	r3, #126	; 0x7e
 8007848:	d804      	bhi.n	8007854 <SecureElementComputeAesCmac+0x14>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800784a:	9804      	ldr	r0, [sp, #16]
 800784c:	9000      	str	r0, [sp, #0]
 800784e:	0020      	movs	r0, r4
 8007850:	f7ff fec7 	bl	80075e2 <ComputeCmac>
}
 8007854:	bd16      	pop	{r1, r2, r4, pc}

08007856 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 8007856:	b530      	push	{r4, r5, lr}
 8007858:	0004      	movs	r4, r0
 800785a:	0015      	movs	r5, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800785c:	2002      	movs	r0, #2
{
 800785e:	b085      	sub	sp, #20
  if (buffer == NULL)
 8007860:	2c00      	cmp	r4, #0
 8007862:	d00e      	beq.n	8007882 <SecureElementVerifyAesCmac+0x2c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 8007864:	2000      	movs	r0, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8007866:	aa03      	add	r2, sp, #12
 8007868:	9200      	str	r2, [sp, #0]
 800786a:	000a      	movs	r2, r1
 800786c:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 800786e:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8007870:	f7ff feb7 	bl	80075e2 <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 8007874:	2800      	cmp	r0, #0
 8007876:	d104      	bne.n	8007882 <SecureElementVerifyAesCmac+0x2c>
  {
    return retval;
  }

  if (expectedCmac != compCmac)
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	1b58      	subs	r0, r3, r5
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 8007880:	b2c0      	uxtb	r0, r0
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 8007882:	b005      	add	sp, #20
 8007884:	bd30      	pop	{r4, r5, pc}

08007886 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 8007886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007888:	b0c1      	sub	sp, #260	; 0x104
 800788a:	000e      	movs	r6, r1
 800788c:	0015      	movs	r5, r2
 800788e:	001f      	movs	r7, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007890:	2402      	movs	r4, #2
{
 8007892:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 8007894:	2800      	cmp	r0, #0
 8007896:	d01b      	beq.n	80078d0 <SecureElementAesEncrypt+0x4a>
 8007898:	2f00      	cmp	r7, #0
 800789a:	d019      	beq.n	80078d0 <SecureElementAesEncrypt+0x4a>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800789c:	230f      	movs	r3, #15
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800789e:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 80078a0:	4019      	ands	r1, r3
 80078a2:	421e      	tst	r6, r3
 80078a4:	d114      	bne.n	80078d0 <SecureElementAesEncrypt+0x4a>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 80078a6:	22f0      	movs	r2, #240	; 0xf0
 80078a8:	a803      	add	r0, sp, #12
 80078aa:	f005 f87a 	bl	800c9a2 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 80078ae:	0028      	movs	r0, r5
 80078b0:	a902      	add	r1, sp, #8
 80078b2:	f7ff fe7f 	bl	80075b4 <GetKeyByID>
 80078b6:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 80078b8:	d10a      	bne.n	80078d0 <SecureElementAesEncrypt+0x4a>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80078ba:	9b02      	ldr	r3, [sp, #8]
 80078bc:	2110      	movs	r1, #16
 80078be:	1c58      	adds	r0, r3, #1
 80078c0:	aa03      	add	r2, sp, #12
 80078c2:	f7ff fcb9 	bl	8007238 <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 80078c6:	0035      	movs	r5, r6
 80078c8:	1b70      	subs	r0, r6, r5
 80078ca:	b2c0      	uxtb	r0, r0
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	d102      	bne.n	80078d6 <SecureElementAesEncrypt+0x50>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80078d0:	0020      	movs	r0, r4
 80078d2:	b041      	add	sp, #260	; 0x104
 80078d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	1839      	adds	r1, r7, r0
 80078da:	aa03      	add	r2, sp, #12
 80078dc:	1818      	adds	r0, r3, r0
      size = size - 16;
 80078de:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80078e0:	f7ff fd32 	bl	8007348 <lorawan_aes_encrypt>
      size = size - 16;
 80078e4:	b2ad      	uxth	r5, r5
 80078e6:	e7ef      	b.n	80078c8 <SecureElementAesEncrypt+0x42>

080078e8 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 80078e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078ea:	4a19      	ldr	r2, [pc, #100]	; (8007950 <SecureElementSetKey.part.0+0x68>)
 80078ec:	000c      	movs	r4, r1
 80078ee:	2300      	movs	r3, #0
 80078f0:	0015      	movs	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 80078f2:	7c11      	ldrb	r1, [r2, #16]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4281      	cmp	r1, r0
 80078f8:	d125      	bne.n	8007946 <SecureElementSetKey.part.0+0x5e>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 80078fa:	2211      	movs	r2, #17
 80078fc:	4353      	muls	r3, r2
 80078fe:	4e15      	ldr	r6, [pc, #84]	; (8007954 <SecureElementSetKey.part.0+0x6c>)
 8007900:	18ed      	adds	r5, r5, r3
      if (keyID == MC_KEY_0)
 8007902:	2880      	cmp	r0, #128	; 0x80
 8007904:	d116      	bne.n	8007934 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 8007906:	2100      	movs	r1, #0
 8007908:	3a05      	subs	r2, #5
 800790a:	a801      	add	r0, sp, #4
 800790c:	9100      	str	r1, [sp, #0]
 800790e:	f006 fe46 	bl	800e59e <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8007912:	466b      	mov	r3, sp
 8007914:	227f      	movs	r2, #127	; 0x7f
 8007916:	2110      	movs	r1, #16
 8007918:	0020      	movs	r0, r4
 800791a:	f7ff ffb4 	bl	8007886 <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800791e:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8007920:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8007922:	4669      	mov	r1, sp
 8007924:	0028      	movs	r0, r5
 8007926:	f005 f827 	bl	800c978 <memcpy1>
        SeNvmCtxChanged();
 800792a:	6833      	ldr	r3, [r6, #0]
 800792c:	4798      	blx	r3
}
 800792e:	0020      	movs	r0, r4
 8007930:	b004      	add	sp, #16
 8007932:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8007934:	0021      	movs	r1, r4
 8007936:	2210      	movs	r2, #16
 8007938:	0028      	movs	r0, r5
 800793a:	f005 f81d 	bl	800c978 <memcpy1>
        SeNvmCtxChanged();
 800793e:	6833      	ldr	r3, [r6, #0]
 8007940:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 8007942:	2400      	movs	r4, #0
 8007944:	e7f3      	b.n	800792e <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8007946:	3211      	adds	r2, #17
 8007948:	2b0a      	cmp	r3, #10
 800794a:	d1d2      	bne.n	80078f2 <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800794c:	2403      	movs	r4, #3
 800794e:	e7ee      	b.n	800792e <SecureElementSetKey.part.0+0x46>
 8007950:	20000098 	.word	0x20000098
 8007954:	2000065c 	.word	0x2000065c

08007958 <SecureElementSetKey>:
{
 8007958:	0003      	movs	r3, r0
 800795a:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 800795c:	2002      	movs	r0, #2
  if (key == NULL)
 800795e:	2900      	cmp	r1, #0
 8007960:	d002      	beq.n	8007968 <SecureElementSetKey+0x10>
 8007962:	0018      	movs	r0, r3
 8007964:	f7ff ffc0 	bl	80078e8 <SecureElementSetKey.part.0>
}
 8007968:	bd10      	pop	{r4, pc}

0800796a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800796a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800796c:	000d      	movs	r5, r1
 800796e:	0016      	movs	r6, r2
 8007970:	001c      	movs	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8007972:	2002      	movs	r0, #2
  if (input == NULL)
 8007974:	2900      	cmp	r1, #0
 8007976:	d016      	beq.n	80079a6 <SecureElementDeriveAndStoreKey+0x3c>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 8007978:	2b7f      	cmp	r3, #127	; 0x7f
 800797a:	d102      	bne.n	8007982 <SecureElementDeriveAndStoreKey+0x18>
  {
    if (rootKeyID != MC_ROOT_KEY)
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800797c:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 800797e:	2a04      	cmp	r2, #4
 8007980:	d111      	bne.n	80079a6 <SecureElementDeriveAndStoreKey+0x3c>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 8007982:	2100      	movs	r1, #0
 8007984:	220c      	movs	r2, #12
 8007986:	a801      	add	r0, sp, #4
 8007988:	9100      	str	r1, [sp, #0]
 800798a:	f006 fe08 	bl	800e59e <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800798e:	466b      	mov	r3, sp
 8007990:	0032      	movs	r2, r6
 8007992:	2110      	movs	r1, #16
 8007994:	0028      	movs	r0, r5
 8007996:	f7ff ff76 	bl	8007886 <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 800799a:	2800      	cmp	r0, #0
 800799c:	d103      	bne.n	80079a6 <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 800799e:	4669      	mov	r1, sp
 80079a0:	0020      	movs	r0, r4
 80079a2:	f7ff ffa1 	bl	80078e8 <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80079a6:	b004      	add	sp, #16
 80079a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080079ac <SecureElementRandomNumber>:

  return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 80079ac:	b513      	push	{r0, r1, r4, lr}
 80079ae:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80079b0:	2002      	movs	r0, #2
  if (randomNum == NULL)
 80079b2:	2c00      	cmp	r4, #0
 80079b4:	d005      	beq.n	80079c2 <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 80079b6:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <SecureElementRandomNumber+0x18>)
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	4798      	blx	r3
 80079be:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 80079c0:	2000      	movs	r0, #0
}
 80079c2:	bd16      	pop	{r1, r2, r4, pc}
 80079c4:	0800f22c 	.word	0x0800f22c

080079c8 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 80079c8:	0001      	movs	r1, r0
 80079ca:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80079cc:	2002      	movs	r0, #2
  if (devEui == NULL)
 80079ce:	2900      	cmp	r1, #0
 80079d0:	d007      	beq.n	80079e2 <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 80079d2:	4804      	ldr	r0, [pc, #16]	; (80079e4 <SecureElementSetDevEui+0x1c>)
 80079d4:	2208      	movs	r2, #8
 80079d6:	f004 ffcf 	bl	800c978 <memcpy1>
  SeNvmCtxChanged();
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <SecureElementSetDevEui+0x20>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 80079e0:	2000      	movs	r0, #0
}
 80079e2:	bd10      	pop	{r4, pc}
 80079e4:	20000098 	.word	0x20000098
 80079e8:	2000065c 	.word	0x2000065c

080079ec <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 80079ec:	4800      	ldr	r0, [pc, #0]	; (80079f0 <SecureElementGetDevEui+0x4>)
 80079ee:	4770      	bx	lr
 80079f0:	20000098 	.word	0x20000098

080079f4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 80079f4:	0001      	movs	r1, r0
 80079f6:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80079f8:	2002      	movs	r0, #2
  if (joinEui == NULL)
 80079fa:	2900      	cmp	r1, #0
 80079fc:	d007      	beq.n	8007a0e <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 80079fe:	4804      	ldr	r0, [pc, #16]	; (8007a10 <SecureElementSetJoinEui+0x1c>)
 8007a00:	2208      	movs	r2, #8
 8007a02:	f004 ffb9 	bl	800c978 <memcpy1>
  SeNvmCtxChanged();
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <SecureElementSetJoinEui+0x20>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8007a0c:	2000      	movs	r0, #0
}
 8007a0e:	bd10      	pop	{r4, pc}
 8007a10:	200000a0 	.word	0x200000a0
 8007a14:	2000065c 	.word	0x2000065c

08007a18 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 8007a18:	4800      	ldr	r0, [pc, #0]	; (8007a1c <SecureElementGetJoinEui+0x4>)
 8007a1a:	4770      	bx	lr
 8007a1c:	200000a0 	.word	0x200000a0

08007a20 <MlmeIndication>:
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
  RxParams.IsMcpsIndication = 0;
 8007a20:	2200      	movs	r2, #0
 8007a22:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <MlmeIndication+0xc>)
 8007a24:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 8007a26:	7842      	ldrb	r2, [r0, #1]
 8007a28:	705a      	strb	r2, [r3, #1]
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 8007a2a:	4770      	bx	lr
 8007a2c:	2000017c 	.word	0x2000017c

08007a30 <LmHandlerDeviceTimeReq>:
{
 8007a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 8007a32:	230a      	movs	r3, #10
 8007a34:	a801      	add	r0, sp, #4
 8007a36:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8007a38:	f002 fe5e 	bl	800a6f8 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 8007a3c:	1e43      	subs	r3, r0, #1
 8007a3e:	4198      	sbcs	r0, r3
}
 8007a40:	4240      	negs	r0, r0
 8007a42:	b007      	add	sp, #28
 8007a44:	bd00      	pop	{pc}
	...

08007a48 <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 8007a48:	2301      	movs	r3, #1
{
 8007a4a:	b570      	push	{r4, r5, r6, lr}
 8007a4c:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 8007a4e:	4810      	ldr	r0, [pc, #64]	; (8007a90 <McpsConfirm+0x48>)
 8007a50:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mcpsConfirm->Status;
 8007a52:	7863      	ldrb	r3, [r4, #1]
 8007a54:	7043      	strb	r3, [r0, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 8007a56:	78a3      	ldrb	r3, [r4, #2]
 8007a58:	7103      	strb	r3, [r0, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007a5a:	68e3      	ldr	r3, [r4, #12]
 8007a5c:	6083      	str	r3, [r0, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 8007a5e:	78e3      	ldrb	r3, [r4, #3]
 8007a60:	7503      	strb	r3, [r0, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	7543      	strb	r3, [r0, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007a66:	7923      	ldrb	r3, [r4, #4]
 8007a68:	70c3      	strb	r3, [r0, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <McpsConfirm+0x4c>)
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007a70:	4d09      	ldr	r5, [pc, #36]	; (8007a98 <McpsConfirm+0x50>)
 8007a72:	002e      	movs	r6, r5
 8007a74:	3614      	adds	r6, #20
  {
    if (LmHandlerPackages[i] != NULL)
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <McpsConfirm+0x3e>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <McpsConfirm+0x3e>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 8007a82:	0020      	movs	r0, r4
 8007a84:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007a86:	3504      	adds	r5, #4
 8007a88:	42b5      	cmp	r5, r6
 8007a8a:	d1f4      	bne.n	8007a76 <McpsConfirm+0x2e>
}
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	200007b0 	.word	0x200007b0
 8007a94:	20000754 	.word	0x20000754
 8007a98:	20000774 	.word	0x20000774

08007a9c <LmHandlerConfigure>:
{
 8007a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007a9e:	2701      	movs	r7, #1
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007aa0:	4e4b      	ldr	r6, [pc, #300]	; (8007bd0 <LmHandlerConfigure+0x134>)
{
 8007aa2:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007aa4:	2206      	movs	r2, #6
 8007aa6:	0030      	movs	r0, r6
{
 8007aa8:	b097      	sub	sp, #92	; 0x5c
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007aaa:	f005 ffd5 	bl	800da58 <UTIL_MEM_cpy_8>
  loraInfo = LoraInfo_GetPtr();
 8007aae:	f7ff f989 	bl	8006dc4 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007ab2:	003b      	movs	r3, r7
 8007ab4:	7832      	ldrb	r2, [r6, #0]
 8007ab6:	6841      	ldr	r1, [r0, #4]
 8007ab8:	4093      	lsls	r3, r2
 8007aba:	0008      	movs	r0, r1
 8007abc:	4018      	ands	r0, r3
 8007abe:	4219      	tst	r1, r3
 8007ac0:	d009      	beq.n	8007ad6 <LmHandlerConfigure+0x3a>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8007ac2:	4944      	ldr	r1, [pc, #272]	; (8007bd4 <LmHandlerConfigure+0x138>)
 8007ac4:	4844      	ldr	r0, [pc, #272]	; (8007bd8 <LmHandlerConfigure+0x13c>)
 8007ac6:	f002 f8bd 	bl	8009c44 <LoRaMacInitialization>
 8007aca:	9009      	str	r0, [sp, #36]	; 0x24
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d008      	beq.n	8007ae2 <LmHandlerConfigure+0x46>
      return LORAMAC_HANDLER_ERROR;
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	4240      	negs	r0, r0
 8007ad4:	e061      	b.n	8007b9a <LmHandlerConfigure+0xfe>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8007ad6:	003a      	movs	r2, r7
 8007ad8:	0001      	movs	r1, r0
 8007ada:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <LmHandlerConfigure+0x140>)
 8007adc:	f006 fc82 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 8007ae0:	e7fe      	b.n	8007ae0 <LmHandlerConfigure+0x44>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 8007ae2:	f000 faec 	bl	80080be <NvmCtxMgmtRestore>
 8007ae6:	ac0d      	add	r4, sp, #52	; 0x34
 8007ae8:	4b3d      	ldr	r3, [pc, #244]	; (8007be0 <LmHandlerConfigure+0x144>)
 8007aea:	4d3e      	ldr	r5, [pc, #248]	; (8007be4 <LmHandlerConfigure+0x148>)
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d156      	bne.n	8007b9e <LmHandlerConfigure+0x102>
    CtxRestoreDone = true;
 8007af0:	701f      	strb	r7, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "DevEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8007af2:	2200      	movs	r2, #0
 8007af4:	79eb      	ldrb	r3, [r5, #7]
 8007af6:	0011      	movs	r1, r2
 8007af8:	9307      	str	r3, [sp, #28]
 8007afa:	79ab      	ldrb	r3, [r5, #6]
 8007afc:	2002      	movs	r0, #2
 8007afe:	9306      	str	r3, [sp, #24]
 8007b00:	796b      	ldrb	r3, [r5, #5]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8007b02:	270f      	movs	r7, #15
  MW_LOG(TS_OFF, VLEVEL_M, "DevEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	792b      	ldrb	r3, [r5, #4]
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	78eb      	ldrb	r3, [r5, #3]
 8007b0c:	9303      	str	r3, [sp, #12]
 8007b0e:	78ab      	ldrb	r3, [r5, #2]
 8007b10:	9302      	str	r3, [sp, #8]
 8007b12:	786b      	ldrb	r3, [r5, #1]
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	782b      	ldrb	r3, [r5, #0]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	4b33      	ldr	r3, [pc, #204]	; (8007be8 <LmHandlerConfigure+0x14c>)
 8007b1c:	f006 fc62 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "AppEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8007b20:	2200      	movs	r2, #0
 8007b22:	7beb      	ldrb	r3, [r5, #15]
 8007b24:	0011      	movs	r1, r2
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	7bab      	ldrb	r3, [r5, #14]
 8007b2a:	2002      	movs	r0, #2
 8007b2c:	9306      	str	r3, [sp, #24]
 8007b2e:	7b6b      	ldrb	r3, [r5, #13]
 8007b30:	9305      	str	r3, [sp, #20]
 8007b32:	7b2b      	ldrb	r3, [r5, #12]
 8007b34:	9304      	str	r3, [sp, #16]
 8007b36:	7aeb      	ldrb	r3, [r5, #11]
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	7aab      	ldrb	r3, [r5, #10]
 8007b3c:	9302      	str	r3, [sp, #8]
 8007b3e:	7a6b      	ldrb	r3, [r5, #9]
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	7a2b      	ldrb	r3, [r5, #8]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007b44:	2500      	movs	r5, #0
  MW_LOG(TS_OFF, VLEVEL_M, "AppEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4b28      	ldr	r3, [pc, #160]	; (8007bec <LmHandlerConfigure+0x150>)
 8007b4a:	f006 fc4b 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007b4e:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b50:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007b52:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8007b54:	7027      	strb	r7, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b56:	f002 fbb1 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8007b5a:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b5c:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8007b5e:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007b60:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b62:	f002 fbab 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 8007b66:	2304      	movs	r3, #4
 8007b68:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007b6a:	78b3      	ldrb	r3, [r6, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b6c:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007b6e:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b70:	f002 fba4 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007b74:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b76:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007b78:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 8007b7a:	3b0e      	subs	r3, #14
 8007b7c:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8007b7e:	f002 fb9d 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8007b82:	a90b      	add	r1, sp, #44	; 0x2c
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8007b84:	7830      	ldrb	r0, [r6, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8007b86:	700f      	strb	r7, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8007b88:	f003 fe99 	bl	800b8be <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007b8c:	1e43      	subs	r3, r0, #1
 8007b8e:	4198      	sbcs	r0, r3
 8007b90:	b2c0      	uxtb	r0, r0
 8007b92:	7130      	strb	r0, [r6, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 8007b94:	f003 f85e 	bl	800ac54 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 8007b98:	0028      	movs	r0, r5
}
 8007b9a:	b017      	add	sp, #92	; 0x5c
 8007b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 8007b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    LoRaMacMibGetRequestConfirm(&mibReq);
 8007ba0:	0020      	movs	r0, r4
    CtxRestoreDone = false;
 8007ba2:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8007ba8:	f002 fa8a 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	2208      	movs	r2, #8
 8007bb0:	0028      	movs	r0, r5
 8007bb2:	f004 fee1 	bl	800c978 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007bb6:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 8007bb8:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 8007bba:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8007bbc:	f002 fa80 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 8007bc0:	0028      	movs	r0, r5
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	3008      	adds	r0, #8
 8007bc8:	f004 fed6 	bl	800c978 <memcpy1>
 8007bcc:	e791      	b.n	8007af2 <LmHandlerConfigure+0x56>
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	20000788 	.word	0x20000788
 8007bd4:	20000790 	.word	0x20000790
 8007bd8:	200007a0 	.word	0x200007a0
 8007bdc:	0800ee74 	.word	0x0800ee74
 8007be0:	20000752 	.word	0x20000752
 8007be4:	20000154 	.word	0x20000154
 8007be8:	0800eebd 	.word	0x0800eebd
 8007bec:	0800eee9 	.word	0x0800eee9

08007bf0 <LmHandlerProcess>:
{
 8007bf0:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 8007bf2:	f001 fb79 	bl	80092e8 <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007bf6:	4c0c      	ldr	r4, [pc, #48]	; (8007c28 <LmHandlerProcess+0x38>)
 8007bf8:	0025      	movs	r5, r4
 8007bfa:	3514      	adds	r5, #20
    if ((LmHandlerPackages[i] != NULL) &&
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <LmHandlerProcess+0x2a>
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	d008      	beq.n	8007c1a <LmHandlerProcess+0x2a>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <LmHandlerProcess+0x2a>
    return LmHandlerPackages[id]->IsInitialized();
 8007c0e:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d002      	beq.n	8007c1a <LmHandlerProcess+0x2a>
      LmHandlerPackages[i]->Process();
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007c1a:	3404      	adds	r4, #4
 8007c1c:	42a5      	cmp	r5, r4
 8007c1e:	d1ed      	bne.n	8007bfc <LmHandlerProcess+0xc>
  NvmCtxMgmtStore();
 8007c20:	f000 fa4b 	bl	80080ba <NvmCtxMgmtStore>
}
 8007c24:	bd70      	pop	{r4, r5, r6, pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	20000774 	.word	0x20000774

08007c2c <LmHandlerJoinStatus>:
{
 8007c2c:	b500      	push	{lr}
 8007c2e:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007c30:	2301      	movs	r3, #1
 8007c32:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8007c34:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007c36:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8007c38:	f002 fa42 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 8007c3c:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 8007c3e:	4298      	cmp	r0, r3
 8007c40:	d104      	bne.n	8007c4c <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 8007c42:	466b      	mov	r3, sp
 8007c44:	7a1b      	ldrb	r3, [r3, #8]
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	4193      	sbcs	r3, r2
      return LORAMAC_HANDLER_RESET;
 8007c4a:	b2db      	uxtb	r3, r3
}
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	b00b      	add	sp, #44	; 0x2c
 8007c50:	bd00      	pop	{pc}
	...

08007c54 <LmHandlerRequestClass>:
{
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007c5a:	f7ff ffe7 	bl	8007c2c <LmHandlerJoinStatus>
 8007c5e:	2801      	cmp	r0, #1
 8007c60:	d133      	bne.n	8007cca <LmHandlerRequestClass+0x76>
  mibReq.Type = MIB_DEVICE_CLASS;
 8007c62:	2300      	movs	r3, #0
 8007c64:	ae01      	add	r6, sp, #4
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8007c66:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 8007c68:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8007c6a:	f002 fa29 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
 8007c6e:	1e04      	subs	r4, r0, #0
 8007c70:	d001      	beq.n	8007c76 <LmHandlerRequestClass+0x22>
    switch (newClass)
 8007c72:	2401      	movs	r4, #1
 8007c74:	e02a      	b.n	8007ccc <LmHandlerRequestClass+0x78>
  currentClass = mibReq.Param.Class;
 8007c76:	7933      	ldrb	r3, [r6, #4]
  if (currentClass != newClass)
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	d103      	bne.n	8007c84 <LmHandlerRequestClass+0x30>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007c7c:	2400      	movs	r4, #0
}
 8007c7e:	0020      	movs	r0, r4
 8007c80:	b00a      	add	sp, #40	; 0x28
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
    switch (newClass)
 8007c84:	2d01      	cmp	r5, #1
 8007c86:	d0f4      	beq.n	8007c72 <LmHandlerRequestClass+0x1e>
 8007c88:	2d02      	cmp	r5, #2
 8007c8a:	d010      	beq.n	8007cae <LmHandlerRequestClass+0x5a>
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	d1f6      	bne.n	8007c7e <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f3      	beq.n	8007c7c <LmHandlerRequestClass+0x28>
          mibReq.Param.Class = CLASS_A;
 8007c94:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8007c96:	0030      	movs	r0, r6
 8007c98:	f002 fb10 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d1e8      	bne.n	8007c72 <LmHandlerRequestClass+0x1e>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <LmHandlerRequestClass+0x7c>)
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 8007ca2:	0020      	movs	r0, r4
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0e8      	beq.n	8007c7c <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 8007caa:	4798      	blx	r3
 8007cac:	e7e7      	b.n	8007c7e <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1df      	bne.n	8007c72 <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8007cb2:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 8007cb4:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8007cb6:	f002 fb01 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
 8007cba:	1e04      	subs	r4, r0, #0
 8007cbc:	d1d9      	bne.n	8007c72 <LmHandlerRequestClass+0x1e>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <LmHandlerRequestClass+0x7c>)
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0da      	beq.n	8007c7c <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 8007cc6:	0028      	movs	r0, r5
 8007cc8:	e7ef      	b.n	8007caa <LmHandlerRequestClass+0x56>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007cca:	2403      	movs	r4, #3
    switch (newClass)
 8007ccc:	4264      	negs	r4, r4
 8007cce:	e7d6      	b.n	8007c7e <LmHandlerRequestClass+0x2a>
 8007cd0:	20000754 	.word	0x20000754

08007cd4 <LmHandlerJoin>:
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007cd4:	2301      	movs	r3, #1
{
 8007cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007cd8:	4d1d      	ldr	r5, [pc, #116]	; (8007d50 <LmHandlerJoin+0x7c>)
{
 8007cda:	b08d      	sub	sp, #52	; 0x34
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007cdc:	70ab      	strb	r3, [r5, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	706b      	strb	r3, [r5, #1]
    if (CtxRestoreDone == false)
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <LmHandlerJoin+0x80>)
 8007ce4:	ac03      	add	r4, sp, #12
 8007ce6:	781e      	ldrb	r6, [r3, #0]
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	d11f      	bne.n	8007d2c <LmHandlerJoin+0x58>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007cec:	2327      	movs	r3, #39	; 0x27
 8007cee:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007cf0:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <LmHandlerJoin+0x84>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 8007cf2:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007cf4:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8007cf6:	f002 fae1 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 8007cfa:	2305      	movs	r3, #5
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8007cfc:	4f17      	ldr	r7, [pc, #92]	; (8007d5c <LmHandlerJoin+0x88>)
      mibReq.Type = MIB_NET_ID;
 8007cfe:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8007d00:	693b      	ldr	r3, [r7, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8007d02:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8007d04:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8007d06:	f002 fad9 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 8007d0a:	f7fa ffc3 	bl	8002c94 <GetDevAddr>
      mibReq.Type = MIB_DEV_ADDR;
 8007d0e:	2306      	movs	r3, #6
      CommissioningParams.DevAddr = GetDevAddr();
 8007d10:	6178      	str	r0, [r7, #20]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8007d12:	6060      	str	r0, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8007d14:	0020      	movs	r0, r4
      mibReq.Type = MIB_DEV_ADDR;
 8007d16:	7023      	strb	r3, [r4, #0]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8007d18:	f002 fad0 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	0032      	movs	r2, r6
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	0031      	movs	r1, r6
 8007d24:	2002      	movs	r0, #2
 8007d26:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <LmHandlerJoin+0x8c>)
 8007d28:	f006 fb5c 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 8007d2c:	f002 f964 	bl	8009ff8 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007d30:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007d32:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007d34:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007d36:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007d38:	f002 fac0 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <LmHandlerJoin+0x90>)
 8007d3e:	0028      	movs	r0, r5
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <LmHandlerJoin+0x94>)
 8007d46:	7858      	ldrb	r0, [r3, #1]
 8007d48:	f7ff ff84 	bl	8007c54 <LmHandlerRequestClass>
}
 8007d4c:	b00d      	add	sp, #52	; 0x34
 8007d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d50:	2000016c 	.word	0x2000016c
 8007d54:	20000752 	.word	0x20000752
 8007d58:	01000300 	.word	0x01000300
 8007d5c:	20000154 	.word	0x20000154
 8007d60:	0800ef15 	.word	0x0800ef15
 8007d64:	20000754 	.word	0x20000754
 8007d68:	20000788 	.word	0x20000788

08007d6c <LmHandlerSend>:
{
 8007d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6e:	b089      	sub	sp, #36	; 0x24
 8007d70:	0005      	movs	r5, r0
 8007d72:	000e      	movs	r6, r1
 8007d74:	0017      	movs	r7, r2
 8007d76:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 8007d78:	f001 faa4 	bl	80092c4 <LoRaMacIsBusy>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d14c      	bne.n	8007e1a <LmHandlerSend+0xae>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007d80:	f7ff ff54 	bl	8007c2c <LmHandlerJoinStatus>
 8007d84:	2801      	cmp	r0, #1
 8007d86:	d006      	beq.n	8007d96 <LmHandlerSend+0x2a>
    LmHandlerJoin(JoinParams.Mode);
 8007d88:	4b27      	ldr	r3, [pc, #156]	; (8007e28 <LmHandlerSend+0xbc>)
 8007d8a:	7898      	ldrb	r0, [r3, #2]
 8007d8c:	f7ff ffa2 	bl	8007cd4 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007d90:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8007d92:	4240      	negs	r0, r0
 8007d94:	e02f      	b.n	8007df6 <LmHandlerSend+0x8a>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 8007d96:	4c25      	ldr	r4, [pc, #148]	; (8007e2c <LmHandlerSend+0xc0>)
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	4798      	blx	r3
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d006      	beq.n	8007db0 <LmHandlerSend+0x44>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	782b      	ldrb	r3, [r5, #0]
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d001      	beq.n	8007db0 <LmHandlerSend+0x44>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d136      	bne.n	8007e1e <LmHandlerSend+0xb2>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007db0:	4b1f      	ldr	r3, [pc, #124]	; (8007e30 <LmHandlerSend+0xc4>)
 8007db2:	ac03      	add	r4, sp, #12
 8007db4:	78db      	ldrb	r3, [r3, #3]
  if ((status = LoRaMacQueryTxPossible(appData->BufferSize, &txInfo)) != LORAMAC_STATUS_OK)
 8007db6:	a902      	add	r1, sp, #8
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007db8:	73a3      	strb	r3, [r4, #14]
  if ((status = LoRaMacQueryTxPossible(appData->BufferSize, &txInfo)) != LORAMAC_STATUS_OK)
 8007dba:	7868      	ldrb	r0, [r5, #1]
 8007dbc:	f002 f924 	bl	800a008 <LoRaMacQueryTxPossible>
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <LmHandlerSend+0xc8>)
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d019      	beq.n	8007dfa <LmHandlerSend+0x8e>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 8007dca:	7022      	strb	r2, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007dcc:	60a2      	str	r2, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007dce:	81a2      	strh	r2, [r4, #12]
  TxParams.AppData = *appData;
 8007dd0:	001a      	movs	r2, r3
 8007dd2:	320c      	adds	r2, #12
 8007dd4:	cd03      	ldmia	r5!, {r0, r1}
 8007dd6:	c203      	stmia	r2!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007dd8:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <LmHandlerSend+0xc4>)
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007dda:	0020      	movs	r0, r4
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007ddc:	78d2      	ldrb	r2, [r2, #3]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007dde:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007de0:	711a      	strb	r2, [r3, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007de2:	f002 fd81 	bl	800a8e8 <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 8007de6:	2f00      	cmp	r7, #0
 8007de8:	d001      	beq.n	8007dee <LmHandlerSend+0x82>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	603b      	str	r3, [r7, #0]
  switch(status)
 8007dee:	2811      	cmp	r0, #17
 8007df0:	d817      	bhi.n	8007e22 <LmHandlerSend+0xb6>
 8007df2:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <LmHandlerSend+0xcc>)
 8007df4:	5618      	ldrsb	r0, [r3, r0]
}
 8007df6:	b009      	add	sp, #36	; 0x24
 8007df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 8007dfa:	709e      	strb	r6, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8007dfc:	782a      	ldrb	r2, [r5, #0]
 8007dfe:	7122      	strb	r2, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007e00:	786a      	ldrb	r2, [r5, #1]
 8007e02:	81a2      	strh	r2, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007e04:	686a      	ldr	r2, [r5, #4]
 8007e06:	60a2      	str	r2, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	d101      	bne.n	8007e10 <LmHandlerSend+0xa4>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8007e0c:	7026      	strb	r6, [r4, #0]
 8007e0e:	e7df      	b.n	8007dd0 <LmHandlerSend+0x64>
      mcpsReq.Type = MCPS_CONFIRMED;
 8007e10:	2201      	movs	r2, #1
 8007e12:	7022      	strb	r2, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 8007e14:	3207      	adds	r2, #7
 8007e16:	73e2      	strb	r2, [r4, #15]
 8007e18:	e7da      	b.n	8007dd0 <LmHandlerSend+0x64>
    return LORAMAC_HANDLER_BUSY_ERROR;
 8007e1a:	2002      	movs	r0, #2
 8007e1c:	e7b9      	b.n	8007d92 <LmHandlerSend+0x26>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8007e1e:	2004      	movs	r0, #4
 8007e20:	e7b7      	b.n	8007d92 <LmHandlerSend+0x26>
 8007e22:	2001      	movs	r0, #1
 8007e24:	e7b5      	b.n	8007d92 <LmHandlerSend+0x26>
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	2000016c 	.word	0x2000016c
 8007e2c:	20000774 	.word	0x20000774
 8007e30:	20000788 	.word	0x20000788
 8007e34:	200007b0 	.word	0x200007b0
 8007e38:	0800ef27 	.word	0x0800ef27

08007e3c <LmHandlerPackageRegister>:
{
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	0004      	movs	r4, r0
 8007e40:	000d      	movs	r5, r1
  switch (id)
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d002      	beq.n	8007e4c <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 8007e46:	2001      	movs	r0, #1
 8007e48:	4240      	negs	r0, r0
}
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 8007e4c:	f000 faa4 	bl	8008398 <LmphCompliancePackageFactory>
  if (package != NULL)
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d0f8      	beq.n	8007e46 <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 8007e54:	4b07      	ldr	r3, [pc, #28]	; (8007e74 <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8007e56:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 8007e58:	6018      	str	r0, [r3, #0]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8007e5c:	4907      	ldr	r1, [pc, #28]	; (8007e7c <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007e5e:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <LmHandlerPackageRegister+0x44>)
 8007e62:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <LmHandlerPackageRegister+0x48>)
 8007e66:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8007e68:	6843      	ldr	r3, [r0, #4]
 8007e6a:	0028      	movs	r0, r5
 8007e6c:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 8007e6e:	0020      	movs	r0, r4
 8007e70:	e7eb      	b.n	8007e4a <LmHandlerPackageRegister+0xe>
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	20000774 	.word	0x20000774
 8007e78:	08007cd5 	.word	0x08007cd5
 8007e7c:	20000660 	.word	0x20000660
 8007e80:	08007d6d 	.word	0x08007d6d
 8007e84:	08007a31 	.word	0x08007a31

08007e88 <LmHandlerInit>:
{
 8007e88:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 8007e8a:	4c10      	ldr	r4, [pc, #64]	; (8007ecc <LmHandlerInit+0x44>)
{
 8007e8c:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 8007e8e:	0020      	movs	r0, r4
 8007e90:	2220      	movs	r2, #32
 8007e92:	f005 fde1 	bl	800da58 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007e96:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <LmHandlerInit+0x48>)
 8007e98:	4a0e      	ldr	r2, [pc, #56]	; (8007ed4 <LmHandlerInit+0x4c>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007e9a:	490f      	ldr	r1, [pc, #60]	; (8007ed8 <LmHandlerInit+0x50>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007e9c:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007e9e:	4a0f      	ldr	r2, [pc, #60]	; (8007edc <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007ea0:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007ea2:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007ea4:	4a0e      	ldr	r2, [pc, #56]	; (8007ee0 <LmHandlerInit+0x58>)
 8007ea6:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	; (8007ee4 <LmHandlerInit+0x5c>)
 8007eaa:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <LmHandlerInit+0x60>)
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 8007eb2:	6862      	ldr	r2, [r4, #4]
 8007eb4:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 8007eb6:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <LmHandlerInit+0x64>)
 8007eb8:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 8007eba:	68a2      	ldr	r2, [r4, #8]
 8007ebc:	60da      	str	r2, [r3, #12]
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007ebe:	f7ff ffbd 	bl	8007e3c <LmHandlerPackageRegister>
 8007ec2:	1e43      	subs	r3, r0, #1
 8007ec4:	4198      	sbcs	r0, r3
}
 8007ec6:	4240      	negs	r0, r0
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	20000754 	.word	0x20000754
 8007ed0:	200007a0 	.word	0x200007a0
 8007ed4:	08007a49 	.word	0x08007a49
 8007ed8:	20000170 	.word	0x20000170
 8007edc:	08007f1d 	.word	0x08007f1d
 8007ee0:	08008015 	.word	0x08008015
 8007ee4:	08007a21 	.word	0x08007a21
 8007ee8:	20000790 	.word	0x20000790
 8007eec:	080080b9 	.word	0x080080b9

08007ef0 <LmHandlerGetCurrentClass>:
{
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	0004      	movs	r4, r0
 8007ef4:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d103      	bne.n	8007f02 <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 8007efa:	2001      	movs	r0, #1
 8007efc:	4240      	negs	r0, r0
}
 8007efe:	b00a      	add	sp, #40	; 0x28
 8007f00:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 8007f02:	2300      	movs	r3, #0
 8007f04:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8007f06:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 8007f08:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8007f0a:	f002 f8d9 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1f3      	bne.n	8007efa <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 8007f12:	466b      	mov	r3, sp
 8007f14:	7a1b      	ldrb	r3, [r3, #8]
 8007f16:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 8007f18:	e7f1      	b.n	8007efe <LmHandlerGetCurrentClass+0xe>
	...

08007f1c <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 8007f1c:	2301      	movs	r3, #1
{
 8007f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 8007f20:	492c      	ldr	r1, [pc, #176]	; (8007fd4 <McpsIndication+0xb8>)
{
 8007f22:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 8007f24:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 8007f26:	7843      	ldrb	r3, [r0, #1]
{
 8007f28:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 8007f2a:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d146      	bne.n	8007fbe <McpsIndication+0xa2>
  if (mcpsIndication->BufferSize > 0)
 8007f30:	7b03      	ldrb	r3, [r0, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d013      	beq.n	8007f5e <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007f36:	7902      	ldrb	r2, [r0, #4]
 8007f38:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 8007f3a:	89c2      	ldrh	r2, [r0, #14]
 8007f3c:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 8007f3e:	7c02      	ldrb	r2, [r0, #16]
 8007f40:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007f42:	6942      	ldr	r2, [r0, #20]
 8007f44:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 8007f46:	7c42      	ldrb	r2, [r0, #17]
 8007f48:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8007f4a:	78c2      	ldrb	r2, [r0, #3]
 8007f4c:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 8007f4e:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8007f50:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 8007f52:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 8007f54:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 8007f56:	4b20      	ldr	r3, [pc, #128]	; (8007fd8 <McpsIndication+0xbc>)
 8007f58:	a802      	add	r0, sp, #8
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 8007f5e:	7f23      	ldrb	r3, [r4, #28]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <McpsIndication+0x52>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 8007f64:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <McpsIndication+0xbc>)
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d000      	beq.n	8007f6e <McpsIndication+0x52>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 8007f6c:	4798      	blx	r3
 8007f6e:	4e1b      	ldr	r6, [pc, #108]	; (8007fdc <McpsIndication+0xc0>)
{
 8007f70:	2500      	movs	r5, #0
 8007f72:	0037      	movs	r7, r6
    if (LmHandlerPackages[i] != NULL)
 8007f74:	6833      	ldr	r3, [r6, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <McpsIndication+0x74>
          }
          break;
        }
        case PACKAGE_MCPS_INDICATION:
        {
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	d007      	beq.n	8007f90 <McpsIndication+0x74>
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	78e3      	ldrb	r3, [r4, #3]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d11c      	bne.n	8007fc2 <McpsIndication+0xa6>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
          {
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 8007f88:	6833      	ldr	r3, [r6, #0]
 8007f8a:	0020      	movs	r0, r4
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8007f90:	3501      	adds	r5, #1
 8007f92:	b2eb      	uxtb	r3, r5
 8007f94:	3604      	adds	r6, #4
 8007f96:	b26d      	sxtb	r5, r5
 8007f98:	2b05      	cmp	r3, #5
 8007f9a:	d1eb      	bne.n	8007f74 <McpsIndication+0x58>
  LmHandlerGetCurrentClass(&deviceClass);
 8007f9c:	466b      	mov	r3, sp
 8007f9e:	1ddd      	adds	r5, r3, #7
 8007fa0:	0028      	movs	r0, r5
 8007fa2:	f7ff ffa5 	bl	8007ef0 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8007fa6:	7963      	ldrb	r3, [r4, #5]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d108      	bne.n	8007fbe <McpsIndication+0xa2>
 8007fac:	7829      	ldrb	r1, [r5, #0]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d105      	bne.n	8007fbe <McpsIndication+0xa2>
    LmHandlerAppData_t appData =
 8007fb2:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8007fb4:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 8007fb6:	8001      	strh	r1, [r0, #0]
 8007fb8:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8007fba:	f7ff fed7 	bl	8007d6c <LmHandlerSend>
}
 8007fbe:	b007      	add	sp, #28
 8007fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	d1e4      	bne.n	8007f90 <McpsIndication+0x74>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	4798      	blx	r3
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d1db      	bne.n	8007f88 <McpsIndication+0x6c>
 8007fd0:	e7de      	b.n	8007f90 <McpsIndication+0x74>
 8007fd2:	46c0      	nop			; (mov r8, r8)
 8007fd4:	2000017c 	.word	0x2000017c
 8007fd8:	20000754 	.word	0x20000754
 8007fdc:	20000774 	.word	0x20000774

08007fe0 <LmHandlerGetTxDatarate>:
{
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	0004      	movs	r4, r0
 8007fe4:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d103      	bne.n	8007ff2 <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 8007fea:	2001      	movs	r0, #1
 8007fec:	4240      	negs	r0, r0
}
 8007fee:	b00a      	add	sp, #40	; 0x28
 8007ff0:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8007ff2:	231f      	movs	r3, #31
 8007ff4:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8007ff6:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8007ff8:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8007ffa:	f002 f861 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d1f3      	bne.n	8007fea <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008002:	466b      	mov	r3, sp
 8008004:	7a1b      	ldrb	r3, [r3, #8]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008006:	4a02      	ldr	r2, [pc, #8]	; (8008010 <LmHandlerGetTxDatarate+0x30>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008008:	b25b      	sxtb	r3, r3
 800800a:	7023      	strb	r3, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800800c:	70d3      	strb	r3, [r2, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800800e:	e7ee      	b.n	8007fee <LmHandlerGetTxDatarate+0xe>
 8008010:	20000788 	.word	0x20000788

08008014 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 8008014:	2200      	movs	r2, #0
{
 8008016:	b570      	push	{r4, r5, r6, lr}
 8008018:	4d1a      	ldr	r5, [pc, #104]	; (8008084 <MlmeConfirm+0x70>)
 800801a:	0004      	movs	r4, r0
 800801c:	002e      	movs	r6, r5
  TxParams.IsMcpsConfirm = 0;
 800801e:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <MlmeConfirm+0x74>)
{
 8008020:	b08a      	sub	sp, #40	; 0x28
  TxParams.IsMcpsConfirm = 0;
 8008022:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 8008024:	7842      	ldrb	r2, [r0, #1]
 8008026:	3614      	adds	r6, #20
 8008028:	705a      	strb	r2, [r3, #1]
    if (LmHandlerPackages[i] != NULL)
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <MlmeConfirm+0x26>
          }
          break;
        }
        case PACKAGE_MLME_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <MlmeConfirm+0x26>
          {
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 8008036:	0020      	movs	r0, r4
 8008038:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800803a:	3504      	adds	r5, #4
 800803c:	42b5      	cmp	r5, r6
 800803e:	d1f4      	bne.n	800802a <MlmeConfirm+0x16>
  switch (mlmeConfirm->MlmeRequest)
 8008040:	7823      	ldrb	r3, [r4, #0]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d118      	bne.n	8008078 <MlmeConfirm+0x64>
      mibReq.Type = MIB_DEV_ADDR;
 8008046:	ad01      	add	r5, sp, #4
 8008048:	3305      	adds	r3, #5
      LoRaMacMibGetRequestConfirm(&mibReq);
 800804a:	0028      	movs	r0, r5
      mibReq.Type = MIB_DEV_ADDR;
 800804c:	702b      	strb	r3, [r5, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800804e:	f002 f837 	bl	800a0c0 <LoRaMacMibGetRequestConfirm>
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008052:	4d0e      	ldr	r5, [pc, #56]	; (800808c <MlmeConfirm+0x78>)
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <MlmeConfirm+0x7c>)
 8008056:	9a02      	ldr	r2, [sp, #8]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008058:	0028      	movs	r0, r5
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800805a:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800805c:	f7ff ffc0 	bl	8007fe0 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 8008060:	7863      	ldrb	r3, [r4, #1]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <MlmeConfirm+0x68>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008066:	706b      	strb	r3, [r5, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <MlmeConfirm+0x80>)
 800806a:	7858      	ldrb	r0, [r3, #1]
 800806c:	f7ff fdf2 	bl	8007c54 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008070:	4b09      	ldr	r3, [pc, #36]	; (8008098 <MlmeConfirm+0x84>)
 8008072:	0028      	movs	r0, r5
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	4798      	blx	r3
}
 8008078:	b00a      	add	sp, #40	; 0x28
 800807a:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800807c:	23ff      	movs	r3, #255	; 0xff
 800807e:	706b      	strb	r3, [r5, #1]
 8008080:	e7f6      	b.n	8008070 <MlmeConfirm+0x5c>
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	20000774 	.word	0x20000774
 8008088:	200007b0 	.word	0x200007b0
 800808c:	2000016c 	.word	0x2000016c
 8008090:	20000154 	.word	0x20000154
 8008094:	20000788 	.word	0x20000788
 8008098:	20000754 	.word	0x20000754

0800809c <LmHandlerGetDevEUI>:
{
 800809c:	b510      	push	{r4, lr}
  if (devEUI == NULL)
 800809e:	2800      	cmp	r0, #0
 80080a0:	d005      	beq.n	80080ae <LmHandlerGetDevEUI+0x12>
  UTIL_MEM_cpy_8(devEUI, CommissioningParams.DevEui, SE_EUI_SIZE);
 80080a2:	2208      	movs	r2, #8
 80080a4:	4903      	ldr	r1, [pc, #12]	; (80080b4 <LmHandlerGetDevEUI+0x18>)
 80080a6:	f005 fcd7 	bl	800da58 <UTIL_MEM_cpy_8>
  return LORAMAC_HANDLER_SUCCESS;
 80080aa:	2000      	movs	r0, #0
}
 80080ac:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 80080ae:	2001      	movs	r0, #1
 80080b0:	4240      	negs	r0, r0
 80080b2:	e7fb      	b.n	80080ac <LmHandlerGetDevEUI+0x10>
 80080b4:	20000154 	.word	0x20000154

080080b8 <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80080b8:	4770      	bx	lr

080080ba <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80080ba:	2001      	movs	r0, #1
 80080bc:	4770      	bx	lr

080080be <NvmCtxMgmtRestore>:
 80080be:	2001      	movs	r0, #1
 80080c0:	4770      	bx	lr
	...

080080c4 <LmhpComplianceInit>:
  return &LmhpCompliancePackage;
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <LmhpComplianceInit+0x20>)
 80080c8:	4c07      	ldr	r4, [pc, #28]	; (80080e8 <LmhpComplianceInit+0x24>)
  if ((params != NULL) && (dataBuffer != NULL))
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d007      	beq.n	80080de <LmhpComplianceInit+0x1a>
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d005      	beq.n	80080de <LmhpComplianceInit+0x1a>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80080d2:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 80080d4:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 80080d6:	6020      	str	r0, [r4, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 80080d8:	6099      	str	r1, [r3, #8]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 80080da:	701a      	strb	r2, [r3, #0]
  }
}
 80080dc:	bd10      	pop	{r4, pc}
    LmhpComplianceParams = NULL;
 80080de:	2200      	movs	r2, #0
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	e7fa      	b.n	80080da <LmhpComplianceInit+0x16>
 80080e4:	200007c8 	.word	0x200007c8
 80080e8:	200007f4 	.word	0x200007f4

080080ec <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 80080ec:	4b01      	ldr	r3, [pc, #4]	; (80080f4 <LmhpComplianceIsInitialized+0x8>)
 80080ee:	7818      	ldrb	r0, [r3, #0]
}
 80080f0:	4770      	bx	lr
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	200007c8 	.word	0x200007c8

080080f8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <LmhpComplianceIsRunning+0xc>)
 80080fa:	7818      	ldrb	r0, [r3, #0]
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d000      	beq.n	8008102 <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 8008100:	7858      	ldrb	r0, [r3, #1]
}
 8008102:	4770      	bx	lr
 8008104:	200007c8 	.word	0x200007c8

08008108 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 8008108:	4770      	bx	lr
	...

0800810c <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 800810c:	4b08      	ldr	r3, [pc, #32]	; (8008130 <LmhpComplianceOnMcpsConfirm+0x24>)
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	2a00      	cmp	r2, #0
 8008112:	d00b      	beq.n	800812c <LmhpComplianceOnMcpsConfirm+0x20>
  if ((ComplianceTestState.IsRunning == true) &&
 8008114:	785a      	ldrb	r2, [r3, #1]
 8008116:	2a00      	cmp	r2, #0
 8008118:	d008      	beq.n	800812c <LmhpComplianceOnMcpsConfirm+0x20>
 800811a:	7802      	ldrb	r2, [r0, #0]
 800811c:	2a01      	cmp	r2, #1
 800811e:	d105      	bne.n	800812c <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008120:	7902      	ldrb	r2, [r0, #4]
 8008122:	2a00      	cmp	r2, #0
 8008124:	d002      	beq.n	800812c <LmhpComplianceOnMcpsConfirm+0x20>
    ComplianceTestState.DownLinkCounter++;
 8008126:	899a      	ldrh	r2, [r3, #12]
 8008128:	3201      	adds	r2, #1
 800812a:	819a      	strh	r2, [r3, #12]
}
 800812c:	4770      	bx	lr
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	200007c8 	.word	0x200007c8

08008134 <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <LmhpComplianceOnMlmeConfirm+0x1c>)
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	2a00      	cmp	r2, #0
 800813a:	d008      	beq.n	800814e <LmhpComplianceOnMlmeConfirm+0x1a>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800813c:	7802      	ldrb	r2, [r0, #0]
 800813e:	2a04      	cmp	r2, #4
 8008140:	d105      	bne.n	800814e <LmhpComplianceOnMlmeConfirm+0x1a>
 8008142:	7a01      	ldrb	r1, [r0, #8]
 8008144:	7a42      	ldrb	r2, [r0, #9]
    ComplianceTestState.LinkCheck = true;
 8008146:	2001      	movs	r0, #1
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008148:	73d9      	strb	r1, [r3, #15]
    ComplianceTestState.LinkCheck = true;
 800814a:	7398      	strb	r0, [r3, #14]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800814c:	741a      	strb	r2, [r3, #16]
}
 800814e:	4770      	bx	lr
 8008150:	200007c8 	.word	0x200007c8

08008154 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
 8008154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ComplianceTestState.Initialized == false)
 8008156:	4c1a      	ldr	r4, [pc, #104]	; (80081c0 <LmhpComplianceTxProcess.isra.0+0x6c>)
 8008158:	7823      	ldrb	r3, [r4, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d021      	beq.n	80081a2 <LmhpComplianceTxProcess.isra.0+0x4e>
  if (ComplianceTestState.LinkCheck == true)
 800815e:	7ba2      	ldrb	r2, [r4, #14]
    ComplianceTestState.DataBuffer[0] = 5;
 8008160:	68a3      	ldr	r3, [r4, #8]
  if (ComplianceTestState.LinkCheck == true)
 8008162:	2a00      	cmp	r2, #0
 8008164:	d01e      	beq.n	80081a4 <LmhpComplianceTxProcess.isra.0+0x50>
    ComplianceTestState.LinkCheck = false;
 8008166:	2200      	movs	r2, #0
 8008168:	73a2      	strb	r2, [r4, #14]
    ComplianceTestState.DataBufferSize = 3;
 800816a:	3203      	adds	r2, #3
 800816c:	71e2      	strb	r2, [r4, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800816e:	3202      	adds	r2, #2
 8008170:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008172:	7be2      	ldrb	r2, [r4, #15]
 8008174:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008176:	7c22      	ldrb	r2, [r4, #16]
 8008178:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 800817a:	2201      	movs	r2, #1
 800817c:	70a2      	strb	r2, [r4, #2]
  LmHandlerAppData_t appData =
 800817e:	4669      	mov	r1, sp
 8008180:	22e0      	movs	r2, #224	; 0xe0
 8008182:	720a      	strb	r2, [r1, #8]
 8008184:	79e2      	ldrb	r2, [r4, #7]
 8008186:	9303      	str	r3, [sp, #12]
  TimerTime_t nextTxIn = 0;
 8008188:	2300      	movs	r3, #0
  TimerStart(&ComplianceTxNextPacketTimer);
 800818a:	480e      	ldr	r0, [pc, #56]	; (80081c4 <LmhpComplianceTxProcess.isra.0+0x70>)
  LmHandlerAppData_t appData =
 800818c:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 800818e:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 8008190:	f005 ffae 	bl	800e0f0 <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <LmhpComplianceTxProcess.isra.0+0x74>)
 8008196:	7921      	ldrb	r1, [r4, #4]
 8008198:	aa01      	add	r2, sp, #4
 800819a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800819c:	a802      	add	r0, sp, #8
 800819e:	2301      	movs	r3, #1
 80081a0:	47a0      	blx	r4
}
 80081a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    switch (ComplianceTestState.State)
 80081a4:	78a2      	ldrb	r2, [r4, #2]
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	d002      	beq.n	80081b0 <LmhpComplianceTxProcess.isra.0+0x5c>
 80081aa:	2a04      	cmp	r2, #4
 80081ac:	d1e7      	bne.n	800817e <LmhpComplianceTxProcess.isra.0+0x2a>
 80081ae:	e7e4      	b.n	800817a <LmhpComplianceTxProcess.isra.0+0x26>
        ComplianceTestState.DataBufferSize = 2;
 80081b0:	2202      	movs	r2, #2
 80081b2:	71e2      	strb	r2, [r4, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80081b4:	89a2      	ldrh	r2, [r4, #12]
 80081b6:	0a11      	lsrs	r1, r2, #8
 80081b8:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80081ba:	705a      	strb	r2, [r3, #1]
        break;
 80081bc:	e7df      	b.n	800817e <LmhpComplianceTxProcess.isra.0+0x2a>
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	200007c8 	.word	0x200007c8
 80081c4:	200007dc 	.word	0x200007dc
 80081c8:	2000018c 	.word	0x2000018c

080081cc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 80081cc:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 80081ce:	f7ff ffc1 	bl	8008154 <LmhpComplianceTxProcess.isra.0>
}
 80081d2:	bd10      	pop	{r4, pc}

080081d4 <LmhpComplianceOnMcpsIndication>:
{
 80081d4:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 80081d6:	4c6a      	ldr	r4, [pc, #424]	; (8008380 <LmhpComplianceOnMcpsIndication+0x1ac>)
{
 80081d8:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 80081da:	7823      	ldrb	r3, [r4, #0]
{
 80081dc:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d046      	beq.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
  if (mcpsIndication->RxData == false)
 80081e2:	7b43      	ldrb	r3, [r0, #13]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d043      	beq.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
  if ((ComplianceTestState.IsRunning == true) &&
 80081e8:	7865      	ldrb	r5, [r4, #1]
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	d005      	beq.n	80081fa <LmhpComplianceOnMcpsIndication+0x26>
 80081ee:	7c83      	ldrb	r3, [r0, #18]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <LmhpComplianceOnMcpsIndication+0x26>
    ComplianceTestState.DownLinkCounter++;
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	81a3      	strh	r3, [r4, #12]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 80081fa:	78d3      	ldrb	r3, [r2, #3]
 80081fc:	2be0      	cmp	r3, #224	; 0xe0
 80081fe:	d137      	bne.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
  if (ComplianceTestState.IsRunning == false)
 8008200:	2d00      	cmp	r5, #0
 8008202:	d137      	bne.n	8008274 <LmhpComplianceOnMcpsIndication+0xa0>
    if ((mcpsIndication->BufferSize == 4) &&
 8008204:	7b11      	ldrb	r1, [r2, #12]
 8008206:	2904      	cmp	r1, #4
 8008208:	d132      	bne.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800820a:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	2a01      	cmp	r2, #1
 8008210:	d12e      	bne.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008212:	785a      	ldrb	r2, [r3, #1]
 8008214:	2a01      	cmp	r2, #1
 8008216:	d12b      	bne.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[1] == 0x01) &&
 8008218:	789a      	ldrb	r2, [r3, #2]
 800821a:	2a01      	cmp	r2, #1
 800821c:	d128      	bne.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800821e:	78db      	ldrb	r3, [r3, #3]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d125      	bne.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
      ComplianceTestState.IsTxConfirmed = false;
 8008224:	4a57      	ldr	r2, [pc, #348]	; (8008384 <LmhpComplianceOnMcpsIndication+0x1b0>)
      ComplianceTestState.DownLinkCounter = 0;
 8008226:	60e5      	str	r5, [r4, #12]
      ComplianceTestState.IsTxConfirmed = false;
 8008228:	80a2      	strh	r2, [r4, #4]
      ComplianceTestState.DataBufferSize = 2;
 800822a:	2202      	movs	r2, #2
 800822c:	71e2      	strb	r2, [r4, #7]
      mibReq.Type = MIB_ADR;
 800822e:	466a      	mov	r2, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008230:	a803      	add	r0, sp, #12
      mibReq.Param.AdrEnable = true;
 8008232:	7413      	strb	r3, [r2, #16]
      mibReq.Type = MIB_ADR;
 8008234:	7311      	strb	r1, [r2, #12]
      ComplianceTestState.IsRunning = true;
 8008236:	7063      	strb	r3, [r4, #1]
      ComplianceTestState.State = 1;
 8008238:	70a3      	strb	r3, [r4, #2]
      ComplianceTestState.NbGateways = 0;
 800823a:	7425      	strb	r5, [r4, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800823c:	f002 f83e 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 8008240:	0028      	movs	r0, r5
 8008242:	f002 fd07 	bl	800ac54 <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 8008246:	4b50      	ldr	r3, [pc, #320]	; (8008388 <LmhpComplianceOnMcpsIndication+0x1b4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d000      	beq.n	8008252 <LmhpComplianceOnMcpsIndication+0x7e>
        LmhpComplianceParams->StopPeripherals();
 8008250:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 8008252:	2200      	movs	r2, #0
 8008254:	2101      	movs	r1, #1
 8008256:	4c4d      	ldr	r4, [pc, #308]	; (800838c <LmhpComplianceOnMcpsIndication+0x1b8>)
 8008258:	4b4d      	ldr	r3, [pc, #308]	; (8008390 <LmhpComplianceOnMcpsIndication+0x1bc>)
 800825a:	9200      	str	r2, [sp, #0]
 800825c:	4249      	negs	r1, r1
 800825e:	0020      	movs	r0, r4
 8008260:	f005 fe92 	bl	800df88 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 8008264:	494b      	ldr	r1, [pc, #300]	; (8008394 <LmhpComplianceOnMcpsIndication+0x1c0>)
 8008266:	0020      	movs	r0, r4
 8008268:	f005 ff9e 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 800826c:	f7ff ff72 	bl	8008154 <LmhpComplianceTxProcess.isra.0>
}
 8008270:	b00d      	add	sp, #52	; 0x34
 8008272:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008274:	6893      	ldr	r3, [r2, #8]
 8008276:	7818      	ldrb	r0, [r3, #0]
 8008278:	70a0      	strb	r0, [r4, #2]
    switch (ComplianceTestState.State)
 800827a:	280a      	cmp	r0, #10
 800827c:	d8f8      	bhi.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
 800827e:	f7f7 ff4b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008282:	062c      	.short	0x062c
 8008284:	26110d09 	.word	0x26110d09
 8008288:	6f6c462c 	.word	0x6f6c462c
 800828c:	78          	.byte	0x78
 800828d:	00          	.byte	0x00
        ComplianceTestState.DataBufferSize = 2;
 800828e:	2302      	movs	r3, #2
 8008290:	71e3      	strb	r3, [r4, #7]
        break;
 8008292:	e7ed      	b.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        ComplianceTestState.IsTxConfirmed = true;
 8008294:	2301      	movs	r3, #1
 8008296:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 8008298:	70a3      	strb	r3, [r4, #2]
      break;
 800829a:	e7e9      	b.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        ComplianceTestState.IsTxConfirmed = false;
 800829c:	2300      	movs	r3, #0
 800829e:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e7f9      	b.n	8008298 <LmhpComplianceOnMcpsIndication+0xc4>
        ComplianceTestState.DataBuffer[0] = 4;
 80082a4:	2304      	movs	r3, #4
 80082a6:	68a5      	ldr	r5, [r4, #8]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80082a8:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 80082aa:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 80082ac:	79a0      	ldrb	r0, [r4, #6]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80082ae:	71e1      	strb	r1, [r4, #7]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 80082b0:	1c03      	adds	r3, r0, #0
 80082b2:	4288      	cmp	r0, r1
 80082b4:	d900      	bls.n	80082b8 <LmhpComplianceOnMcpsIndication+0xe4>
 80082b6:	1c0b      	adds	r3, r1, #0
 80082b8:	b2d9      	uxtb	r1, r3
 80082ba:	2300      	movs	r3, #0
 80082bc:	3301      	adds	r3, #1
 80082be:	b2d8      	uxtb	r0, r3
 80082c0:	4281      	cmp	r1, r0
 80082c2:	d9d5      	bls.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80082c4:	6890      	ldr	r0, [r2, #8]
 80082c6:	5cc0      	ldrb	r0, [r0, r3]
 80082c8:	3001      	adds	r0, #1
 80082ca:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 80082cc:	e7f6      	b.n	80082bc <LmhpComplianceOnMcpsIndication+0xe8>
        mlmeReq.Type = MLME_LINK_CHECK;
 80082ce:	2304      	movs	r3, #4
 80082d0:	a803      	add	r0, sp, #12
        mlmeReq.Type = MLME_DEVICE_TIME;
 80082d2:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 80082d4:	f002 fa10 	bl	800a6f8 <LoRaMacMlmeRequest>
      break;
 80082d8:	e7ca      	b.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        TimerStop(&ComplianceTxNextPacketTimer);
 80082da:	482c      	ldr	r0, [pc, #176]	; (800838c <LmhpComplianceOnMcpsIndication+0x1b8>)
 80082dc:	f005 feb4 	bl	800e048 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 80082e0:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 80082e2:	466a      	mov	r2, sp
        ComplianceTestState.IsRunning = false;
 80082e4:	7063      	strb	r3, [r4, #1]
        ComplianceTestState.DownLinkCounter = 0;
 80082e6:	81a3      	strh	r3, [r4, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80082e8:	4c27      	ldr	r4, [pc, #156]	; (8008388 <LmhpComplianceOnMcpsIndication+0x1b4>)
        mibReq.Type = MIB_ADR;
 80082ea:	3304      	adds	r3, #4
 80082ec:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80082ee:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80082f0:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80082f6:	f001 ffe1 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	7858      	ldrb	r0, [r3, #1]
 80082fe:	f002 fca9 	bl	800ac54 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0b2      	beq.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
          LmhpComplianceParams->StartPeripherals();
 800830a:	4798      	blx	r3
      break;
 800830c:	e7b0      	b.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        if (mcpsIndication->BufferSize == 3)
 800830e:	7b12      	ldrb	r2, [r2, #12]
 8008310:	a803      	add	r0, sp, #12
 8008312:	2a03      	cmp	r2, #3
 8008314:	d10a      	bne.n	800832c <LmhpComplianceOnMcpsIndication+0x158>
          mlmeReq.Type = MLME_TXCW;
 8008316:	3202      	adds	r2, #2
 8008318:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800831a:	7859      	ldrb	r1, [r3, #1]
 800831c:	789b      	ldrb	r3, [r3, #2]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	430b      	orrs	r3, r1
 8008322:	ba5b      	rev16	r3, r3
 8008324:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 8008326:	f002 f9e7 	bl	800a6f8 <LoRaMacMlmeRequest>
 800832a:	e7b9      	b.n	80082a0 <LmhpComplianceOnMcpsIndication+0xcc>
        else if (mcpsIndication->BufferSize == 7)
 800832c:	2a07      	cmp	r2, #7
 800832e:	d1fa      	bne.n	8008326 <LmhpComplianceOnMcpsIndication+0x152>
          mlmeReq.Type = MLME_TXCW_1;
 8008330:	3a01      	subs	r2, #1
 8008332:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008334:	789a      	ldrb	r2, [r3, #2]
 8008336:	785d      	ldrb	r5, [r3, #1]
 8008338:	0212      	lsls	r2, r2, #8
 800833a:	432a      	orrs	r2, r5
 800833c:	ba52      	rev16	r2, r2
 800833e:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 8008340:	78da      	ldrb	r2, [r3, #3]
 8008342:	7919      	ldrb	r1, [r3, #4]
 8008344:	0412      	lsls	r2, r2, #16
 8008346:	0209      	lsls	r1, r1, #8
 8008348:	430a      	orrs	r2, r1
 800834a:	7959      	ldrb	r1, [r3, #5]
 800834c:	430a      	orrs	r2, r1
 800834e:	2164      	movs	r1, #100	; 0x64
 8008350:	434a      	muls	r2, r1
 8008352:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008354:	799b      	ldrb	r3, [r3, #6]
 8008356:	7303      	strb	r3, [r0, #12]
 8008358:	e7e5      	b.n	8008326 <LmhpComplianceOnMcpsIndication+0x152>
        mlmeReq.Type = MLME_DEVICE_TIME;
 800835a:	230a      	movs	r3, #10
 800835c:	a803      	add	r0, sp, #12
 800835e:	e7b8      	b.n	80082d2 <LmhpComplianceOnMcpsIndication+0xfe>
        mibReq.Type = MIB_DEVICE_CLASS;
 8008360:	4669      	mov	r1, sp
 8008362:	2200      	movs	r2, #0
 8008364:	730a      	strb	r2, [r1, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008366:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008368:	a803      	add	r0, sp, #12
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800836a:	740b      	strb	r3, [r1, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800836c:	f001 ffa6 	bl	800a2bc <LoRaMacMibSetRequestConfirm>
      break;
 8008370:	e77e      	b.n	8008270 <LmhpComplianceOnMcpsIndication+0x9c>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008372:	4669      	mov	r1, sp
 8008374:	220d      	movs	r2, #13
 8008376:	730a      	strb	r2, [r1, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008378:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 800837a:	a803      	add	r0, sp, #12
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800837c:	740b      	strb	r3, [r1, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 800837e:	e7a9      	b.n	80082d4 <LmhpComplianceOnMcpsIndication+0x100>
 8008380:	200007c8 	.word	0x200007c8
 8008384:	ffffe000 	.word	0xffffe000
 8008388:	200007f4 	.word	0x200007f4
 800838c:	200007dc 	.word	0x200007dc
 8008390:	080081cd 	.word	0x080081cd
 8008394:	00001388 	.word	0x00001388

08008398 <LmphCompliancePackageFactory>:
}
 8008398:	4800      	ldr	r0, [pc, #0]	; (800839c <LmphCompliancePackageFactory+0x4>)
 800839a:	4770      	bx	lr
 800839c:	2000018c 	.word	0x2000018c

080083a0 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 80083a0:	2302      	movs	r3, #2
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <OnRadioRxError+0x24>)
{
 80083a4:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80083a6:	7811      	ldrb	r1, [r2, #0]
 80083a8:	430b      	orrs	r3, r1
 80083aa:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80083ac:	23d2      	movs	r3, #210	; 0xd2
 80083ae:	4a06      	ldr	r2, [pc, #24]	; (80083c8 <OnRadioRxError+0x28>)
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	58d3      	ldr	r3, [r2, r3]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <OnRadioRxError+0x20>
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d000      	beq.n	80083c0 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80083be:	4798      	blx	r3
    }
}
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	20000830 	.word	0x20000830
 80083c8:	20000834 	.word	0x20000834

080083cc <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80083cc:	4a05      	ldr	r2, [pc, #20]	; (80083e4 <UpdateRxSlotIdleState+0x18>)
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <UpdateRxSlotIdleState+0x1c>)
 80083d0:	58d3      	ldr	r3, [r2, r3]
 80083d2:	337c      	adds	r3, #124	; 0x7c
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d000      	beq.n	80083dc <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80083da:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80083dc:	2190      	movs	r1, #144	; 0x90
 80083de:	00c9      	lsls	r1, r1, #3
 80083e0:	5453      	strb	r3, [r2, r1]
 80083e2:	4770      	bx	lr
 80083e4:	20000834 	.word	0x20000834
 80083e8:	00000484 	.word	0x00000484

080083ec <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80083ec:	23d2      	movs	r3, #210	; 0xd2
 80083ee:	4a05      	ldr	r2, [pc, #20]	; (8008404 <CallNvmCtxCallback+0x18>)
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	58d3      	ldr	r3, [r2, r3]
{
 80083f4:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <CallNvmCtxCallback+0x16>
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d000      	beq.n	8008402 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8008400:	4798      	blx	r3
    }
}
 8008402:	bd10      	pop	{r4, pc}
 8008404:	20000834 	.word	0x20000834

08008408 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8008408:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 800840a:	2000      	movs	r0, #0
 800840c:	f7ff ffee 	bl	80083ec <CallNvmCtxCallback>
}
 8008410:	bd10      	pop	{r4, pc}

08008412 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8008412:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8008414:	2001      	movs	r0, #1
 8008416:	f7ff ffe9 	bl	80083ec <CallNvmCtxCallback>
}
 800841a:	bd10      	pop	{r4, pc}

0800841c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 800841c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800841e:	2002      	movs	r0, #2
 8008420:	f7ff ffe4 	bl	80083ec <CallNvmCtxCallback>
}
 8008424:	bd10      	pop	{r4, pc}

08008426 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8008426:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8008428:	2003      	movs	r0, #3
 800842a:	f7ff ffdf 	bl	80083ec <CallNvmCtxCallback>
}
 800842e:	bd10      	pop	{r4, pc}

08008430 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8008430:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8008432:	2004      	movs	r0, #4
 8008434:	f7ff ffda 	bl	80083ec <CallNvmCtxCallback>
}
 8008438:	bd10      	pop	{r4, pc}

0800843a <EventConfirmQueueNvmCtxChanged>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
}
*/
static void EventConfirmQueueNvmCtxChanged( void )
{
 800843a:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800843c:	2006      	movs	r0, #6
 800843e:	f7ff ffd5 	bl	80083ec <CallNvmCtxCallback>
}
 8008442:	bd10      	pop	{r4, pc}

08008444 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008446:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 800844a:	a902      	add	r1, sp, #8
 800844c:	58d3      	ldr	r3, [r2, r3]
 800844e:	001a      	movs	r2, r3
 8008450:	32b8      	adds	r2, #184	; 0xb8
 8008452:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 8008454:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008456:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008458:	220d      	movs	r2, #13
 800845a:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800845c:	001a      	movs	r2, r3
 800845e:	32ca      	adds	r2, #202	; 0xca
 8008460:	7812      	ldrb	r2, [r2, #0]
 8008462:	2a00      	cmp	r2, #0
 8008464:	d001      	beq.n	800846a <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008466:	220e      	movs	r2, #14
 8008468:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800846a:	7818      	ldrb	r0, [r3, #0]
 800846c:	f003 fa27 	bl	800b8be <RegionGetPhyParam>
    return phyParam.Value;
 8008470:	b2c0      	uxtb	r0, r0
}
 8008472:	b005      	add	sp, #20
 8008474:	bd00      	pop	{pc}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	20000834 	.word	0x20000834
 800847c:	00000484 	.word	0x00000484

08008480 <OnAckTimeoutTimerEvent>:
{
 8008480:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8008482:	4810      	ldr	r0, [pc, #64]	; (80084c4 <OnAckTimeoutTimerEvent+0x44>)
 8008484:	f005 fde0 	bl	800e048 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <OnAckTimeoutTimerEvent+0x48>)
 800848a:	4a10      	ldr	r2, [pc, #64]	; (80084cc <OnAckTimeoutTimerEvent+0x4c>)
 800848c:	5c9a      	ldrb	r2, [r3, r2]
 800848e:	2a00      	cmp	r2, #0
 8008490:	d002      	beq.n	8008498 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8008492:	2101      	movs	r1, #1
 8008494:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <OnAckTimeoutTimerEvent+0x50>)
 8008496:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008498:	4a0e      	ldr	r2, [pc, #56]	; (80084d4 <OnAckTimeoutTimerEvent+0x54>)
 800849a:	589a      	ldr	r2, [r3, r2]
 800849c:	327c      	adds	r2, #124	; 0x7c
 800849e:	7812      	ldrb	r2, [r2, #0]
 80084a0:	2a02      	cmp	r2, #2
 80084a2:	d104      	bne.n	80084ae <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80084a4:	490c      	ldr	r1, [pc, #48]	; (80084d8 <OnAckTimeoutTimerEvent+0x58>)
 80084a6:	321e      	adds	r2, #30
 80084a8:	5c58      	ldrb	r0, [r3, r1]
 80084aa:	4302      	orrs	r2, r0
 80084ac:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80084ae:	22d2      	movs	r2, #210	; 0xd2
 80084b0:	0092      	lsls	r2, r2, #2
 80084b2:	589b      	ldr	r3, [r3, r2]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <OnAckTimeoutTimerEvent+0x40>
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d000      	beq.n	80084c0 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80084be:	4798      	blx	r3
}
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	20000c2c 	.word	0x20000c2c
 80084c8:	20000834 	.word	0x20000834
 80084cc:	00000414 	.word	0x00000414
 80084d0:	00000413 	.word	0x00000413
 80084d4:	00000484 	.word	0x00000484
 80084d8:	00000481 	.word	0x00000481

080084dc <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80084dc:	22d0      	movs	r2, #208	; 0xd0
 80084de:	2380      	movs	r3, #128	; 0x80
{
 80084e0:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80084e2:	4c0a      	ldr	r4, [pc, #40]	; (800850c <PrepareRxDoneAbort+0x30>)
 80084e4:	0092      	lsls	r2, r2, #2
 80084e6:	58a1      	ldr	r1, [r4, r2]
 80084e8:	430b      	orrs	r3, r1
 80084ea:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80084ec:	4b08      	ldr	r3, [pc, #32]	; (8008510 <PrepareRxDoneAbort+0x34>)
 80084ee:	5ce3      	ldrb	r3, [r4, r3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 80084f4:	2000      	movs	r0, #0
 80084f6:	f7ff ffc3 	bl	8008480 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80084fa:	2322      	movs	r3, #34	; 0x22
 80084fc:	4905      	ldr	r1, [pc, #20]	; (8008514 <PrepareRxDoneAbort+0x38>)
 80084fe:	5c62      	ldrb	r2, [r4, r1]
 8008500:	439a      	bics	r2, r3
 8008502:	4313      	orrs	r3, r2
 8008504:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008506:	f7ff ff61 	bl	80083cc <UpdateRxSlotIdleState>
}
 800850a:	bd10      	pop	{r4, pc}
 800850c:	20000834 	.word	0x20000834
 8008510:	00000414 	.word	0x00000414
 8008514:	00000481 	.word	0x00000481

08008518 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008518:	2301      	movs	r3, #1
 800851a:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <OnRadioRxTimeout+0x30>)
{
 800851c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800851e:	7811      	ldrb	r1, [r2, #0]
 8008520:	430b      	orrs	r3, r1
 8008522:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008524:	23d2      	movs	r3, #210	; 0xd2
 8008526:	4a09      	ldr	r2, [pc, #36]	; (800854c <OnRadioRxTimeout+0x34>)
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	58d3      	ldr	r3, [r2, r3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <OnRadioRxTimeout+0x20>
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d000      	beq.n	8008538 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008536:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8008538:	2201      	movs	r2, #1
 800853a:	2100      	movs	r1, #0
 800853c:	2002      	movs	r0, #2
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <OnRadioRxTimeout+0x38>)
 8008540:	f005 ff50 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 8008544:	bd10      	pop	{r4, pc}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	20000830 	.word	0x20000830
 800854c:	20000834 	.word	0x20000834
 8008550:	0800ef39 	.word	0x0800ef39

08008554 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008554:	2304      	movs	r3, #4
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <OnRadioTxTimeout+0x30>)
{
 8008558:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800855a:	7811      	ldrb	r1, [r2, #0]
 800855c:	430b      	orrs	r3, r1
 800855e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008560:	23d2      	movs	r3, #210	; 0xd2
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <OnRadioTxTimeout+0x34>)
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	58d3      	ldr	r3, [r2, r3]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <OnRadioTxTimeout+0x20>
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d000      	beq.n	8008574 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008572:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8008574:	2201      	movs	r2, #1
 8008576:	2100      	movs	r1, #0
 8008578:	2002      	movs	r0, #2
 800857a:	4b04      	ldr	r3, [pc, #16]	; (800858c <OnRadioTxTimeout+0x38>)
 800857c:	f005 ff32 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 8008580:	bd10      	pop	{r4, pc}
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	20000830 	.word	0x20000830
 8008588:	20000834 	.word	0x20000834
 800858c:	0800ef49 	.word	0x0800ef49

08008590 <HandleRadioRxErrorTimeout>:
{
 8008590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008592:	4c1e      	ldr	r4, [pc, #120]	; (800860c <HandleRadioRxErrorTimeout+0x7c>)
 8008594:	4f1e      	ldr	r7, [pc, #120]	; (8008610 <HandleRadioRxErrorTimeout+0x80>)
{
 8008596:	0006      	movs	r6, r0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008598:	59e3      	ldr	r3, [r4, r7]
{
 800859a:	000d      	movs	r5, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800859c:	337c      	adds	r3, #124	; 0x7c
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d003      	beq.n	80085ac <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <HandleRadioRxErrorTimeout+0x84>)
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	4798      	blx	r3
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80085ac:	2290      	movs	r2, #144	; 0x90
 80085ae:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 80085b0:	4b19      	ldr	r3, [pc, #100]	; (8008618 <HandleRadioRxErrorTimeout+0x88>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80085b2:	5ca2      	ldrb	r2, [r4, r2]
            if( MacCtx.NodeAckRequested == true )
 80085b4:	5ce3      	ldrb	r3, [r4, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	d119      	bne.n	80085ee <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <HandleRadioRxErrorTimeout+0x32>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80085be:	4b17      	ldr	r3, [pc, #92]	; (800861c <HandleRadioRxErrorTimeout+0x8c>)
 80085c0:	54e6      	strb	r6, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80085c2:	0030      	movs	r0, r6
 80085c4:	f002 fd9c 	bl	800b100 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80085c8:	59e3      	ldr	r3, [r4, r7]
 80085ca:	33fc      	adds	r3, #252	; 0xfc
 80085cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80085ce:	f005 fd01 	bl	800dfd4 <UTIL_TIMER_GetElapsedTime>
 80085d2:	23ed      	movs	r3, #237	; 0xed
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	58e3      	ldr	r3, [r4, r3]
 80085d8:	4298      	cmp	r0, r3
 80085da:	d314      	bcc.n	8008606 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80085dc:	4810      	ldr	r0, [pc, #64]	; (8008620 <HandleRadioRxErrorTimeout+0x90>)
 80085de:	f005 fd33 	bl	800e048 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80085e2:	2320      	movs	r3, #32
 80085e4:	4a0f      	ldr	r2, [pc, #60]	; (8008624 <HandleRadioRxErrorTimeout+0x94>)
 80085e6:	5ca1      	ldrb	r1, [r4, r2]
 80085e8:	430b      	orrs	r3, r1
 80085ea:	54a3      	strb	r3, [r4, r2]
 80085ec:	e00b      	b.n	8008606 <HandleRadioRxErrorTimeout+0x76>
            if( MacCtx.NodeAckRequested == true )
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <HandleRadioRxErrorTimeout+0x66>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80085f2:	4b0a      	ldr	r3, [pc, #40]	; (800861c <HandleRadioRxErrorTimeout+0x8c>)
 80085f4:	54e5      	strb	r5, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80085f6:	0028      	movs	r0, r5
 80085f8:	f002 fd82 	bl	800b100 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80085fc:	59e3      	ldr	r3, [r4, r7]
 80085fe:	337c      	adds	r3, #124	; 0x7c
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d1ed      	bne.n	80085e2 <HandleRadioRxErrorTimeout+0x52>
    UpdateRxSlotIdleState( );
 8008606:	f7ff fee1 	bl	80083cc <UpdateRxSlotIdleState>
}
 800860a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800860c:	20000834 	.word	0x20000834
 8008610:	00000484 	.word	0x00000484
 8008614:	0800f22c 	.word	0x0800f22c
 8008618:	00000414 	.word	0x00000414
 800861c:	0000043d 	.word	0x0000043d
 8008620:	20000bcc 	.word	0x20000bcc
 8008624:	00000481 	.word	0x00000481

08008628 <ResetMacParameters>:
{
 8008628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800862a:	22b2      	movs	r2, #178	; 0xb2
 800862c:	2500      	movs	r5, #0
 800862e:	4c2e      	ldr	r4, [pc, #184]	; (80086e8 <ResetMacParameters+0xc0>)
 8008630:	4e2e      	ldr	r6, [pc, #184]	; (80086ec <ResetMacParameters+0xc4>)
 8008632:	0052      	lsls	r2, r2, #1
 8008634:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 8008636:	492e      	ldr	r1, [pc, #184]	; (80086f0 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8008638:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800863a:	1d1a      	adds	r2, r3, #4
 800863c:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 800863e:	2282      	movs	r2, #130	; 0x82
 8008640:	00d2      	lsls	r2, r2, #3
 8008642:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8008644:	001a      	movs	r2, r3
 8008646:	32c8      	adds	r2, #200	; 0xc8
 8008648:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800864a:	2201      	movs	r2, #1
 800864c:	4694      	mov	ip, r2
 800864e:	4661      	mov	r1, ip
 8008650:	324c      	adds	r2, #76	; 0x4c
 8008652:	32ff      	adds	r2, #255	; 0xff
 8008654:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8008656:	001a      	movs	r2, r3
 8008658:	8899      	ldrh	r1, [r3, #4]
 800865a:	3284      	adds	r2, #132	; 0x84
 800865c:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800865e:	1d99      	adds	r1, r3, #6
 8008660:	7fc9      	ldrb	r1, [r1, #31]
 8008662:	3221      	adds	r2, #33	; 0x21
 8008664:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8008666:	0019      	movs	r1, r3
 8008668:	3a7d      	subs	r2, #125	; 0x7d
 800866a:	31a8      	adds	r1, #168	; 0xa8
 800866c:	ca81      	ldmia	r2!, {r0, r7}
 800866e:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8008670:	ca81      	ldmia	r2!, {r0, r7}
 8008672:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8008674:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8008676:	3280      	adds	r2, #128	; 0x80
 8008678:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800867a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 800867c:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800867e:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8008680:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008682:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 8008684:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008686:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 8008688:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800868a:	224c      	movs	r2, #76	; 0x4c
 800868c:	32ff      	adds	r2, #255	; 0xff
 800868e:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008690:	466a      	mov	r2, sp
 8008692:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008694:	7818      	ldrb	r0, [r3, #0]
 8008696:	4669      	mov	r1, sp
 8008698:	f003 f924 	bl	800b8e4 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <ResetMacParameters+0xd0>)
 800869e:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80086a0:	3b49      	subs	r3, #73	; 0x49
 80086a2:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80086a4:	59a3      	ldr	r3, [r4, r6]
 80086a6:	001a      	movs	r2, r3
 80086a8:	32a8      	adds	r2, #168	; 0xa8
 80086aa:	6811      	ldr	r1, [r2, #0]
 80086ac:	22f4      	movs	r2, #244	; 0xf4
 80086ae:	0092      	lsls	r2, r2, #2
 80086b0:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80086b2:	001a      	movs	r2, r3
 80086b4:	32b9      	adds	r2, #185	; 0xb9
 80086b6:	7811      	ldrb	r1, [r2, #0]
 80086b8:	22f7      	movs	r2, #247	; 0xf7
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80086be:	33ca      	adds	r3, #202	; 0xca
 80086c0:	781a      	ldrb	r2, [r3, #0]
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <ResetMacParameters+0xd4>)
 80086c4:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80086c6:	2280      	movs	r2, #128	; 0x80
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <ResetMacParameters+0xd8>)
 80086ca:	0052      	lsls	r2, r2, #1
 80086cc:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80086ce:	22f3      	movs	r2, #243	; 0xf3
 80086d0:	3302      	adds	r3, #2
 80086d2:	0092      	lsls	r2, r2, #2
 80086d4:	18e3      	adds	r3, r4, r3
 80086d6:	18a2      	adds	r2, r4, r2
 80086d8:	ca23      	ldmia	r2!, {r0, r1, r5}
 80086da:	c323      	stmia	r3!, {r0, r1, r5}
 80086dc:	ca03      	ldmia	r2!, {r0, r1}
 80086de:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80086e0:	4b08      	ldr	r3, [pc, #32]	; (8008704 <ResetMacParameters+0xdc>)
 80086e2:	4a09      	ldr	r2, [pc, #36]	; (8008708 <ResetMacParameters+0xe0>)
 80086e4:	52e2      	strh	r2, [r4, r3]
}
 80086e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80086e8:	20000834 	.word	0x20000834
 80086ec:	00000484 	.word	0x00000484
 80086f0:	00010100 	.word	0x00010100
 80086f4:	00000414 	.word	0x00000414
 80086f8:	00000415 	.word	0x00000415
 80086fc:	000003dd 	.word	0x000003dd
 8008700:	000003de 	.word	0x000003de
 8008704:	000003f2 	.word	0x000003f2
 8008708:	00000201 	.word	0x00000201

0800870c <OpenContinuousRxCWindow>:
{
 800870c:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800870e:	4c14      	ldr	r4, [pc, #80]	; (8008760 <OpenContinuousRxCWindow+0x54>)
 8008710:	4e14      	ldr	r6, [pc, #80]	; (8008764 <OpenContinuousRxCWindow+0x58>)
 8008712:	4d15      	ldr	r5, [pc, #84]	; (8008768 <OpenContinuousRxCWindow+0x5c>)
 8008714:	59a3      	ldr	r3, [r4, r6]
{
 8008716:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8008718:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800871a:	001a      	movs	r2, r3
 800871c:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800871e:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008720:	7809      	ldrb	r1, [r1, #0]
 8008722:	328c      	adds	r2, #140	; 0x8c
 8008724:	7818      	ldrb	r0, [r3, #0]
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	3788      	adds	r7, #136	; 0x88
 800872a:	9500      	str	r5, [sp, #0]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	b249      	sxtb	r1, r1
 8008730:	f003 f8ff 	bl	800b932 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <OpenContinuousRxCWindow+0x60>)
 8008736:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008738:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800873a:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800873c:	59a3      	ldr	r3, [r4, r6]
 800873e:	4a0d      	ldr	r2, [pc, #52]	; (8008774 <OpenContinuousRxCWindow+0x68>)
 8008740:	7818      	ldrb	r0, [r3, #0]
 8008742:	f003 f901 	bl	800b948 <RegionRxConfig>
 8008746:	2800      	cmp	r0, #0
 8008748:	d008      	beq.n	800875c <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <OpenContinuousRxCWindow+0x6c>)
 800874c:	2000      	movs	r0, #0
 800874e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8008754:	4b09      	ldr	r3, [pc, #36]	; (800877c <OpenContinuousRxCWindow+0x70>)
 8008756:	5ce2      	ldrb	r2, [r4, r3]
 8008758:	338d      	adds	r3, #141	; 0x8d
 800875a:	54e2      	strb	r2, [r4, r3]
}
 800875c:	b005      	add	sp, #20
 800875e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008760:	20000834 	.word	0x20000834
 8008764:	00000484 	.word	0x00000484
 8008768:	20000c14 	.word	0x20000c14
 800876c:	000003f2 	.word	0x000003f2
 8008770:	00000201 	.word	0x00000201
 8008774:	20000c54 	.word	0x20000c54
 8008778:	0800f22c 	.word	0x0800f22c
 800877c:	000003f3 	.word	0x000003f3

08008780 <SwitchClass>:
{
 8008780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <SwitchClass+0xbc>)
{
 8008784:	9000      	str	r0, [sp, #0]
    switch( MacCtx.NvmCtx->DeviceClass )
 8008786:	482e      	ldr	r0, [pc, #184]	; (8008840 <SwitchClass+0xc0>)
 8008788:	58c3      	ldr	r3, [r0, r3]
 800878a:	001a      	movs	r2, r3
 800878c:	327c      	adds	r2, #124	; 0x7c
 800878e:	7815      	ldrb	r5, [r2, #0]
 8008790:	2d00      	cmp	r5, #0
 8008792:	d003      	beq.n	800879c <SwitchClass+0x1c>
 8008794:	2d02      	cmp	r5, #2
 8008796:	d046      	beq.n	8008826 <SwitchClass+0xa6>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008798:	2503      	movs	r5, #3
 800879a:	e042      	b.n	8008822 <SwitchClass+0xa2>
            if( deviceClass == CLASS_A )
 800879c:	9900      	ldr	r1, [sp, #0]
 800879e:	2900      	cmp	r1, #0
 80087a0:	d105      	bne.n	80087ae <SwitchClass+0x2e>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80087a2:	001a      	movs	r2, r3
 80087a4:	33a8      	adds	r3, #168	; 0xa8
 80087a6:	32b0      	adds	r2, #176	; 0xb0
 80087a8:	cb03      	ldmia	r3!, {r0, r1}
 80087aa:	c203      	stmia	r2!, {r0, r1}
            if( deviceClass == CLASS_C )
 80087ac:	e7f4      	b.n	8008798 <SwitchClass+0x18>
 80087ae:	9900      	ldr	r1, [sp, #0]
 80087b0:	2902      	cmp	r1, #2
 80087b2:	d1f1      	bne.n	8008798 <SwitchClass+0x18>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80087b4:	7011      	strb	r1, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80087b6:	22f8      	movs	r2, #248	; 0xf8
 80087b8:	21f3      	movs	r1, #243	; 0xf3
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	0089      	lsls	r1, r1, #2
 80087be:	1882      	adds	r2, r0, r2
 80087c0:	1841      	adds	r1, r0, r1
 80087c2:	c9d0      	ldmia	r1!, {r4, r6, r7}
 80087c4:	c2d0      	stmia	r2!, {r4, r6, r7}
 80087c6:	c950      	ldmia	r1!, {r4, r6}
 80087c8:	c250      	stmia	r2!, {r4, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80087ca:	4a1e      	ldr	r2, [pc, #120]	; (8008844 <SwitchClass+0xc4>)
 80087cc:	9900      	ldr	r1, [sp, #0]
 80087ce:	5481      	strb	r1, [r0, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80087d0:	001a      	movs	r2, r3
 80087d2:	3252      	adds	r2, #82	; 0x52
 80087d4:	7812      	ldrb	r2, [r2, #0]
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d01a      	beq.n	8008810 <SwitchClass+0x90>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80087da:	0019      	movs	r1, r3
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80087dc:	001c      	movs	r4, r3
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80087de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80087e0:	31b0      	adds	r1, #176	; 0xb0
 80087e2:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80087e4:	346c      	adds	r4, #108	; 0x6c
 80087e6:	7824      	ldrb	r4, [r4, #0]
 80087e8:	710c      	strb	r4, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80087ea:	4917      	ldr	r1, [pc, #92]	; (8008848 <SwitchClass+0xc8>)
 80087ec:	5c44      	ldrb	r4, [r0, r1]
 80087ee:	3935      	subs	r1, #53	; 0x35
 80087f0:	5444      	strb	r4, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80087f2:	3104      	adds	r1, #4
 80087f4:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80087f6:	001a      	movs	r2, r3
 80087f8:	32b9      	adds	r2, #185	; 0xb9
 80087fa:	7811      	ldrb	r1, [r2, #0]
 80087fc:	22fc      	movs	r2, #252	; 0xfc
 80087fe:	0092      	lsls	r2, r2, #2
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008800:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008802:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <SwitchClass+0xcc>)
 8008808:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800880a:	4b11      	ldr	r3, [pc, #68]	; (8008850 <SwitchClass+0xd0>)
 800880c:	4a11      	ldr	r2, [pc, #68]	; (8008854 <SwitchClass+0xd4>)
 800880e:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 8008810:	2200      	movs	r2, #0
 8008812:	4b11      	ldr	r3, [pc, #68]	; (8008858 <SwitchClass+0xd8>)
 8008814:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 8008816:	4b11      	ldr	r3, [pc, #68]	; (800885c <SwitchClass+0xdc>)
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800881e:	f7ff ff75 	bl	800870c <OpenContinuousRxCWindow>
}
 8008822:	0028      	movs	r0, r5
 8008824:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 8008826:	9b00      	ldr	r3, [sp, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008828:	2503      	movs	r5, #3
            if( deviceClass == CLASS_A )
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f9      	bne.n	8008822 <SwitchClass+0xa2>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800882e:	7013      	strb	r3, [r2, #0]
                Radio.Sleep( );
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <SwitchClass+0xdc>)
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008838:	9d00      	ldr	r5, [sp, #0]
 800883a:	e7f2      	b.n	8008822 <SwitchClass+0xa2>
 800883c:	00000484 	.word	0x00000484
 8008840:	20000834 	.word	0x20000834
 8008844:	000003f3 	.word	0x000003f3
 8008848:	00000415 	.word	0x00000415
 800884c:	000003f1 	.word	0x000003f1
 8008850:	000003f2 	.word	0x000003f2
 8008854:	00000301 	.word	0x00000301
 8008858:	00000414 	.word	0x00000414
 800885c:	0800f22c 	.word	0x0800f22c

08008860 <OnRadioRxDone>:
{
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	000e      	movs	r6, r1
 8008864:	0015      	movs	r5, r2
 8008866:	001c      	movs	r4, r3
 8008868:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800886a:	f005 fba9 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008870:	4a0e      	ldr	r2, [pc, #56]	; (80088ac <OnRadioRxDone+0x4c>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008872:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8008874:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 8008876:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8008878:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 800887a:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800887c:	2308      	movs	r3, #8
 800887e:	7811      	ldrb	r1, [r2, #0]
 8008880:	430b      	orrs	r3, r1
 8008882:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008884:	23d2      	movs	r3, #210	; 0xd2
 8008886:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <OnRadioRxDone+0x50>)
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	58d3      	ldr	r3, [r2, r3]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <OnRadioRxDone+0x38>
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d000      	beq.n	8008898 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008896:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8008898:	2201      	movs	r2, #1
 800889a:	2100      	movs	r1, #0
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <OnRadioRxDone+0x54>)
 800889e:	2002      	movs	r0, #2
 80088a0:	f005 fda0 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a6:	46c0      	nop			; (mov r8, r8)
 80088a8:	20000e2c 	.word	0x20000e2c
 80088ac:	20000830 	.word	0x20000830
 80088b0:	20000834 	.word	0x20000834
 80088b4:	0800ef59 	.word	0x0800ef59

080088b8 <OnRadioTxDone>:
{
 80088b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80088ba:	f005 fb81 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80088be:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80088c2:	4d10      	ldr	r5, [pc, #64]	; (8008904 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80088c4:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80088c6:	0020      	movs	r0, r4
 80088c8:	f005 f92c 	bl	800db24 <SysTimeGet>
 80088cc:	23ce      	movs	r3, #206	; 0xce
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	18eb      	adds	r3, r5, r3
 80088d2:	cc06      	ldmia	r4!, {r1, r2}
 80088d4:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80088d6:	2310      	movs	r3, #16
 80088d8:	4a0b      	ldr	r2, [pc, #44]	; (8008908 <OnRadioTxDone+0x50>)
 80088da:	7811      	ldrb	r1, [r2, #0]
 80088dc:	430b      	orrs	r3, r1
 80088de:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80088e0:	23d2      	movs	r3, #210	; 0xd2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	58eb      	ldr	r3, [r5, r3]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <OnRadioTxDone+0x3a>
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d000      	beq.n	80088f2 <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80088f0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80088f2:	2201      	movs	r2, #1
 80088f4:	2100      	movs	r1, #0
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <OnRadioTxDone+0x54>)
 80088f8:	2002      	movs	r0, #2
 80088fa:	f005 fd73 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 80088fe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8008900:	20000e3c 	.word	0x20000e3c
 8008904:	20000834 	.word	0x20000834
 8008908:	20000830 	.word	0x20000830
 800890c:	0800ef66 	.word	0x0800ef66

08008910 <ScheduleTx>:
{
 8008910:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8008912:	4cb9      	ldr	r4, [pc, #740]	; (8008bf8 <ScheduleTx+0x2e8>)
 8008914:	4db9      	ldr	r5, [pc, #740]	; (8008bfc <ScheduleTx+0x2ec>)
{
 8008916:	b095      	sub	sp, #84	; 0x54
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8008918:	5963      	ldr	r3, [r4, r5]
{
 800891a:	9003      	str	r0, [sp, #12]
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 800891c:	0019      	movs	r1, r3
 800891e:	31fc      	adds	r1, #252	; 0xfc
 8008920:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008922:	2a00      	cmp	r2, #0
 8008924:	d108      	bne.n	8008938 <ScheduleTx+0x28>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008926:	324d      	adds	r2, #77	; 0x4d
 8008928:	32ff      	adds	r2, #255	; 0xff
 800892a:	5a9a      	ldrh	r2, [r3, r2]
 800892c:	2383      	movs	r3, #131	; 0x83
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	58e3      	ldr	r3, [r4, r3]
 8008932:	3a01      	subs	r2, #1
 8008934:	4353      	muls	r3, r2
 8008936:	658b      	str	r3, [r1, #88]	; 0x58
    switch( MacCtx.TxMsg.Type )
 8008938:	0026      	movs	r6, r4
 800893a:	36ff      	adds	r6, #255	; 0xff
 800893c:	7973      	ldrb	r3, [r6, #5]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <ScheduleTx+0x3a>
 8008942:	2b04      	cmp	r3, #4
 8008944:	d064      	beq.n	8008a10 <ScheduleTx+0x100>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008946:	2703      	movs	r7, #3
 8008948:	e05f      	b.n	8008a0a <ScheduleTx+0xfa>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800894a:	48ad      	ldr	r0, [pc, #692]	; (8008c00 <ScheduleTx+0x2f0>)
 800894c:	f002 ff0e 	bl	800b76c <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008950:	2800      	cmp	r0, #0
 8008952:	d000      	beq.n	8008956 <ScheduleTx+0x46>
 8008954:	e14c      	b.n	8008bf0 <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008956:	7b73      	ldrb	r3, [r6, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008958:	ae0e      	add	r6, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800895a:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800895c:	5963      	ldr	r3, [r4, r5]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800895e:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008960:	001a      	movs	r2, r3
 8008962:	32fc      	adds	r2, #252	; 0xfc
 8008964:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8008966:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008968:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800896a:	001a      	movs	r2, r3
 800896c:	3285      	adds	r2, #133	; 0x85
 800896e:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008970:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008972:	7232      	strb	r2, [r6, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	72b3      	strb	r3, [r6, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8008978:	f005 f900 	bl	800db7c <SysTimeGetMcuTime>
 800897c:	5963      	ldr	r3, [r4, r5]
 800897e:	9908      	ldr	r1, [sp, #32]
 8008980:	001a      	movs	r2, r3
 8008982:	325d      	adds	r2, #93	; 0x5d
 8008984:	32ff      	adds	r2, #255	; 0xff
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	0038      	movs	r0, r7
 800898a:	9200      	str	r2, [sp, #0]
 800898c:	22ac      	movs	r2, #172	; 0xac
 800898e:	0052      	lsls	r2, r2, #1
 8008990:	589b      	ldr	r3, [r3, r2]
 8008992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008994:	f005 f888 	bl	800daa8 <SysTimeSub>
 8008998:	ab11      	add	r3, sp, #68	; 0x44
 800899a:	cf06      	ldmia	r7!, {r1, r2}
 800899c:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 800899e:	5963      	ldr	r3, [r4, r5]
    nextChan.Joined = true;
 80089a0:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80089a2:	001a      	movs	r2, r3
 80089a4:	32fc      	adds	r2, #252	; 0xfc
 80089a6:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 80089a8:	7271      	strb	r1, [r6, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80089aa:	6072      	str	r2, [r6, #4]
    nextChan.LastTxIsJoinRequest = false;
 80089ac:	2200      	movs	r2, #0
 80089ae:	7532      	strb	r2, [r6, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80089b0:	8822      	ldrh	r2, [r4, #0]
 80089b2:	82f2      	strh	r2, [r6, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80089b4:	22b2      	movs	r2, #178	; 0xb2
 80089b6:	0052      	lsls	r2, r2, #1
 80089b8:	5c9a      	ldrb	r2, [r3, r2]
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	d101      	bne.n	80089c2 <ScheduleTx+0xb2>
        nextChan.LastTxIsJoinRequest = true;
 80089be:	7531      	strb	r1, [r6, #20]
        nextChan.Joined = false;
 80089c0:	7272      	strb	r2, [r6, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 80089c2:	7818      	ldrb	r0, [r3, #0]
 80089c4:	3355      	adds	r3, #85	; 0x55
 80089c6:	33ff      	adds	r3, #255	; 0xff
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	0031      	movs	r1, r6
 80089cc:	4b8d      	ldr	r3, [pc, #564]	; (8008c04 <ScheduleTx+0x2f4>)
 80089ce:	4a8e      	ldr	r2, [pc, #568]	; (8008c08 <ScheduleTx+0x2f8>)
 80089d0:	f003 f817 	bl	800ba02 <RegionNextChannel>
 80089d4:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 80089d6:	d01f      	beq.n	8008a18 <ScheduleTx+0x108>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80089d8:	280b      	cmp	r0, #11
 80089da:	d116      	bne.n	8008a0a <ScheduleTx+0xfa>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d013      	beq.n	8008a0a <ScheduleTx+0xfa>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80089e2:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 80089e4:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 80089e6:	4b84      	ldr	r3, [pc, #528]	; (8008bf8 <ScheduleTx+0x2e8>)
 80089e8:	00d2      	lsls	r2, r2, #3
 80089ea:	5899      	ldr	r1, [r3, r2]
 80089ec:	42b9      	cmp	r1, r7
 80089ee:	d00c      	beq.n	8008a0a <ScheduleTx+0xfa>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80089f0:	20d0      	movs	r0, #208	; 0xd0
 80089f2:	2220      	movs	r2, #32
 80089f4:	0080      	lsls	r0, r0, #2
 80089f6:	581c      	ldr	r4, [r3, r0]
 80089f8:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80089fa:	4c84      	ldr	r4, [pc, #528]	; (8008c0c <ScheduleTx+0x2fc>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80089fc:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80089fe:	0020      	movs	r0, r4
 8008a00:	f005 fbd2 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008a04:	0020      	movs	r0, r4
 8008a06:	f005 fb73 	bl	800e0f0 <UTIL_TIMER_Start>
}
 8008a0a:	0038      	movs	r0, r7
 8008a0c:	b015      	add	sp, #84	; 0x54
 8008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008a10:	487b      	ldr	r0, [pc, #492]	; (8008c00 <ScheduleTx+0x2f0>)
 8008a12:	f002 fee0 	bl	800b7d6 <LoRaMacSerializerData>
 8008a16:	e79b      	b.n	8008950 <ScheduleTx+0x40>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a18:	5961      	ldr	r1, [r4, r5]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008a1a:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8008a1c:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008a1e:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8008a20:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a22:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	31b9      	adds	r1, #185	; 0xb9
 8008a2a:	0030      	movs	r0, r6
 8008a2c:	7809      	ldrb	r1, [r1, #0]
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	b252      	sxtb	r2, r2
 8008a32:	f002 fffb 	bl	800ba2c <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a36:	2288      	movs	r2, #136	; 0x88
 8008a38:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8008a3a:	5963      	ldr	r3, [r4, r5]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a3c:	b241      	sxtb	r1, r0
 8008a3e:	449c      	add	ip, r3
 8008a40:	338c      	adds	r3, #140	; 0x8c
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	4b72      	ldr	r3, [pc, #456]	; (8008c10 <ScheduleTx+0x300>)
 8008a46:	0030      	movs	r0, r6
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	4663      	mov	r3, ip
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f002 ff70 	bl	800b932 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a52:	5963      	ldr	r3, [r4, r5]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008a54:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a56:	001a      	movs	r2, r3
 8008a58:	001e      	movs	r6, r3
 8008a5a:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008a5c:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008a5e:	4b6d      	ldr	r3, [pc, #436]	; (8008c14 <ScheduleTx+0x304>)
 8008a60:	7809      	ldrb	r1, [r1, #0]
 8008a62:	328c      	adds	r2, #140	; 0x8c
 8008a64:	7812      	ldrb	r2, [r2, #0]
 8008a66:	3688      	adds	r6, #136	; 0x88
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	6833      	ldr	r3, [r6, #0]
 8008a6c:	b249      	sxtb	r1, r1
 8008a6e:	f002 ff60 	bl	800b932 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008a72:	22f1      	movs	r2, #241	; 0xf1
 8008a74:	0092      	lsls	r2, r2, #2
 8008a76:	5963      	ldr	r3, [r4, r5]
 8008a78:	58a2      	ldr	r2, [r4, r2]
 8008a7a:	20ec      	movs	r0, #236	; 0xec
 8008a7c:	0011      	movs	r1, r2
 8008a7e:	001a      	movs	r2, r3
 8008a80:	3294      	adds	r2, #148	; 0x94
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	0080      	lsls	r0, r0, #2
 8008a86:	1852      	adds	r2, r2, r1
 8008a88:	5022      	str	r2, [r4, r0]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008a8a:	22f6      	movs	r2, #246	; 0xf6
 8008a8c:	0092      	lsls	r2, r2, #2
 8008a8e:	58a0      	ldr	r0, [r4, r2]
 8008a90:	001a      	movs	r2, r3
 8008a92:	26ed      	movs	r6, #237	; 0xed
 8008a94:	3298      	adds	r2, #152	; 0x98
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	00b6      	lsls	r6, r6, #2
 8008a9a:	1812      	adds	r2, r2, r0
 8008a9c:	51a2      	str	r2, [r4, r6]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008a9e:	22b2      	movs	r2, #178	; 0xb2
 8008aa0:	0052      	lsls	r2, r2, #1
 8008aa2:	5c9a      	ldrb	r2, [r3, r2]
 8008aa4:	4694      	mov	ip, r2
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d10a      	bne.n	8008ac0 <ScheduleTx+0x1b0>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008aaa:	001a      	movs	r2, r3
 8008aac:	329c      	adds	r2, #156	; 0x9c
 8008aae:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008ab0:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008ab2:	1852      	adds	r2, r2, r1
 8008ab4:	21ec      	movs	r1, #236	; 0xec
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008ab6:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008ab8:	0089      	lsls	r1, r1, #2
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008aba:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008abc:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008abe:	51a0      	str	r0, [r4, r6]
    size_t macCmdsSize = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008ac4:	4663      	mov	r3, ip
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d012      	beq.n	8008af0 <ScheduleTx+0x1e0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008aca:	a80a      	add	r0, sp, #40	; 0x28
 8008acc:	f002 fa18 	bl	800af00 <LoRaMacCommandsGetSizeSerializedCmds>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d16f      	bne.n	8008bb4 <ScheduleTx+0x2a4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008ad4:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008ad6:	4b48      	ldr	r3, [pc, #288]	; (8008bf8 <ScheduleTx+0x2e8>)
 8008ad8:	4a4f      	ldr	r2, [pc, #316]	; (8008c18 <ScheduleTx+0x308>)
 8008ada:	5c9c      	ldrb	r4, [r3, r2]
 8008adc:	595b      	ldr	r3, [r3, r5]
 8008ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008ae0:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008ae2:	b2d6      	uxtb	r6, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008ae4:	f7ff fcae 	bl	8008444 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008ae8:	19a4      	adds	r4, r4, r6
 8008aea:	b280      	uxth	r0, r0
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	d35f      	bcc.n	8008bb0 <ScheduleTx+0x2a0>
    return SendFrameOnChannel( MacCtx.Channel );
 8008af0:	4c41      	ldr	r4, [pc, #260]	; (8008bf8 <ScheduleTx+0x2e8>)
 8008af2:	4b4a      	ldr	r3, [pc, #296]	; (8008c1c <ScheduleTx+0x30c>)
    int8_t txPower = 0;
 8008af4:	2200      	movs	r2, #0
    return SendFrameOnChannel( MacCtx.Channel );
 8008af6:	5ce6      	ldrb	r6, [r4, r3]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008af8:	5963      	ldr	r3, [r4, r5]
    int8_t txPower = 0;
 8008afa:	a902      	add	r1, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008afc:	0018      	movs	r0, r3
    int8_t txPower = 0;
 8008afe:	74ca      	strb	r2, [r1, #19]
    txConfig.Channel = channel;
 8008b00:	a90a      	add	r1, sp, #40	; 0x28
 8008b02:	700e      	strb	r6, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b04:	3085      	adds	r0, #133	; 0x85
 8008b06:	7802      	ldrb	r2, [r0, #0]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008b08:	3801      	subs	r0, #1
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b0a:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008b0c:	7802      	ldrb	r2, [r0, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008b0e:	3038      	adds	r0, #56	; 0x38
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008b10:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008b12:	6800      	ldr	r0, [r0, #0]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008b14:	8822      	ldrh	r2, [r4, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008b16:	6048      	str	r0, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008b18:	0018      	movs	r0, r3
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008b1a:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008b1c:	30c0      	adds	r0, #192	; 0xc0
 8008b1e:	6800      	ldr	r0, [r0, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008b20:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008b22:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008b24:	2213      	movs	r2, #19
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8008b26:	6088      	str	r0, [r1, #8]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008b28:	a802      	add	r0, sp, #8
 8008b2a:	1812      	adds	r2, r2, r0
 8008b2c:	4b3c      	ldr	r3, [pc, #240]	; (8008c20 <ScheduleTx+0x310>)
 8008b2e:	4660      	mov	r0, ip
 8008b30:	f002 ff16 	bl	800b960 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b34:	2201      	movs	r2, #1
 8008b36:	4b3b      	ldr	r3, [pc, #236]	; (8008c24 <ScheduleTx+0x314>)
    MacCtx.McpsConfirm.TxPower = txPower;
 8008b38:	a902      	add	r1, sp, #8
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b3a:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b3c:	5963      	ldr	r3, [r4, r5]
    MacCtx.McpsConfirm.TxPower = txPower;
 8008b3e:	7cca      	ldrb	r2, [r1, #19]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008b40:	3385      	adds	r3, #133	; 0x85
 8008b42:	781d      	ldrb	r5, [r3, #0]
 8008b44:	4b38      	ldr	r3, [pc, #224]	; (8008c28 <ScheduleTx+0x318>)
 8008b46:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8008b48:	4b38      	ldr	r3, [pc, #224]	; (8008c2c <ScheduleTx+0x31c>)
 8008b4a:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8008b4c:	4b38      	ldr	r3, [pc, #224]	; (8008c30 <ScheduleTx+0x320>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008b4e:	4a39      	ldr	r2, [pc, #228]	; (8008c34 <ScheduleTx+0x324>)
    MacCtx.McpsConfirm.Channel = channel;
 8008b50:	50e6      	str	r6, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008b52:	3b34      	subs	r3, #52	; 0x34
 8008b54:	58e3      	ldr	r3, [r4, r3]
    switch( MacCtx.TxMsg.Type )
 8008b56:	0026      	movs	r6, r4
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008b58:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008b5a:	4a37      	ldr	r2, [pc, #220]	; (8008c38 <ScheduleTx+0x328>)
    switch( MacCtx.TxMsg.Type )
 8008b5c:	36ff      	adds	r6, #255	; 0xff
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008b5e:	50a3      	str	r3, [r4, r2]
    uint32_t fCntUp = 0;
 8008b60:	2200      	movs	r2, #0
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008b62:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <ScheduleTx+0x30c>)
 8008b64:	5ce3      	ldrb	r3, [r4, r3]
    uint32_t fCntUp = 0;
 8008b66:	9207      	str	r2, [sp, #28]
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008b68:	9303      	str	r3, [sp, #12]
    switch( MacCtx.TxMsg.Type )
 8008b6a:	7973      	ldrb	r3, [r6, #5]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d023      	beq.n	8008bb8 <ScheduleTx+0x2a8>
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d000      	beq.n	8008b76 <ScheduleTx+0x266>
 8008b74:	e6e7      	b.n	8008946 <ScheduleTx+0x36>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008b76:	a807      	add	r0, sp, #28
 8008b78:	f002 fc44 	bl	800b404 <LoRaMacCryptoGetFCntUp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d139      	bne.n	8008bf4 <ScheduleTx+0x2e4>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008b80:	2382      	movs	r3, #130	; 0x82
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	5ce3      	ldrb	r3, [r4, r3]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d103      	bne.n	8008b92 <ScheduleTx+0x282>
 8008b8a:	4b2c      	ldr	r3, [pc, #176]	; (8008c3c <ScheduleTx+0x32c>)
 8008b8c:	5ce3      	ldrb	r3, [r4, r3]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d902      	bls.n	8008b98 <ScheduleTx+0x288>
                fCntUp -= 1;
 8008b92:	9b07      	ldr	r3, [sp, #28]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008b98:	0029      	movs	r1, r5
 8008b9a:	4b19      	ldr	r3, [pc, #100]	; (8008c00 <ScheduleTx+0x2f0>)
 8008b9c:	9a03      	ldr	r2, [sp, #12]
 8008b9e:	9807      	ldr	r0, [sp, #28]
 8008ba0:	f002 fc8c 	bl	800b4bc <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d123      	bne.n	8008bf0 <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008ba8:	0023      	movs	r3, r4
 8008baa:	33ff      	adds	r3, #255	; 0xff
 8008bac:	7b5b      	ldrb	r3, [r3, #13]
 8008bae:	e009      	b.n	8008bc4 <ScheduleTx+0x2b4>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008bb0:	2708      	movs	r7, #8
 8008bb2:	e72a      	b.n	8008a0a <ScheduleTx+0xfa>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008bb4:	2713      	movs	r7, #19
 8008bb6:	e728      	b.n	8008a0a <ScheduleTx+0xfa>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008bb8:	4811      	ldr	r0, [pc, #68]	; (8008c00 <ScheduleTx+0x2f0>)
 8008bba:	f002 fc4f 	bl	800b45c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d116      	bne.n	8008bf0 <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008bc2:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008bc4:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008bc6:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	0092      	lsls	r2, r2, #2
 8008bcc:	58a1      	ldr	r1, [r4, r2]
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8008bd2:	4b1b      	ldr	r3, [pc, #108]	; (8008c40 <ScheduleTx+0x330>)
 8008bd4:	5ce3      	ldrb	r3, [r4, r3]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d103      	bne.n	8008be2 <ScheduleTx+0x2d2>
        MacCtx.ChannelsNbTransCounter++;
 8008bda:	32d0      	adds	r2, #208	; 0xd0
 8008bdc:	5ca3      	ldrb	r3, [r4, r2]
 8008bde:	3301      	adds	r3, #1
 8008be0:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008be2:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <ScheduleTx+0x334>)
 8008be4:	7821      	ldrb	r1, [r4, #0]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	4817      	ldr	r0, [pc, #92]	; (8008c48 <ScheduleTx+0x338>)
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	4798      	blx	r3
    return SendFrameOnChannel( MacCtx.Channel );
 8008bee:	e70c      	b.n	8008a0a <ScheduleTx+0xfa>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008bf0:	2711      	movs	r7, #17
 8008bf2:	e70a      	b.n	8008a0a <ScheduleTx+0xfa>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008bf4:	2712      	movs	r7, #18
 8008bf6:	e708      	b.n	8008a0a <ScheduleTx+0xfa>
 8008bf8:	20000834 	.word	0x20000834
 8008bfc:	00000484 	.word	0x00000484
 8008c00:	2000093c 	.word	0x2000093c
 8008c04:	20000cbc 	.word	0x20000cbc
 8008c08:	20000c49 	.word	0x20000c49
 8008c0c:	20000b9c 	.word	0x20000b9c
 8008c10:	20000bec 	.word	0x20000bec
 8008c14:	20000c00 	.word	0x20000c00
 8008c18:	00000237 	.word	0x00000237
 8008c1c:	00000415 	.word	0x00000415
 8008c20:	20000c4c 	.word	0x20000c4c
 8008c24:	0000043d 	.word	0x0000043d
 8008c28:	0000043e 	.word	0x0000043e
 8008c2c:	0000043f 	.word	0x0000043f
 8008c30:	0000044c 	.word	0x0000044c
 8008c34:	00000444 	.word	0x00000444
 8008c38:	00000454 	.word	0x00000454
 8008c3c:	00000412 	.word	0x00000412
 8008c40:	00000414 	.word	0x00000414
 8008c44:	0800f22c 	.word	0x0800f22c
 8008c48:	20000836 	.word	0x20000836

08008c4c <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8008c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c4e:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8008c50:	f005 f9fa 	bl	800e048 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8008c54:	4e0c      	ldr	r6, [pc, #48]	; (8008c88 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008c56:	4f0d      	ldr	r7, [pc, #52]	; (8008c8c <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8008c58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008c5e:	4d0c      	ldr	r5, [pc, #48]	; (8008c90 <RxWindowSetup.constprop.0+0x44>)
 8008c60:	0021      	movs	r1, r4
 8008c62:	59eb      	ldr	r3, [r5, r7]
 8008c64:	4a0b      	ldr	r2, [pc, #44]	; (8008c94 <RxWindowSetup.constprop.0+0x48>)
 8008c66:	7818      	ldrb	r0, [r3, #0]
 8008c68:	f002 fe6e 	bl	800b948 <RegionRxConfig>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d009      	beq.n	8008c84 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8008c70:	59eb      	ldr	r3, [r5, r7]
 8008c72:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8008c74:	3390      	adds	r3, #144	; 0x90
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	9201      	str	r2, [sp, #4]
 8008c7a:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 8008c7c:	2390      	movs	r3, #144	; 0x90
 8008c7e:	7ce2      	ldrb	r2, [r4, #19]
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	54ea      	strb	r2, [r5, r3]
}
 8008c84:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	0800f22c 	.word	0x0800f22c
 8008c8c:	00000484 	.word	0x00000484
 8008c90:	20000834 	.word	0x20000834
 8008c94:	20000c54 	.word	0x20000c54

08008c98 <OnRxWindow1TimerEvent>:
{
 8008c98:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8008c9a:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <OnRxWindow1TimerEvent+0x40>)
 8008c9c:	4a0f      	ldr	r2, [pc, #60]	; (8008cdc <OnRxWindow1TimerEvent+0x44>)
 8008c9e:	5c99      	ldrb	r1, [r3, r2]
 8008ca0:	3a5d      	subs	r2, #93	; 0x5d
 8008ca2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8008ca4:	4a0e      	ldr	r2, [pc, #56]	; (8008ce0 <OnRxWindow1TimerEvent+0x48>)
 8008ca6:	589a      	ldr	r2, [r3, r2]
 8008ca8:	0011      	movs	r1, r2
 8008caa:	31a5      	adds	r1, #165	; 0xa5
 8008cac:	7808      	ldrb	r0, [r1, #0]
 8008cae:	490d      	ldr	r1, [pc, #52]	; (8008ce4 <OnRxWindow1TimerEvent+0x4c>)
 8008cb0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008cb2:	0011      	movs	r1, r2
 8008cb4:	31b9      	adds	r1, #185	; 0xb9
 8008cb6:	7808      	ldrb	r0, [r1, #0]
 8008cb8:	21f2      	movs	r1, #242	; 0xf2
 8008cba:	0089      	lsls	r1, r1, #2
 8008cbc:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008cbe:	32ca      	adds	r2, #202	; 0xca
 8008cc0:	7811      	ldrb	r1, [r2, #0]
 8008cc2:	4a09      	ldr	r2, [pc, #36]	; (8008ce8 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008cc4:	4809      	ldr	r0, [pc, #36]	; (8008cec <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008cc6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <OnRxWindow1TimerEvent+0x58>)
 8008ccc:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <OnRxWindow1TimerEvent+0x5c>)
 8008cd0:	f7ff ffbc 	bl	8008c4c <RxWindowSetup.constprop.0>
}
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	20000834 	.word	0x20000834
 8008cdc:	00000415 	.word	0x00000415
 8008ce0:	00000484 	.word	0x00000484
 8008ce4:	000003bb 	.word	0x000003bb
 8008ce8:	000003c9 	.word	0x000003c9
 8008cec:	20000bb4 	.word	0x20000bb4
 8008cf0:	000003ca 	.word	0x000003ca
 8008cf4:	20000bec 	.word	0x20000bec

08008cf8 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008cf8:	2290      	movs	r2, #144	; 0x90
{
 8008cfa:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <OnRxWindow2TimerEvent+0x4c>)
 8008cfe:	00d2      	lsls	r2, r2, #3
 8008d00:	5c9a      	ldrb	r2, [r3, r2]
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d01d      	beq.n	8008d42 <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008d06:	4a10      	ldr	r2, [pc, #64]	; (8008d48 <OnRxWindow2TimerEvent+0x50>)
 8008d08:	5c99      	ldrb	r1, [r3, r2]
 8008d0a:	3a49      	subs	r2, #73	; 0x49
 8008d0c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8008d0e:	4a0f      	ldr	r2, [pc, #60]	; (8008d4c <OnRxWindow2TimerEvent+0x54>)
 8008d10:	589a      	ldr	r2, [r3, r2]
 8008d12:	0011      	movs	r1, r2
 8008d14:	31a8      	adds	r1, #168	; 0xa8
 8008d16:	6808      	ldr	r0, [r1, #0]
 8008d18:	21f4      	movs	r1, #244	; 0xf4
 8008d1a:	0089      	lsls	r1, r1, #2
 8008d1c:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008d1e:	0011      	movs	r1, r2
 8008d20:	31b9      	adds	r1, #185	; 0xb9
 8008d22:	7808      	ldrb	r0, [r1, #0]
 8008d24:	21f7      	movs	r1, #247	; 0xf7
 8008d26:	0089      	lsls	r1, r1, #2
 8008d28:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008d2a:	32ca      	adds	r2, #202	; 0xca
 8008d2c:	7811      	ldrb	r1, [r2, #0]
 8008d2e:	4a08      	ldr	r2, [pc, #32]	; (8008d50 <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008d30:	4808      	ldr	r0, [pc, #32]	; (8008d54 <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8008d32:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008d34:	2180      	movs	r1, #128	; 0x80
 8008d36:	4a08      	ldr	r2, [pc, #32]	; (8008d58 <OnRxWindow2TimerEvent+0x60>)
 8008d38:	0049      	lsls	r1, r1, #1
 8008d3a:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8008d3c:	4907      	ldr	r1, [pc, #28]	; (8008d5c <OnRxWindow2TimerEvent+0x64>)
 8008d3e:	f7ff ff85 	bl	8008c4c <RxWindowSetup.constprop.0>
}
 8008d42:	bd10      	pop	{r4, pc}
 8008d44:	20000834 	.word	0x20000834
 8008d48:	00000415 	.word	0x00000415
 8008d4c:	00000484 	.word	0x00000484
 8008d50:	000003dd 	.word	0x000003dd
 8008d54:	20000bcc 	.word	0x20000bcc
 8008d58:	000003de 	.word	0x000003de
 8008d5c:	20000c00 	.word	0x20000c00

08008d60 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 8008d60:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d64:	b095      	sub	sp, #84	; 0x54
 8008d66:	9206      	str	r2, [sp, #24]
    uint8_t status = 0;
 8008d68:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008d6a:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8008d6c:	001e      	movs	r6, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008d6e:	9103      	str	r1, [sp, #12]
    uint8_t status = 0;
 8008d70:	a906      	add	r1, sp, #24
 8008d72:	1852      	adds	r2, r2, r1
 8008d74:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008d76:	aa0a      	add	r2, sp, #40	; 0x28
 8008d78:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8008d7a:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	429e      	cmp	r6, r3
 8008d80:	d301      	bcc.n	8008d86 <ProcessMacCommands.constprop.0+0x26>
}
 8008d82:	b015      	add	sp, #84	; 0x54
 8008d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008d86:	5db8      	ldrb	r0, [r7, r6]
 8008d88:	f002 f90e 	bl	800afa8 <LoRaMacCommandsGetCmdSize>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	1980      	adds	r0, r0, r6
 8008d90:	19bd      	adds	r5, r7, r6
 8008d92:	4298      	cmp	r0, r3
 8008d94:	dcf5      	bgt.n	8008d82 <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 8008d96:	7828      	ldrb	r0, [r5, #0]
 8008d98:	1c74      	adds	r4, r6, #1
 8008d9a:	3802      	subs	r0, #2
 8008d9c:	b2e4      	uxtb	r4, r4
 8008d9e:	280b      	cmp	r0, #11
 8008da0:	d8ef      	bhi.n	8008d82 <ProcessMacCommands.constprop.0+0x22>
 8008da2:	f7f7 f9c3 	bl	800012c <__gnu_thumb1_case_shi>
 8008da6:	000c      	.short	0x000c
 8008da8:	008a0023 	.word	0x008a0023
 8008dac:	00e800a2 	.word	0x00e800a2
 8008db0:	012e0100 	.word	0x012e0100
 8008db4:	01a60150 	.word	0x01a60150
 8008db8:	ffeeffee 	.word	0xffeeffee
 8008dbc:	01dd      	.short	0x01dd
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008dbe:	2004      	movs	r0, #4
 8008dc0:	f002 f9ba 	bl	800b138 <LoRaMacConfirmQueueIsCmdActive>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d00f      	beq.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008dc8:	2104      	movs	r1, #4
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f002 f972 	bl	800b0b4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008dd0:	228b      	movs	r2, #139	; 0x8b
 8008dd2:	5d39      	ldrb	r1, [r7, r4]
 8008dd4:	4bdd      	ldr	r3, [pc, #884]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008dd6:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008dd8:	1cf4      	adds	r4, r6, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008dda:	3602      	adds	r6, #2
 8008ddc:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008dde:	b2f6      	uxtb	r6, r6
 8008de0:	5db9      	ldrb	r1, [r7, r6]
 8008de2:	4adb      	ldr	r2, [pc, #876]	; (8009150 <ProcessMacCommands.constprop.0+0x3f0>)
 8008de4:	b2e4      	uxtb	r4, r4
 8008de6:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8008de8:	0026      	movs	r6, r4
 8008dea:	e7c7      	b.n	8008d7c <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	aa06      	add	r2, sp, #24
 8008df0:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008df2:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8008df4:	7513      	strb	r3, [r2, #20]
                uint8_t linkAdrNbBytesParsed = 0;
 8008df6:	aa0c      	add	r2, sp, #48	; 0x30
 8008df8:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8008dfa:	9b02      	ldr	r3, [sp, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d14e      	bne.n	8008e9e <ProcessMacCommands.constprop.0+0x13e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008e00:	3c01      	subs	r4, #1
 8008e02:	a910      	add	r1, sp, #64	; 0x40
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008e04:	9b03      	ldr	r3, [sp, #12]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8008e06:	193c      	adds	r4, r7, r4
 8008e08:	604c      	str	r4, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8008e0a:	4dd0      	ldr	r5, [pc, #832]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008e0c:	4cd1      	ldr	r4, [pc, #836]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008e0e:	1b9b      	subs	r3, r3, r6
 8008e10:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8008e12:	592b      	ldr	r3, [r5, r4]
 8008e14:	0018      	movs	r0, r3
 8008e16:	307e      	adds	r0, #126	; 0x7e
 8008e18:	7800      	ldrb	r0, [r0, #0]
 8008e1a:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	30b8      	adds	r0, #184	; 0xb8
 8008e20:	7800      	ldrb	r0, [r0, #0]
 8008e22:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008e24:	0018      	movs	r0, r3
 8008e26:	3085      	adds	r0, #133	; 0x85
 8008e28:	7800      	ldrb	r0, [r0, #0]
 8008e2a:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	3084      	adds	r0, #132	; 0x84
 8008e30:	7800      	ldrb	r0, [r0, #0]
 8008e32:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8008e34:	0018      	movs	r0, r3
 8008e36:	30a4      	adds	r0, #164	; 0xa4
 8008e38:	7800      	ldrb	r0, [r0, #0]
 8008e3a:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8008e3c:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8008e3e:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8008e40:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8008e42:	469c      	mov	ip, r3
 8008e44:	ab0b      	add	r3, sp, #44	; 0x2c
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8008e46:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	230f      	movs	r3, #15
 8008e4c:	9201      	str	r2, [sp, #4]
 8008e4e:	aa06      	add	r2, sp, #24
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8008e54:	9010      	str	r0, [sp, #64]	; 0x40
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8008e56:	a806      	add	r0, sp, #24
 8008e58:	1812      	adds	r2, r2, r0
 8008e5a:	4660      	mov	r0, ip
 8008e5c:	f002 fd8d 	bl	800b97a <RegionLinkAdrReq>
 8008e60:	ab06      	add	r3, sp, #24
 8008e62:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8008e64:	43c0      	mvns	r0, r0
 8008e66:	0743      	lsls	r3, r0, #29
 8008e68:	d10d      	bne.n	8008e86 <ProcessMacCommands.constprop.0+0x126>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8008e6a:	592b      	ldr	r3, [r5, r4]
 8008e6c:	a906      	add	r1, sp, #24
 8008e6e:	001a      	movs	r2, r3
 8008e70:	7b89      	ldrb	r1, [r1, #14]
 8008e72:	3285      	adds	r2, #133	; 0x85
 8008e74:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8008e76:	a906      	add	r1, sp, #24
 8008e78:	7bc9      	ldrb	r1, [r1, #15]
 8008e7a:	3a01      	subs	r2, #1
 8008e7c:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008e7e:	aa06      	add	r2, sp, #24
 8008e80:	7d12      	ldrb	r2, [r2, #20]
 8008e82:	33a4      	adds	r3, #164	; 0xa4
 8008e84:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008e86:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008e88:	ab0c      	add	r3, sp, #48	; 0x30
 8008e8a:	781c      	ldrb	r4, [r3, #0]
 8008e8c:	2105      	movs	r1, #5
 8008e8e:	0020      	movs	r0, r4
 8008e90:	f7f7 f960 	bl	8000154 <__udivsi3>
 8008e94:	b2c0      	uxtb	r0, r0
 8008e96:	4285      	cmp	r5, r0
 8008e98:	d304      	bcc.n	8008ea4 <ProcessMacCommands.constprop.0+0x144>
                    macIndex += linkAdrNbBytesParsed - 1;
 8008e9a:	1934      	adds	r4, r6, r4
 8008e9c:	b2e4      	uxtb	r4, r4
                break;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	9302      	str	r3, [sp, #8]
 8008ea2:	e7a1      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008ea4:	230d      	movs	r3, #13
 8008ea6:	a906      	add	r1, sp, #24
 8008ea8:	185b      	adds	r3, r3, r1
 8008eaa:	2201      	movs	r2, #1
 8008eac:	0019      	movs	r1, r3
 8008eae:	2003      	movs	r0, #3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008eb0:	3501      	adds	r5, #1
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008eb2:	f001 ff7f 	bl	800adb4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008eb6:	b2ed      	uxtb	r5, r5
 8008eb8:	e7e6      	b.n	8008e88 <ProcessMacCommands.constprop.0+0x128>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8008eba:	4aa4      	ldr	r2, [pc, #656]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008ebc:	4ba5      	ldr	r3, [pc, #660]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
 8008ebe:	3602      	adds	r6, #2
 8008ec0:	58d1      	ldr	r1, [r2, r3]
 8008ec2:	220f      	movs	r2, #15
 8008ec4:	5d3b      	ldrb	r3, [r7, r4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008ec6:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8008ec8:	4013      	ands	r3, r2
 8008eca:	000a      	movs	r2, r1
 8008ecc:	32c8      	adds	r2, #200	; 0xc8
 8008ece:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	0013      	movs	r3, r2
 8008ed6:	22a6      	movs	r2, #166	; 0xa6
 8008ed8:	0052      	lsls	r2, r2, #1
 8008eda:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008edc:	2200      	movs	r2, #0
 8008ede:	a90a      	add	r1, sp, #40	; 0x28
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8008ee0:	b2f6      	uxtb	r6, r6
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008ee2:	f001 ff67 	bl	800adb4 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008ee6:	0034      	movs	r4, r6
}
 8008ee8:	e77e      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                status = 0x07;
 8008eea:	2107      	movs	r1, #7
 8008eec:	ab06      	add	r3, sp, #24
 8008eee:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008ef0:	5d3b      	ldrb	r3, [r7, r4]
 8008ef2:	ad10      	add	r5, sp, #64	; 0x40
 8008ef4:	091a      	lsrs	r2, r3, #4
 8008ef6:	400a      	ands	r2, r1
 8008ef8:	706a      	strb	r2, [r5, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008efa:	220f      	movs	r2, #15
 8008efc:	4013      	ands	r3, r2
 8008efe:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008f00:	1d32      	adds	r2, r6, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008f02:	1cf3      	adds	r3, r6, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008f04:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008f06:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008f08:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008f0a:	5cba      	ldrb	r2, [r7, r2]
 8008f0c:	1d74      	adds	r4, r6, #5
                macIndex++;
 8008f0e:	3602      	adds	r6, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008f10:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008f12:	b2f6      	uxtb	r6, r6
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008f14:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008f16:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008f18:	5dba      	ldrb	r2, [r7, r6]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8008f1a:	4e8e      	ldr	r6, [pc, #568]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008f1c:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8008f1e:	2264      	movs	r2, #100	; 0x64
 8008f20:	4353      	muls	r3, r2
 8008f22:	9311      	str	r3, [sp, #68]	; 0x44
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8008f24:	4b89      	ldr	r3, [pc, #548]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008f26:	0029      	movs	r1, r5
 8008f28:	599b      	ldr	r3, [r3, r6]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008f2a:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8008f2c:	7818      	ldrb	r0, [r3, #0]
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	f002 fd33 	bl	800b99a <RegionRxParamSetupReq>
 8008f34:	ab06      	add	r3, sp, #24
 8008f36:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8008f38:	2307      	movs	r3, #7
 8008f3a:	4003      	ands	r3, r0
 8008f3c:	2b07      	cmp	r3, #7
 8008f3e:	d10d      	bne.n	8008f5c <ProcessMacCommands.constprop.0+0x1fc>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008f40:	4b82      	ldr	r3, [pc, #520]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008f42:	782a      	ldrb	r2, [r5, #0]
 8008f44:	599b      	ldr	r3, [r3, r6]
 8008f46:	0019      	movs	r1, r3
 8008f48:	31ac      	adds	r1, #172	; 0xac
 8008f4a:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008f4c:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008f4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f50:	3904      	subs	r1, #4
 8008f52:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008f54:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008f56:	786a      	ldrb	r2, [r5, #1]
 8008f58:	33a5      	adds	r3, #165	; 0xa5
 8008f5a:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8008f5c:	a90a      	add	r1, sp, #40	; 0x28
 8008f5e:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008f60:	2201      	movs	r2, #1
 8008f62:	2005      	movs	r0, #5
 8008f64:	f001 ff26 	bl	800adb4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008f68:	2310      	movs	r3, #16
 8008f6a:	4978      	ldr	r1, [pc, #480]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008f6c:	4a7a      	ldr	r2, [pc, #488]	; (8009158 <ProcessMacCommands.constprop.0+0x3f8>)
 8008f6e:	5c88      	ldrb	r0, [r1, r2]
 8008f70:	4303      	orrs	r3, r0
 8008f72:	548b      	strb	r3, [r1, r2]
                break;
 8008f74:	e738      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008f76:	23d2      	movs	r3, #210	; 0xd2
 8008f78:	4a74      	ldr	r2, [pc, #464]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008f7e:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <ProcessMacCommands.constprop.0+0x22c>
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d000      	beq.n	8008f8c <ProcessMacCommands.constprop.0+0x22c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008f8a:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008f8c:	ab06      	add	r3, sp, #24
 8008f8e:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008f90:	233f      	movs	r3, #63	; 0x3f
 8008f92:	9a06      	ldr	r2, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008f94:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008f96:	4013      	ands	r3, r2
 8008f98:	aa06      	add	r2, sp, #24
 8008f9a:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	a90a      	add	r1, sp, #40	; 0x28
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008fa0:	f001 ff08 	bl	800adb4 <LoRaMacCommandsAddCmd>
                break;
 8008fa4:	e720      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008fa6:	1cf2      	adds	r2, r6, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	5cb8      	ldrb	r0, [r7, r2]
 8008fac:	1d32      	adds	r2, r6, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	5cba      	ldrb	r2, [r7, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008fb2:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008fb4:	0412      	lsls	r2, r2, #16
 8008fb6:	4302      	orrs	r2, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8008fb8:	1cb0      	adds	r0, r6, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008fba:	b2c0      	uxtb	r0, r0
 8008fbc:	5c38      	ldrb	r0, [r7, r0]
                status = 0x03;
 8008fbe:	250d      	movs	r5, #13
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008fc0:	4310      	orrs	r0, r2
                chParam.Frequency *= 100;
 8008fc2:	2264      	movs	r2, #100	; 0x64
 8008fc4:	4342      	muls	r2, r0
                status = 0x03;
 8008fc6:	ab06      	add	r3, sp, #24
 8008fc8:	18ed      	adds	r5, r5, r3
 8008fca:	2303      	movs	r3, #3
                chParam.Frequency *= 100;
 8008fcc:	9210      	str	r2, [sp, #64]	; 0x40
                chParam.Rx1Frequency = 0;
 8008fce:	2200      	movs	r2, #0
                status = 0x03;
 8008fd0:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8008fd2:	5d3b      	ldrb	r3, [r7, r4]
                chParam.DrRange.Value = payload[macIndex++];
 8008fd4:	1db4      	adds	r4, r6, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008fd6:	3605      	adds	r6, #5
                chParam.DrRange.Value = payload[macIndex++];
 8008fd8:	b2f6      	uxtb	r6, r6
                newChannelReq.ChannelId = payload[macIndex++];
 8008fda:	a90c      	add	r1, sp, #48	; 0x30
                chParam.Rx1Frequency = 0;
 8008fdc:	9211      	str	r2, [sp, #68]	; 0x44
                chParam.DrRange.Value = payload[macIndex++];
 8008fde:	5dba      	ldrb	r2, [r7, r6]
                newChannelReq.ChannelId = payload[macIndex++];
 8008fe0:	710b      	strb	r3, [r1, #4]
                newChannelReq.NewChannel = &chParam;
 8008fe2:	ab10      	add	r3, sp, #64	; 0x40
                chParam.DrRange.Value = payload[macIndex++];
 8008fe4:	721a      	strb	r2, [r3, #8]
                newChannelReq.NewChannel = &chParam;
 8008fe6:	930c      	str	r3, [sp, #48]	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8008fe8:	4a58      	ldr	r2, [pc, #352]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8008fea:	4b5a      	ldr	r3, [pc, #360]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
                chParam.DrRange.Value = payload[macIndex++];
 8008fec:	b2e4      	uxtb	r4, r4
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8008fee:	58d3      	ldr	r3, [r2, r3]
 8008ff0:	7818      	ldrb	r0, [r3, #0]
 8008ff2:	f002 fcdc 	bl	800b9ae <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8008ff6:	a90a      	add	r1, sp, #40	; 0x28
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8008ff8:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
 8008ffa:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	2007      	movs	r0, #7
 8009000:	e7ce      	b.n	8008fa0 <ProcessMacCommands.constprop.0+0x240>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009002:	230f      	movs	r3, #15
 8009004:	5d39      	ldrb	r1, [r7, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009006:	4a51      	ldr	r2, [pc, #324]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009008:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800900a:	4b52      	ldr	r3, [pc, #328]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 800900c:	3602      	adds	r6, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800900e:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009010:	b2f6      	uxtb	r6, r6
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009012:	1c0b      	adds	r3, r1, #0
 8009014:	2900      	cmp	r1, #0
 8009016:	d100      	bne.n	800901a <ProcessMacCommands.constprop.0+0x2ba>
 8009018:	2301      	movs	r3, #1
 800901a:	20fa      	movs	r0, #250	; 0xfa
 800901c:	0011      	movs	r1, r2
 800901e:	0080      	lsls	r0, r0, #2
 8009020:	b2db      	uxtb	r3, r3
 8009022:	4343      	muls	r3, r0
 8009024:	3194      	adds	r1, #148	; 0x94
 8009026:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009028:	3298      	adds	r2, #152	; 0x98
 800902a:	181b      	adds	r3, r3, r0
 800902c:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800902e:	a90a      	add	r1, sp, #40	; 0x28
 8009030:	2200      	movs	r2, #0
 8009032:	2008      	movs	r0, #8
 8009034:	f001 febe 	bl	800adb4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009038:	2310      	movs	r3, #16
 800903a:	4944      	ldr	r1, [pc, #272]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 800903c:	4a46      	ldr	r2, [pc, #280]	; (8009158 <ProcessMacCommands.constprop.0+0x3f8>)
 800903e:	5c88      	ldrb	r0, [r1, r2]
 8009040:	4303      	orrs	r3, r0
 8009042:	548b      	strb	r3, [r1, r2]
 8009044:	e74f      	b.n	8008ee6 <ProcessMacCommands.constprop.0+0x186>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009046:	3602      	adds	r6, #2
 8009048:	b2f3      	uxtb	r3, r6
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	5d3b      	ldrb	r3, [r7, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 800904e:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009050:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8009052:	ac0b      	add	r4, sp, #44	; 0x2c
 8009054:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009056:	3220      	adds	r2, #32
 8009058:	4011      	ands	r1, r2
 800905a:	4213      	tst	r3, r2
 800905c:	d146      	bne.n	80090ec <ProcessMacCommands.constprop.0+0x38c>
                txParamSetupReq.DownlinkDwellTime = 0;
 800905e:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009060:	06da      	lsls	r2, r3, #27
 8009062:	d501      	bpl.n	8009068 <ProcessMacCommands.constprop.0+0x308>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009064:	2201      	movs	r2, #1
 8009066:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009068:	220f      	movs	r2, #15
 800906a:	4013      	ands	r3, r2
 800906c:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800906e:	4e39      	ldr	r6, [pc, #228]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
 8009070:	4b36      	ldr	r3, [pc, #216]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8009072:	0021      	movs	r1, r4
 8009074:	599b      	ldr	r3, [r3, r6]
 8009076:	7818      	ldrb	r0, [r3, #0]
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	f002 fca2 	bl	800b9c2 <RegionTxParamSetupReq>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d032      	beq.n	80090e8 <ProcessMacCommands.constprop.0+0x388>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009082:	4b32      	ldr	r3, [pc, #200]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
 8009084:	599d      	ldr	r5, [r3, r6]
 8009086:	7823      	ldrb	r3, [r4, #0]
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	002b      	movs	r3, r5
 800908c:	9a04      	ldr	r2, [sp, #16]
 800908e:	33b8      	adds	r3, #184	; 0xb8
 8009090:	701a      	strb	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009092:	7862      	ldrb	r2, [r4, #1]
 8009094:	705a      	strb	r2, [r3, #1]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009096:	3304      	adds	r3, #4
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	78a3      	ldrb	r3, [r4, #2]
 800909c:	4a2f      	ldr	r2, [pc, #188]	; (800915c <ProcessMacCommands.constprop.0+0x3fc>)
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800909e:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80090a0:	5cd0      	ldrb	r0, [r2, r3]
 80090a2:	f7f7 fcf1 	bl	8000a88 <__aeabi_ui2f>
 80090a6:	9b07      	ldr	r3, [sp, #28]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80090a8:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80090aa:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80090ac:	2302      	movs	r3, #2
 80090ae:	aa06      	add	r2, sp, #24
 80090b0:	1852      	adds	r2, r2, r1
 80090b2:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80090b4:	222a      	movs	r2, #42	; 0x2a
 80090b6:	ab06      	add	r3, sp, #24
 80090b8:	189b      	adds	r3, r3, r2
 80090ba:	9a04      	ldr	r2, [sp, #16]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80090bc:	a910      	add	r1, sp, #64	; 0x40
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80090be:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80090c0:	7828      	ldrb	r0, [r5, #0]
 80090c2:	f002 fbfc 	bl	800b8be <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80090c8:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80090ca:	599b      	ldr	r3, [r3, r6]
 80090cc:	1c02      	adds	r2, r0, #0
 80090ce:	3385      	adds	r3, #133	; 0x85
 80090d0:	571c      	ldrsb	r4, [r3, r4]
 80090d2:	b240      	sxtb	r0, r0
 80090d4:	7819      	ldrb	r1, [r3, #0]
 80090d6:	42a0      	cmp	r0, r4
 80090d8:	da00      	bge.n	80090dc <ProcessMacCommands.constprop.0+0x37c>
 80090da:	1c0a      	adds	r2, r1, #0
 80090dc:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80090de:	2009      	movs	r0, #9
 80090e0:	2200      	movs	r2, #0
 80090e2:	a90a      	add	r1, sp, #40	; 0x28
 80090e4:	f001 fe66 	bl	800adb4 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 80090e8:	9c05      	ldr	r4, [sp, #20]
 80090ea:	e67d      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80090ec:	2201      	movs	r2, #1
 80090ee:	7062      	strb	r2, [r4, #1]
 80090f0:	e7b6      	b.n	8009060 <ProcessMacCommands.constprop.0+0x300>
                status = 0x03;
 80090f2:	250d      	movs	r5, #13
 80090f4:	ab06      	add	r3, sp, #24
 80090f6:	18ed      	adds	r5, r5, r3
 80090f8:	2303      	movs	r3, #3
 80090fa:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 80090fc:	5d3b      	ldrb	r3, [r7, r4]
 80090fe:	a910      	add	r1, sp, #64	; 0x40
 8009100:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009102:	1d32      	adds	r2, r6, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009104:	1cf3      	adds	r3, r6, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009106:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009108:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800910a:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800910c:	5cba      	ldrb	r2, [r7, r2]
 800910e:	1d74      	adds	r4, r6, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8009110:	3602      	adds	r6, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009112:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009114:	b2f6      	uxtb	r6, r6
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009116:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009118:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800911a:	5dba      	ldrb	r2, [r7, r6]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800911c:	4e0b      	ldr	r6, [pc, #44]	; (800914c <ProcessMacCommands.constprop.0+0x3ec>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800911e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8009120:	2264      	movs	r2, #100	; 0x64
 8009122:	4353      	muls	r3, r2
 8009124:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <ProcessMacCommands.constprop.0+0x3f4>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009128:	b2e4      	uxtb	r4, r4
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800912a:	58f3      	ldr	r3, [r6, r3]
 800912c:	7818      	ldrb	r0, [r3, #0]
 800912e:	f002 fc52 	bl	800b9d6 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8009132:	a90a      	add	r1, sp, #40	; 0x28
 8009134:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009136:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009138:	7028      	strb	r0, [r5, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800913a:	200a      	movs	r0, #10
 800913c:	f001 fe3a 	bl	800adb4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009140:	2310      	movs	r3, #16
 8009142:	4a05      	ldr	r2, [pc, #20]	; (8009158 <ProcessMacCommands.constprop.0+0x3f8>)
 8009144:	5cb1      	ldrb	r1, [r6, r2]
 8009146:	430b      	orrs	r3, r1
 8009148:	54b3      	strb	r3, [r6, r2]
                break;
 800914a:	e64d      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
 800914c:	20000834 	.word	0x20000834
 8009150:	00000459 	.word	0x00000459
 8009154:	00000484 	.word	0x00000484
 8009158:	00000481 	.word	0x00000481
 800915c:	0800f07f 	.word	0x0800f07f
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009160:	200a      	movs	r0, #10
 8009162:	f001 ffe9 	bl	800b138 <LoRaMacConfirmQueueIsCmdActive>
 8009166:	2800      	cmp	r0, #0
 8009168:	d100      	bne.n	800916c <ProcessMacCommands.constprop.0+0x40c>
 800916a:	e63d      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800916c:	210a      	movs	r1, #10
 800916e:	2000      	movs	r0, #0
 8009170:	f001 ffa0 	bl	800b0b4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8009174:	231e      	movs	r3, #30
 8009176:	aa06      	add	r2, sp, #24
 8009178:	189b      	adds	r3, r3, r2
 800917a:	2200      	movs	r2, #0
 800917c:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800917e:	22fa      	movs	r2, #250	; 0xfa
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009180:	1cb3      	adds	r3, r6, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009182:	b2db      	uxtb	r3, r3
 8009184:	5cfd      	ldrb	r5, [r7, r3]
 8009186:	1cf3      	adds	r3, r6, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009188:	b2db      	uxtb	r3, r3
 800918a:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800918c:	022d      	lsls	r5, r5, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800918e:	0409      	lsls	r1, r1, #16
 8009190:	430d      	orrs	r5, r1
 8009192:	1d33      	adds	r3, r6, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009194:	5d39      	ldrb	r1, [r7, r4]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009196:	1db4      	adds	r4, r6, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009198:	3605      	adds	r6, #5
 800919a:	b2db      	uxtb	r3, r3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800919c:	b2f6      	uxtb	r6, r6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800919e:	430d      	orrs	r5, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80091a0:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80091a2:	5dbb      	ldrb	r3, [r7, r6]
 80091a4:	0092      	lsls	r2, r2, #2
 80091a6:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 80091a8:	aa06      	add	r2, sp, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80091aa:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80091ac:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 80091ae:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 80091b0:	a810      	add	r0, sp, #64	; 0x40
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80091b2:	430d      	orrs	r5, r1
                    sysTimeCurrent = SysTimeGet( );
 80091b4:	f004 fcb6 	bl	800db24 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80091b8:	4b10      	ldr	r3, [pc, #64]	; (80091fc <ProcessMacCommands.constprop.0+0x49c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80091ba:	4e11      	ldr	r6, [pc, #68]	; (8009200 <ProcessMacCommands.constprop.0+0x4a0>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80091bc:	18e9      	adds	r1, r5, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80091be:	23cf      	movs	r3, #207	; 0xcf
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	18f3      	adds	r3, r6, r3
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	23ce      	movs	r3, #206	; 0xce
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	58f3      	ldr	r3, [r6, r3]
 80091d0:	a80e      	add	r0, sp, #56	; 0x38
 80091d2:	910c      	str	r1, [sp, #48]	; 0x30
 80091d4:	f004 fc68 	bl	800daa8 <SysTimeSub>
 80091d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80091dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	a80c      	add	r0, sp, #48	; 0x30
 80091e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091e4:	f004 fc46 	bl	800da74 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80091e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80091ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091ec:	f004 fc72 	bl	800dad4 <SysTimeSet>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80091f0:	2387      	movs	r3, #135	; 0x87
 80091f2:	2201      	movs	r2, #1
 80091f4:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80091f6:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80091f8:	54f2      	strb	r2, [r6, r3]
 80091fa:	e5f5      	b.n	8008de8 <ProcessMacCommands.constprop.0+0x88>
 80091fc:	12d53d80 	.word	0x12d53d80
 8009200:	20000834 	.word	0x20000834

08009204 <StopRetransmission.isra.0>:
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009204:	4b10      	ldr	r3, [pc, #64]	; (8009248 <StopRetransmission.isra.0+0x44>)
 8009206:	4a11      	ldr	r2, [pc, #68]	; (800924c <StopRetransmission.isra.0+0x48>)
 8009208:	5c9a      	ldrb	r2, [r3, r2]
 800920a:	0792      	lsls	r2, r2, #30
 800920c:	d503      	bpl.n	8009216 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800920e:	4a10      	ldr	r2, [pc, #64]	; (8009250 <StopRetransmission.isra.0+0x4c>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009210:	5c9a      	ldrb	r2, [r3, r2]
 8009212:	2a01      	cmp	r2, #1
 8009214:	d90a      	bls.n	800922c <StopRetransmission.isra.0+0x28>
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8009216:	4a0f      	ldr	r2, [pc, #60]	; (8009254 <StopRetransmission.isra.0+0x50>)
 8009218:	589a      	ldr	r2, [r3, r2]
 800921a:	0011      	movs	r1, r2
 800921c:	317e      	adds	r1, #126	; 0x7e
 800921e:	7809      	ldrb	r1, [r1, #0]
 8009220:	2900      	cmp	r1, #0
 8009222:	d003      	beq.n	800922c <StopRetransmission.isra.0+0x28>
            MacCtx.NvmCtx->AdrAckCounter++;
 8009224:	3204      	adds	r2, #4
 8009226:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8009228:	3101      	adds	r1, #1
 800922a:	67d1      	str	r1, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 800922c:	2182      	movs	r1, #130	; 0x82
 800922e:	2200      	movs	r2, #0
 8009230:	00c9      	lsls	r1, r1, #3
 8009232:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8009234:	4908      	ldr	r1, [pc, #32]	; (8009258 <StopRetransmission.isra.0+0x54>)
 8009236:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8009238:	4908      	ldr	r1, [pc, #32]	; (800925c <StopRetransmission.isra.0+0x58>)
 800923a:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800923c:	39d3      	subs	r1, #211	; 0xd3
 800923e:	5858      	ldr	r0, [r3, r1]
 8009240:	3202      	adds	r2, #2
 8009242:	4390      	bics	r0, r2
 8009244:	5058      	str	r0, [r3, r1]
}
 8009246:	4770      	bx	lr
 8009248:	20000834 	.word	0x20000834
 800924c:	00000481 	.word	0x00000481
 8009250:	0000042d 	.word	0x0000042d
 8009254:	00000484 	.word	0x00000484
 8009258:	00000414 	.word	0x00000414
 800925c:	00000413 	.word	0x00000413

08009260 <OnTxDelayedTimerEvent>:
{
 8009260:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009262:	4811      	ldr	r0, [pc, #68]	; (80092a8 <OnTxDelayedTimerEvent+0x48>)
 8009264:	f004 fef0 	bl	800e048 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009268:	22d0      	movs	r2, #208	; 0xd0
 800926a:	2320      	movs	r3, #32
 800926c:	4c0f      	ldr	r4, [pc, #60]	; (80092ac <OnTxDelayedTimerEvent+0x4c>)
 800926e:	0092      	lsls	r2, r2, #2
 8009270:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009272:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009274:	4399      	bics	r1, r3
 8009276:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009278:	f7ff fb4a 	bl	8008910 <ScheduleTx>
 800927c:	2800      	cmp	r0, #0
 800927e:	d012      	beq.n	80092a6 <OnTxDelayedTimerEvent+0x46>
 8009280:	280b      	cmp	r0, #11
 8009282:	d010      	beq.n	80092a6 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009284:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009286:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <OnTxDelayedTimerEvent+0x50>)
 8009288:	58e3      	ldr	r3, [r4, r3]
 800928a:	3385      	adds	r3, #133	; 0x85
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <OnTxDelayedTimerEvent+0x54>)
 8009290:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009292:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <OnTxDelayedTimerEvent+0x58>)
 8009294:	5ce2      	ldrb	r2, [r4, r3]
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <OnTxDelayedTimerEvent+0x5c>)
 8009298:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <OnTxDelayedTimerEvent+0x60>)
 800929c:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800929e:	f001 ff2f 	bl	800b100 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80092a2:	f7ff ffaf 	bl	8009204 <StopRetransmission.isra.0>
}
 80092a6:	bd10      	pop	{r4, pc}
 80092a8:	20000b9c 	.word	0x20000b9c
 80092ac:	20000834 	.word	0x20000834
 80092b0:	00000484 	.word	0x00000484
 80092b4:	0000043e 	.word	0x0000043e
 80092b8:	00000412 	.word	0x00000412
 80092bc:	00000441 	.word	0x00000441
 80092c0:	0000043d 	.word	0x0000043d

080092c4 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80092c4:	22d0      	movs	r2, #208	; 0xd0
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <LoRaMacIsBusy+0x1c>)
 80092c8:	0092      	lsls	r2, r2, #2
 80092ca:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 80092cc:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d105      	bne.n	80092de <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80092d2:	4a04      	ldr	r2, [pc, #16]	; (80092e4 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80092d4:	5c98      	ldrb	r0, [r3, r2]
 80092d6:	3801      	subs	r0, #1
 80092d8:	1e43      	subs	r3, r0, #1
 80092da:	4198      	sbcs	r0, r3
 80092dc:	b2c0      	uxtb	r0, r0
}
 80092de:	4770      	bx	lr
 80092e0:	20000834 	.word	0x20000834
 80092e4:	00000482 	.word	0x00000482

080092e8 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 80092e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ea:	b09d      	sub	sp, #116	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80092f0:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 80092f2:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 80092f4:	4add      	ldr	r2, [pc, #884]	; (800966c <LoRaMacProcess+0x384>)
 80092f6:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80092f8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092fa:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80092fe:	4fdc      	ldr	r7, [pc, #880]	; (8009670 <LoRaMacProcess+0x388>)
 8009300:	4283      	cmp	r3, r0
 8009302:	d100      	bne.n	8009306 <LoRaMacProcess+0x1e>
 8009304:	e11b      	b.n	800953e <LoRaMacProcess+0x256>
        if( events.Events.TxDone == 1 )
 8009306:	b2da      	uxtb	r2, r3
 8009308:	9204      	str	r2, [sp, #16]
 800930a:	06db      	lsls	r3, r3, #27
 800930c:	d571      	bpl.n	80093f2 <LoRaMacProcess+0x10a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800930e:	4cd9      	ldr	r4, [pc, #868]	; (8009674 <LoRaMacProcess+0x38c>)
 8009310:	4ed9      	ldr	r6, [pc, #868]	; (8009678 <LoRaMacProcess+0x390>)
 8009312:	59a3      	ldr	r3, [r4, r6]
 8009314:	337c      	adds	r3, #124	; 0x7c
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d003      	beq.n	8009324 <LoRaMacProcess+0x3c>
        Radio.Sleep( );
 800931c:	4bd7      	ldr	r3, [pc, #860]	; (800967c <LoRaMacProcess+0x394>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009320:	9302      	str	r3, [sp, #8]
 8009322:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009324:	23ec      	movs	r3, #236	; 0xec
 8009326:	4dd6      	ldr	r5, [pc, #856]	; (8009680 <LoRaMacProcess+0x398>)
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	58e1      	ldr	r1, [r4, r3]
 800932c:	0028      	movs	r0, r5
 800932e:	f004 ff3b 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009332:	0028      	movs	r0, r5
 8009334:	f004 fedc 	bl	800e0f0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009338:	23ed      	movs	r3, #237	; 0xed
 800933a:	4dd2      	ldr	r5, [pc, #840]	; (8009684 <LoRaMacProcess+0x39c>)
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	58e1      	ldr	r1, [r4, r3]
 8009340:	0028      	movs	r0, r5
 8009342:	f004 ff31 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009346:	0028      	movs	r0, r5
 8009348:	f004 fed2 	bl	800e0f0 <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800934c:	59a3      	ldr	r3, [r4, r6]
 800934e:	001a      	movs	r2, r3
 8009350:	327c      	adds	r2, #124	; 0x7c
 8009352:	7812      	ldrb	r2, [r2, #0]
 8009354:	2a02      	cmp	r2, #2
 8009356:	d003      	beq.n	8009360 <LoRaMacProcess+0x78>
 8009358:	4acb      	ldr	r2, [pc, #812]	; (8009688 <LoRaMacProcess+0x3a0>)
 800935a:	5ca2      	ldrb	r2, [r4, r2]
 800935c:	2a00      	cmp	r2, #0
 800935e:	d011      	beq.n	8009384 <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009360:	2216      	movs	r2, #22
 8009362:	a90c      	add	r1, sp, #48	; 0x30
 8009364:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009366:	7818      	ldrb	r0, [r3, #0]
 8009368:	f002 faa9 	bl	800b8be <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800936c:	23ed      	movs	r3, #237	; 0xed
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4dc6      	ldr	r5, [pc, #792]	; (800968c <LoRaMacProcess+0x3a4>)
 8009372:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009374:	900b      	str	r0, [sp, #44]	; 0x2c
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009376:	1809      	adds	r1, r1, r0
 8009378:	0028      	movs	r0, r5
 800937a:	f004 ff15 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800937e:	0028      	movs	r0, r5
 8009380:	f004 feb6 	bl	800e0f0 <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009384:	4bc2      	ldr	r3, [pc, #776]	; (8009690 <LoRaMacProcess+0x3a8>)
    txDone.Channel = MacCtx.Channel;
 8009386:	ad10      	add	r5, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	59a3      	ldr	r3, [r4, r6]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800938c:	a80e      	add	r0, sp, #56	; 0x38
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800938e:	33fc      	adds	r3, #252	; 0xfc
 8009390:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 8009392:	4bc0      	ldr	r3, [pc, #768]	; (8009694 <LoRaMacProcess+0x3ac>)
 8009394:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009396:	606a      	str	r2, [r5, #4]
    txDone.Channel = MacCtx.Channel;
 8009398:	702b      	strb	r3, [r5, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800939a:	f004 fbef 	bl	800db7c <SysTimeGetMcuTime>
 800939e:	59a3      	ldr	r3, [r4, r6]
 80093a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093a2:	001a      	movs	r2, r3
 80093a4:	325d      	adds	r2, #93	; 0x5d
 80093a6:	32ff      	adds	r2, #255	; 0xff
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	a808      	add	r0, sp, #32
 80093ac:	9200      	str	r2, [sp, #0]
 80093ae:	22ac      	movs	r2, #172	; 0xac
 80093b0:	0052      	lsls	r2, r2, #1
 80093b2:	589b      	ldr	r3, [r3, r2]
 80093b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093b6:	f004 fb77 	bl	800daa8 <SysTimeSub>
 80093ba:	ab13      	add	r3, sp, #76	; 0x4c
 80093bc:	aa08      	add	r2, sp, #32
 80093be:	ca03      	ldmia	r2!, {r0, r1}
 80093c0:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80093c2:	2383      	movs	r3, #131	; 0x83
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80093c8:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80093ca:	60ab      	str	r3, [r5, #8]
    txDone.Joined  = true;
 80093cc:	2301      	movs	r3, #1
 80093ce:	706b      	strb	r3, [r5, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80093d0:	59a3      	ldr	r3, [r4, r6]
 80093d2:	0052      	lsls	r2, r2, #1
 80093d4:	5c9a      	ldrb	r2, [r3, r2]
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	d100      	bne.n	80093dc <LoRaMacProcess+0xf4>
        txDone.Joined  = false;
 80093da:	706a      	strb	r2, [r5, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 80093dc:	7818      	ldrb	r0, [r3, #0]
 80093de:	0029      	movs	r1, r5
 80093e0:	f002 fa79 	bl	800b8d6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80093e4:	4ba3      	ldr	r3, [pc, #652]	; (8009674 <LoRaMacProcess+0x38c>)
 80093e6:	4aa8      	ldr	r2, [pc, #672]	; (8009688 <LoRaMacProcess+0x3a0>)
 80093e8:	5c9a      	ldrb	r2, [r3, r2]
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	d101      	bne.n	80093f2 <LoRaMacProcess+0x10a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80093ee:	49aa      	ldr	r1, [pc, #680]	; (8009698 <LoRaMacProcess+0x3b0>)
 80093f0:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	071b      	lsls	r3, r3, #28
 80093f6:	d574      	bpl.n	80094e2 <LoRaMacProcess+0x1fa>
    uint32_t downLinkCounter = 0;
 80093f8:	2500      	movs	r5, #0
    uint8_t *payload = RxDoneParams.Payload;
 80093fa:	4ba8      	ldr	r3, [pc, #672]	; (800969c <LoRaMacProcess+0x3b4>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80093fc:	4c9d      	ldr	r4, [pc, #628]	; (8009674 <LoRaMacProcess+0x38c>)
    uint8_t *payload = RxDoneParams.Payload;
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009402:	210a      	movs	r1, #10
 8009404:	5e5a      	ldrsh	r2, [r3, r1]
    uint16_t size = RxDoneParams.Size;
 8009406:	891e      	ldrh	r6, [r3, #8]
    int8_t snr = RxDoneParams.Snr;
 8009408:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t downLinkCounter = 0;
 800940a:	950b      	str	r5, [sp, #44]	; 0x2c
    int8_t snr = RxDoneParams.Snr;
 800940c:	b25b      	sxtb	r3, r3
 800940e:	9305      	str	r3, [sp, #20]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009410:	4b99      	ldr	r3, [pc, #612]	; (8009678 <LoRaMacProcess+0x390>)
 8009412:	58e3      	ldr	r3, [r4, r3]
 8009414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009416:	9306      	str	r3, [sp, #24]
    MacCtx.McpsConfirm.AckReceived = false;
 8009418:	2388      	movs	r3, #136	; 0x88
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800941e:	4ba0      	ldr	r3, [pc, #640]	; (80096a0 <LoRaMacProcess+0x3b8>)
 8009420:	52e2      	strh	r2, [r4, r3]
    MacCtx.McpsIndication.Snr = snr;
 8009422:	9a05      	ldr	r2, [sp, #20]
 8009424:	4b9f      	ldr	r3, [pc, #636]	; (80096a4 <LoRaMacProcess+0x3bc>)
 8009426:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009428:	3354      	adds	r3, #84	; 0x54
 800942a:	5ce3      	ldrb	r3, [r4, r3]
 800942c:	4a9e      	ldr	r2, [pc, #632]	; (80096a8 <LoRaMacProcess+0x3c0>)
 800942e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009430:	4b9e      	ldr	r3, [pc, #632]	; (80096ac <LoRaMacProcess+0x3c4>)
 8009432:	52e5      	strh	r5, [r4, r3]
    MacCtx.McpsIndication.FramePending = 0;
 8009434:	4b9e      	ldr	r3, [pc, #632]	; (80096b0 <LoRaMacProcess+0x3c8>)
 8009436:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.Buffer = NULL;
 8009438:	4b9e      	ldr	r3, [pc, #632]	; (80096b4 <LoRaMacProcess+0x3cc>)
 800943a:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 800943c:	3304      	adds	r3, #4
 800943e:	52e5      	strh	r5, [r4, r3]
    MacCtx.McpsIndication.AckReceived = false;
 8009440:	4b9d      	ldr	r3, [pc, #628]	; (80096b8 <LoRaMacProcess+0x3d0>)
 8009442:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009444:	3302      	adds	r3, #2
 8009446:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009448:	4b9c      	ldr	r3, [pc, #624]	; (80096bc <LoRaMacProcess+0x3d4>)
 800944a:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 800944c:	4b9c      	ldr	r3, [pc, #624]	; (80096c0 <LoRaMacProcess+0x3d8>)
 800944e:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009450:	3304      	adds	r3, #4
 8009452:	54e5      	strb	r5, [r4, r3]
    Radio.Sleep( );
 8009454:	4b89      	ldr	r3, [pc, #548]	; (800967c <LoRaMacProcess+0x394>)
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800945c:	4889      	ldr	r0, [pc, #548]	; (8009684 <LoRaMacProcess+0x39c>)
 800945e:	f004 fdf3 	bl	800e048 <UTIL_TIMER_Stop>
    macHdr.Value = payload[pktHeaderLen++];
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	2201      	movs	r2, #1
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2b05      	cmp	r3, #5
 800946e:	d100      	bne.n	8009472 <LoRaMacProcess+0x18a>
 8009470:	e141      	b.n	80096f6 <LoRaMacProcess+0x40e>
 8009472:	2b07      	cmp	r3, #7
 8009474:	d100      	bne.n	8009478 <LoRaMacProcess+0x190>
 8009476:	e2cd      	b.n	8009a14 <LoRaMacProcess+0x72c>
 8009478:	2b03      	cmp	r3, #3
 800947a:	d000      	beq.n	800947e <LoRaMacProcess+0x196>
 800947c:	e31a      	b.n	8009ab4 <LoRaMacProcess+0x7cc>
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800947e:	4b7e      	ldr	r3, [pc, #504]	; (8009678 <LoRaMacProcess+0x390>)
 8009480:	a90c      	add	r1, sp, #48	; 0x30
 8009482:	58e3      	ldr	r3, [r4, r3]
 8009484:	001a      	movs	r2, r3
 8009486:	32b9      	adds	r2, #185	; 0xb9
 8009488:	7812      	ldrb	r2, [r2, #0]
 800948a:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800948c:	2284      	movs	r2, #132	; 0x84
 800948e:	00d2      	lsls	r2, r2, #3
 8009490:	5ca2      	ldrb	r2, [r4, r2]
 8009492:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009494:	220d      	movs	r2, #13
 8009496:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009498:	001a      	movs	r2, r3
 800949a:	32ca      	adds	r2, #202	; 0xca
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d001      	beq.n	80094a6 <LoRaMacProcess+0x1be>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80094a2:	220e      	movs	r2, #14
 80094a4:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80094a6:	7818      	ldrb	r0, [r3, #0]
 80094a8:	f002 fa09 	bl	800b8be <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80094ac:	0032      	movs	r2, r6
 80094ae:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80094b0:	900a      	str	r0, [sp, #40]	; 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80094b2:	1c13      	adds	r3, r2, #0
 80094b4:	0412      	lsls	r2, r2, #16
 80094b6:	d500      	bpl.n	80094ba <LoRaMacProcess+0x1d2>
 80094b8:	2300      	movs	r3, #0
 80094ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094bc:	b21b      	sxth	r3, r3
 80094be:	b212      	sxth	r2, r2
 80094c0:	4c6c      	ldr	r4, [pc, #432]	; (8009674 <LoRaMacProcess+0x38c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	dc02      	bgt.n	80094cc <LoRaMacProcess+0x1e4>
 80094c6:	2e0b      	cmp	r6, #11
 80094c8:	d900      	bls.n	80094cc <LoRaMacProcess+0x1e4>
 80094ca:	e117      	b.n	80096fc <LoRaMacProcess+0x414>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	4a7d      	ldr	r2, [pc, #500]	; (80096c4 <LoRaMacProcess+0x3dc>)
 80094d0:	54a3      	strb	r3, [r4, r2]
                PrepareRxDoneAbort( );
 80094d2:	f7ff f803 	bl	80084dc <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Region size payload error\r\n");
 80094d6:	4b7c      	ldr	r3, [pc, #496]	; (80096c8 <LoRaMacProcess+0x3e0>)
                APP_LOG(TS_OFF, VLEVEL_M, "Multicast error\r\n");
 80094d8:	2200      	movs	r2, #0
 80094da:	2002      	movs	r0, #2
 80094dc:	0011      	movs	r1, r2
 80094de:	f004 ff81 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
        if( events.Events.TxTimeout == 1 )
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	075b      	lsls	r3, r3, #29
 80094e6:	d51c      	bpl.n	8009522 <LoRaMacProcess+0x23a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80094e8:	4c62      	ldr	r4, [pc, #392]	; (8009674 <LoRaMacProcess+0x38c>)
 80094ea:	4b63      	ldr	r3, [pc, #396]	; (8009678 <LoRaMacProcess+0x390>)
 80094ec:	58e3      	ldr	r3, [r4, r3]
 80094ee:	337c      	adds	r3, #124	; 0x7c
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d003      	beq.n	80094fe <LoRaMacProcess+0x216>
        Radio.Sleep( );
 80094f6:	4b61      	ldr	r3, [pc, #388]	; (800967c <LoRaMacProcess+0x394>)
 80094f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 80094fe:	f7fe ff65 	bl	80083cc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009502:	2002      	movs	r0, #2
 8009504:	4b64      	ldr	r3, [pc, #400]	; (8009698 <LoRaMacProcess+0x3b0>)
 8009506:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009508:	f001 fdfa 	bl	800b100 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800950c:	4b5e      	ldr	r3, [pc, #376]	; (8009688 <LoRaMacProcess+0x3a0>)
 800950e:	5ce3      	ldrb	r3, [r4, r3]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <LoRaMacProcess+0x232>
        MacCtx.AckTimeoutRetry = true;
 8009514:	2201      	movs	r2, #1
 8009516:	4b6d      	ldr	r3, [pc, #436]	; (80096cc <LoRaMacProcess+0x3e4>)
 8009518:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800951a:	2320      	movs	r3, #32
 800951c:	5de2      	ldrb	r2, [r4, r7]
 800951e:	4313      	orrs	r3, r2
 8009520:	55e3      	strb	r3, [r4, r7]
        if( events.Events.RxError == 1 )
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	079b      	lsls	r3, r3, #30
 8009526:	d503      	bpl.n	8009530 <LoRaMacProcess+0x248>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009528:	2106      	movs	r1, #6
 800952a:	2005      	movs	r0, #5
 800952c:	f7ff f830 	bl	8008590 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8009530:	9b04      	ldr	r3, [sp, #16]
 8009532:	07db      	lsls	r3, r3, #31
 8009534:	d503      	bpl.n	800953e <LoRaMacProcess+0x256>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009536:	2104      	movs	r1, #4
 8009538:	2003      	movs	r0, #3
 800953a:	f7ff f829 	bl	8008590 <HandleRadioRxErrorTimeout>

    LoRaMacHandleIrqEvents( );
//    LoRaMacClassBProcess( );

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800953e:	4c4d      	ldr	r4, [pc, #308]	; (8009674 <LoRaMacProcess+0x38c>)
 8009540:	5de2      	ldrb	r2, [r4, r7]
 8009542:	0693      	lsls	r3, r2, #26
 8009544:	d569      	bpl.n	800961a <LoRaMacProcess+0x332>
    MacCtx.AllowRequests = requestState;
 8009546:	2300      	movs	r3, #0
 8009548:	4961      	ldr	r1, [pc, #388]	; (80096d0 <LoRaMacProcess+0x3e8>)
 800954a:	5463      	strb	r3, [r4, r1]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800954c:	3943      	subs	r1, #67	; 0x43
 800954e:	39ff      	subs	r1, #255	; 0xff
 8009550:	5863      	ldr	r3, [r4, r1]
 8009552:	0618      	lsls	r0, r3, #24
 8009554:	d502      	bpl.n	800955c <LoRaMacProcess+0x274>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009556:	2082      	movs	r0, #130	; 0x82
 8009558:	4383      	bics	r3, r0
 800955a:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800955c:	2305      	movs	r3, #5
 800955e:	421a      	tst	r2, r3
 8009560:	d100      	bne.n	8009564 <LoRaMacProcess+0x27c>
 8009562:	e2b4      	b.n	8009ace <LoRaMacProcess+0x7e6>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009564:	200c      	movs	r0, #12
 8009566:	f001 fde7 	bl	800b138 <LoRaMacConfirmQueueIsCmdActive>
 800956a:	2800      	cmp	r0, #0
 800956c:	d100      	bne.n	8009570 <LoRaMacProcess+0x288>
 800956e:	e2ae      	b.n	8009ace <LoRaMacProcess+0x7e6>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009570:	5de3      	ldrb	r3, [r4, r7]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009572:	07da      	lsls	r2, r3, #31
 8009574:	d500      	bpl.n	8009578 <LoRaMacProcess+0x290>
 8009576:	e2aa      	b.n	8009ace <LoRaMacProcess+0x7e6>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009578:	075b      	lsls	r3, r3, #29
 800957a:	d400      	bmi.n	800957e <LoRaMacProcess+0x296>
 800957c:	e2bd      	b.n	8009afa <LoRaMacProcess+0x812>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800957e:	22d0      	movs	r2, #208	; 0xd0
 8009580:	2302      	movs	r3, #2
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	58a1      	ldr	r1, [r4, r2]
 8009586:	4399      	bics	r1, r3
 8009588:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800958a:	23d0      	movs	r3, #208	; 0xd0
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	58e3      	ldr	r3, [r4, r3]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d13f      	bne.n	8009614 <LoRaMacProcess+0x32c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009594:	5de6      	ldrb	r6, [r4, r7]
 8009596:	3301      	adds	r3, #1
 8009598:	0031      	movs	r1, r6
 800959a:	4019      	ands	r1, r3
 800959c:	421e      	tst	r6, r3
 800959e:	d002      	beq.n	80095a6 <LoRaMacProcess+0x2be>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80095a0:	0032      	movs	r2, r6
 80095a2:	439a      	bics	r2, r3
 80095a4:	55e2      	strb	r2, [r4, r7]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80095a6:	2204      	movs	r2, #4
 80095a8:	5de3      	ldrb	r3, [r4, r7]
 80095aa:	4213      	tst	r3, r2
 80095ac:	d001      	beq.n	80095b2 <LoRaMacProcess+0x2ca>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80095ae:	4393      	bics	r3, r2
 80095b0:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 80095b2:	2301      	movs	r3, #1
 80095b4:	4a46      	ldr	r2, [pc, #280]	; (80096d0 <LoRaMacProcess+0x3e8>)
 80095b6:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 80095b8:	2900      	cmp	r1, #0
 80095ba:	d005      	beq.n	80095c8 <LoRaMacProcess+0x2e0>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80095bc:	23d1      	movs	r3, #209	; 0xd1
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	58e3      	ldr	r3, [r4, r3]
 80095c2:	4844      	ldr	r0, [pc, #272]	; (80096d4 <LoRaMacProcess+0x3ec>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80095c8:	2504      	movs	r5, #4
 80095ca:	422e      	tst	r6, r5
 80095cc:	d009      	beq.n	80095e2 <LoRaMacProcess+0x2fa>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80095ce:	4842      	ldr	r0, [pc, #264]	; (80096d8 <LoRaMacProcess+0x3f0>)
 80095d0:	f001 fdbe 	bl	800b150 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80095d4:	f001 fde8 	bl	800b1a8 <LoRaMacConfirmQueueGetCnt>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d002      	beq.n	80095e2 <LoRaMacProcess+0x2fa>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80095dc:	5de3      	ldrb	r3, [r4, r7]
 80095de:	431d      	orrs	r5, r3
 80095e0:	55e5      	strb	r5, [r4, r7]
        MacCtx.MacFlags.Bits.MacDone = 0;
 80095e2:	2220      	movs	r2, #32
 80095e4:	5de3      	ldrb	r3, [r4, r7]
 80095e6:	4393      	bics	r3, r2
 80095e8:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 80095ea:	23d0      	movs	r3, #208	; 0xd0
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	58e3      	ldr	r3, [r4, r3]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10f      	bne.n	8009614 <LoRaMacProcess+0x32c>
        bool isStickyMacCommandPending = false;
 80095f4:	2528      	movs	r5, #40	; 0x28
 80095f6:	aa06      	add	r2, sp, #24
 80095f8:	1952      	adds	r2, r2, r5
 80095fa:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80095fc:	a810      	add	r0, sp, #64	; 0x40
 80095fe:	f001 fcbd 	bl	800af7c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009602:	ab06      	add	r3, sp, #24
 8009604:	195b      	adds	r3, r3, r5
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <LoRaMacProcess+0x32c>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800960c:	2310      	movs	r3, #16
 800960e:	5de2      	ldrb	r2, [r4, r7]
 8009610:	4313      	orrs	r3, r2
 8009612:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 8009614:	2301      	movs	r3, #1
 8009616:	4a2e      	ldr	r2, [pc, #184]	; (80096d0 <LoRaMacProcess+0x3e8>)
 8009618:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800961a:	2208      	movs	r2, #8
 800961c:	5de3      	ldrb	r3, [r4, r7]
 800961e:	4213      	tst	r3, r2
 8009620:	d007      	beq.n	8009632 <LoRaMacProcess+0x34a>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009622:	4393      	bics	r3, r2
 8009624:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8009626:	23d1      	movs	r3, #209	; 0xd1
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	58e3      	ldr	r3, [r4, r3]
 800962c:	482b      	ldr	r0, [pc, #172]	; (80096dc <LoRaMacProcess+0x3f4>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8009632:	2510      	movs	r5, #16
 8009634:	5de3      	ldrb	r3, [r4, r7]
 8009636:	422b      	tst	r3, r5
 8009638:	d00a      	beq.n	8009650 <LoRaMacProcess+0x368>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800963a:	2307      	movs	r3, #7
 800963c:	a810      	add	r0, sp, #64	; 0x40
 800963e:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8009640:	23d1      	movs	r3, #209	; 0xd1
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	58e3      	ldr	r3, [r4, r3]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800964a:	5de3      	ldrb	r3, [r4, r7]
 800964c:	43ab      	bics	r3, r5
 800964e:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009650:	2202      	movs	r2, #2
 8009652:	5de3      	ldrb	r3, [r4, r7]
 8009654:	4213      	tst	r3, r2
 8009656:	d045      	beq.n	80096e4 <LoRaMacProcess+0x3fc>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009658:	4393      	bics	r3, r2
 800965a:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800965c:	23d1      	movs	r3, #209	; 0xd1
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	58e3      	ldr	r3, [r4, r3]
 8009662:	481f      	ldr	r0, [pc, #124]	; (80096e0 <LoRaMacProcess+0x3f8>)
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	4798      	blx	r3
 8009668:	e03c      	b.n	80096e4 <LoRaMacProcess+0x3fc>
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	20000830 	.word	0x20000830
 8009670:	00000481 	.word	0x00000481
 8009674:	20000834 	.word	0x20000834
 8009678:	00000484 	.word	0x00000484
 800967c:	0800f22c 	.word	0x0800f22c
 8009680:	20000bb4 	.word	0x20000bb4
 8009684:	20000bcc 	.word	0x20000bcc
 8009688:	00000414 	.word	0x00000414
 800968c:	20000c2c 	.word	0x20000c2c
 8009690:	20000e3c 	.word	0x20000e3c
 8009694:	00000415 	.word	0x00000415
 8009698:	0000043d 	.word	0x0000043d
 800969c:	20000e2c 	.word	0x20000e2c
 80096a0:	0000042a 	.word	0x0000042a
 80096a4:	0000042c 	.word	0x0000042c
 80096a8:	0000042d 	.word	0x0000042d
 80096ac:	0000041e 	.word	0x0000041e
 80096b0:	00000421 	.word	0x00000421
 80096b4:	00000424 	.word	0x00000424
 80096b8:	0000042e 	.word	0x0000042e
 80096bc:	0000041c 	.word	0x0000041c
 80096c0:	00000434 	.word	0x00000434
 80096c4:	0000041d 	.word	0x0000041d
 80096c8:	0800ef73 	.word	0x0800ef73
 80096cc:	00000413 	.word	0x00000413
 80096d0:	00000482 	.word	0x00000482
 80096d4:	20000c70 	.word	0x20000c70
 80096d8:	20000c84 	.word	0x20000c84
 80096dc:	20000c98 	.word	0x20000c98
 80096e0:	20000c50 	.word	0x20000c50
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80096e4:	2390      	movs	r3, #144	; 0x90
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	5ce3      	ldrb	r3, [r4, r3]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d101      	bne.n	80096f2 <LoRaMacProcess+0x40a>
    {
        OpenContinuousRxCWindow( );
 80096ee:	f7ff f80d 	bl	800870c <OpenContinuousRxCWindow>
    }
}
 80096f2:	b01d      	add	sp, #116	; 0x74
 80096f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80096f6:	4bd4      	ldr	r3, [pc, #848]	; (8009a48 <LoRaMacProcess+0x760>)
 80096f8:	54e2      	strb	r2, [r4, r3]
 80096fa:	e6c0      	b.n	800947e <LoRaMacProcess+0x196>
            macMsgData.BufSize = size;
 80096fc:	222c      	movs	r2, #44	; 0x2c
            macMsgData.Buffer = payload;
 80096fe:	9b02      	ldr	r3, [sp, #8]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009700:	a810      	add	r0, sp, #64	; 0x40
            macMsgData.Buffer = payload;
 8009702:	9310      	str	r3, [sp, #64]	; 0x40
            macMsgData.BufSize = size;
 8009704:	ab06      	add	r3, sp, #24
 8009706:	189b      	adds	r3, r3, r2
 8009708:	701e      	strb	r6, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800970a:	4bd0      	ldr	r3, [pc, #832]	; (8009a4c <LoRaMacProcess+0x764>)
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800970c:	32d3      	adds	r2, #211	; 0xd3
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800970e:	9319      	str	r3, [sp, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009710:	ab1a      	add	r3, sp, #104	; 0x68
 8009712:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009714:	f001 ffcf 	bl	800b6b6 <LoRaMacParserData>
 8009718:	9002      	str	r0, [sp, #8]
 800971a:	2800      	cmp	r0, #0
 800971c:	d006      	beq.n	800972c <LoRaMacProcess+0x444>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	4acb      	ldr	r2, [pc, #812]	; (8009a50 <LoRaMacProcess+0x768>)
 8009722:	54a3      	strb	r3, [r4, r2]
                PrepareRxDoneAbort( );
 8009724:	f7fe feda 	bl	80084dc <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC Parser error\r\n");
 8009728:	4bca      	ldr	r3, [pc, #808]	; (8009a54 <LoRaMacProcess+0x76c>)
 800972a:	e6d5      	b.n	80094d8 <LoRaMacProcess+0x1f0>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800972c:	2234      	movs	r2, #52	; 0x34
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800972e:	4bca      	ldr	r3, [pc, #808]	; (8009a58 <LoRaMacProcess+0x770>)
 8009730:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009732:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009734:	ab06      	add	r3, sp, #24
 8009736:	189b      	adds	r3, r3, r2
 8009738:	781a      	ldrb	r2, [r3, #0]
 800973a:	230f      	movs	r3, #15
 800973c:	0010      	movs	r0, r2
 800973e:	4018      	ands	r0, r3
 8009740:	421a      	tst	r2, r3
 8009742:	d005      	beq.n	8009750 <LoRaMacProcess+0x468>
 8009744:	331a      	adds	r3, #26
 8009746:	ad06      	add	r5, sp, #24
 8009748:	195b      	adds	r3, r3, r5
 800974a:	7fdb      	ldrb	r3, [r3, #31]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d141      	bne.n	80097d4 <LoRaMacProcess+0x4ec>
    else if( macMsg->FRMPayloadSize == 0 )
 8009750:	ab1a      	add	r3, sp, #104	; 0x68
 8009752:	781d      	ldrb	r5, [r3, #0]
 8009754:	2601      	movs	r6, #1
 8009756:	2d00      	cmp	r5, #0
 8009758:	d008      	beq.n	800976c <LoRaMacProcess+0x484>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800975a:	2800      	cmp	r0, #0
 800975c:	d134      	bne.n	80097c8 <LoRaMacProcess+0x4e0>
 800975e:	2329      	movs	r3, #41	; 0x29
 8009760:	a806      	add	r0, sp, #24
 8009762:	181b      	adds	r3, r3, r0
 8009764:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 8009766:	1e58      	subs	r0, r3, #1
 8009768:	4183      	sbcs	r3, r0
 800976a:	1c9e      	adds	r6, r3, #2
            downLinkCounter = 0;
 800976c:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800976e:	4cbb      	ldr	r4, [pc, #748]	; (8009a5c <LoRaMacProcess+0x774>)
            downLinkCounter = 0;
 8009770:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009772:	4bbb      	ldr	r3, [pc, #748]	; (8009a60 <LoRaMacProcess+0x778>)
 8009774:	58e3      	ldr	r3, [r4, r3]
 8009776:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009778:	4684      	mov	ip, r0
 800977a:	4281      	cmp	r1, r0
 800977c:	d12c      	bne.n	80097d8 <LoRaMacProcess+0x4f0>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800977e:	0019      	movs	r1, r3
 8009780:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009782:	7809      	ldrb	r1, [r1, #0]
 8009784:	2501      	movs	r5, #1
 8009786:	2900      	cmp	r1, #0
 8009788:	d027      	beq.n	80097da <LoRaMacProcess+0x4f2>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800978a:	0019      	movs	r1, r3
 800978c:	3153      	adds	r1, #83	; 0x53
 800978e:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8009790:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009792:	6809      	ldr	r1, [r1, #0]
 8009794:	910b      	str	r1, [sp, #44]	; 0x2c
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009796:	0019      	movs	r1, r3
 8009798:	317c      	adds	r1, #124	; 0x7c
 800979a:	7809      	ldrb	r1, [r1, #0]
 800979c:	2902      	cmp	r1, #2
 800979e:	d102      	bne.n	80097a6 <LoRaMacProcess+0x4be>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80097a0:	48b0      	ldr	r0, [pc, #704]	; (8009a64 <LoRaMacProcess+0x77c>)
 80097a2:	3101      	adds	r1, #1
 80097a4:	5421      	strb	r1, [r4, r0]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80097a6:	2e03      	cmp	r6, #3
 80097a8:	d106      	bne.n	80097b8 <LoRaMacProcess+0x4d0>
 80097aa:	4660      	mov	r0, ip
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80097ac:	2160      	movs	r1, #96	; 0x60
 80097ae:	9006      	str	r0, [sp, #24]
 80097b0:	2001      	movs	r0, #1
 80097b2:	9002      	str	r0, [sp, #8]
 80097b4:	420a      	tst	r2, r1
 80097b6:	d010      	beq.n	80097da <LoRaMacProcess+0x4f2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80097b8:	2201      	movs	r2, #1
 80097ba:	4ba8      	ldr	r3, [pc, #672]	; (8009a5c <LoRaMacProcess+0x774>)
 80097bc:	49a4      	ldr	r1, [pc, #656]	; (8009a50 <LoRaMacProcess+0x768>)
 80097be:	545a      	strb	r2, [r3, r1]
                PrepareRxDoneAbort( );
 80097c0:	f7fe fe8c 	bl	80084dc <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Multicast error\r\n");
 80097c4:	4ba8      	ldr	r3, [pc, #672]	; (8009a68 <LoRaMacProcess+0x780>)
 80097c6:	e687      	b.n	80094d8 <LoRaMacProcess+0x1f0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80097c8:	4ba1      	ldr	r3, [pc, #644]	; (8009a50 <LoRaMacProcess+0x768>)
 80097ca:	54e6      	strb	r6, [r4, r3]
                PrepareRxDoneAbort( );
 80097cc:	f7fe fe86 	bl	80084dc <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Determine Frame type error\r\n");
 80097d0:	4ba6      	ldr	r3, [pc, #664]	; (8009a6c <LoRaMacProcess+0x784>)
 80097d2:	e681      	b.n	80094d8 <LoRaMacProcess+0x1f0>
        *fType = FRAME_TYPE_A;
 80097d4:	9e02      	ldr	r6, [sp, #8]
 80097d6:	e7c9      	b.n	800976c <LoRaMacProcess+0x484>
 80097d8:	2501      	movs	r5, #1
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80097da:	2215      	movs	r2, #21
 80097dc:	a90c      	add	r1, sp, #48	; 0x30
 80097de:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80097e0:	7818      	ldrb	r0, [r3, #0]
 80097e2:	f002 f86c 	bl	800b8be <RegionGetPhyParam>
 80097e6:	4a9e      	ldr	r2, [pc, #632]	; (8009a60 <LoRaMacProcess+0x778>)
 80097e8:	4b9c      	ldr	r3, [pc, #624]	; (8009a5c <LoRaMacProcess+0x774>)
 80097ea:	900a      	str	r0, [sp, #40]	; 0x28
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80097ec:	589b      	ldr	r3, [r3, r2]
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	23b1      	movs	r3, #177	; 0xb1
 80097f2:	9a03      	ldr	r2, [sp, #12]
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	d009      	beq.n	8009810 <LoRaMacProcess+0x528>
 80097fc:	2d01      	cmp	r5, #1
 80097fe:	d12d      	bne.n	800985c <LoRaMacProcess+0x574>
            if( lrWanVersion.Fields.Minor == 1 )
 8009800:	2c01      	cmp	r4, #1
 8009802:	d129      	bne.n	8009858 <LoRaMacProcess+0x570>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009804:	2e00      	cmp	r6, #0
 8009806:	d001      	beq.n	800980c <LoRaMacProcess+0x524>
 8009808:	2e03      	cmp	r6, #3
 800980a:	d102      	bne.n	8009812 <LoRaMacProcess+0x52a>
                    *fCntID = A_FCNT_DOWN;
 800980c:	2402      	movs	r4, #2
 800980e:	e000      	b.n	8009812 <LoRaMacProcess+0x52a>
    switch( addrID )
 8009810:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8009812:	ab06      	add	r3, sp, #24
 8009814:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009818:	0020      	movs	r0, r4
 800981a:	b299      	uxth	r1, r3
 800981c:	ab0b      	add	r3, sp, #44	; 0x2c
 800981e:	f001 fdff 	bl	800b420 <LoRaMacCryptoGetFCntDown>
 8009822:	9003      	str	r0, [sp, #12]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS && macCryptoStatus != LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED)
 8009824:	2800      	cmp	r0, #0
 8009826:	d01c      	beq.n	8009862 <LoRaMacProcess+0x57a>
 8009828:	2807      	cmp	r0, #7
 800982a:	d01a      	beq.n	8009862 <LoRaMacProcess+0x57a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800982c:	230a      	movs	r3, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800982e:	2808      	cmp	r0, #8
 8009830:	d000      	beq.n	8009834 <LoRaMacProcess+0x54c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	4a89      	ldr	r2, [pc, #548]	; (8009a5c <LoRaMacProcess+0x774>)
 8009836:	4986      	ldr	r1, [pc, #536]	; (8009a50 <LoRaMacProcess+0x768>)
 8009838:	5453      	strb	r3, [r2, r1]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800983a:	2386      	movs	r3, #134	; 0x86
 800983c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8009842:	f7fe fe4b 	bl	80084dc <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Down counter error %d\r\n", macCryptoStatus);
 8009846:	9b03      	ldr	r3, [sp, #12]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	4b89      	ldr	r3, [pc, #548]	; (8009a70 <LoRaMacProcess+0x788>)
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC crypto error %d\r\n", macCryptoStatus);
 800984c:	2200      	movs	r2, #0
 800984e:	2002      	movs	r0, #2
 8009850:	0011      	movs	r1, r2
 8009852:	f004 fdc7 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8009856:	e644      	b.n	80094e2 <LoRaMacProcess+0x1fa>
                *fCntID = FCNT_DOWN;
 8009858:	2403      	movs	r4, #3
 800985a:	e7da      	b.n	8009812 <LoRaMacProcess+0x52a>
    switch( addrID )
 800985c:	2305      	movs	r3, #5
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	e7e7      	b.n	8009832 <LoRaMacProcess+0x54a>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009862:	ab10      	add	r3, sp, #64	; 0x40
 8009864:	0022      	movs	r2, r4
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	0028      	movs	r0, r5
 800986a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800986c:	9906      	ldr	r1, [sp, #24]
 800986e:	f001 fe8d 	bl	800b58c <LoRaMacCryptoUnsecureMessage>
 8009872:	4b7a      	ldr	r3, [pc, #488]	; (8009a5c <LoRaMacProcess+0x774>)
 8009874:	1e04      	subs	r4, r0, #0
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009876:	d00a      	beq.n	800988e <LoRaMacProcess+0x5a6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009878:	1e82      	subs	r2, r0, #2
 800987a:	1e51      	subs	r1, r2, #1
 800987c:	418a      	sbcs	r2, r1
 800987e:	4974      	ldr	r1, [pc, #464]	; (8009a50 <LoRaMacProcess+0x768>)
 8009880:	320b      	adds	r2, #11
 8009882:	545a      	strb	r2, [r3, r1]
                PrepareRxDoneAbort( );
 8009884:	f7fe fe2a 	bl	80084dc <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC crypto error %d\r\n", macCryptoStatus);
 8009888:	4b7a      	ldr	r3, [pc, #488]	; (8009a74 <LoRaMacProcess+0x78c>)
 800988a:	9400      	str	r4, [sp, #0]
 800988c:	e7de      	b.n	800984c <LoRaMacProcess+0x564>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800988e:	4a70      	ldr	r2, [pc, #448]	; (8009a50 <LoRaMacProcess+0x768>)
            MacCtx.McpsIndication.Multicast = multicast;
 8009890:	9902      	ldr	r1, [sp, #8]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009892:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 8009894:	4a78      	ldr	r2, [pc, #480]	; (8009a78 <LoRaMacProcess+0x790>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009896:	4879      	ldr	r0, [pc, #484]	; (8009a7c <LoRaMacProcess+0x794>)
            MacCtx.McpsIndication.Multicast = multicast;
 8009898:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800989a:	2134      	movs	r1, #52	; 0x34
 800989c:	aa06      	add	r2, sp, #24
 800989e:	1852      	adds	r2, r2, r1
 80098a0:	7812      	ldrb	r2, [r2, #0]
 80098a2:	06d1      	lsls	r1, r2, #27
 80098a4:	0fc9      	lsrs	r1, r1, #31
 80098a6:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsIndication.Buffer = NULL;
 80098a8:	4975      	ldr	r1, [pc, #468]	; (8009a80 <LoRaMacProcess+0x798>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80098aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
            MacCtx.McpsIndication.Buffer = NULL;
 80098ac:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 80098ae:	3104      	adds	r1, #4
 80098b0:	545c      	strb	r4, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80098b2:	3108      	adds	r1, #8
 80098b4:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80098b6:	0692      	lsls	r2, r2, #26
 80098b8:	4972      	ldr	r1, [pc, #456]	; (8009a84 <LoRaMacProcess+0x79c>)
 80098ba:	0fd2      	lsrs	r2, r2, #31
 80098bc:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80098be:	4972      	ldr	r1, [pc, #456]	; (8009a88 <LoRaMacProcess+0x7a0>)
 80098c0:	545c      	strb	r4, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80098c2:	3103      	adds	r1, #3
 80098c4:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80098c6:	4a67      	ldr	r2, [pc, #412]	; (8009a64 <LoRaMacProcess+0x77c>)
 80098c8:	5c9a      	ldrb	r2, [r3, r2]
 80098ca:	2a01      	cmp	r2, #1
 80098cc:	d803      	bhi.n	80098d6 <LoRaMacProcess+0x5ee>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 80098ce:	4964      	ldr	r1, [pc, #400]	; (8009a60 <LoRaMacProcess+0x778>)
 80098d0:	585b      	ldr	r3, [r3, r1]
 80098d2:	3304      	adds	r3, #4
 80098d4:	67dc      	str	r4, [r3, #124]	; 0x7c
            if( multicast == 1 )
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	4c60      	ldr	r4, [pc, #384]	; (8009a5c <LoRaMacProcess+0x774>)
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d152      	bne.n	8009984 <LoRaMacProcess+0x69c>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80098de:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80098e0:	4959      	ldr	r1, [pc, #356]	; (8009a48 <LoRaMacProcess+0x760>)
 80098e2:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80098e4:	4b69      	ldr	r3, [pc, #420]	; (8009a8c <LoRaMacProcess+0x7a4>)
 80098e6:	ad10      	add	r5, sp, #64	; 0x40
 80098e8:	5ce1      	ldrb	r1, [r4, r3]
 80098ea:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80098ec:	2a01      	cmp	r2, #1
 80098ee:	d805      	bhi.n	80098fc <LoRaMacProcess+0x614>
        if( request == MCPS_CONFIRMED )
 80098f0:	2901      	cmp	r1, #1
 80098f2:	d101      	bne.n	80098f8 <LoRaMacProcess+0x610>
            if( fCtrl.Bits.Ack == 1 )
 80098f4:	069b      	lsls	r3, r3, #26
 80098f6:	d501      	bpl.n	80098fc <LoRaMacProcess+0x614>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80098f8:	f001 faea 	bl	800aed0 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 80098fc:	2e02      	cmp	r6, #2
 80098fe:	d066      	beq.n	80099ce <LoRaMacProcess+0x6e6>
 8009900:	2e03      	cmp	r6, #3
 8009902:	d072      	beq.n	80099ea <LoRaMacProcess+0x702>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009904:	7b29      	ldrb	r1, [r5, #12]
 8009906:	9a05      	ldr	r2, [sp, #20]
 8009908:	0709      	lsls	r1, r1, #28
 800990a:	0f09      	lsrs	r1, r1, #28
 800990c:	a814      	add	r0, sp, #80	; 0x50
 800990e:	2e01      	cmp	r6, #1
 8009910:	d053      	beq.n	80099ba <LoRaMacProcess+0x6d2>
 8009912:	f7ff fa25 	bl	8008d60 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009916:	2248      	movs	r2, #72	; 0x48
 8009918:	ab06      	add	r3, sp, #24
 800991a:	189b      	adds	r3, r3, r2
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4a5c      	ldr	r2, [pc, #368]	; (8009a90 <LoRaMacProcess+0x7a8>)
 8009920:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009924:	9302      	str	r3, [sp, #8]
 8009926:	9a02      	ldr	r2, [sp, #8]
 8009928:	4b55      	ldr	r3, [pc, #340]	; (8009a80 <LoRaMacProcess+0x798>)
 800992a:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800992c:	ab1a      	add	r3, sp, #104	; 0x68
 800992e:	781a      	ldrb	r2, [r3, #0]
 8009930:	2385      	movs	r3, #133	; 0x85
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8009936:	2201      	movs	r2, #1
 8009938:	4b56      	ldr	r3, [pc, #344]	; (8009a94 <LoRaMacProcess+0x7ac>)
 800993a:	54e2      	strb	r2, [r4, r3]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type A\r\n");
 800993c:	4b56      	ldr	r3, [pc, #344]	; (8009a98 <LoRaMacProcess+0x7b0>)
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type D\r\n");
 800993e:	2200      	movs	r2, #0
 8009940:	2002      	movs	r0, #2
 8009942:	0011      	movs	r1, r2
 8009944:	f004 fd4e 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 8009948:	2200      	movs	r2, #0
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800994a:	2002      	movs	r0, #2
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800994c:	0011      	movs	r1, r2
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800994e:	5de3      	ldrb	r3, [r4, r7]
 8009950:	4303      	orrs	r3, r0
 8009952:	55e3      	strb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 8009954:	4b51      	ldr	r3, [pc, #324]	; (8009a9c <LoRaMacProcess+0x7b4>)
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 8009956:	f004 fd45 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
    if( MacCtx.NodeAckRequested == true )
 800995a:	4c40      	ldr	r4, [pc, #256]	; (8009a5c <LoRaMacProcess+0x774>)
 800995c:	4b50      	ldr	r3, [pc, #320]	; (8009aa0 <LoRaMacProcess+0x7b8>)
 800995e:	5ce3      	ldrb	r3, [r4, r3]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d100      	bne.n	8009966 <LoRaMacProcess+0x67e>
 8009964:	e0ab      	b.n	8009abe <LoRaMacProcess+0x7d6>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009966:	2388      	movs	r3, #136	; 0x88
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	5ce3      	ldrb	r3, [r4, r3]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <LoRaMacProcess+0x68e>
            OnAckTimeoutTimerEvent( NULL );
 8009970:	2000      	movs	r0, #0
 8009972:	f7fe fd85 	bl	8008480 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009976:	2320      	movs	r3, #32
 8009978:	5de2      	ldrb	r2, [r4, r7]
 800997a:	4313      	orrs	r3, r2
 800997c:	55e3      	strb	r3, [r4, r7]
    UpdateRxSlotIdleState( );
 800997e:	f7fe fd25 	bl	80083cc <UpdateRxSlotIdleState>
 8009982:	e5ae      	b.n	80094e2 <LoRaMacProcess+0x1fa>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009984:	211f      	movs	r1, #31
 8009986:	9807      	ldr	r0, [sp, #28]
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8009988:	4b35      	ldr	r3, [pc, #212]	; (8009a60 <LoRaMacProcess+0x778>)
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800998a:	4388      	bics	r0, r1
 800998c:	0001      	movs	r1, r0
 800998e:	204c      	movs	r0, #76	; 0x4c
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8009990:	58e3      	ldr	r3, [r4, r3]
 8009992:	30ff      	adds	r0, #255	; 0xff
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009994:	29a0      	cmp	r1, #160	; 0xa0
 8009996:	d10b      	bne.n	80099b0 <LoRaMacProcess+0x6c8>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8009998:	399f      	subs	r1, #159	; 0x9f
 800999a:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800999c:	3162      	adds	r1, #98	; 0x62
 800999e:	31ff      	adds	r1, #255	; 0xff
 80099a0:	5c59      	ldrb	r1, [r3, r1]
 80099a2:	2900      	cmp	r1, #0
 80099a4:	d102      	bne.n	80099ac <LoRaMacProcess+0x6c4>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80099a6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80099a8:	33fc      	adds	r3, #252	; 0xfc
 80099aa:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e797      	b.n	80098e0 <LoRaMacProcess+0x5f8>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 80099b0:	2100      	movs	r1, #0
 80099b2:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80099b4:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <LoRaMacProcess+0x760>)
 80099b6:	54e1      	strb	r1, [r4, r3]
 80099b8:	e794      	b.n	80098e4 <LoRaMacProcess+0x5fc>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80099ba:	f7ff f9d1 	bl	8008d60 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80099be:	2248      	movs	r2, #72	; 0x48
 80099c0:	ab06      	add	r3, sp, #24
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	4a32      	ldr	r2, [pc, #200]	; (8009a90 <LoRaMacProcess+0x7a8>)
 80099c8:	54a3      	strb	r3, [r4, r2]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type B\r\n");
 80099ca:	4b36      	ldr	r3, [pc, #216]	; (8009aa4 <LoRaMacProcess+0x7bc>)
 80099cc:	e7b7      	b.n	800993e <LoRaMacProcess+0x656>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80099ce:	ab1a      	add	r3, sp, #104	; 0x68
 80099d0:	7819      	ldrb	r1, [r3, #0]
 80099d2:	9a05      	ldr	r2, [sp, #20]
 80099d4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80099d6:	f7ff f9c3 	bl	8008d60 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80099da:	2248      	movs	r2, #72	; 0x48
 80099dc:	ab06      	add	r3, sp, #24
 80099de:	189b      	adds	r3, r3, r2
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	4a2b      	ldr	r2, [pc, #172]	; (8009a90 <LoRaMacProcess+0x7a8>)
 80099e4:	54a3      	strb	r3, [r4, r2]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type C\r\n");
 80099e6:	4b30      	ldr	r3, [pc, #192]	; (8009aa8 <LoRaMacProcess+0x7c0>)
 80099e8:	e7a9      	b.n	800993e <LoRaMacProcess+0x656>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80099ea:	2248      	movs	r2, #72	; 0x48
 80099ec:	ab06      	add	r3, sp, #24
 80099ee:	189b      	adds	r3, r3, r2
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	4a27      	ldr	r2, [pc, #156]	; (8009a90 <LoRaMacProcess+0x7a8>)
 80099f4:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80099f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099f8:	9302      	str	r3, [sp, #8]
 80099fa:	9a02      	ldr	r2, [sp, #8]
 80099fc:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <LoRaMacProcess+0x798>)
 80099fe:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009a00:	ab1a      	add	r3, sp, #104	; 0x68
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	2385      	movs	r3, #133	; 0x85
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4b21      	ldr	r3, [pc, #132]	; (8009a94 <LoRaMacProcess+0x7ac>)
 8009a0e:	54e2      	strb	r2, [r4, r3]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type D\r\n");
 8009a10:	4b26      	ldr	r3, [pc, #152]	; (8009aac <LoRaMacProcess+0x7c4>)
 8009a12:	e794      	b.n	800993e <LoRaMacProcess+0x656>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009a14:	1e73      	subs	r3, r6, #1
 8009a16:	9303      	str	r3, [sp, #12]
 8009a18:	466b      	mov	r3, sp
 8009a1a:	4e0c      	ldr	r6, [pc, #48]	; (8009a4c <LoRaMacProcess+0x764>)
 8009a1c:	9902      	ldr	r1, [sp, #8]
 8009a1e:	899a      	ldrh	r2, [r3, #12]
 8009a20:	0030      	movs	r0, r6
 8009a22:	3101      	adds	r1, #1
 8009a24:	f002 ffa8 	bl	800c978 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009a28:	2303      	movs	r3, #3
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009a2a:	2002      	movs	r0, #2
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009a2c:	4a06      	ldr	r2, [pc, #24]	; (8009a48 <LoRaMacProcess+0x760>)
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 8009a2e:	0029      	movs	r1, r5
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009a30:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <LoRaMacProcess+0x798>)
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009a34:	9a03      	ldr	r2, [sp, #12]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009a36:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009a38:	3304      	adds	r3, #4
 8009a3a:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009a3c:	5de3      	ldrb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 8009a3e:	002a      	movs	r2, r5
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009a40:	4303      	orrs	r3, r0
 8009a42:	55e3      	strb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 8009a44:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <LoRaMacProcess+0x7c8>)
 8009a46:	e786      	b.n	8009956 <LoRaMacProcess+0x66e>
 8009a48:	0000041c 	.word	0x0000041c
 8009a4c:	20000a6c 	.word	0x20000a6c
 8009a50:	0000041d 	.word	0x0000041d
 8009a54:	0800ef8f 	.word	0x0800ef8f
 8009a58:	00000434 	.word	0x00000434
 8009a5c:	20000834 	.word	0x20000834
 8009a60:	00000484 	.word	0x00000484
 8009a64:	0000042d 	.word	0x0000042d
 8009a68:	0800efc3 	.word	0x0800efc3
 8009a6c:	0800efa6 	.word	0x0800efa6
 8009a70:	0800efd5 	.word	0x0800efd5
 8009a74:	0800efed 	.word	0x0800efed
 8009a78:	0000041e 	.word	0x0000041e
 8009a7c:	00000421 	.word	0x00000421
 8009a80:	00000424 	.word	0x00000424
 8009a84:	0000042e 	.word	0x0000042e
 8009a88:	0000043d 	.word	0x0000043d
 8009a8c:	0000043c 	.word	0x0000043c
 8009a90:	0000041f 	.word	0x0000041f
 8009a94:	00000429 	.word	0x00000429
 8009a98:	0800f007 	.word	0x0800f007
 8009a9c:	0800f043 	.word	0x0800f043
 8009aa0:	00000414 	.word	0x00000414
 8009aa4:	0800f016 	.word	0x0800f016
 8009aa8:	0800f025 	.word	0x0800f025
 8009aac:	0800f034 	.word	0x0800f034
 8009ab0:	0800f066 	.word	0x0800f066
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ab4:	4b58      	ldr	r3, [pc, #352]	; (8009c18 <LoRaMacProcess+0x930>)
 8009ab6:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8009ab8:	f7fe fd10 	bl	80084dc <PrepareRxDoneAbort>
            break;
 8009abc:	e74d      	b.n	800995a <LoRaMacProcess+0x672>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009abe:	4b57      	ldr	r3, [pc, #348]	; (8009c1c <LoRaMacProcess+0x934>)
 8009ac0:	58e3      	ldr	r3, [r4, r3]
 8009ac2:	337c      	adds	r3, #124	; 0x7c
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d000      	beq.n	8009acc <LoRaMacProcess+0x7e4>
 8009aca:	e754      	b.n	8009976 <LoRaMacProcess+0x68e>
 8009acc:	e750      	b.n	8009970 <LoRaMacProcess+0x688>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009ace:	5de3      	ldrb	r3, [r4, r7]
 8009ad0:	075b      	lsls	r3, r3, #29
 8009ad2:	d512      	bpl.n	8009afa <LoRaMacProcess+0x812>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	25d0      	movs	r5, #208	; 0xd0
 8009ad8:	f001 fb2e 	bl	800b138 <LoRaMacConfirmQueueIsCmdActive>
 8009adc:	00ad      	lsls	r5, r5, #2
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d035      	beq.n	8009b4e <LoRaMacProcess+0x866>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	f001 fafa 	bl	800b0dc <LoRaMacConfirmQueueGetStatus>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d102      	bne.n	8009af2 <LoRaMacProcess+0x80a>
                MacCtx.ChannelsNbTransCounter = 0;
 8009aec:	2382      	movs	r3, #130	; 0x82
 8009aee:	00db      	lsls	r3, r3, #3
 8009af0:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009af2:	2302      	movs	r3, #2
 8009af4:	5962      	ldr	r2, [r4, r5]
 8009af6:	439a      	bics	r2, r3
 8009af8:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009afa:	5de1      	ldrb	r1, [r4, r7]
 8009afc:	07cb      	lsls	r3, r1, #31
 8009afe:	d400      	bmi.n	8009b02 <LoRaMacProcess+0x81a>
 8009b00:	e543      	b.n	800958a <LoRaMacProcess+0x2a2>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009b02:	4b47      	ldr	r3, [pc, #284]	; (8009c20 <LoRaMacProcess+0x938>)
 8009b04:	5ce3      	ldrb	r3, [r4, r3]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <LoRaMacProcess+0x826>
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d12a      	bne.n	8009b64 <LoRaMacProcess+0x87c>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009b0e:	4b43      	ldr	r3, [pc, #268]	; (8009c1c <LoRaMacProcess+0x934>)
    if( MacCtx.ChannelsNbTransCounter >=
 8009b10:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009b12:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 8009b14:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009b16:	001a      	movs	r2, r3
 8009b18:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 8009b1a:	5c20      	ldrb	r0, [r4, r0]
 8009b1c:	7812      	ldrb	r2, [r2, #0]
 8009b1e:	4290      	cmp	r0, r2
 8009b20:	d209      	bcs.n	8009b36 <LoRaMacProcess+0x84e>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b22:	078a      	lsls	r2, r1, #30
 8009b24:	d554      	bpl.n	8009bd0 <LoRaMacProcess+0x8e8>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8009b26:	337c      	adds	r3, #124	; 0x7c
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <LoRaMacProcess+0x84e>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8009b2e:	4b3d      	ldr	r3, [pc, #244]	; (8009c24 <LoRaMacProcess+0x93c>)
 8009b30:	5ce3      	ldrb	r3, [r4, r3]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d14c      	bne.n	8009bd0 <LoRaMacProcess+0x8e8>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009b36:	483c      	ldr	r0, [pc, #240]	; (8009c28 <LoRaMacProcess+0x940>)
 8009b38:	f004 fa86 	bl	800e048 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b3c:	22d0      	movs	r2, #208	; 0xd0
 8009b3e:	2320      	movs	r3, #32
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	58a1      	ldr	r1, [r4, r2]
 8009b44:	4399      	bics	r1, r3
 8009b46:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8009b48:	f7ff fb5c 	bl	8009204 <StopRetransmission.isra.0>
 8009b4c:	e51d      	b.n	800958a <LoRaMacProcess+0x2a2>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009b4e:	2005      	movs	r0, #5
 8009b50:	f001 faf2 	bl	800b138 <LoRaMacConfirmQueueIsCmdActive>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d1cc      	bne.n	8009af2 <LoRaMacProcess+0x80a>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009b58:	2006      	movs	r0, #6
 8009b5a:	f001 faed 	bl	800b138 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d1c7      	bne.n	8009af2 <LoRaMacProcess+0x80a>
 8009b62:	e7ca      	b.n	8009afa <LoRaMacProcess+0x812>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d133      	bne.n	8009bd0 <LoRaMacProcess+0x8e8>
            if( MacCtx.AckTimeoutRetry == true )
 8009b68:	4b30      	ldr	r3, [pc, #192]	; (8009c2c <LoRaMacProcess+0x944>)
 8009b6a:	5ce2      	ldrb	r2, [r4, r3]
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	d100      	bne.n	8009b72 <LoRaMacProcess+0x88a>
 8009b70:	e50b      	b.n	800958a <LoRaMacProcess+0x2a2>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009b72:	4d2f      	ldr	r5, [pc, #188]	; (8009c30 <LoRaMacProcess+0x948>)
        MacCtx.AckTimeoutRetries )
 8009b74:	482f      	ldr	r0, [pc, #188]	; (8009c34 <LoRaMacProcess+0x94c>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009b76:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 8009b78:	5c20      	ldrb	r0, [r4, r0]
 8009b7a:	4684      	mov	ip, r0
    if( MacCtx.AckTimeoutRetriesCounter >=
 8009b7c:	4283      	cmp	r3, r0
 8009b7e:	d205      	bcs.n	8009b8c <LoRaMacProcess+0x8a4>
    return false;
 8009b80:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009b82:	0789      	lsls	r1, r1, #30
 8009b84:	d502      	bpl.n	8009b8c <LoRaMacProcess+0x8a4>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009b86:	2288      	movs	r2, #136	; 0x88
 8009b88:	00d2      	lsls	r2, r2, #3
 8009b8a:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009b8c:	21b1      	movs	r1, #177	; 0xb1
 8009b8e:	4e23      	ldr	r6, [pc, #140]	; (8009c1c <LoRaMacProcess+0x934>)
 8009b90:	0049      	lsls	r1, r1, #1
 8009b92:	59a0      	ldr	r0, [r4, r6]
 8009b94:	5c41      	ldrb	r1, [r0, r1]
 8009b96:	2900      	cmp	r1, #0
 8009b98:	d13a      	bne.n	8009c10 <LoRaMacProcess+0x928>
                    if( stopRetransmission == false )
 8009b9a:	2a00      	cmp	r2, #0
 8009b9c:	d122      	bne.n	8009be4 <LoRaMacProcess+0x8fc>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8009b9e:	4563      	cmp	r3, ip
 8009ba0:	d216      	bcs.n	8009bd0 <LoRaMacProcess+0x8e8>
        MacCtx.AckTimeoutRetriesCounter++;
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009ba8:	07db      	lsls	r3, r3, #31
 8009baa:	d511      	bpl.n	8009bd0 <LoRaMacProcess+0x8e8>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009bac:	2322      	movs	r3, #34	; 0x22
 8009bae:	a910      	add	r1, sp, #64	; 0x40
 8009bb0:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009bb2:	0003      	movs	r3, r0
 8009bb4:	33b8      	adds	r3, #184	; 0xb8
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009bba:	0003      	movs	r3, r0
 8009bbc:	3385      	adds	r3, #133	; 0x85
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009bc2:	7800      	ldrb	r0, [r0, #0]
 8009bc4:	f001 fe7b 	bl	800b8be <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8009bc8:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009bca:	900c      	str	r0, [sp, #48]	; 0x30
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8009bcc:	3385      	adds	r3, #133	; 0x85
 8009bce:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009bd0:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 8009bd2:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009bd4:	5de3      	ldrb	r3, [r4, r7]
 8009bd6:	4393      	bics	r3, r2
 8009bd8:	55e3      	strb	r3, [r4, r7]
            MacCtx.AckTimeoutRetry = false;
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <LoRaMacProcess+0x944>)
 8009bdc:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8009bde:	f7ff fb3f 	bl	8009260 <OnTxDelayedTimerEvent>
 8009be2:	e4d2      	b.n	800958a <LoRaMacProcess+0x2a2>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009be4:	2388      	movs	r3, #136	; 0x88
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	5ce6      	ldrb	r6, [r4, r3]
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	d10c      	bne.n	8009c08 <LoRaMacProcess+0x920>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009bee:	2302      	movs	r3, #2
 8009bf0:	a910      	add	r1, sp, #64	; 0x40
 8009bf2:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009bf4:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <LoRaMacProcess+0x950>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009bf6:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	9310      	str	r3, [sp, #64]	; 0x40
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009bfc:	f001 fe72 	bl	800b8e4 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8009c00:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <LoRaMacProcess+0x954>)
 8009c02:	54e6      	strb	r6, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 8009c04:	332c      	adds	r3, #44	; 0x2c
 8009c06:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009c08:	5d62      	ldrb	r2, [r4, r5]
 8009c0a:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <LoRaMacProcess+0x958>)
 8009c0c:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 8009c0e:	e792      	b.n	8009b36 <LoRaMacProcess+0x84e>
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d0dd      	beq.n	8009bd0 <LoRaMacProcess+0x8e8>
 8009c14:	e78f      	b.n	8009b36 <LoRaMacProcess+0x84e>
 8009c16:	46c0      	nop			; (mov r8, r8)
 8009c18:	0000041d 	.word	0x0000041d
 8009c1c:	00000484 	.word	0x00000484
 8009c20:	0000043c 	.word	0x0000043c
 8009c24:	0000042d 	.word	0x0000042d
 8009c28:	20000b9c 	.word	0x20000b9c
 8009c2c:	00000413 	.word	0x00000413
 8009c30:	00000412 	.word	0x00000412
 8009c34:	00000411 	.word	0x00000411
 8009c38:	200007f8 	.word	0x200007f8
 8009c3c:	00000414 	.word	0x00000414
 8009c40:	00000441 	.word	0x00000441

08009c44 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b08d      	sub	sp, #52	; 0x34
 8009c48:	0007      	movs	r7, r0
 //   LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009c4a:	2503      	movs	r5, #3
{
 8009c4c:	9103      	str	r1, [sp, #12]
 8009c4e:	9202      	str	r2, [sp, #8]
    if( ( primitives == NULL ) ||
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d100      	bne.n	8009c56 <LoRaMacInitialization+0x12>
 8009c54:	e170      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
 8009c56:	2900      	cmp	r1, #0
 8009c58:	d100      	bne.n	8009c5c <LoRaMacInitialization+0x18>
 8009c5a:	e16d      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009c5c:	6803      	ldr	r3, [r0, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d100      	bne.n	8009c64 <LoRaMacInitialization+0x20>
 8009c62:	e169      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
 8009c64:	6843      	ldr	r3, [r0, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d100      	bne.n	8009c6c <LoRaMacInitialization+0x28>
 8009c6a:	e165      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009c6c:	6883      	ldr	r3, [r0, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d100      	bne.n	8009c74 <LoRaMacInitialization+0x30>
 8009c72:	e161      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009c74:	68c3      	ldr	r3, [r0, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d100      	bne.n	8009c7c <LoRaMacInitialization+0x38>
 8009c7a:	e15d      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009c7c:	0010      	movs	r0, r2
 8009c7e:	f001 fe19 	bl	800b8b4 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009c82:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d100      	bne.n	8009c8a <LoRaMacInitialization+0x46>
 8009c88:	e156      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8009c8a:	0038      	movs	r0, r7
 8009c8c:	49bd      	ldr	r1, [pc, #756]	; (8009f84 <LoRaMacInitialization+0x340>)
 8009c8e:	f001 f9b3 	bl	800aff8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8009c92:	22b6      	movs	r2, #182	; 0xb6
 8009c94:	4dbc      	ldr	r5, [pc, #752]	; (8009f88 <LoRaMacInitialization+0x344>)
 8009c96:	2100      	movs	r1, #0
 8009c98:	0028      	movs	r0, r5
 8009c9a:	0052      	lsls	r2, r2, #1
 8009c9c:	f002 fe81 	bl	800c9a2 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009ca0:	4cba      	ldr	r4, [pc, #744]	; (8009f8c <LoRaMacInitialization+0x348>)
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	0020      	movs	r0, r4
 8009ca6:	4aba      	ldr	r2, [pc, #744]	; (8009f90 <LoRaMacInitialization+0x34c>)
 8009ca8:	f002 fe7b 	bl	800c9a2 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009cac:	2101      	movs	r1, #1
 8009cae:	4bb9      	ldr	r3, [pc, #740]	; (8009f94 <LoRaMacInitialization+0x350>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8009cb0:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009cb2:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 8009cb4:	4bb8      	ldr	r3, [pc, #736]	; (8009f98 <LoRaMacInitialization+0x354>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8009cb6:	4eb9      	ldr	r6, [pc, #740]	; (8009f9c <LoRaMacInitialization+0x358>)
    MacCtx.AckTimeoutRetries = 1;
 8009cb8:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 8009cba:	9b02      	ldr	r3, [sp, #8]
    MacCtx.NvmCtx = &NvmMacCtx;
 8009cbc:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 8009cbe:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8009cc0:	002b      	movs	r3, r5
 8009cc2:	337c      	adds	r3, #124	; 0x7c
 8009cc4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8009cc6:	002b      	movs	r3, r5
 8009cc8:	33ca      	adds	r3, #202	; 0xca
 8009cca:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8009ccc:	4bb4      	ldr	r3, [pc, #720]	; (8009fa0 <LoRaMacInitialization+0x35c>)
 8009cce:	35fc      	adds	r5, #252	; 0xfc
 8009cd0:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009cd2:	230f      	movs	r3, #15
 8009cd4:	ad08      	add	r5, sp, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009cd6:	0029      	movs	r1, r5
 8009cd8:	9802      	ldr	r0, [sp, #8]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009cda:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009cdc:	f001 fdef 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8009ce0:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009ce2:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8009ce4:	1e42      	subs	r2, r0, #1
 8009ce6:	4190      	sbcs	r0, r2
 8009ce8:	001a      	movs	r2, r3
 8009cea:	32c9      	adds	r2, #201	; 0xc9
 8009cec:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009cee:	200a      	movs	r0, #10
 8009cf0:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009cf2:	0029      	movs	r1, r5
 8009cf4:	7818      	ldrb	r0, [r3, #0]
 8009cf6:	f001 fde2 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009cfa:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8009cfc:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 8009cfe:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d00:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8009d02:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d04:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d06:	7818      	ldrb	r0, [r3, #0]
 8009d08:	f001 fdd9 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009d0c:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8009d0e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009d10:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d12:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8009d14:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d16:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d18:	7818      	ldrb	r0, [r3, #0]
 8009d1a:	f001 fdd0 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009d1e:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009d20:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009d22:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d24:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009d26:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d28:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d2a:	7818      	ldrb	r0, [r3, #0]
 8009d2c:	f001 fdc7 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009d30:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009d32:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009d34:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d36:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009d38:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d3a:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d3c:	7818      	ldrb	r0, [r3, #0]
 8009d3e:	f001 fdbe 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009d42:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009d44:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009d46:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d48:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009d4a:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d4c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d4e:	7818      	ldrb	r0, [r3, #0]
 8009d50:	f001 fdb5 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009d54:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009d56:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009d58:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d5a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009d5c:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d5e:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d60:	7818      	ldrb	r0, [r3, #0]
 8009d62:	f001 fdac 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009d66:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009d68:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009d6a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d6c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009d6e:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d70:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d72:	7818      	ldrb	r0, [r3, #0]
 8009d74:	f001 fda3 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009d78:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d7a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009d7c:	1d9a      	adds	r2, r3, #6
 8009d7e:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009d80:	2218      	movs	r2, #24
 8009d82:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d84:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d86:	7818      	ldrb	r0, [r3, #0]
 8009d88:	f001 fd99 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009d8c:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009d8e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009d90:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d92:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009d94:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009d96:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d98:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d9a:	7818      	ldrb	r0, [r3, #0]
 8009d9c:	f001 fd8f 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009da0:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009da2:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009da4:	001a      	movs	r2, r3
 8009da6:	b2c0      	uxtb	r0, r0
 8009da8:	322c      	adds	r2, #44	; 0x2c
 8009daa:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009dac:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009dae:	221e      	movs	r2, #30
 8009db0:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009db2:	0029      	movs	r1, r5
 8009db4:	7818      	ldrb	r0, [r3, #0]
 8009db6:	f001 fd82 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009dba:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dbc:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	3238      	adds	r2, #56	; 0x38
 8009dc2:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009dc4:	221f      	movs	r2, #31
 8009dc6:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dc8:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dca:	7818      	ldrb	r0, [r3, #0]
 8009dcc:	f001 fd77 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009dd0:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dd2:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009dd4:	001a      	movs	r2, r3
 8009dd6:	3239      	adds	r2, #57	; 0x39
 8009dd8:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009dda:	2220      	movs	r2, #32
 8009ddc:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dde:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009de0:	7818      	ldrb	r0, [r3, #0]
 8009de2:	f001 fd6c 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009de6:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009de8:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009dea:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dec:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009dee:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009df0:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009df2:	7818      	ldrb	r0, [r3, #0]
 8009df4:	f001 fd63 	bl	800b8be <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009df8:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009dfa:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009dfc:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009dfe:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009e00:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e02:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e04:	7818      	ldrb	r0, [r3, #0]
 8009e06:	f001 fd5a 	bl	800b8be <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009e0a:	23fd      	movs	r3, #253	; 0xfd
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009e10:	230c      	movs	r3, #12
 8009e12:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e14:	59a3      	ldr	r3, [r4, r6]
 8009e16:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e18:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e1a:	7818      	ldrb	r0, [r3, #0]
 8009e1c:	f001 fd4f 	bl	800b8be <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8009e20:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 8009e22:	4b60      	ldr	r3, [pc, #384]	; (8009fa4 <LoRaMacInitialization+0x360>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8009e24:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 8009e26:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8009e28:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e2a:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8009e2c:	1d5a      	adds	r2, r3, #5
 8009e2e:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009e30:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8009e32:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009e34:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8009e36:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8009e38:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009e3a:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	308c      	adds	r0, #140	; 0x8c
 8009e40:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8009e42:	0018      	movs	r0, r3
 8009e44:	3090      	adds	r0, #144	; 0x90
 8009e46:	0002      	movs	r2, r0
 8009e48:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8009e4a:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8009e4c:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8009e4e:	0018      	movs	r0, r3
 8009e50:	3094      	adds	r0, #148	; 0x94
 8009e52:	0002      	movs	r2, r0
 8009e54:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 8009e56:	950a      	str	r5, [sp, #40]	; 0x28
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8009e58:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	3098      	adds	r0, #152	; 0x98
 8009e5e:	0002      	movs	r2, r0
 8009e60:	6998      	ldr	r0, [r3, #24]
 8009e62:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8009e64:	0018      	movs	r0, r3
 8009e66:	309c      	adds	r0, #156	; 0x9c
 8009e68:	0002      	movs	r2, r0
 8009e6a:	69d8      	ldr	r0, [r3, #28]
 8009e6c:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8009e6e:	0018      	movs	r0, r3
 8009e70:	30a0      	adds	r0, #160	; 0xa0
 8009e72:	0002      	movs	r2, r0
 8009e74:	6a18      	ldr	r0, [r3, #32]
 8009e76:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8009e78:	0018      	movs	r0, r3
 8009e7a:	30a4      	adds	r0, #164	; 0xa4
 8009e7c:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 8009e7e:	a90a      	add	r1, sp, #40	; 0x28
 8009e80:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009e82:	7818      	ldrb	r0, [r3, #0]
 8009e84:	f001 fd2e 	bl	800b8e4 <RegionInitDefaults>

    ResetMacParameters( );
 8009e88:	f7fe fbce 	bl	8008628 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8009e8c:	59a3      	ldr	r3, [r4, r6]
 8009e8e:	2101      	movs	r1, #1
 8009e90:	001a      	movs	r2, r3
 8009e92:	327d      	adds	r2, #125	; 0x7d
 8009e94:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 8009e96:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 8009e98:	9803      	ldr	r0, [sp, #12]
    MacCtx.MacPrimitives = primitives;
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 8009e9e:	3204      	adds	r2, #4
 8009ea0:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 8009ea2:	4a41      	ldr	r2, [pc, #260]	; (8009fa8 <LoRaMacInitialization+0x364>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8009ea4:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 8009ea6:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8009ea8:	3a42      	subs	r2, #66	; 0x42
 8009eaa:	3aff      	subs	r2, #255	; 0xff
 8009eac:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009eae:	483f      	ldr	r0, [pc, #252]	; (8009fac <LoRaMacInitialization+0x368>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8009eb0:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8009eb2:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009eb4:	002a      	movs	r2, r5
 8009eb6:	4b3e      	ldr	r3, [pc, #248]	; (8009fb0 <LoRaMacInitialization+0x36c>)
 8009eb8:	9500      	str	r5, [sp, #0]
 8009eba:	3902      	subs	r1, #2
 8009ebc:	f004 f864 	bl	800df88 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	002a      	movs	r2, r5
 8009ec4:	4b3b      	ldr	r3, [pc, #236]	; (8009fb4 <LoRaMacInitialization+0x370>)
 8009ec6:	9500      	str	r5, [sp, #0]
 8009ec8:	4249      	negs	r1, r1
 8009eca:	483b      	ldr	r0, [pc, #236]	; (8009fb8 <LoRaMacInitialization+0x374>)
 8009ecc:	f004 f85c 	bl	800df88 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	002a      	movs	r2, r5
 8009ed4:	4b39      	ldr	r3, [pc, #228]	; (8009fbc <LoRaMacInitialization+0x378>)
 8009ed6:	9500      	str	r5, [sp, #0]
 8009ed8:	4249      	negs	r1, r1
 8009eda:	4839      	ldr	r0, [pc, #228]	; (8009fc0 <LoRaMacInitialization+0x37c>)
 8009edc:	f004 f854 	bl	800df88 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	002a      	movs	r2, r5
 8009ee4:	4b37      	ldr	r3, [pc, #220]	; (8009fc4 <LoRaMacInitialization+0x380>)
 8009ee6:	4249      	negs	r1, r1
 8009ee8:	9500      	str	r5, [sp, #0]
 8009eea:	4837      	ldr	r0, [pc, #220]	; (8009fc8 <LoRaMacInitialization+0x384>)
 8009eec:	f004 f84c 	bl	800df88 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8009ef0:	59a7      	ldr	r7, [r4, r6]
 8009ef2:	ad04      	add	r5, sp, #16
 8009ef4:	3759      	adds	r7, #89	; 0x59
 8009ef6:	0028      	movs	r0, r5
 8009ef8:	37ff      	adds	r7, #255	; 0xff
 8009efa:	f003 fe3f 	bl	800db7c <SysTimeGetMcuTime>
 8009efe:	cd0c      	ldmia	r5!, {r2, r3}
 8009f00:	c70c      	stmia	r7!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009f02:	23d3      	movs	r3, #211	; 0xd3
 8009f04:	4a31      	ldr	r2, [pc, #196]	; (8009fcc <LoRaMacInitialization+0x388>)
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009f0a:	4a31      	ldr	r2, [pc, #196]	; (8009fd0 <LoRaMacInitialization+0x38c>)
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009f10:	4a30      	ldr	r2, [pc, #192]	; (8009fd4 <LoRaMacInitialization+0x390>)
 8009f12:	3308      	adds	r3, #8
 8009f14:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009f16:	4a30      	ldr	r2, [pc, #192]	; (8009fd8 <LoRaMacInitialization+0x394>)
 8009f18:	3b0c      	subs	r3, #12
 8009f1a:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8009f1c:	4f2f      	ldr	r7, [pc, #188]	; (8009fdc <LoRaMacInitialization+0x398>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009f1e:	4a30      	ldr	r2, [pc, #192]	; (8009fe0 <LoRaMacInitialization+0x39c>)
 8009f20:	3308      	adds	r3, #8
 8009f22:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	482f      	ldr	r0, [pc, #188]	; (8009fe4 <LoRaMacInitialization+0x3a0>)
 8009f28:	9302      	str	r3, [sp, #8]
 8009f2a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8009f2c:	482e      	ldr	r0, [pc, #184]	; (8009fe8 <LoRaMacInitialization+0x3a4>)
 8009f2e:	f7fd fb89 	bl	8007644 <SecureElementInit>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d003      	beq.n	8009f3e <LoRaMacInitialization+0x2fa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f36:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
*/
    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8009f38:	0028      	movs	r0, r5
 8009f3a:	b00d      	add	sp, #52	; 0x34
 8009f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8009f3e:	482b      	ldr	r0, [pc, #172]	; (8009fec <LoRaMacInitialization+0x3a8>)
 8009f40:	f001 fa1e 	bl	800b380 <LoRaMacCryptoInit>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d1f6      	bne.n	8009f36 <LoRaMacInitialization+0x2f2>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8009f48:	4829      	ldr	r0, [pc, #164]	; (8009ff0 <LoRaMacInitialization+0x3ac>)
 8009f4a:	f000 ff0d 	bl	800ad68 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f4e:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d1f1      	bne.n	8009f38 <LoRaMacInitialization+0x2f4>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009f54:	59a0      	ldr	r0, [r4, r6]
 8009f56:	3050      	adds	r0, #80	; 0x50
 8009f58:	f001 fa74 	bl	800b444 <LoRaMacCryptoSetMulticastReference>
 8009f5c:	1e05      	subs	r5, r0, #0
 8009f5e:	d1ea      	bne.n	8009f36 <LoRaMacInitialization+0x2f2>
    srand1( Radio.Random( ) );
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	9302      	str	r3, [sp, #8]
 8009f64:	4798      	blx	r3
 8009f66:	f002 fce5 	bl	800c934 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8009f6a:	59a3      	ldr	r3, [r4, r6]
 8009f6c:	337d      	adds	r3, #125	; 0x7d
 8009f6e:	7818      	ldrb	r0, [r3, #0]
 8009f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f72:	9302      	str	r3, [sp, #8]
 8009f74:	4798      	blx	r3
    Radio.Sleep( );
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	9302      	str	r3, [sp, #8]
 8009f7a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <LoRaMacInitialization+0x3b0>)
 8009f80:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 8009f82:	e7d9      	b.n	8009f38 <LoRaMacInitialization+0x2f4>
 8009f84:	0800843b 	.word	0x0800843b
 8009f88:	20000cc0 	.word	0x20000cc0
 8009f8c:	20000834 	.word	0x20000834
 8009f90:	0000048c 	.word	0x0000048c
 8009f94:	00000412 	.word	0x00000412
 8009f98:	00000411 	.word	0x00000411
 8009f9c:	00000484 	.word	0x00000484
 8009fa0:	01000300 	.word	0x01000300
 8009fa4:	000003f6 	.word	0x000003f6
 8009fa8:	00000481 	.word	0x00000481
 8009fac:	20000b9c 	.word	0x20000b9c
 8009fb0:	08009261 	.word	0x08009261
 8009fb4:	08008c99 	.word	0x08008c99
 8009fb8:	20000bb4 	.word	0x20000bb4
 8009fbc:	08008cf9 	.word	0x08008cf9
 8009fc0:	20000bcc 	.word	0x20000bcc
 8009fc4:	08008481 	.word	0x08008481
 8009fc8:	20000c2c 	.word	0x20000c2c
 8009fcc:	080088b9 	.word	0x080088b9
 8009fd0:	08008861 	.word	0x08008861
 8009fd4:	080083a1 	.word	0x080083a1
 8009fd8:	08008555 	.word	0x08008555
 8009fdc:	0800f22c 	.word	0x0800f22c
 8009fe0:	08008519 	.word	0x08008519
 8009fe4:	20000b80 	.word	0x20000b80
 8009fe8:	08008427 	.word	0x08008427
 8009fec:	0800841d 	.word	0x0800841d
 8009ff0:	08008431 	.word	0x08008431
 8009ff4:	00000482 	.word	0x00000482

08009ff8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009ff8:	23d0      	movs	r3, #208	; 0xd0
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	4a01      	ldr	r2, [pc, #4]	; (800a004 <LoRaMacStart+0xc>)
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800a002:	4770      	bx	lr
 800a004:	20000834 	.word	0x20000834

0800a008 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00a:	b089      	sub	sp, #36	; 0x24
 800a00c:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a00e:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a010:	4a29      	ldr	r2, [pc, #164]	; (800a0b8 <LoRaMacQueryTxPossible+0xb0>)
 800a012:	4b2a      	ldr	r3, [pc, #168]	; (800a0bc <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800a014:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a016:	58d3      	ldr	r3, [r2, r3]
{
 800a018:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 800a01e:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a020:	795a      	ldrb	r2, [r3, #5]
 800a022:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800a024:	466a      	mov	r2, sp
 800a026:	7918      	ldrb	r0, [r3, #4]
 800a028:	3203      	adds	r2, #3
 800a02a:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800a02c:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a02e:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800a030:	42b9      	cmp	r1, r7
 800a032:	d038      	beq.n	800a0a6 <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a034:	21fc      	movs	r1, #252	; 0xfc
 800a036:	468c      	mov	ip, r1
 800a038:	449c      	add	ip, r3
 800a03a:	4661      	mov	r1, ip
 800a03c:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800a03e:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a040:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a042:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a044:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a046:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a048:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a04a:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a04c:	26fd      	movs	r6, #253	; 0xfd
 800a04e:	491a      	ldr	r1, [pc, #104]	; (800a0b8 <LoRaMacQueryTxPossible+0xb0>)
 800a050:	00b6      	lsls	r6, r6, #2
 800a052:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a054:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a056:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a058:	0019      	movs	r1, r3
 800a05a:	3184      	adds	r1, #132	; 0x84
 800a05c:	8809      	ldrh	r1, [r1, #0]
 800a05e:	ba49      	rev16	r1, r1
 800a060:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a062:	0019      	movs	r1, r3
 800a064:	31b8      	adds	r1, #184	; 0xb8
 800a066:	7809      	ldrb	r1, [r1, #0]
 800a068:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a06a:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800a06c:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a06e:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800a070:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a072:	ab01      	add	r3, sp, #4
 800a074:	f000 fe04 	bl	800ac80 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a078:	466b      	mov	r3, sp
 800a07a:	2002      	movs	r0, #2
 800a07c:	5618      	ldrsb	r0, [r3, r0]
 800a07e:	f7fe f9e1 	bl	8008444 <GetMaxAppPayloadWithoutFOptsLength>
 800a082:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a084:	a802      	add	r0, sp, #8
 800a086:	f000 ff3b 	bl	800af00 <LoRaMacCommandsGetSizeSerializedCmds>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d111      	bne.n	800a0b2 <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a08e:	9b02      	ldr	r3, [sp, #8]
 800a090:	2b0f      	cmp	r3, #15
 800a092:	d80a      	bhi.n	800a0aa <LoRaMacQueryTxPossible+0xa2>
 800a094:	7862      	ldrb	r2, [r4, #1]
 800a096:	4293      	cmp	r3, r2
 800a098:	d807      	bhi.n	800a0aa <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a09a:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a09c:	18eb      	adds	r3, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a09e:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d200      	bcs.n	800a0a6 <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a0a4:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a0a6:	b009      	add	sp, #36	; 0x24
 800a0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a0aa:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a0ac:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a0ae:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a0b0:	e7f9      	b.n	800a0a6 <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0b2:	2013      	movs	r0, #19
 800a0b4:	e7f7      	b.n	800a0a6 <LoRaMacQueryTxPossible+0x9e>
 800a0b6:	46c0      	nop			; (mov r8, r8)
 800a0b8:	20000834 	.word	0x20000834
 800a0bc:	00000484 	.word	0x00000484

0800a0c0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800a0c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a0c2:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a0c4:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800a0c6:	2c00      	cmp	r4, #0
 800a0c8:	d01f      	beq.n	800a10a <LoRaMacMibGetRequestConfirm+0x4a>
    }

    switch( mibGet->Type )
 800a0ca:	7820      	ldrb	r0, [r4, #0]
 800a0cc:	2828      	cmp	r0, #40	; 0x28
 800a0ce:	d829      	bhi.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
 800a0d0:	f7f6 f822 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a0d4:	2a251d15 	.word	0x2a251d15
 800a0d8:	2839332d 	.word	0x2839332d
 800a0dc:	28282828 	.word	0x28282828
 800a0e0:	3e282828 	.word	0x3e282828
 800a0e4:	58524843 	.word	0x58524843
 800a0e8:	6b6e6560 	.word	0x6b6e6560
 800a0ec:	817c7671 	.word	0x817c7671
 800a0f0:	95908b86 	.word	0x95908b86
 800a0f4:	a9a49a9f 	.word	0xa9a49a9f
 800a0f8:	28b5ddae 	.word	0x28b5ddae
 800a0fc:	e2          	.byte	0xe2
 800a0fd:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800a0fe:	4a6b      	ldr	r2, [pc, #428]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a100:	4b6b      	ldr	r3, [pc, #428]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a102:	58d3      	ldr	r3, [r2, r3]
 800a104:	337c      	adds	r3, #124	; 0x7c
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	7123      	strb	r3, [r4, #4]
//            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a10a:	b004      	add	sp, #16
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800a10e:	4b68      	ldr	r3, [pc, #416]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a110:	4a66      	ldr	r2, [pc, #408]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a112:	58d2      	ldr	r2, [r2, r3]
 800a114:	23b2      	movs	r3, #178	; 0xb2
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800a11a:	7123      	strb	r3, [r4, #4]
            break;
 800a11c:	e002      	b.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a11e:	f7fd fc65 	bl	80079ec <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a122:	6060      	str	r0, [r4, #4]
    switch( mibGet->Type )
 800a124:	2000      	movs	r0, #0
 800a126:	e7f0      	b.n	800a10a <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a128:	f7fd fc76 	bl	8007a18 <SecureElementGetJoinEui>
 800a12c:	e7f9      	b.n	800a122 <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800a12e:	4a5f      	ldr	r2, [pc, #380]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a130:	4b5f      	ldr	r3, [pc, #380]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a132:	58d3      	ldr	r3, [r2, r3]
 800a134:	337e      	adds	r3, #126	; 0x7e
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	e7ef      	b.n	800a11a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800a13a:	4a5c      	ldr	r2, [pc, #368]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a13c:	4b5c      	ldr	r3, [pc, #368]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a13e:	58d3      	ldr	r3, [r2, r3]
 800a140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800a142:	6063      	str	r3, [r4, #4]
 800a144:	e7ee      	b.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
 800a146:	4a59      	ldr	r2, [pc, #356]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a148:	4b59      	ldr	r3, [pc, #356]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a14a:	58d3      	ldr	r3, [r2, r3]
 800a14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14e:	e7f8      	b.n	800a142 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800a150:	4a56      	ldr	r2, [pc, #344]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a152:	4b57      	ldr	r3, [pc, #348]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a154:	58d3      	ldr	r3, [r2, r3]
 800a156:	337d      	adds	r3, #125	; 0x7d
 800a158:	e7ed      	b.n	800a136 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a15a:	4a54      	ldr	r2, [pc, #336]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a15c:	4b54      	ldr	r3, [pc, #336]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a15e:	58d3      	ldr	r3, [r2, r3]
 800a160:	33ca      	adds	r3, #202	; 0xca
 800a162:	e7e8      	b.n	800a136 <LoRaMacMibGetRequestConfirm+0x76>
            getPhy.Attribute = PHY_CHANNELS;
 800a164:	231d      	movs	r3, #29
 800a166:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a168:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a16a:	4a50      	ldr	r2, [pc, #320]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a16c:	4b50      	ldr	r3, [pc, #320]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a16e:	58d3      	ldr	r3, [r2, r3]
 800a170:	7818      	ldrb	r0, [r3, #0]
 800a172:	f001 fba4 	bl	800b8be <RegionGetPhyParam>
 800a176:	e7d4      	b.n	800a122 <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800a178:	4a4c      	ldr	r2, [pc, #304]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a17a:	4b4d      	ldr	r3, [pc, #308]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a17c:	58d3      	ldr	r3, [r2, r3]
 800a17e:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800a180:	3404      	adds	r4, #4
 800a182:	e004      	b.n	800a18e <LoRaMacMibGetRequestConfirm+0xce>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800a184:	4a49      	ldr	r2, [pc, #292]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a186:	4b4a      	ldr	r3, [pc, #296]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a188:	3404      	adds	r4, #4
 800a18a:	58d3      	ldr	r3, [r2, r3]
 800a18c:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800a18e:	cb06      	ldmia	r3!, {r1, r2}
 800a190:	c406      	stmia	r4!, {r1, r2}
            break;
 800a192:	e7c7      	b.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800a194:	4a45      	ldr	r2, [pc, #276]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a196:	4b46      	ldr	r3, [pc, #280]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a198:	58d3      	ldr	r3, [r2, r3]
 800a19a:	33b0      	adds	r3, #176	; 0xb0
 800a19c:	e7f0      	b.n	800a180 <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800a19e:	4a43      	ldr	r2, [pc, #268]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1a0:	4b43      	ldr	r3, [pc, #268]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1a2:	3404      	adds	r4, #4
 800a1a4:	58d3      	ldr	r3, [r2, r3]
 800a1a6:	3330      	adds	r3, #48	; 0x30
 800a1a8:	e7f1      	b.n	800a18e <LoRaMacMibGetRequestConfirm+0xce>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a1aa:	231b      	movs	r3, #27
 800a1ac:	a902      	add	r1, sp, #8
 800a1ae:	e7db      	b.n	800a168 <LoRaMacMibGetRequestConfirm+0xa8>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a1b0:	231a      	movs	r3, #26
 800a1b2:	a902      	add	r1, sp, #8
 800a1b4:	e7d8      	b.n	800a168 <LoRaMacMibGetRequestConfirm+0xa8>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a1b6:	4a3d      	ldr	r2, [pc, #244]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1b8:	4b3d      	ldr	r3, [pc, #244]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1ba:	58d3      	ldr	r3, [r2, r3]
 800a1bc:	33a4      	adds	r3, #164	; 0xa4
 800a1be:	e7ba      	b.n	800a136 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800a1c0:	4a3a      	ldr	r2, [pc, #232]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1c2:	4b3b      	ldr	r3, [pc, #236]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1c4:	58d3      	ldr	r3, [r2, r3]
 800a1c6:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	e7ba      	b.n	800a142 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800a1cc:	4a37      	ldr	r2, [pc, #220]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1ce:	4b38      	ldr	r3, [pc, #224]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1d0:	58d3      	ldr	r3, [r2, r3]
 800a1d2:	3394      	adds	r3, #148	; 0x94
 800a1d4:	e7f8      	b.n	800a1c8 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800a1d6:	4a35      	ldr	r2, [pc, #212]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1d8:	4b35      	ldr	r3, [pc, #212]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1da:	58d3      	ldr	r3, [r2, r3]
 800a1dc:	3398      	adds	r3, #152	; 0x98
 800a1de:	e7f3      	b.n	800a1c8 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800a1e0:	4a32      	ldr	r2, [pc, #200]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1e2:	4b33      	ldr	r3, [pc, #204]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1e4:	58d3      	ldr	r3, [r2, r3]
 800a1e6:	339c      	adds	r3, #156	; 0x9c
 800a1e8:	e7ee      	b.n	800a1c8 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800a1ea:	4a30      	ldr	r2, [pc, #192]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1ec:	4b30      	ldr	r3, [pc, #192]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1ee:	58d3      	ldr	r3, [r2, r3]
 800a1f0:	33a0      	adds	r3, #160	; 0xa0
 800a1f2:	e7e9      	b.n	800a1c8 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800a1f4:	4a2d      	ldr	r2, [pc, #180]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a1f6:	4b2e      	ldr	r3, [pc, #184]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a1f8:	58d3      	ldr	r3, [r2, r3]
 800a1fa:	795b      	ldrb	r3, [r3, #5]
 800a1fc:	e78d      	b.n	800a11a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a1fe:	4a2b      	ldr	r2, [pc, #172]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a200:	4b2b      	ldr	r3, [pc, #172]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a202:	58d3      	ldr	r3, [r2, r3]
 800a204:	3385      	adds	r3, #133	; 0x85
 800a206:	e796      	b.n	800a136 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800a208:	4a28      	ldr	r2, [pc, #160]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a20a:	4b29      	ldr	r3, [pc, #164]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a20c:	58d3      	ldr	r3, [r2, r3]
 800a20e:	791b      	ldrb	r3, [r3, #4]
 800a210:	e783      	b.n	800a11a <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a212:	4a26      	ldr	r2, [pc, #152]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a214:	4b26      	ldr	r3, [pc, #152]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a216:	58d3      	ldr	r3, [r2, r3]
 800a218:	3384      	adds	r3, #132	; 0x84
 800a21a:	e78c      	b.n	800a136 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800a21c:	4a23      	ldr	r2, [pc, #140]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a21e:	4b24      	ldr	r3, [pc, #144]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a220:	58d3      	ldr	r3, [r2, r3]
 800a222:	3388      	adds	r3, #136	; 0x88
 800a224:	e7d0      	b.n	800a1c8 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800a226:	4a21      	ldr	r2, [pc, #132]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a228:	4b21      	ldr	r3, [pc, #132]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a22a:	58d3      	ldr	r3, [r2, r3]
 800a22c:	338c      	adds	r3, #140	; 0x8c
 800a22e:	e782      	b.n	800a136 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800a230:	4a1e      	ldr	r2, [pc, #120]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a232:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a234:	58d3      	ldr	r3, [r2, r3]
 800a236:	33c0      	adds	r3, #192	; 0xc0
 800a238:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	e772      	b.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
    Contexts.MacNvmCtx = &NvmMacCtx;
 800a23e:	4e1d      	ldr	r6, [pc, #116]	; (800a2b4 <LoRaMacMibGetRequestConfirm+0x1f4>)
 800a240:	4b1d      	ldr	r3, [pc, #116]	; (800a2b8 <LoRaMacMibGetRequestConfirm+0x1f8>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a242:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 800a244:	6033      	str	r3, [r6, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800a246:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a248:	3014      	adds	r0, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	6073      	str	r3, [r6, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a24e:	f001 f8d3 	bl	800b3f8 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800a252:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800a254:	4a15      	ldr	r2, [pc, #84]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a256:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a258:	a902      	add	r1, sp, #8
 800a25a:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800a25c:	6130      	str	r0, [r6, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800a25e:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 800a260:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800a262:	f001 fb46 	bl	800b8f2 <RegionGetNvmCtx>
 800a266:	60b0      	str	r0, [r6, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800a268:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800a26a:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800a26c:	301c      	adds	r0, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800a26e:	60f3      	str	r3, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800a270:	f7fd fae0 	bl	8007834 <SecureElementGetNvmCtx>
 800a274:	61b0      	str	r0, [r6, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800a276:	0030      	movs	r0, r6
 800a278:	3024      	adds	r0, #36	; 0x24
 800a27a:	f000 fd95 	bl	800ada8 <LoRaMacCommandsGetNvmCtx>
 800a27e:	6230      	str	r0, [r6, #32]
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800a280:	0030      	movs	r0, r6
 800a282:	3034      	adds	r0, #52	; 0x34
 800a284:	f000 fede 	bl	800b044 <LoRaMacConfirmQueueGetNvmCtx>
 800a288:	6330      	str	r0, [r6, #48]	; 0x30
            mibGet->Param.Contexts = GetCtxs( );
 800a28a:	6066      	str	r6, [r4, #4]
            break;
 800a28c:	e74a      	b.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800a28e:	4a07      	ldr	r2, [pc, #28]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a292:	58d3      	ldr	r3, [r2, r3]
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	e7d0      	b.n	800a23a <LoRaMacMibGetRequestConfirm+0x17a>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 800a298:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <LoRaMacMibGetRequestConfirm+0x1ec>)
 800a29a:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800a29c:	58d3      	ldr	r3, [r2, r3]
 800a29e:	33fc      	adds	r3, #252	; 0xfc
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2a2:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a2a4:	f001 fbd0 	bl	800ba48 <RegionGetVersion>
 800a2a8:	60a0      	str	r0, [r4, #8]
            break;
 800a2aa:	e73b      	b.n	800a124 <LoRaMacMibGetRequestConfirm+0x64>
 800a2ac:	20000834 	.word	0x20000834
 800a2b0:	00000484 	.word	0x00000484
 800a2b4:	200007f8 	.word	0x200007f8
 800a2b8:	20000cc0 	.word	0x20000cc0

0800a2bc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a2c0:	2603      	movs	r6, #3
{
 800a2c2:	b086      	sub	sp, #24
    if( mibSet == NULL )
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d068      	beq.n	800a39a <LoRaMacMibSetRequestConfirm+0xde>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a2c8:	23d0      	movs	r3, #208	; 0xd0
 800a2ca:	4db7      	ldr	r5, [pc, #732]	; (800a5a8 <LoRaMacMibSetRequestConfirm+0x2ec>)
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800a2d0:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a2d2:	079a      	lsls	r2, r3, #30
 800a2d4:	d461      	bmi.n	800a39a <LoRaMacMibSetRequestConfirm+0xde>
    }

    switch( mibSet->Type )
 800a2d6:	7800      	ldrb	r0, [r0, #0]
 800a2d8:	2827      	cmp	r0, #39	; 0x27
 800a2da:	d838      	bhi.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
 800a2dc:	f7f5 ff30 	bl	8000140 <__gnu_thumb1_case_uhi>
 800a2e0:	00310028 	.word	0x00310028
 800a2e4:	00400039 	.word	0x00400039
 800a2e8:	004a0044 	.word	0x004a0044
 800a2ec:	0054004f 	.word	0x0054004f
 800a2f0:	00650060 	.word	0x00650060
 800a2f4:	006f006a 	.word	0x006f006a
 800a2f8:	00790074 	.word	0x00790074
 800a2fc:	0083007e 	.word	0x0083007e
 800a300:	00370090 	.word	0x00370090
 800a304:	00b60094 	.word	0x00b60094
 800a308:	00f500cb 	.word	0x00f500cb
 800a30c:	010a0118 	.word	0x010a0118
 800a310:	0126011d 	.word	0x0126011d
 800a314:	0130012c 	.word	0x0130012c
 800a318:	01380134 	.word	0x01380134
 800a31c:	014e013c 	.word	0x014e013c
 800a320:	016a017c 	.word	0x016a017c
 800a324:	0194018e 	.word	0x0194018e
 800a328:	01a0019a 	.word	0x01a0019a
 800a32c:	01f201a5 	.word	0x01f201a5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a330:	7920      	ldrb	r0, [r4, #4]
 800a332:	f7fe fa25 	bl	8008780 <SwitchClass>
 800a336:	0006      	movs	r6, r0
        {
//            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    EventRegionNvmCtxChanged( );
 800a338:	f7fe f86b 	bl	8008412 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800a33c:	f7fe f864 	bl	8008408 <EventMacNvmCtxChanged>
    return status;
 800a340:	e02b      	b.n	800a39a <LoRaMacMibSetRequestConfirm+0xde>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800a342:	4b9a      	ldr	r3, [pc, #616]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a344:	7921      	ldrb	r1, [r4, #4]
 800a346:	58ea      	ldr	r2, [r5, r3]
 800a348:	23b2      	movs	r3, #178	; 0xb2
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	54d1      	strb	r1, [r2, r3]
    switch( mibSet->Type )
 800a34e:	2600      	movs	r6, #0
 800a350:	e7f2      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a352:	6860      	ldr	r0, [r4, #4]
 800a354:	f7fd fb38 	bl	80079c8 <SecureElementSetDevEui>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d0f8      	beq.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a35c:	2603      	movs	r6, #3
 800a35e:	e7eb      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a360:	6860      	ldr	r0, [r4, #4]
 800a362:	f7fd fb47 	bl	80079f4 <SecureElementSetJoinEui>
 800a366:	e7f7      	b.n	800a358 <LoRaMacMibSetRequestConfirm+0x9c>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800a368:	4b90      	ldr	r3, [pc, #576]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a36a:	58eb      	ldr	r3, [r5, r3]
 800a36c:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a36e:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	e7ec      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800a374:	4b8d      	ldr	r3, [pc, #564]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a376:	6862      	ldr	r2, [r4, #4]
 800a378:	58eb      	ldr	r3, [r5, r3]
 800a37a:	649a      	str	r2, [r3, #72]	; 0x48
 800a37c:	e7e7      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800a37e:	4b8b      	ldr	r3, [pc, #556]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a380:	6862      	ldr	r2, [r4, #4]
 800a382:	58eb      	ldr	r3, [r5, r3]
 800a384:	64da      	str	r2, [r3, #76]	; 0x4c
 800a386:	e7e2      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.AppKey != NULL )
 800a388:	6861      	ldr	r1, [r4, #4]
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d0e6      	beq.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a38e:	2000      	movs	r0, #0
 800a390:	f001 f97e 	bl	800b690 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a394:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a396:	2800      	cmp	r0, #0
 800a398:	d0d9      	beq.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
}
 800a39a:	0030      	movs	r0, r6
 800a39c:	b006      	add	sp, #24
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 800a3a0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a3a2:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800a3a4:	2900      	cmp	r1, #0
 800a3a6:	d1f3      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3a8:	e7d8      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NwkSKey != NULL )
 800a3aa:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a3ac:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	d1ee      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3b2:	e7d3      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AppSKey != NULL )
 800a3b4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a3b6:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	d1e9      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3bc:	e7ce      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McKEKey != NULL )
 800a3be:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a3c0:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800a3c2:	2900      	cmp	r1, #0
 800a3c4:	d1e4      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3c6:	e7c9      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McKey0 != NULL )
 800a3c8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a3ca:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d1df      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3d0:	e7c4      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800a3d2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a3d4:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800a3d6:	2900      	cmp	r1, #0
 800a3d8:	d1da      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3da:	e7bf      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a3dc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a3de:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a3e0:	2900      	cmp	r1, #0
 800a3e2:	d1d5      	bne.n	800a390 <LoRaMacMibSetRequestConfirm+0xd4>
 800a3e4:	e7ba      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a3e6:	4b71      	ldr	r3, [pc, #452]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a3e8:	7920      	ldrb	r0, [r4, #4]
 800a3ea:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800a3ec:	4c70      	ldr	r4, [pc, #448]	; (800a5b0 <LoRaMacMibSetRequestConfirm+0x2f4>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a3ee:	337d      	adds	r3, #125	; 0x7d
 800a3f0:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800a3f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	4798      	blx	r3
            Radio.Sleep( );
 800a3f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	4798      	blx	r3
            break;
 800a3fe:	e7a6      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a400:	4b6a      	ldr	r3, [pc, #424]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a402:	58eb      	ldr	r3, [r5, r3]
 800a404:	33ca      	adds	r3, #202	; 0xca
 800a406:	e7b2      	b.n	800a36e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a408:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a40a:	4e68      	ldr	r6, [pc, #416]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a40c:	aa02      	add	r2, sp, #8
 800a40e:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a410:	59ab      	ldr	r3, [r5, r6]
 800a412:	a902      	add	r1, sp, #8
 800a414:	001a      	movs	r2, r3
 800a416:	32b9      	adds	r2, #185	; 0xb9
 800a418:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800a41a:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a41c:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800a41e:	2207      	movs	r2, #7
 800a420:	a903      	add	r1, sp, #12
 800a422:	f001 fa70 	bl	800b906 <RegionVerify>
 800a426:	2800      	cmp	r0, #0
 800a428:	d098      	beq.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a42a:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800a42c:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a42e:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800a430:	59ab      	ldr	r3, [r5, r6]
 800a432:	a903      	add	r1, sp, #12
 800a434:	7818      	ldrb	r0, [r3, #0]
 800a436:	f001 fa66 	bl	800b906 <RegionVerify>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d100      	bne.n	800a440 <LoRaMacMibSetRequestConfirm+0x184>
 800a43e:	e78d      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a440:	59ab      	ldr	r3, [r5, r6]
 800a442:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a444:	3404      	adds	r4, #4
 800a446:	cc06      	ldmia	r4!, {r1, r2}
 800a448:	c306      	stmia	r3!, {r1, r2}
 800a44a:	e780      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a44c:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a44e:	4e57      	ldr	r6, [pc, #348]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a450:	aa02      	add	r2, sp, #8
 800a452:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a454:	59ab      	ldr	r3, [r5, r6]
 800a456:	a902      	add	r1, sp, #8
 800a458:	001a      	movs	r2, r3
 800a45a:	32b9      	adds	r2, #185	; 0xb9
 800a45c:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a45e:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a460:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a462:	2207      	movs	r2, #7
 800a464:	a903      	add	r1, sp, #12
 800a466:	f001 fa4e 	bl	800b906 <RegionVerify>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d100      	bne.n	800a470 <LoRaMacMibSetRequestConfirm+0x1b4>
 800a46e:	e775      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a470:	59ab      	ldr	r3, [r5, r6]
 800a472:	3328      	adds	r3, #40	; 0x28
 800a474:	e7e6      	b.n	800a444 <LoRaMacMibSetRequestConfirm+0x188>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a476:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a478:	4e4c      	ldr	r6, [pc, #304]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a47a:	aa02      	add	r2, sp, #8
 800a47c:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a47e:	59ab      	ldr	r3, [r5, r6]
 800a480:	a902      	add	r1, sp, #8
 800a482:	001a      	movs	r2, r3
 800a484:	32b9      	adds	r2, #185	; 0xb9
 800a486:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a488:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a48a:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a48c:	2207      	movs	r2, #7
 800a48e:	a903      	add	r1, sp, #12
 800a490:	f001 fa39 	bl	800b906 <RegionVerify>
 800a494:	2800      	cmp	r0, #0
 800a496:	d100      	bne.n	800a49a <LoRaMacMibSetRequestConfirm+0x1de>
 800a498:	e760      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800a49a:	59ab      	ldr	r3, [r5, r6]
 800a49c:	3404      	adds	r4, #4
 800a49e:	001a      	movs	r2, r3
 800a4a0:	32b0      	adds	r2, #176	; 0xb0
 800a4a2:	cc03      	ldmia	r4!, {r0, r1}
 800a4a4:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a4a6:	3a3c      	subs	r2, #60	; 0x3c
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	2a02      	cmp	r2, #2
 800a4ac:	d000      	beq.n	800a4b0 <LoRaMacMibSetRequestConfirm+0x1f4>
 800a4ae:	e74e      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
 800a4b0:	3263      	adds	r2, #99	; 0x63
 800a4b2:	32ff      	adds	r2, #255	; 0xff
 800a4b4:	5c9b      	ldrb	r3, [r3, r2]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d100      	bne.n	800a4bc <LoRaMacMibSetRequestConfirm+0x200>
 800a4ba:	e748      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
                    Radio.Sleep( );
 800a4bc:	4b3c      	ldr	r3, [pc, #240]	; (800a5b0 <LoRaMacMibSetRequestConfirm+0x2f4>)
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800a4c4:	f7fe f922 	bl	800870c <OpenContinuousRxCWindow>
 800a4c8:	e741      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a4ca:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4cc:	4e37      	ldr	r6, [pc, #220]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a4ce:	aa02      	add	r2, sp, #8
 800a4d0:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4d2:	59ab      	ldr	r3, [r5, r6]
 800a4d4:	a902      	add	r1, sp, #8
 800a4d6:	001a      	movs	r2, r3
 800a4d8:	32b9      	adds	r2, #185	; 0xb9
 800a4da:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a4dc:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a4de:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	a903      	add	r1, sp, #12
 800a4e4:	f001 fa0f 	bl	800b906 <RegionVerify>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d100      	bne.n	800a4ee <LoRaMacMibSetRequestConfirm+0x232>
 800a4ec:	e736      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a4ee:	59ab      	ldr	r3, [r5, r6]
 800a4f0:	3330      	adds	r3, #48	; 0x30
 800a4f2:	e7a7      	b.n	800a444 <LoRaMacMibSetRequestConfirm+0x188>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a4f4:	6863      	ldr	r3, [r4, #4]
 800a4f6:	a904      	add	r1, sp, #16
 800a4f8:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a4fa:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a4fc:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800a4fe:	4b2b      	ldr	r3, [pc, #172]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a500:	58eb      	ldr	r3, [r5, r3]
 800a502:	7818      	ldrb	r0, [r3, #0]
 800a504:	f001 fa0b 	bl	800b91e <RegionChanMaskSet>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d000      	beq.n	800a50e <LoRaMacMibSetRequestConfirm+0x252>
 800a50c:	e71f      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
 800a50e:	e725      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a510:	6863      	ldr	r3, [r4, #4]
 800a512:	a904      	add	r1, sp, #16
 800a514:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a516:	2300      	movs	r3, #0
 800a518:	e7f0      	b.n	800a4fc <LoRaMacMibSetRequestConfirm+0x240>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a51a:	7922      	ldrb	r2, [r4, #4]
 800a51c:	1e53      	subs	r3, r2, #1
 800a51e:	2b0e      	cmp	r3, #14
 800a520:	d900      	bls.n	800a524 <LoRaMacMibSetRequestConfirm+0x268>
 800a522:	e71b      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a524:	4b21      	ldr	r3, [pc, #132]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a526:	58eb      	ldr	r3, [r5, r3]
 800a528:	33a4      	adds	r3, #164	; 0xa4
 800a52a:	e721      	b.n	800a370 <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a52c:	4b1f      	ldr	r3, [pc, #124]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a52e:	58eb      	ldr	r3, [r5, r3]
 800a530:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a532:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a534:	601a      	str	r2, [r3, #0]
            break;
 800a536:	e70a      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a538:	4b1c      	ldr	r3, [pc, #112]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a53a:	58eb      	ldr	r3, [r5, r3]
 800a53c:	3394      	adds	r3, #148	; 0x94
 800a53e:	e7f8      	b.n	800a532 <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a540:	4b1a      	ldr	r3, [pc, #104]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a542:	58eb      	ldr	r3, [r5, r3]
 800a544:	3398      	adds	r3, #152	; 0x98
 800a546:	e7f4      	b.n	800a532 <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a548:	4b18      	ldr	r3, [pc, #96]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a54a:	58eb      	ldr	r3, [r5, r3]
 800a54c:	339c      	adds	r3, #156	; 0x9c
 800a54e:	e7f0      	b.n	800a532 <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a550:	4b16      	ldr	r3, [pc, #88]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
 800a552:	58eb      	ldr	r3, [r5, r3]
 800a554:	33a0      	adds	r3, #160	; 0xa0
 800a556:	e7ec      	b.n	800a532 <LoRaMacMibSetRequestConfirm+0x276>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a558:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800a55a:	4c14      	ldr	r4, [pc, #80]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a55c:	aa02      	add	r2, sp, #8
 800a55e:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800a560:	592b      	ldr	r3, [r5, r4]
 800a562:	2206      	movs	r2, #6
 800a564:	7818      	ldrb	r0, [r3, #0]
 800a566:	a903      	add	r1, sp, #12
 800a568:	f001 f9cd 	bl	800b906 <RegionVerify>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d100      	bne.n	800a572 <LoRaMacMibSetRequestConfirm+0x2b6>
 800a570:	e6f4      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a572:	aa02      	add	r2, sp, #8
 800a574:	592b      	ldr	r3, [r5, r4]
 800a576:	7912      	ldrb	r2, [r2, #4]
 800a578:	715a      	strb	r2, [r3, #5]
 800a57a:	e6e8      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a57c:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a57e:	4c0b      	ldr	r4, [pc, #44]	; (800a5ac <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a580:	ae03      	add	r6, sp, #12
 800a582:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a584:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a586:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a588:	001a      	movs	r2, r3
 800a58a:	32b8      	adds	r2, #184	; 0xb8
 800a58c:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a58e:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a590:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a592:	2205      	movs	r2, #5
 800a594:	f001 f9b7 	bl	800b906 <RegionVerify>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d100      	bne.n	800a59e <LoRaMacMibSetRequestConfirm+0x2e2>
 800a59c:	e6de      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a59e:	592b      	ldr	r3, [r5, r4]
 800a5a0:	7832      	ldrb	r2, [r6, #0]
 800a5a2:	3385      	adds	r3, #133	; 0x85
 800a5a4:	e6e4      	b.n	800a370 <LoRaMacMibSetRequestConfirm+0xb4>
 800a5a6:	46c0      	nop			; (mov r8, r8)
 800a5a8:	20000834 	.word	0x20000834
 800a5ac:	00000484 	.word	0x00000484
 800a5b0:	0800f22c 	.word	0x0800f22c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a5b4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a5b6:	4c4a      	ldr	r4, [pc, #296]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a5b8:	aa02      	add	r2, sp, #8
 800a5ba:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a5bc:	592b      	ldr	r3, [r5, r4]
 800a5be:	220a      	movs	r2, #10
 800a5c0:	7818      	ldrb	r0, [r3, #0]
 800a5c2:	a903      	add	r1, sp, #12
 800a5c4:	f001 f99f 	bl	800b906 <RegionVerify>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d100      	bne.n	800a5ce <LoRaMacMibSetRequestConfirm+0x312>
 800a5cc:	e6c6      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800a5ce:	aa02      	add	r2, sp, #8
 800a5d0:	592b      	ldr	r3, [r5, r4]
 800a5d2:	7912      	ldrb	r2, [r2, #4]
 800a5d4:	711a      	strb	r2, [r3, #4]
 800a5d6:	e6ba      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a5d8:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800a5da:	4c41      	ldr	r4, [pc, #260]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a5dc:	aa02      	add	r2, sp, #8
 800a5de:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800a5e0:	592b      	ldr	r3, [r5, r4]
 800a5e2:	2209      	movs	r2, #9
 800a5e4:	7818      	ldrb	r0, [r3, #0]
 800a5e6:	a903      	add	r1, sp, #12
 800a5e8:	f001 f98d 	bl	800b906 <RegionVerify>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d100      	bne.n	800a5f2 <LoRaMacMibSetRequestConfirm+0x336>
 800a5f0:	e6b4      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800a5f2:	592b      	ldr	r3, [r5, r4]
 800a5f4:	aa02      	add	r2, sp, #8
 800a5f6:	7912      	ldrb	r2, [r2, #4]
 800a5f8:	3384      	adds	r3, #132	; 0x84
 800a5fa:	e6b9      	b.n	800a370 <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a5fc:	4b38      	ldr	r3, [pc, #224]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
 800a5fe:	6862      	ldr	r2, [r4, #4]
 800a600:	58eb      	ldr	r3, [r5, r3]
 800a602:	609a      	str	r2, [r3, #8]
 800a604:	3388      	adds	r3, #136	; 0x88
 800a606:	e795      	b.n	800a534 <LoRaMacMibSetRequestConfirm+0x278>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a608:	4b35      	ldr	r3, [pc, #212]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
 800a60a:	7922      	ldrb	r2, [r4, #4]
 800a60c:	58eb      	ldr	r3, [r5, r3]
 800a60e:	731a      	strb	r2, [r3, #12]
 800a610:	338c      	adds	r3, #140	; 0x8c
 800a612:	e6ad      	b.n	800a370 <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800a614:	4b32      	ldr	r3, [pc, #200]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
 800a616:	6862      	ldr	r2, [r4, #4]
 800a618:	58eb      	ldr	r3, [r5, r3]
 800a61a:	33c0      	adds	r3, #192	; 0xc0
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	e696      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800a620:	4b2f      	ldr	r3, [pc, #188]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
 800a622:	6862      	ldr	r2, [r4, #4]
 800a624:	58eb      	ldr	r3, [r5, r3]
 800a626:	641a      	str	r2, [r3, #64]	; 0x40
 800a628:	e691      	b.n	800a34e <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.Contexts != 0 )
 800a62a:	6864      	ldr	r4, [r4, #4]
 800a62c:	2c00      	cmp	r4, #0
 800a62e:	d100      	bne.n	800a632 <LoRaMacMibSetRequestConfirm+0x376>
 800a630:	e694      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_BUSY;
 800a632:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800a634:	42b3      	cmp	r3, r6
 800a636:	d000      	beq.n	800a63a <LoRaMacMibSetRequestConfirm+0x37e>
 800a638:	e67e      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
    if( contexts->MacNvmCtx != NULL )
 800a63a:	6821      	ldr	r1, [r4, #0]
 800a63c:	2900      	cmp	r1, #0
 800a63e:	d004      	beq.n	800a64a <LoRaMacMibSetRequestConfirm+0x38e>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	4828      	ldr	r0, [pc, #160]	; (800a6e4 <LoRaMacMibSetRequestConfirm+0x428>)
 800a644:	b29a      	uxth	r2, r3
 800a646:	f002 f997 	bl	800c978 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800a64a:	2303      	movs	r3, #3
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800a650:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a652:	4e23      	ldr	r6, [pc, #140]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
    params.NvmCtx = contexts->RegionNvmCtx;
 800a654:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a656:	59ab      	ldr	r3, [r5, r6]
 800a658:	7818      	ldrb	r0, [r3, #0]
 800a65a:	f001 f943 	bl	800b8e4 <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a65e:	4b22      	ldr	r3, [pc, #136]	; (800a6e8 <LoRaMacMibSetRequestConfirm+0x42c>)
 800a660:	5cea      	ldrb	r2, [r5, r3]
 800a662:	3b35      	subs	r3, #53	; 0x35
 800a664:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800a666:	59ab      	ldr	r3, [r5, r6]
 800a668:	001a      	movs	r2, r3
 800a66a:	32b0      	adds	r2, #176	; 0xb0
 800a66c:	6811      	ldr	r1, [r2, #0]
 800a66e:	22f9      	movs	r2, #249	; 0xf9
 800a670:	0092      	lsls	r2, r2, #2
 800a672:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800a674:	001a      	movs	r2, r3
 800a676:	32b9      	adds	r2, #185	; 0xb9
 800a678:	7811      	ldrb	r1, [r2, #0]
 800a67a:	22fc      	movs	r2, #252	; 0xfc
 800a67c:	0092      	lsls	r2, r2, #2
 800a67e:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800a680:	33ca      	adds	r3, #202	; 0xca
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	4b19      	ldr	r3, [pc, #100]	; (800a6ec <LoRaMacMibSetRequestConfirm+0x430>)
 800a686:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a688:	4b19      	ldr	r3, [pc, #100]	; (800a6f0 <LoRaMacMibSetRequestConfirm+0x434>)
 800a68a:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <LoRaMacMibSetRequestConfirm+0x438>)
 800a68c:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800a68e:	69a0      	ldr	r0, [r4, #24]
 800a690:	f7fd f8c2 	bl	8007818 <SecureElementRestoreNvmCtx>
 800a694:	2800      	cmp	r0, #0
 800a696:	d001      	beq.n	800a69c <LoRaMacMibSetRequestConfirm+0x3e0>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a698:	2611      	movs	r6, #17
 800a69a:	e64d      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800a69c:	6920      	ldr	r0, [r4, #16]
 800a69e:	f000 fe9d 	bl	800b3dc <LoRaMacCryptoRestoreNvmCtx>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d1f8      	bne.n	800a698 <LoRaMacMibSetRequestConfirm+0x3dc>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800a6a6:	6a20      	ldr	r0, [r4, #32]
 800a6a8:	f000 fb70 	bl	800ad8c <LoRaMacCommandsRestoreNvmCtx>
 800a6ac:	1e06      	subs	r6, r0, #0
 800a6ae:	d107      	bne.n	800a6c0 <LoRaMacMibSetRequestConfirm+0x404>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800a6b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a6b2:	f000 fcb9 	bl	800b028 <LoRaMacConfirmQueueRestoreNvmCtx>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d000      	beq.n	800a6bc <LoRaMacMibSetRequestConfirm+0x400>
 800a6ba:	e63d      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800a6bc:	3615      	adds	r6, #21
 800a6be:	e63b      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a6c0:	2613      	movs	r6, #19
 800a6c2:	e639      	b.n	800a338 <LoRaMacMibSetRequestConfirm+0x7c>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800a6c4:	79a3      	ldrb	r3, [r4, #6]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d900      	bls.n	800a6cc <LoRaMacMibSetRequestConfirm+0x410>
 800a6ca:	e647      	b.n	800a35c <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800a6cc:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <LoRaMacMibSetRequestConfirm+0x424>)
 800a6ce:	6862      	ldr	r2, [r4, #4]
 800a6d0:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a6d2:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800a6d4:	33fc      	adds	r3, #252	; 0xfc
 800a6d6:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a6d8:	f000 fe78 	bl	800b3cc <LoRaMacCryptoSetLrWanVersion>
 800a6dc:	e65a      	b.n	800a394 <LoRaMacMibSetRequestConfirm+0xd8>
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	00000484 	.word	0x00000484
 800a6e4:	20000cc0 	.word	0x20000cc0
 800a6e8:	00000415 	.word	0x00000415
 800a6ec:	000003f1 	.word	0x000003f1
 800a6f0:	000003f2 	.word	0x000003f2
 800a6f4:	00000201 	.word	0x00000201

0800a6f8 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a6f8:	2300      	movs	r3, #0
{
 800a6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fc:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a6fe:	aa02      	add	r2, sp, #8
{
 800a700:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a702:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a704:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800a706:	4298      	cmp	r0, r3
 800a708:	d004      	beq.n	800a714 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800a70a:	f7fe fddb 	bl	80092c4 <LoRaMacIsBusy>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d003      	beq.n	800a71a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800a712:	2501      	movs	r5, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800a714:	0028      	movs	r0, r5
 800a716:	b009      	add	sp, #36	; 0x24
 800a718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800a71a:	f000 fd4b 	bl	800b1b4 <LoRaMacConfirmQueueIsFull>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d1f7      	bne.n	800a712 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a722:	f000 fd41 	bl	800b1a8 <LoRaMacConfirmQueueGetCnt>
 800a726:	1e01      	subs	r1, r0, #0
 800a728:	d103      	bne.n	800a732 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800a72a:	2214      	movs	r2, #20
 800a72c:	4863      	ldr	r0, [pc, #396]	; (800a8bc <LoRaMacMlmeRequest+0x1c4>)
 800a72e:	f002 f938 	bl	800c9a2 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a732:	2201      	movs	r2, #1
 800a734:	4c62      	ldr	r4, [pc, #392]	; (800a8c0 <LoRaMacMlmeRequest+0x1c8>)
 800a736:	4b63      	ldr	r3, [pc, #396]	; (800a8c4 <LoRaMacMlmeRequest+0x1cc>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a738:	4863      	ldr	r0, [pc, #396]	; (800a8c8 <LoRaMacMlmeRequest+0x1d0>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a73a:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a73c:	2304      	movs	r3, #4
 800a73e:	5c21      	ldrb	r1, [r4, r0]
 800a740:	430b      	orrs	r3, r1
 800a742:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 800a744:	ab03      	add	r3, sp, #12
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a746:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800a748:	2200      	movs	r2, #0
    queueElement.Request = mlmeRequest->Type;
 800a74a:	7830      	ldrb	r0, [r6, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 800a74c:	70da      	strb	r2, [r3, #3]
    queueElement.Request = mlmeRequest->Type;
 800a74e:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 800a750:	3801      	subs	r0, #1
 800a752:	280d      	cmp	r0, #13
 800a754:	d900      	bls.n	800a758 <LoRaMacMlmeRequest+0x60>
 800a756:	e0a8      	b.n	800a8aa <LoRaMacMlmeRequest+0x1b2>
 800a758:	f7f5 fcde 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a75c:	5ca7a707 	.word	0x5ca7a707
 800a760:	a7a78866 	.word	0xa7a78866
 800a764:	a7a791a7 	.word	0xa7a791a7
 800a768:	a395      	.short	0xa395
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a76a:	23d0      	movs	r3, #208	; 0xd0
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	58e2      	ldr	r2, [r4, r3]
 800a770:	2320      	movs	r3, #32
 800a772:	0015      	movs	r5, r2
 800a774:	401d      	ands	r5, r3
 800a776:	421a      	tst	r2, r3
 800a778:	d1cb      	bne.n	800a712 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800a77a:	f7fd ff55 	bl	8008628 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a77e:	2104      	movs	r1, #4
 800a780:	4b52      	ldr	r3, [pc, #328]	; (800a8cc <LoRaMacMlmeRequest+0x1d4>)
 800a782:	5671      	ldrsb	r1, [r6, r1]
 800a784:	58e7      	ldr	r7, [r4, r3]
 800a786:	002a      	movs	r2, r5
 800a788:	7838      	ldrb	r0, [r7, #0]
 800a78a:	f001 f92e 	bl	800b9ea <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a78e:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a790:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a792:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a794:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800a796:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a798:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800a79a:	f7fd fff1 	bl	8008780 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800a79e:	0023      	movs	r3, r4
 800a7a0:	33ff      	adds	r3, #255	; 0xff
 800a7a2:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800a7a4:	0023      	movs	r3, r4
 800a7a6:	4a4a      	ldr	r2, [pc, #296]	; (800a8d0 <LoRaMacMlmeRequest+0x1d8>)
 800a7a8:	33fc      	adds	r3, #252	; 0xfc
 800a7aa:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a7ac:	0023      	movs	r3, r4
 800a7ae:	22ff      	movs	r2, #255	; 0xff
 800a7b0:	33fe      	adds	r3, #254	; 0xfe
 800a7b2:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800a7b4:	f7fd f930 	bl	8007a18 <SecureElementGetJoinEui>
 800a7b8:	2208      	movs	r2, #8
 800a7ba:	0001      	movs	r1, r0
 800a7bc:	4845      	ldr	r0, [pc, #276]	; (800a8d4 <LoRaMacMlmeRequest+0x1dc>)
 800a7be:	f002 f8db 	bl	800c978 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800a7c2:	f7fd f913 	bl	80079ec <SecureElementGetDevEui>
 800a7c6:	2208      	movs	r2, #8
 800a7c8:	0001      	movs	r1, r0
 800a7ca:	4843      	ldr	r0, [pc, #268]	; (800a8d8 <LoRaMacMlmeRequest+0x1e0>)
 800a7cc:	f002 f8d4 	bl	800c978 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800a7d0:	0028      	movs	r0, r5
 800a7d2:	f7fe f89d 	bl	8008910 <ScheduleTx>
 800a7d6:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800a7d8:	d009      	beq.n	800a7ee <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a7da:	2104      	movs	r1, #4
 800a7dc:	4b3b      	ldr	r3, [pc, #236]	; (800a8cc <LoRaMacMlmeRequest+0x1d4>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	58e7      	ldr	r7, [r4, r3]
 800a7e2:	5671      	ldrsb	r1, [r6, r1]
 800a7e4:	7838      	ldrb	r0, [r7, #0]
 800a7e6:	f001 f900 	bl	800b9ea <RegionAlternateDr>
 800a7ea:	3785      	adds	r7, #133	; 0x85
 800a7ec:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a7ee:	2391      	movs	r3, #145	; 0x91
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	58e3      	ldr	r3, [r4, r3]
 800a7f4:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	d059      	beq.n	800a8ae <LoRaMacMlmeRequest+0x1b6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a7fa:	f000 fcd5 	bl	800b1a8 <LoRaMacConfirmQueueGetCnt>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d000      	beq.n	800a804 <LoRaMacMlmeRequest+0x10c>
 800a802:	e787      	b.n	800a714 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a804:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800a806:	4b35      	ldr	r3, [pc, #212]	; (800a8dc <LoRaMacMlmeRequest+0x1e4>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a808:	492f      	ldr	r1, [pc, #188]	; (800a8c8 <LoRaMacMlmeRequest+0x1d0>)
            MacCtx.NodeAckRequested = false;
 800a80a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a80c:	5c63      	ldrb	r3, [r4, r1]
 800a80e:	4393      	bics	r3, r2
 800a810:	5463      	strb	r3, [r4, r1]
 800a812:	e77f      	b.n	800a714 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a814:	2200      	movs	r2, #0
 800a816:	2002      	movs	r0, #2
 800a818:	a902      	add	r1, sp, #8
 800a81a:	f000 facb 	bl	800adb4 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a81e:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a820:	2800      	cmp	r0, #0
 800a822:	d1e4      	bne.n	800a7ee <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a824:	2500      	movs	r5, #0
            break;
 800a826:	e7e2      	b.n	800a7ee <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 800a828:	4b2d      	ldr	r3, [pc, #180]	; (800a8e0 <LoRaMacMlmeRequest+0x1e8>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a82e:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 800a830:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a832:	4b26      	ldr	r3, [pc, #152]	; (800a8cc <LoRaMacMlmeRequest+0x1d4>)
 800a834:	58e3      	ldr	r3, [r4, r3]
 800a836:	0018      	movs	r0, r3
 800a838:	3085      	adds	r0, #133	; 0x85
 800a83a:	7800      	ldrb	r0, [r0, #0]
 800a83c:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a83e:	0018      	movs	r0, r3
 800a840:	3084      	adds	r0, #132	; 0x84
 800a842:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 800a844:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a846:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800a848:	0018      	movs	r0, r3
 800a84a:	30bc      	adds	r0, #188	; 0xbc
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800a850:	0018      	movs	r0, r3
 800a852:	30c0      	adds	r0, #192	; 0xc0
 800a854:	6800      	ldr	r0, [r0, #0]
 800a856:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800a858:	7818      	ldrb	r0, [r3, #0]
 800a85a:	f001 f8e0 	bl	800ba1e <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a85e:	22d0      	movs	r2, #208	; 0xd0
 800a860:	2302      	movs	r3, #2
 800a862:	0092      	lsls	r2, r2, #2
 800a864:	58a1      	ldr	r1, [r4, r2]
 800a866:	430b      	orrs	r3, r1
 800a868:	50a3      	str	r3, [r4, r2]
 800a86a:	e7db      	b.n	800a824 <LoRaMacMlmeRequest+0x12c>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800a86c:	210c      	movs	r1, #12
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <LoRaMacMlmeRequest+0x1ec>)
 800a870:	88b2      	ldrh	r2, [r6, #4]
 800a872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a874:	5671      	ldrsb	r1, [r6, r1]
 800a876:	68b0      	ldr	r0, [r6, #8]
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a87c:	e7ef      	b.n	800a85e <LoRaMacMlmeRequest+0x166>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a87e:	2200      	movs	r2, #0
 800a880:	200d      	movs	r0, #13
 800a882:	a902      	add	r1, sp, #8
 800a884:	e7c9      	b.n	800a81a <LoRaMacMlmeRequest+0x122>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a886:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <LoRaMacMlmeRequest+0x1d4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a888:	2502      	movs	r5, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a88a:	58e3      	ldr	r3, [r4, r3]
 800a88c:	337c      	adds	r3, #124	; 0x7c
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1ac      	bne.n	800a7ee <LoRaMacMlmeRequest+0xf6>
                macCmdPayload[0] = value;
 800a894:	7933      	ldrb	r3, [r6, #4]
 800a896:	aa02      	add	r2, sp, #8
 800a898:	7013      	strb	r3, [r2, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a89a:	2010      	movs	r0, #16
 800a89c:	2201      	movs	r2, #1
 800a89e:	a902      	add	r1, sp, #8
 800a8a0:	e7bb      	b.n	800a81a <LoRaMacMlmeRequest+0x122>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2012      	movs	r0, #18
 800a8a6:	a902      	add	r1, sp, #8
 800a8a8:	e7b7      	b.n	800a81a <LoRaMacMlmeRequest+0x122>
    switch( mlmeRequest->Type )
 800a8aa:	2502      	movs	r5, #2
 800a8ac:	e79f      	b.n	800a7ee <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 800a8ae:	a803      	add	r0, sp, #12
 800a8b0:	f000 fbce 	bl	800b050 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800a8b4:	f7fd fda8 	bl	8008408 <EventMacNvmCtxChanged>
 800a8b8:	e72c      	b.n	800a714 <LoRaMacMlmeRequest+0x1c>
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	20000c84 	.word	0x20000c84
 800a8c0:	20000834 	.word	0x20000834
 800a8c4:	00000451 	.word	0x00000451
 800a8c8:	00000481 	.word	0x00000481
 800a8cc:	00000484 	.word	0x00000484
 800a8d0:	20000836 	.word	0x20000836
 800a8d4:	20000942 	.word	0x20000942
 800a8d8:	2000094a 	.word	0x2000094a
 800a8dc:	00000414 	.word	0x00000414
 800a8e0:	00000415 	.word	0x00000415
 800a8e4:	0800f22c 	.word	0x0800f22c

0800a8e8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ec:	b095      	sub	sp, #84	; 0x54
 800a8ee:	0007      	movs	r7, r0
 800a8f0:	9107      	str	r1, [sp, #28]
 800a8f2:	9301      	str	r3, [sp, #4]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800a8f4:	4298      	cmp	r0, r3
 800a8f6:	d103      	bne.n	800a900 <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8f8:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800a8fa:	0020      	movs	r0, r4
 800a8fc:	b015      	add	sp, #84	; 0x54
 800a8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800a900:	f7fe fce0 	bl	80092c4 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800a904:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 800a906:	1e05      	subs	r5, r0, #0
 800a908:	d1f7      	bne.n	800a8fa <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800a90a:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a90c:	0001      	movs	r1, r0
    macHdr.Value = 0;
 800a90e:	7318      	strb	r0, [r3, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a910:	2214      	movs	r2, #20
 800a912:	48c2      	ldr	r0, [pc, #776]	; (800ac1c <LoRaMacMcpsRequest+0x334>)
 800a914:	f002 f845 	bl	800c9a2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a918:	4ec1      	ldr	r6, [pc, #772]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800a91a:	4bc2      	ldr	r3, [pc, #776]	; (800ac24 <LoRaMacMcpsRequest+0x33c>)
 800a91c:	54f4      	strb	r4, [r6, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a91e:	4bc2      	ldr	r3, [pc, #776]	; (800ac28 <LoRaMacMcpsRequest+0x340>)
 800a920:	54f4      	strb	r4, [r6, r3]
    switch( mcpsRequest->Type )
 800a922:	783b      	ldrb	r3, [r7, #0]
 800a924:	42a3      	cmp	r3, r4
 800a926:	d100      	bne.n	800a92a <LoRaMacMcpsRequest+0x42>
 800a928:	e0bf      	b.n	800aaaa <LoRaMacMcpsRequest+0x1c2>
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d100      	bne.n	800a930 <LoRaMacMcpsRequest+0x48>
 800a92e:	e0c5      	b.n	800aabc <LoRaMacMcpsRequest+0x1d4>
 800a930:	9504      	str	r5, [sp, #16]
 800a932:	9505      	str	r5, [sp, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10e      	bne.n	800a956 <LoRaMacMcpsRequest+0x6e>
            MacCtx.AckTimeoutRetries = 1;
 800a938:	4bbc      	ldr	r3, [pc, #752]	; (800ac2c <LoRaMacMcpsRequest+0x344>)
 800a93a:	54f4      	strb	r4, [r6, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a93c:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a93e:	466a      	mov	r2, sp
 800a940:	7313      	strb	r3, [r2, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a942:	793b      	ldrb	r3, [r7, #4]
            readyToSend = true;
 800a944:	2501      	movs	r5, #1
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a946:	9305      	str	r3, [sp, #20]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a94c:	89bb      	ldrh	r3, [r7, #12]
 800a94e:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a950:	230e      	movs	r3, #14
 800a952:	56fb      	ldrsb	r3, [r7, r3]
 800a954:	9304      	str	r3, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a956:	2402      	movs	r4, #2
 800a958:	ab08      	add	r3, sp, #32
 800a95a:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a95c:	4bb4      	ldr	r3, [pc, #720]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800a95e:	a908      	add	r1, sp, #32
 800a960:	58f3      	ldr	r3, [r6, r3]
 800a962:	001a      	movs	r2, r3
 800a964:	32b8      	adds	r2, #184	; 0xb8
 800a966:	7812      	ldrb	r2, [r2, #0]
 800a968:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a96a:	7818      	ldrb	r0, [r3, #0]
 800a96c:	a90d      	add	r1, sp, #52	; 0x34
 800a96e:	f000 ffa6 	bl	800b8be <RegionGetPhyParam>
 800a972:	9008      	str	r0, [sp, #32]
    if( readyToSend == true )
 800a974:	2d00      	cmp	r5, #0
 800a976:	d100      	bne.n	800a97a <LoRaMacMcpsRequest+0x92>
 800a978:	e091      	b.n	800aa9e <LoRaMacMcpsRequest+0x1b6>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800a97a:	4bad      	ldr	r3, [pc, #692]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800a97c:	58f3      	ldr	r3, [r6, r3]
 800a97e:	001a      	movs	r2, r3
 800a980:	327e      	adds	r2, #126	; 0x7e
 800a982:	7812      	ldrb	r2, [r2, #0]
 800a984:	2a00      	cmp	r2, #0
 800a986:	d119      	bne.n	800a9bc <LoRaMacMcpsRequest+0xd4>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a988:	9904      	ldr	r1, [sp, #16]
 800a98a:	1c02      	adds	r2, r0, #0
 800a98c:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800a98e:	ac09      	add	r4, sp, #36	; 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a990:	4288      	cmp	r0, r1
 800a992:	da01      	bge.n	800a998 <LoRaMacMcpsRequest+0xb0>
 800a994:	466a      	mov	r2, sp
 800a996:	7c12      	ldrb	r2, [r2, #16]
            verify.DatarateParams.Datarate = datarate;
 800a998:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a99a:	001a      	movs	r2, r3
 800a99c:	32b8      	adds	r2, #184	; 0xb8
 800a99e:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a9a0:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a9a2:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a9a4:	7818      	ldrb	r0, [r3, #0]
 800a9a6:	2205      	movs	r2, #5
 800a9a8:	f000 ffad 	bl	800b906 <RegionVerify>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0a3      	beq.n	800a8f8 <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a9b0:	4a9f      	ldr	r2, [pc, #636]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800a9b2:	4b9b      	ldr	r3, [pc, #620]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800a9b4:	589b      	ldr	r3, [r3, r2]
 800a9b6:	7822      	ldrb	r2, [r4, #0]
 800a9b8:	3385      	adds	r3, #133	; 0x85
 800a9ba:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a9bc:	4b98      	ldr	r3, [pc, #608]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800a9be:	4a9c      	ldr	r2, [pc, #624]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800a9c0:	5899      	ldr	r1, [r3, r2]
 800a9c2:	000a      	movs	r2, r1
 800a9c4:	3284      	adds	r2, #132	; 0x84
 800a9c6:	8812      	ldrh	r2, [r2, #0]
 800a9c8:	1d0b      	adds	r3, r1, #4
 800a9ca:	9204      	str	r2, [sp, #16]
 800a9cc:	ba52      	rev16	r2, r2
 800a9ce:	4694      	mov	ip, r2
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a9d0:	22b2      	movs	r2, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a9d4:	0052      	lsls	r2, r2, #1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a9d6:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a9d8:	5c8a      	ldrb	r2, [r1, r2]
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d100      	bne.n	800a9e0 <LoRaMacMcpsRequest+0xf8>
 800a9de:	e110      	b.n	800ac02 <LoRaMacMcpsRequest+0x31a>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800a9e0:	000a      	movs	r2, r1
 800a9e2:	32c8      	adds	r2, #200	; 0xc8
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	d102      	bne.n	800a9f0 <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800a9ea:	0008      	movs	r0, r1
 800a9ec:	30fc      	adds	r0, #252	; 0xfc
 800a9ee:	6582      	str	r2, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800a9f0:	000a      	movs	r2, r1
 800a9f2:	327e      	adds	r2, #126	; 0x7e
 800a9f4:	7816      	ldrb	r6, [r2, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800a9f6:	224c      	movs	r2, #76	; 0x4c
    adrNext.Version = MacCtx.NvmCtx->Version;
 800a9f8:	a80f      	add	r0, sp, #60	; 0x3c
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800a9fa:	32ff      	adds	r2, #255	; 0xff
 800a9fc:	5c8a      	ldrb	r2, [r1, r2]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800a9fe:	6083      	str	r3, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aa00:	23fd      	movs	r3, #253	; 0xfd
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800aa02:	9206      	str	r2, [sp, #24]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa04:	000a      	movs	r2, r1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aa06:	4c86      	ldr	r4, [pc, #536]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	58e3      	ldr	r3, [r4, r3]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa0c:	32fc      	adds	r2, #252	; 0xfc
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aa0e:	9312      	str	r3, [sp, #72]	; 0x48
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800aa10:	4663      	mov	r3, ip
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa12:	6e52      	ldr	r2, [r2, #100]	; 0x64
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800aa14:	8203      	strh	r3, [r0, #16]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa16:	920f      	str	r2, [sp, #60]	; 0x3c
    adrNext.UpdateChanMask = true;
 800aa18:	2201      	movs	r2, #1
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800aa1a:	000b      	movs	r3, r1
    adrNext.UpdateChanMask = true;
 800aa1c:	7102      	strb	r2, [r0, #4]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800aa1e:	000a      	movs	r2, r1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800aa20:	7146      	strb	r6, [r0, #5]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800aa22:	33b8      	adds	r3, #184	; 0xb8
 800aa24:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800aa26:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800aa28:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800aa2a:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800aa2c:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 800aa2e:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800aa30:	ab0a      	add	r3, sp, #40	; 0x28
 800aa32:	f000 f925 	bl	800ac80 <LoRaMacAdrCalcNext>
    fCtrl.Value = 0;
 800aa36:	2500      	movs	r5, #0
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	0180      	lsls	r0, r0, #6
 800aa3c:	015b      	lsls	r3, r3, #5
 800aa3e:	4303      	orrs	r3, r0
 800aa40:	01f6      	lsls	r6, r6, #7
 800aa42:	4333      	orrs	r3, r6
 800aa44:	9306      	str	r3, [sp, #24]
    MacCtx.NodeAckRequested = false;
 800aa46:	4b7b      	ldr	r3, [pc, #492]	; (800ac34 <LoRaMacMcpsRequest+0x34c>)
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800aa48:	9902      	ldr	r1, [sp, #8]
    MacCtx.NodeAckRequested = false;
 800aa4a:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 800aa4c:	9b02      	ldr	r3, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800aa4e:	487a      	ldr	r0, [pc, #488]	; (800ac38 <LoRaMacMcpsRequest+0x350>)
        fBufferSize = 0;
 800aa50:	1e5a      	subs	r2, r3, #1
 800aa52:	4193      	sbcs	r3, r2
 800aa54:	9a01      	ldr	r2, [sp, #4]
 800aa56:	425b      	negs	r3, r3
 800aa58:	401a      	ands	r2, r3
 800aa5a:	9201      	str	r2, [sp, #4]
    MacCtx.PktBufferLen = 0;
 800aa5c:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 800aa5e:	950b      	str	r5, [sp, #44]	; 0x2c
    size_t macCmdsSize = 0;
 800aa60:	950c      	str	r5, [sp, #48]	; 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800aa62:	f001 ff89 	bl	800c978 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800aa66:	466b      	mov	r3, sp
 800aa68:	791a      	ldrb	r2, [r3, #4]
 800aa6a:	4b74      	ldr	r3, [pc, #464]	; (800ac3c <LoRaMacMcpsRequest+0x354>)
 800aa6c:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800aa6e:	466b      	mov	r3, sp
 800aa70:	7b19      	ldrb	r1, [r3, #12]
    switch( macHdr->Bits.MType )
 800aa72:	9b03      	ldr	r3, [sp, #12]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800aa74:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800aa76:	061b      	lsls	r3, r3, #24
 800aa78:	0f5b      	lsrs	r3, r3, #29
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d02e      	beq.n	800aadc <LoRaMacMcpsRequest+0x1f4>
 800aa7e:	2b07      	cmp	r3, #7
 800aa80:	d100      	bne.n	800aa84 <LoRaMacMcpsRequest+0x19c>
 800aa82:	e0ac      	b.n	800abde <LoRaMacMcpsRequest+0x2f6>
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d02c      	beq.n	800aae2 <LoRaMacMcpsRequest+0x1fa>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800aa88:	2402      	movs	r4, #2
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800aa8a:	4a69      	ldr	r2, [pc, #420]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800aa8c:	4b64      	ldr	r3, [pc, #400]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800aa8e:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800aa90:	9a04      	ldr	r2, [sp, #16]
 800aa92:	3384      	adds	r3, #132	; 0x84
 800aa94:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 800aa96:	2200      	movs	r2, #0
 800aa98:	4b61      	ldr	r3, [pc, #388]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800aa9a:	4966      	ldr	r1, [pc, #408]	; (800ac34 <LoRaMacMcpsRequest+0x34c>)
 800aa9c:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800aa9e:	2391      	movs	r3, #145	; 0x91
 800aaa0:	4a5f      	ldr	r2, [pc, #380]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	58d3      	ldr	r3, [r2, r3]
 800aaa6:	613b      	str	r3, [r7, #16]
    return status;
 800aaa8:	e727      	b.n	800a8fa <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800aaaa:	7bfa      	ldrb	r2, [r7, #15]
 800aaac:	1c13      	adds	r3, r2, #0
 800aaae:	2a08      	cmp	r2, #8
 800aab0:	d900      	bls.n	800aab4 <LoRaMacMcpsRequest+0x1cc>
 800aab2:	2308      	movs	r3, #8
 800aab4:	4a5d      	ldr	r2, [pc, #372]	; (800ac2c <LoRaMacMcpsRequest+0x344>)
 800aab6:	54b3      	strb	r3, [r6, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800aab8:	2380      	movs	r3, #128	; 0x80
 800aaba:	e740      	b.n	800a93e <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800aabc:	4b5b      	ldr	r3, [pc, #364]	; (800ac2c <LoRaMacMcpsRequest+0x344>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800aabe:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 800aac0:	54f4      	strb	r4, [r6, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800aac2:	23e0      	movs	r3, #224	; 0xe0
 800aac4:	7313      	strb	r3, [r2, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800aac6:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 800aac8:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800aaca:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800aacc:	893b      	ldrh	r3, [r7, #8]
 800aace:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800aad0:	230a      	movs	r3, #10
 800aad2:	56fb      	ldrsb	r3, [r7, r3]
 800aad4:	9304      	str	r3, [sp, #16]
    uint8_t fPort = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	9305      	str	r3, [sp, #20]
            break;
 800aada:	e73c      	b.n	800a956 <LoRaMacMcpsRequest+0x6e>
            MacCtx.NodeAckRequested = true;
 800aadc:	2001      	movs	r0, #1
 800aade:	4b55      	ldr	r3, [pc, #340]	; (800ac34 <LoRaMacMcpsRequest+0x34c>)
 800aae0:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800aae2:	0025      	movs	r5, r4
 800aae4:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800aae6:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800aae8:	35ff      	adds	r5, #255	; 0xff
 800aaea:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800aaec:	4b54      	ldr	r3, [pc, #336]	; (800ac40 <LoRaMacMcpsRequest+0x358>)
 800aaee:	36fc      	adds	r6, #252	; 0xfc
 800aaf0:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800aaf2:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800aaf4:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800aaf6:	9905      	ldr	r1, [sp, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800aaf8:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800aafa:	3329      	adds	r3, #41	; 0x29
 800aafc:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800aafe:	4b4c      	ldr	r3, [pc, #304]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ab00:	a80b      	add	r0, sp, #44	; 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800ab02:	58e3      	ldr	r3, [r4, r3]
 800ab04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab06:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ab0c:	2398      	movs	r3, #152	; 0x98
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ab12:	4b49      	ldr	r3, [pc, #292]	; (800ac38 <LoRaMacMcpsRequest+0x350>)
 800ab14:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ab16:	f000 fc75 	bl	800b404 <LoRaMacCryptoGetFCntUp>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d16f      	bne.n	800abfe <LoRaMacMcpsRequest+0x316>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ab1e:	0022      	movs	r2, r4
 800ab20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab22:	32fe      	adds	r2, #254	; 0xfe
 800ab24:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800ab26:	2288      	movs	r2, #136	; 0x88
 800ab28:	00d2      	lsls	r2, r2, #3
 800ab2a:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ab2c:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ab2e:	a80c      	add	r0, sp, #48	; 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ab30:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ab32:	f000 f9e5 	bl	800af00 <LoRaMacCommandsGetSizeSerializedCmds>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d139      	bne.n	800abae <LoRaMacMcpsRequest+0x2c6>
            if( macCmdsSize > 0 )
 800ab3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01a      	beq.n	800ab76 <LoRaMacMcpsRequest+0x28e>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800ab40:	2085      	movs	r0, #133	; 0x85
 800ab42:	4b3b      	ldr	r3, [pc, #236]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800ab44:	58e3      	ldr	r3, [r4, r3]
 800ab46:	9301      	str	r3, [sp, #4]
 800ab48:	5618      	ldrsb	r0, [r3, r0]
 800ab4a:	f7fd fc7b 	bl	8008444 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ab4e:	4b3b      	ldr	r3, [pc, #236]	; (800ac3c <LoRaMacMcpsRequest+0x354>)
 800ab50:	5ce3      	ldrb	r3, [r4, r3]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d02d      	beq.n	800abb2 <LoRaMacMcpsRequest+0x2ca>
 800ab56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab58:	2b0f      	cmp	r3, #15
 800ab5a:	d820      	bhi.n	800ab9e <LoRaMacMcpsRequest+0x2b6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800ab5c:	200f      	movs	r0, #15
 800ab5e:	4a39      	ldr	r2, [pc, #228]	; (800ac44 <LoRaMacMcpsRequest+0x35c>)
 800ab60:	a90c      	add	r1, sp, #48	; 0x30
 800ab62:	f000 f9d9 	bl	800af18 <LoRaMacCommandsSerializeCmds>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d121      	bne.n	800abae <LoRaMacMcpsRequest+0x2c6>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800ab6a:	260f      	movs	r6, #15
 800ab6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab6e:	401e      	ands	r6, r3
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	4333      	orrs	r3, r6
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ab74:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 800ab76:	9807      	ldr	r0, [sp, #28]
 800ab78:	f7fd feca 	bl	8008910 <ScheduleTx>
 800ab7c:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800ab7e:	d184      	bne.n	800aa8a <LoRaMacMcpsRequest+0x1a2>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800ab80:	224c      	movs	r2, #76	; 0x4c
 800ab82:	4d27      	ldr	r5, [pc, #156]	; (800ac20 <LoRaMacMcpsRequest+0x338>)
 800ab84:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800ab86:	32ff      	adds	r2, #255	; 0xff
 800ab88:	58eb      	ldr	r3, [r5, r3]
 800ab8a:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800ab8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab8e:	3304      	adds	r3, #4
 800ab90:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ab92:	f000 f989 	bl	800aea8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ab96:	1e04      	subs	r4, r0, #0
 800ab98:	d035      	beq.n	800ac06 <LoRaMacMcpsRequest+0x31e>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ab9a:	2413      	movs	r4, #19
 800ab9c:	e77b      	b.n	800aa96 <LoRaMacMcpsRequest+0x1ae>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ab9e:	4b24      	ldr	r3, [pc, #144]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800aba0:	a90c      	add	r1, sp, #48	; 0x30
 800aba2:	58e2      	ldr	r2, [r4, r3]
 800aba4:	32cb      	adds	r2, #203	; 0xcb
 800aba6:	f000 f9b7 	bl	800af18 <LoRaMacCommandsSerializeCmds>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d0e3      	beq.n	800ab76 <LoRaMacMcpsRequest+0x28e>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800abae:	2413      	movs	r4, #19
 800abb0:	e76b      	b.n	800aa8a <LoRaMacMcpsRequest+0x1a2>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800abb2:	4d1f      	ldr	r5, [pc, #124]	; (800ac30 <LoRaMacMcpsRequest+0x348>)
 800abb4:	a90c      	add	r1, sp, #48	; 0x30
 800abb6:	5963      	ldr	r3, [r4, r5]
 800abb8:	001a      	movs	r2, r3
 800abba:	32cb      	adds	r2, #203	; 0xcb
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	f000 f9ab 	bl	800af18 <LoRaMacCommandsSerializeCmds>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d1f3      	bne.n	800abae <LoRaMacMcpsRequest+0x2c6>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800abc6:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800abc8:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800abce:	5963      	ldr	r3, [r4, r5]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800abd0:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	33cb      	adds	r3, #203	; 0xcb
 800abd6:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800abd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abda:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800abdc:	e7cb      	b.n	800ab76 <LoRaMacMcpsRequest+0x28e>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800abde:	9b02      	ldr	r3, [sp, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0c8      	beq.n	800ab76 <LoRaMacMcpsRequest+0x28e>
 800abe4:	2a00      	cmp	r2, #0
 800abe6:	d0c6      	beq.n	800ab76 <LoRaMacMcpsRequest+0x28e>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800abe8:	466b      	mov	r3, sp
 800abea:	9902      	ldr	r1, [sp, #8]
 800abec:	791a      	ldrb	r2, [r3, #4]
 800abee:	4816      	ldr	r0, [pc, #88]	; (800ac48 <LoRaMacMcpsRequest+0x360>)
 800abf0:	f001 fec2 	bl	800c978 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800abf4:	4b11      	ldr	r3, [pc, #68]	; (800ac3c <LoRaMacMcpsRequest+0x354>)
 800abf6:	5ce3      	ldrb	r3, [r4, r3]
 800abf8:	3301      	adds	r3, #1
 800abfa:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800abfc:	e7bb      	b.n	800ab76 <LoRaMacMcpsRequest+0x28e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800abfe:	2412      	movs	r4, #18
 800ac00:	e743      	b.n	800aa8a <LoRaMacMcpsRequest+0x1a2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800ac02:	2407      	movs	r4, #7
 800ac04:	e747      	b.n	800aa96 <LoRaMacMcpsRequest+0x1ae>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ac06:	783a      	ldrb	r2, [r7, #0]
 800ac08:	4b10      	ldr	r3, [pc, #64]	; (800ac4c <LoRaMacMcpsRequest+0x364>)
 800ac0a:	54ea      	strb	r2, [r5, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	4a10      	ldr	r2, [pc, #64]	; (800ac50 <LoRaMacMcpsRequest+0x368>)
 800ac10:	5ca9      	ldrb	r1, [r5, r2]
 800ac12:	430b      	orrs	r3, r1
 800ac14:	54ab      	strb	r3, [r5, r2]
            EventMacNvmCtxChanged( );
 800ac16:	f7fd fbf7 	bl	8008408 <EventMacNvmCtxChanged>
 800ac1a:	e740      	b.n	800aa9e <LoRaMacMcpsRequest+0x1b6>
 800ac1c:	20000c70 	.word	0x20000c70
 800ac20:	20000834 	.word	0x20000834
 800ac24:	0000043d 	.word	0x0000043d
 800ac28:	00000412 	.word	0x00000412
 800ac2c:	00000411 	.word	0x00000411
 800ac30:	00000484 	.word	0x00000484
 800ac34:	00000414 	.word	0x00000414
 800ac38:	2000096c 	.word	0x2000096c
 800ac3c:	00000237 	.word	0x00000237
 800ac40:	20000836 	.word	0x20000836
 800ac44:	2000094c 	.word	0x2000094c
 800ac48:	20000837 	.word	0x20000837
 800ac4c:	0000043c 	.word	0x0000043c
 800ac50:	00000481 	.word	0x00000481

0800ac54 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ac54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ac56:	4e08      	ldr	r6, [pc, #32]	; (800ac78 <LoRaMacTestSetDutyCycleOn+0x24>)
 800ac58:	4d08      	ldr	r5, [pc, #32]	; (800ac7c <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800ac5a:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ac5c:	5973      	ldr	r3, [r6, r5]
{
 800ac5e:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800ac60:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ac62:	220f      	movs	r2, #15
 800ac64:	7818      	ldrb	r0, [r3, #0]
 800ac66:	f000 fe4e 	bl	800b906 <RegionVerify>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d002      	beq.n	800ac74 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800ac6e:	5973      	ldr	r3, [r6, r5]
 800ac70:	33c9      	adds	r3, #201	; 0xc9
 800ac72:	701c      	strb	r4, [r3, #0]
    }
}
 800ac74:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	20000834 	.word	0x20000834
 800ac7c:	00000484 	.word	0x00000484

0800ac80 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ac80:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ac82:	2500      	movs	r5, #0
{
 800ac84:	b08d      	sub	sp, #52	; 0x34
 800ac86:	9104      	str	r1, [sp, #16]
 800ac88:	9205      	str	r2, [sp, #20]
 800ac8a:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800ac8c:	7883      	ldrb	r3, [r0, #2]
{
 800ac8e:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	d12b      	bne.n	800acec <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800ac94:	2310      	movs	r3, #16
 800ac96:	56c3      	ldrsb	r3, [r0, r3]
 800ac98:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800ac9a:	2311      	movs	r3, #17
 800ac9c:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800ac9e:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800aca0:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800aca2:	6883      	ldr	r3, [r0, #8]
 800aca4:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800aca6:	7945      	ldrb	r5, [r0, #5]
 800aca8:	2d00      	cmp	r5, #0
 800acaa:	d01a      	beq.n	800ace2 <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800acac:	2302      	movs	r3, #2
 800acae:	aa06      	add	r2, sp, #24
 800acb0:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800acb2:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800acb4:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800acb6:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800acb8:	7cc0      	ldrb	r0, [r0, #19]
 800acba:	f000 fe00 	bl	800b8be <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800acbe:	b243      	sxtb	r3, r0
 800acc0:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800acc2:	466b      	mov	r3, sp
 800acc4:	9a02      	ldr	r2, [sp, #8]
 800acc6:	791f      	ldrb	r7, [r3, #4]
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	4293      	cmp	r3, r2
 800accc:	da01      	bge.n	800acd2 <LoRaMacAdrCalcNext+0x52>
 800acce:	466b      	mov	r3, sp
 800acd0:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800acd6:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800acd8:	4293      	cmp	r3, r2
 800acda:	dc0a      	bgt.n	800acf2 <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800ace0:	2500      	movs	r5, #0
    *drOut = datarate;
 800ace2:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800ace4:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800ace6:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	701a      	strb	r2, [r3, #0]
}
 800acec:	0028      	movs	r0, r5
 800acee:	b00d      	add	sp, #52	; 0x34
 800acf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800acf2:	2500      	movs	r5, #0
 800acf4:	89a1      	ldrh	r1, [r4, #12]
 800acf6:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800acf8:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800acfa:	428a      	cmp	r2, r1
 800acfc:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800acfe:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ad00:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d3ed      	bcc.n	800ace2 <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800ad06:	2308      	movs	r3, #8
 800ad08:	ae08      	add	r6, sp, #32
 800ad0a:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ad0c:	0031      	movs	r1, r6
 800ad0e:	7ce0      	ldrb	r0, [r4, #19]
 800ad10:	f000 fdd5 	bl	800b8be <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800ad14:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800ad16:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800ad18:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800ad1a:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800ad1c:	f7f5 faa0 	bl	8000260 <__aeabi_uidivmod>
 800ad20:	2901      	cmp	r1, #1
 800ad22:	d1de      	bne.n	800ace2 <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ad24:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800ad26:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ad28:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ad2a:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ad2c:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ad2e:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ad30:	7ce0      	ldrb	r0, [r4, #19]
 800ad32:	f000 fdc4 	bl	800b8be <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800ad36:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800ad38:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800ad3a:	42bb      	cmp	r3, r7
 800ad3c:	d1d1      	bne.n	800ace2 <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800ad3e:	7925      	ldrb	r5, [r4, #4]
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	d0ce      	beq.n	800ace2 <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ad44:	2302      	movs	r3, #2
 800ad46:	a90a      	add	r1, sp, #40	; 0x28
 800ad48:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800ad4a:	7ce0      	ldrb	r0, [r4, #19]
 800ad4c:	f000 fdca 	bl	800b8e4 <RegionInitDefaults>
 800ad50:	e7c6      	b.n	800ace0 <LoRaMacAdrCalcNext+0x60>
	...

0800ad54 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800ad54:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <NvmCtxCallback+0x10>)
{
 800ad56:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d000      	beq.n	800ad60 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800ad5e:	4798      	blx	r3
    }
}
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	20000e40 	.word	0x20000e40

0800ad68 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800ad68:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800ad6a:	4d06      	ldr	r5, [pc, #24]	; (800ad84 <LoRaMacCommandsInit+0x1c>)
{
 800ad6c:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800ad6e:	0028      	movs	r0, r5
 800ad70:	22fc      	movs	r2, #252	; 0xfc
 800ad72:	2100      	movs	r1, #0
 800ad74:	f001 fe15 	bl	800c9a2 <memset1>
    list->First = NULL;
 800ad78:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800ad7a:	4b03      	ldr	r3, [pc, #12]	; (800ad88 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 800ad7c:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 800ad7e:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800ad80:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	20000e44 	.word	0x20000e44
 800ad88:	20000e40 	.word	0x20000e40

0800ad8c <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800ad8c:	0001      	movs	r1, r0
 800ad8e:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ad90:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800ad92:	2900      	cmp	r1, #0
 800ad94:	d004      	beq.n	800ada0 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800ad96:	4803      	ldr	r0, [pc, #12]	; (800ada4 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800ad98:	22fc      	movs	r2, #252	; 0xfc
 800ad9a:	f001 fded 	bl	800c978 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800ad9e:	2000      	movs	r0, #0
    }
}
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	46c0      	nop			; (mov r8, r8)
 800ada4:	20000e44 	.word	0x20000e44

0800ada8 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800ada8:	23fc      	movs	r3, #252	; 0xfc
 800adaa:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800adac:	4800      	ldr	r0, [pc, #0]	; (800adb0 <LoRaMacCommandsGetNvmCtx+0x8>)
 800adae:	4770      	bx	lr
 800adb0:	20000e44 	.word	0x20000e44

0800adb4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800adb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb6:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800adb8:	2701      	movs	r7, #1
{
 800adba:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d03b      	beq.n	800ae38 <LoRaMacCommandsAddCmd+0x84>
 800adc0:	2400      	movs	r4, #0
 800adc2:	4b21      	ldr	r3, [pc, #132]	; (800ae48 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800adc4:	0122      	lsls	r2, r4, #4
 800adc6:	0018      	movs	r0, r3
 800adc8:	4694      	mov	ip, r2
 800adca:	001a      	movs	r2, r3
 800adcc:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800adce:	7817      	ldrb	r7, [r2, #0]
 800add0:	2f00      	cmp	r7, #0
 800add2:	d133      	bne.n	800ae3c <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800add4:	3201      	adds	r2, #1
 800add6:	4282      	cmp	r2, r0
 800add8:	d1f9      	bne.n	800adce <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800adda:	481c      	ldr	r0, [pc, #112]	; (800ae4c <LoRaMacCommandsAddCmd+0x98>)
 800addc:	6802      	ldr	r2, [r0, #0]
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d100      	bne.n	800ade4 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800ade2:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800ade4:	6842      	ldr	r2, [r0, #4]
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d000      	beq.n	800adec <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800adea:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800adec:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800adee:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800adf0:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800adf2:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800adf4:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800adf6:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800adf8:	0123      	lsls	r3, r4, #4
 800adfa:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800adfc:	4663      	mov	r3, ip
    element->Next = NULL;
 800adfe:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ae00:	330d      	adds	r3, #13
    element->Next = NULL;
 800ae02:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ae04:	18c0      	adds	r0, r0, r3
 800ae06:	b2aa      	uxth	r2, r5
 800ae08:	f001 fdb6 	bl	800c978 <memcpy1>
    switch( cid )
 800ae0c:	9b01      	ldr	r3, [sp, #4]
            return true;
 800ae0e:	2201      	movs	r2, #1
    switch( cid )
 800ae10:	2b05      	cmp	r3, #5
 800ae12:	d006      	beq.n	800ae22 <LoRaMacCommandsAddCmd+0x6e>
 800ae14:	0018      	movs	r0, r3
 800ae16:	2302      	movs	r3, #2
 800ae18:	3808      	subs	r0, #8
 800ae1a:	b2c0      	uxtb	r0, r0
 800ae1c:	4283      	cmp	r3, r0
 800ae1e:	4176      	adcs	r6, r6
 800ae20:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800ae22:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <LoRaMacCommandsAddCmd+0x98>)
 800ae24:	0124      	lsls	r4, r4, #4
 800ae26:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ae28:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800ae2a:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	3201      	adds	r2, #1
 800ae30:	1955      	adds	r5, r2, r5
 800ae32:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 800ae34:	f7ff ff8e 	bl	800ad54 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ae38:	0038      	movs	r0, r7
 800ae3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800ae3c:	3401      	adds	r4, #1
 800ae3e:	0003      	movs	r3, r0
 800ae40:	2c0f      	cmp	r4, #15
 800ae42:	d1bf      	bne.n	800adc4 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800ae44:	2702      	movs	r7, #2
 800ae46:	e7f7      	b.n	800ae38 <LoRaMacCommandsAddCmd+0x84>
 800ae48:	20000e4c 	.word	0x20000e4c
 800ae4c:	20000e44 	.word	0x20000e44

0800ae50 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800ae50:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ae52:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d023      	beq.n	800aea0 <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800ae58:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <LoRaMacCommandsRemoveCmd+0x54>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800ae5c:	4290      	cmp	r0, r2
 800ae5e:	d104      	bne.n	800ae6a <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800ae60:	6802      	ldr	r2, [r0, #0]
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	2200      	movs	r2, #0
 800ae66:	e005      	b.n	800ae74 <LoRaMacCommandsRemoveCmd+0x24>
 800ae68:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	d002      	beq.n	800ae74 <LoRaMacCommandsRemoveCmd+0x24>
 800ae6e:	6811      	ldr	r1, [r2, #0]
 800ae70:	4288      	cmp	r0, r1
 800ae72:	d1f9      	bne.n	800ae68 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800ae74:	6859      	ldr	r1, [r3, #4]
 800ae76:	4288      	cmp	r0, r1
 800ae78:	d100      	bne.n	800ae7c <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800ae7a:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	d001      	beq.n	800ae84 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800ae80:	6801      	ldr	r1, [r0, #0]
 800ae82:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800ae84:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ae86:	33f8      	adds	r3, #248	; 0xf8
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	6881      	ldr	r1, [r0, #8]
 800ae8c:	3a01      	subs	r2, #1
 800ae8e:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800ae90:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ae92:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ae94:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ae96:	2210      	movs	r2, #16
 800ae98:	f001 fd83 	bl	800c9a2 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800ae9c:	f7ff ff5a 	bl	800ad54 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800aea0:	0020      	movs	r0, r4
 800aea2:	bd10      	pop	{r4, pc}
 800aea4:	20000e44 	.word	0x20000e44

0800aea8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800aea8:	4b08      	ldr	r3, [pc, #32]	; (800aecc <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800aeaa:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800aeac:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800aeae:	2c00      	cmp	r4, #0
 800aeb0:	d103      	bne.n	800aeba <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800aeb2:	f7ff ff4f 	bl	800ad54 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800aeb6:	0020      	movs	r0, r4
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800aeba:	7b23      	ldrb	r3, [r4, #12]
            nexElement = curElement->Next;
 800aebc:	6825      	ldr	r5, [r4, #0]
        if( curElement->IsSticky == false )
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800aec2:	0020      	movs	r0, r4
 800aec4:	f7ff ffc4 	bl	800ae50 <LoRaMacCommandsRemoveCmd>
{
 800aec8:	002c      	movs	r4, r5
 800aeca:	e7f0      	b.n	800aeae <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800aecc:	20000e44 	.word	0x20000e44

0800aed0 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800aed0:	4b0a      	ldr	r3, [pc, #40]	; (800aefc <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 800aed2:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800aed4:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	d103      	bne.n	800aee2 <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800aeda:	f7ff ff3b 	bl	800ad54 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800aede:	0020      	movs	r0, r4
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800aee2:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800aee4:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 800aee6:	2b05      	cmp	r3, #5
 800aee8:	d002      	beq.n	800aef0 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 800aeea:	3b08      	subs	r3, #8
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d802      	bhi.n	800aef6 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 800aef0:	0020      	movs	r0, r4
 800aef2:	f7ff ffad 	bl	800ae50 <LoRaMacCommandsRemoveCmd>
{
 800aef6:	002c      	movs	r4, r5
 800aef8:	e7ed      	b.n	800aed6 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	20000e44 	.word	0x20000e44

0800af00 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800af00:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af02:	2001      	movs	r0, #1
    if( size == NULL )
 800af04:	2b00      	cmp	r3, #0
 800af06:	d004      	beq.n	800af12 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800af08:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800af0a:	4a02      	ldr	r2, [pc, #8]	; (800af14 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800af0c:	32f8      	adds	r2, #248	; 0xf8
 800af0e:	6812      	ldr	r2, [r2, #0]
 800af10:	601a      	str	r2, [r3, #0]
}
 800af12:	4770      	bx	lr
 800af14:	20000e44 	.word	0x20000e44

0800af18 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af1a:	000f      	movs	r7, r1
 800af1c:	9001      	str	r0, [sp, #4]
 800af1e:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af20:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800af22:	2a00      	cmp	r2, #0
 800af24:	d00a      	beq.n	800af3c <LoRaMacCommandsSerializeCmds+0x24>
 800af26:	2900      	cmp	r1, #0
 800af28:	d008      	beq.n	800af3c <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <LoRaMacCommandsSerializeCmds+0x60>)
 800af2c:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800af2e:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800af30:	2c00      	cmp	r4, #0
 800af32:	d104      	bne.n	800af3e <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800af34:	0038      	movs	r0, r7
 800af36:	f7ff ffe3 	bl	800af00 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800af3a:	2000      	movs	r0, #0
}
 800af3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800af3e:	9a01      	ldr	r2, [sp, #4]
 800af40:	1ad1      	subs	r1, r2, r3
 800af42:	68a2      	ldr	r2, [r4, #8]
 800af44:	3201      	adds	r2, #1
 800af46:	4291      	cmp	r1, r2
 800af48:	d30e      	bcc.n	800af68 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800af4a:	7922      	ldrb	r2, [r4, #4]
 800af4c:	1c5d      	adds	r5, r3, #1
 800af4e:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800af50:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800af52:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800af54:	b29a      	uxth	r2, r3
 800af56:	1d61      	adds	r1, r4, #5
 800af58:	1970      	adds	r0, r6, r5
 800af5a:	f001 fd0d 	bl	800c978 <memcpy1>
            itr += curElement->PayloadSize;
 800af5e:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800af60:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800af62:	18ed      	adds	r5, r5, r3
 800af64:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800af66:	e7e3      	b.n	800af30 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800af68:	0020      	movs	r0, r4
 800af6a:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800af6c:	f7ff ff70 	bl	800ae50 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800af70:	2c00      	cmp	r4, #0
 800af72:	d1f9      	bne.n	800af68 <LoRaMacCommandsSerializeCmds+0x50>
 800af74:	e7de      	b.n	800af34 <LoRaMacCommandsSerializeCmds+0x1c>
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	20000e44 	.word	0x20000e44

0800af7c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800af7c:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af7e:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00b      	beq.n	800af9c <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800af84:	4a07      	ldr	r2, [pc, #28]	; (800afa4 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800af86:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800af88:	2200      	movs	r2, #0
 800af8a:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d005      	beq.n	800af9c <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800af90:	7b02      	ldrb	r2, [r0, #12]
 800af92:	2a00      	cmp	r2, #0
 800af94:	d003      	beq.n	800af9e <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800af96:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800af98:	2000      	movs	r0, #0
            *cmdsPending = true;
 800af9a:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800af9c:	4770      	bx	lr
        curElement = curElement->Next;
 800af9e:	6800      	ldr	r0, [r0, #0]
 800afa0:	e7f4      	b.n	800af8c <LoRaMacCommandsStickyCmdsPending+0x10>
 800afa2:	46c0      	nop			; (mov r8, r8)
 800afa4:	20000e44 	.word	0x20000e44

0800afa8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800afa8:	3802      	subs	r0, #2
 800afaa:	b2c3      	uxtb	r3, r0
{
 800afac:	2000      	movs	r0, #0
 800afae:	2b11      	cmp	r3, #17
 800afb0:	d801      	bhi.n	800afb6 <LoRaMacCommandsGetCmdSize+0xe>
 800afb2:	4a01      	ldr	r2, [pc, #4]	; (800afb8 <LoRaMacCommandsGetCmdSize+0x10>)
 800afb4:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800afb6:	4770      	bx	lr
 800afb8:	0800f08f 	.word	0x0800f08f

0800afbc <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800afbc:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <GetElement.constprop.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800afc0:	0004      	movs	r4, r0
 800afc2:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800afc4:	6919      	ldr	r1, [r3, #16]
 800afc6:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 800afc8:	2a00      	cmp	r2, #0
 800afca:	d010      	beq.n	800afee <GetElement.constprop.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800afcc:	000d      	movs	r5, r1
 800afce:	2300      	movs	r3, #0
 800afd0:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800afd2:	7806      	ldrb	r6, [r0, #0]
 800afd4:	42a6      	cmp	r6, r4
 800afd6:	d007      	beq.n	800afe8 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800afd8:	42a8      	cmp	r0, r5
 800afda:	d106      	bne.n	800afea <GetElement.constprop.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800afdc:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 800afde:	3301      	adds	r3, #1
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d1f5      	bne.n	800afd2 <GetElement.constprop.0+0x16>
        return NULL;
 800afe6:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800afe8:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800afea:	3004      	adds	r0, #4
 800afec:	e7f7      	b.n	800afde <GetElement.constprop.0+0x22>
        return NULL;
 800afee:	0010      	movs	r0, r2
 800aff0:	e7fa      	b.n	800afe8 <GetElement.constprop.0+0x2c>
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	20000f40 	.word	0x20000f40

0800aff8 <LoRaMacConfirmQueueInit>:

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800aff8:	2300      	movs	r3, #0
{
 800affa:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800affc:	4c08      	ldr	r4, [pc, #32]	; (800b020 <LoRaMacConfirmQueueInit+0x28>)
{
 800affe:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
 800b000:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800b002:	4808      	ldr	r0, [pc, #32]	; (800b024 <LoRaMacConfirmQueueInit+0x2c>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800b004:	2214      	movs	r2, #20
 800b006:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800b008:	7503      	strb	r3, [r0, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800b00a:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b00c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b00e:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800b010:	f001 fcc7 	bl	800c9a2 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800b018:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b01a:	7553      	strb	r3, [r2, #21]
}
 800b01c:	bd70      	pop	{r4, r5, r6, pc}
 800b01e:	46c0      	nop			; (mov r8, r8)
 800b020:	20000f40 	.word	0x20000f40
 800b024:	20000f54 	.word	0x20000f54

0800b028 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800b028:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800b02a:	2000      	movs	r0, #0
{
 800b02c:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800b02e:	4281      	cmp	r1, r0
 800b030:	d004      	beq.n	800b03c <LoRaMacConfirmQueueRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800b032:	4803      	ldr	r0, [pc, #12]	; (800b040 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800b034:	2216      	movs	r2, #22
 800b036:	f001 fc9f 	bl	800c978 <memcpy1>
        return true;
 800b03a:	2001      	movs	r0, #1
    }
}
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	46c0      	nop			; (mov r8, r8)
 800b040:	20000f54 	.word	0x20000f54

0800b044 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800b044:	2316      	movs	r3, #22
 800b046:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 800b048:	4800      	ldr	r0, [pc, #0]	; (800b04c <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 800b04a:	4770      	bx	lr
 800b04c:	20000f54 	.word	0x20000f54

0800b050 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b050:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b052:	4d0d      	ldr	r5, [pc, #52]	; (800b088 <LoRaMacConfirmQueueAdd+0x38>)
{
 800b054:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b056:	6929      	ldr	r1, [r5, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800b058:	2000      	movs	r0, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b05a:	7d0c      	ldrb	r4, [r1, #20]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b05c:	2c04      	cmp	r4, #4
 800b05e:	d812      	bhi.n	800b086 <LoRaMacConfirmQueueAdd+0x36>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b060:	7810      	ldrb	r0, [r2, #0]
 800b062:	68ab      	ldr	r3, [r5, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800b064:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b066:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b068:	7850      	ldrb	r0, [r2, #1]
 800b06a:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b06c:	78d2      	ldrb	r2, [r2, #3]
        bufferPointer++;
 800b06e:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b070:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b072:	2200      	movs	r2, #0
 800b074:	709a      	strb	r2, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b076:	000a      	movs	r2, r1
 800b078:	3210      	adds	r2, #16
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800b07a:	750c      	strb	r4, [r1, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d100      	bne.n	800b082 <LoRaMacConfirmQueueAdd+0x32>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b080:	0008      	movs	r0, r1
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b082:	60a8      	str	r0, [r5, #8]

    return true;
 800b084:	2001      	movs	r0, #1
}
 800b086:	bd30      	pop	{r4, r5, pc}
 800b088:	20000f40 	.word	0x20000f40

0800b08c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b08c:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b08e:	4908      	ldr	r1, [pc, #32]	; (800b0b0 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800b090:	690a      	ldr	r2, [r1, #16]
 800b092:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800b094:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800b096:	d00a      	beq.n	800b0ae <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800b098:	3b01      	subs	r3, #1
 800b09a:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b09c:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b09e:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b0a0:	3310      	adds	r3, #16
        bufferPointer++;
 800b0a2:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	d100      	bne.n	800b0aa <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b0a8:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b0aa:	6048      	str	r0, [r1, #4]

    return true;
 800b0ac:	2001      	movs	r0, #1
}
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	20000f40 	.word	0x20000f40

0800b0b4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b0b4:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800b0b6:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800b0b8:	0004      	movs	r4, r0
    if( count == 0 )
 800b0ba:	691a      	ldr	r2, [r3, #16]
{
 800b0bc:	0008      	movs	r0, r1
    if( count == 0 )
 800b0be:	7d12      	ldrb	r2, [r2, #20]
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	d007      	beq.n	800b0d4 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b0c4:	6859      	ldr	r1, [r3, #4]
 800b0c6:	f7ff ff79 	bl	800afbc <GetElement.constprop.0>
        if( element != NULL )
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d002      	beq.n	800b0d4 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800b0ce:	2301      	movs	r3, #1
            element->Status = status;
 800b0d0:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800b0d2:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800b0d4:	bd10      	pop	{r4, pc}
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	20000f40 	.word	0x20000f40

0800b0dc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b0dc:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800b0de:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0e4:	2201      	movs	r2, #1
    if( count == 0 )
 800b0e6:	2900      	cmp	r1, #0
 800b0e8:	d006      	beq.n	800b0f8 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b0ea:	6859      	ldr	r1, [r3, #4]
 800b0ec:	f7ff ff66 	bl	800afbc <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b0f0:	2201      	movs	r2, #1
        if( element != NULL )
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d000      	beq.n	800b0f8 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800b0f6:	7842      	ldrb	r2, [r0, #1]
}
 800b0f8:	0010      	movs	r0, r2
 800b0fa:	bd10      	pop	{r4, pc}
 800b0fc:	20000f40 	.word	0x20000f40

0800b100 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b100:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b102:	490c      	ldr	r1, [pc, #48]	; (800b134 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800b104:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b106:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 800b108:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800b10a:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 800b10c:	2c00      	cmp	r4, #0
 800b10e:	d00d      	beq.n	800b12c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b110:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800b112:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b114:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b116:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800b118:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800b11a:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b11c:	2e00      	cmp	r6, #0
 800b11e:	d100      	bne.n	800b122 <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800b120:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b122:	42a3      	cmp	r3, r4
 800b124:	d103      	bne.n	800b12e <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800b126:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b128:	4299      	cmp	r1, r3
 800b12a:	d1f5      	bne.n	800b118 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800b12c:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800b12e:	3304      	adds	r3, #4
 800b130:	e7fa      	b.n	800b128 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800b132:	46c0      	nop			; (mov r8, r8)
 800b134:	20000f40 	.word	0x20000f40

0800b138 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800b13a:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b13c:	6859      	ldr	r1, [r3, #4]
 800b13e:	f7ff ff3d 	bl	800afbc <GetElement.constprop.0>
 800b142:	1e43      	subs	r3, r0, #1
 800b144:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800b146:	b2c0      	uxtb	r0, r0
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	46c0      	nop			; (mov r8, r8)
 800b14c:	20000f40 	.word	0x20000f40

0800b150 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b152:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b154:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800b156:	4e13      	ldr	r6, [pc, #76]	; (800b1a4 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800b158:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800b15a:	6933      	ldr	r3, [r6, #16]
 800b15c:	7d1b      	ldrb	r3, [r3, #20]
 800b15e:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800b160:	9b01      	ldr	r3, [sp, #4]
 800b162:	429c      	cmp	r4, r3
 800b164:	d101      	bne.n	800b16a <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800b166:	b005      	add	sp, #20
 800b168:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b16a:	6873      	ldr	r3, [r6, #4]
 800b16c:	7818      	ldrb	r0, [r3, #0]
 800b16e:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b170:	7859      	ldrb	r1, [r3, #1]
 800b172:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b174:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800b176:	2f00      	cmp	r7, #0
 800b178:	d00d      	beq.n	800b196 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b17a:	6833      	ldr	r3, [r6, #0]
 800b17c:	0028      	movs	r0, r5
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800b182:	f7ff ff83 	bl	800b08c <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800b186:	2f00      	cmp	r7, #0
 800b188:	d102      	bne.n	800b190 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b18a:	a803      	add	r0, sp, #12
 800b18c:	f7ff ff60 	bl	800b050 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b190:	3401      	adds	r4, #1
 800b192:	b2e4      	uxtb	r4, r4
 800b194:	e7e4      	b.n	800b160 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b196:	aa03      	add	r2, sp, #12
 800b198:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b19a:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b19c:	78db      	ldrb	r3, [r3, #3]
 800b19e:	70d3      	strb	r3, [r2, #3]
 800b1a0:	e7ef      	b.n	800b182 <LoRaMacConfirmQueueHandleCb+0x32>
 800b1a2:	46c0      	nop			; (mov r8, r8)
 800b1a4:	20000f40 	.word	0x20000f40

0800b1a8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800b1a8:	4b01      	ldr	r3, [pc, #4]	; (800b1b0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	7d18      	ldrb	r0, [r3, #20]
}
 800b1ae:	4770      	bx	lr
 800b1b0:	20000f40 	.word	0x20000f40

0800b1b4 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800b1b4:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b1b6:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <LoRaMacConfirmQueueIsFull+0x10>)
 800b1b8:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b1ba:	7d1b      	ldrb	r3, [r3, #20]
}
 800b1bc:	4298      	cmp	r0, r3
 800b1be:	4180      	sbcs	r0, r0
 800b1c0:	4240      	negs	r0, r0
 800b1c2:	4770      	bx	lr
 800b1c4:	20000f40 	.word	0x20000f40

0800b1c8 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800b1c8:	4770      	bx	lr

0800b1ca <PayloadEncrypt>:
{
 800b1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1cc:	b08d      	sub	sp, #52	; 0x34
 800b1ce:	001d      	movs	r5, r3
 800b1d0:	ab12      	add	r3, sp, #72	; 0x48
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	9001      	str	r0, [sp, #4]
 800b1d6:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800b1d8:	9b01      	ldr	r3, [sp, #4]
{
 800b1da:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b1dc:	200a      	movs	r0, #10
{
 800b1de:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d02b      	beq.n	800b23c <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	220c      	movs	r2, #12
 800b1e8:	0031      	movs	r1, r6
 800b1ea:	a805      	add	r0, sp, #20
 800b1ec:	9604      	str	r6, [sp, #16]
 800b1ee:	f003 f9d6 	bl	800e59e <memset>
    uint8_t aBlock[16] = { 0 };
 800b1f2:	220c      	movs	r2, #12
 800b1f4:	0031      	movs	r1, r6
 800b1f6:	a809      	add	r0, sp, #36	; 0x24
 800b1f8:	9608      	str	r6, [sp, #32]
 800b1fa:	f003 f9d0 	bl	800e59e <memset>
    aBlock[0] = 0x01;
 800b1fe:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800b200:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800b202:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800b204:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800b206:	0a2b      	lsrs	r3, r5, #8
 800b208:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800b20a:	0c2b      	lsrs	r3, r5, #16
 800b20c:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800b20e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800b210:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800b212:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800b218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800b21a:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800b21c:	0c1b      	lsrs	r3, r3, #16
 800b21e:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 800b222:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b224:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800b226:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b228:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800b22a:	0014      	movs	r4, r2
 800b22c:	b2e2      	uxtb	r2, r4
 800b22e:	0113      	lsls	r3, r2, #4
 800b230:	3b10      	subs	r3, #16
 800b232:	b2db      	uxtb	r3, r3
 800b234:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800b236:	2f00      	cmp	r7, #0
 800b238:	dc02      	bgt.n	800b240 <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 800b23a:	2000      	movs	r0, #0
}
 800b23c:	b00d      	add	sp, #52	; 0x34
 800b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800b240:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b242:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800b244:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800b246:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b248:	002b      	movs	r3, r5
 800b24a:	2110      	movs	r1, #16
 800b24c:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800b24e:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b250:	f7fc fb19 	bl	8007886 <SecureElementAesEncrypt>
 800b254:	2800      	cmp	r0, #0
 800b256:	d115      	bne.n	800b284 <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b258:	1c39      	adds	r1, r7, #0
 800b25a:	1c0b      	adds	r3, r1, #0
 800b25c:	2f10      	cmp	r7, #16
 800b25e:	dd00      	ble.n	800b262 <PayloadEncrypt+0x98>
 800b260:	2310      	movs	r3, #16
 800b262:	b21b      	sxth	r3, r3
 800b264:	4298      	cmp	r0, r3
 800b266:	db02      	blt.n	800b26e <PayloadEncrypt+0xa4>
        size -= 16;
 800b268:	3f10      	subs	r7, #16
 800b26a:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800b26c:	e7de      	b.n	800b22c <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b26e:	9b02      	ldr	r3, [sp, #8]
 800b270:	5c2e      	ldrb	r6, [r5, r0]
 800b272:	181a      	adds	r2, r3, r0
 800b274:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b276:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b278:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b27a:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b27c:	4073      	eors	r3, r6
 800b27e:	9e01      	ldr	r6, [sp, #4]
 800b280:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b282:	e7ea      	b.n	800b25a <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b284:	200f      	movs	r0, #15
 800b286:	e7d9      	b.n	800b23c <PayloadEncrypt+0x72>

0800b288 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800b288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800b28a:	2100      	movs	r1, #0
 800b28c:	220c      	movs	r2, #12
 800b28e:	a801      	add	r0, sp, #4
 800b290:	9100      	str	r1, [sp, #0]
 800b292:	f003 f984 	bl	800e59e <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b296:	4b06      	ldr	r3, [pc, #24]	; (800b2b0 <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800b298:	2204      	movs	r2, #4
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	4669      	mov	r1, sp
 800b29e:	237f      	movs	r3, #127	; 0x7f
 800b2a0:	6800      	ldr	r0, [r0, #0]
 800b2a2:	f7fc fb62 	bl	800796a <SecureElementDeriveAndStoreKey>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d000      	beq.n	800b2ac <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b2aa:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b2ac:	b005      	add	sp, #20
 800b2ae:	bd00      	pop	{pc}
 800b2b0:	20000f6c 	.word	0x20000f6c

0800b2b4 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800b2b4:	3801      	subs	r0, #1
 800b2b6:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800b2b8:	b500      	push	{lr}
    switch( fCntID )
 800b2ba:	2803      	cmp	r0, #3
 800b2bc:	d80b      	bhi.n	800b2d6 <GetLastFcntDown.constprop.0+0x22>
 800b2be:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <GetLastFcntDown.constprop.0+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800b2c0:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800b2c2:	f7f4 ff29 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b2c6:	0a02      	.short	0x0a02
 800b2c8:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800b2ca:	691a      	ldr	r2, [r3, #16]
 800b2cc:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800b2ce:	001a      	movs	r2, r3
 800b2d0:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800b2d2:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800b2da:	695a      	ldr	r2, [r3, #20]
 800b2dc:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800b2de:	001a      	movs	r2, r3
 800b2e0:	3214      	adds	r2, #20
 800b2e2:	e7f6      	b.n	800b2d2 <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800b2e8:	001a      	movs	r2, r3
 800b2ea:	3218      	adds	r2, #24
 800b2ec:	e7f1      	b.n	800b2d2 <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	600b      	str	r3, [r1, #0]
 800b2f2:	e7ef      	b.n	800b2d4 <GetLastFcntDown.constprop.0+0x20>
 800b2f4:	20000f6c 	.word	0x20000f6c

0800b2f8 <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800b2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2fa:	b0c7      	sub	sp, #284	; 0x11c
 800b2fc:	0007      	movs	r7, r0
 800b2fe:	000c      	movs	r4, r1
 800b300:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b302:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800b304:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 800b306:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800b308:	2f00      	cmp	r7, #0
 800b30a:	d037      	beq.n	800b37c <VerifyCmacB0.constprop.0.isra.0+0x84>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b30c:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b30e:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	4299      	cmp	r1, r3
 800b314:	d832      	bhi.n	800b37c <VerifyCmacB0.constprop.0.isra.0+0x84>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800b316:	2288      	movs	r2, #136	; 0x88
 800b318:	2100      	movs	r1, #0
 800b31a:	0052      	lsls	r2, r2, #1
 800b31c:	a802      	add	r0, sp, #8
 800b31e:	f001 fb40 	bl	800c9a2 <memset1>
    b0[0] = 0x49;
 800b322:	2349      	movs	r3, #73	; 0x49
 800b324:	aa02      	add	r2, sp, #8
 800b326:	7013      	strb	r3, [r2, #0]
        b0[1] = 0x00;
 800b328:	2300      	movs	r3, #0
 800b32a:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
 800b32c:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800b32e:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 800b330:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 800b332:	2201      	movs	r2, #1
 800b334:	a902      	add	r1, sp, #8
 800b336:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b338:	0a2a      	lsrs	r2, r5, #8
 800b33a:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b33c:	0c2a      	lsrs	r2, r5, #16
 800b33e:	720a      	strb	r2, [r1, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b340:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 800b342:	718d      	strb	r5, [r1, #6]
    b0[10] = fCnt & 0xFF;
 800b344:	728e      	strb	r6, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b346:	72ca      	strb	r2, [r1, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b348:	0e2d      	lsrs	r5, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b34a:	0c32      	lsrs	r2, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b34c:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b34e:	730a      	strb	r2, [r1, #12]
    b0[14] = 0x00;
 800b350:	738b      	strb	r3, [r1, #14]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800b352:	0022      	movs	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b354:	724d      	strb	r5, [r1, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b356:	734e      	strb	r6, [r1, #13]
    b0[15] = msgLen & 0xFF;
 800b358:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800b35a:	a806      	add	r0, sp, #24
 800b35c:	0039      	movs	r1, r7
 800b35e:	f001 fb0b 	bl	800c978 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800b362:	0021      	movs	r1, r4
 800b364:	3110      	adds	r1, #16
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800b36a:	b289      	uxth	r1, r1
 800b36c:	a802      	add	r0, sp, #8
 800b36e:	f7fc fa72 	bl	8007856 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800b372:	2800      	cmp	r0, #0
 800b374:	d002      	beq.n	800b37c <VerifyCmacB0.constprop.0.isra.0+0x84>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800b376:	2801      	cmp	r0, #1
 800b378:	d000      	beq.n	800b37c <VerifyCmacB0.constprop.0.isra.0+0x84>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b37a:	200f      	movs	r0, #15
}
 800b37c:	b047      	add	sp, #284	; 0x11c
 800b37e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b380 <LoRaMacCryptoInit>:
{
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	1e03      	subs	r3, r0, #0
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800b384:	4c0d      	ldr	r4, [pc, #52]	; (800b3bc <LoRaMacCryptoInit+0x3c>)
 800b386:	480e      	ldr	r0, [pc, #56]	; (800b3c0 <LoRaMacCryptoInit+0x40>)
 800b388:	6020      	str	r0, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 800b38a:	d100      	bne.n	800b38e <LoRaMacCryptoInit+0xe>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <LoRaMacCryptoInit+0x44>)
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800b38e:	2224      	movs	r2, #36	; 0x24
 800b390:	2100      	movs	r1, #0
 800b392:	6063      	str	r3, [r4, #4]
 800b394:	f001 fb05 	bl	800c9a2 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800b398:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800b39a:	4a0b      	ldr	r2, [pc, #44]	; (800b3c8 <LoRaMacCryptoInit+0x48>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800b39c:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800b39e:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3a0:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800b3a2:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3a4:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800b3a6:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800b3a8:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3aa:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3ac:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3ae:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800b3b0:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800b3b2:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800b3b4:	6863      	ldr	r3, [r4, #4]
 800b3b6:	4798      	blx	r3
}
 800b3b8:	0028      	movs	r0, r5
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	20000f6c 	.word	0x20000f6c
 800b3c0:	20000f74 	.word	0x20000f74
 800b3c4:	0800b1c9 	.word	0x0800b1c9
 800b3c8:	01010100 	.word	0x01010100

0800b3cc <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800b3cc:	4b02      	ldr	r3, [pc, #8]	; (800b3d8 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6018      	str	r0, [r3, #0]
}
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	4770      	bx	lr
 800b3d6:	46c0      	nop			; (mov r8, r8)
 800b3d8:	20000f6c 	.word	0x20000f6c

0800b3dc <LoRaMacCryptoRestoreNvmCtx>:
{
 800b3dc:	0001      	movs	r1, r0
 800b3de:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b3e0:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800b3e2:	2900      	cmp	r1, #0
 800b3e4:	d004      	beq.n	800b3f0 <LoRaMacCryptoRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800b3e6:	4803      	ldr	r0, [pc, #12]	; (800b3f4 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800b3e8:	2224      	movs	r2, #36	; 0x24
 800b3ea:	f001 fac5 	bl	800c978 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800b3ee:	2000      	movs	r0, #0
}
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	20000f74 	.word	0x20000f74

0800b3f8 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800b3f8:	2324      	movs	r3, #36	; 0x24
 800b3fa:	6003      	str	r3, [r0, #0]
}
 800b3fc:	4800      	ldr	r0, [pc, #0]	; (800b400 <LoRaMacCryptoGetNvmCtx+0x8>)
 800b3fe:	4770      	bx	lr
 800b400:	20000f74 	.word	0x20000f74

0800b404 <LoRaMacCryptoGetFCntUp>:
{
 800b404:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b406:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d005      	beq.n	800b418 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800b40c:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800b40e:	4a03      	ldr	r2, [pc, #12]	; (800b41c <LoRaMacCryptoGetFCntUp+0x18>)
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	68d2      	ldr	r2, [r2, #12]
 800b414:	3201      	adds	r2, #1
 800b416:	601a      	str	r2, [r3, #0]
}
 800b418:	4770      	bx	lr
 800b41a:	46c0      	nop			; (mov r8, r8)
 800b41c:	20000f6c 	.word	0x20000f6c

0800b420 <LoRaMacCryptoGetFCntDown>:
{
 800b420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b422:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800b424:	2300      	movs	r3, #0
{
 800b426:	0006      	movs	r6, r0
 800b428:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b42a:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800b42c:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800b42e:	429c      	cmp	r4, r3
 800b430:	d006      	beq.n	800b440 <LoRaMacCryptoGetFCntDown+0x20>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800b432:	0030      	movs	r0, r6
 800b434:	a901      	add	r1, sp, #4
 800b436:	f7ff ff3d 	bl	800b2b4 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d100      	bne.n	800b440 <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
 800b43e:	6025      	str	r5, [r4, #0]
}
 800b440:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

0800b444 <LoRaMacCryptoSetMulticastReference>:
{
 800b444:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b446:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800b44c:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800b44e:	4a02      	ldr	r2, [pc, #8]	; (800b458 <LoRaMacCryptoSetMulticastReference+0x14>)
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	321c      	adds	r2, #28
 800b454:	621a      	str	r2, [r3, #32]
}
 800b456:	4770      	bx	lr
 800b458:	20000f6c 	.word	0x20000f6c

0800b45c <LoRaMacCryptoPrepareJoinRequest>:
{
 800b45c:	b530      	push	{r4, r5, lr}
 800b45e:	0004      	movs	r4, r0
 800b460:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b462:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800b464:	2c00      	cmp	r4, #0
 800b466:	d024      	beq.n	800b4b2 <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800b468:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800b46a:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800b46c:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800b46e:	f7fc fa9d 	bl	80079ac <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800b472:	4d11      	ldr	r5, [pc, #68]	; (800b4b8 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	682a      	ldr	r2, [r5, #0]
 800b478:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800b47a:	686b      	ldr	r3, [r5, #4]
 800b47c:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800b47e:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b480:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800b482:	889b      	ldrh	r3, [r3, #4]
 800b484:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b486:	f000 f971 	bl	800b76c <LoRaMacSerializerJoinRequest>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d110      	bne.n	800b4b0 <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800b48e:	0023      	movs	r3, r4
 800b490:	3318      	adds	r3, #24
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	2213      	movs	r2, #19
 800b496:	2301      	movs	r3, #1
 800b498:	6821      	ldr	r1, [r4, #0]
 800b49a:	f7fc f9d1 	bl	8007840 <SecureElementComputeAesCmac>
 800b49e:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b4a0:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d105      	bne.n	800b4b2 <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b4a6:	0020      	movs	r0, r4
 800b4a8:	f000 f960 	bl	800b76c <LoRaMacSerializerJoinRequest>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d000      	beq.n	800b4b2 <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b4b0:	2011      	movs	r0, #17
}
 800b4b2:	b005      	add	sp, #20
 800b4b4:	bd30      	pop	{r4, r5, pc}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	20000f6c 	.word	0x20000f6c

0800b4bc <LoRaMacCryptoSecureMessage>:
{
 800b4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4be:	0006      	movs	r6, r0
 800b4c0:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b4c2:	240a      	movs	r4, #10
{
 800b4c4:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d01f      	beq.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800b4ca:	4b2f      	ldr	r3, [pc, #188]	; (800b588 <LoRaMacCryptoSecureMessage+0xcc>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b4cc:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	4283      	cmp	r3, r0
 800b4d4:	d819      	bhi.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800b4d6:	1c6a      	adds	r2, r5, #1
 800b4d8:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800b4da:	1e51      	subs	r1, r2, #1
 800b4dc:	418a      	sbcs	r2, r1
 800b4de:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800b4e0:	4283      	cmp	r3, r0
 800b4e2:	d306      	bcc.n	800b4f2 <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b4e4:	0028      	movs	r0, r5
 800b4e6:	f000 f976 	bl	800b7d6 <LoRaMacSerializerData>
 800b4ea:	1e03      	subs	r3, r0, #0
 800b4ec:	d010      	beq.n	800b510 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b4ee:	2411      	movs	r4, #17
 800b4f0:	e00b      	b.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800b4f2:	002b      	movs	r3, r5
 800b4f4:	3328      	adds	r3, #40	; 0x28
 800b4f6:	7819      	ldrb	r1, [r3, #0]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9001      	str	r0, [sp, #4]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b500:	68ab      	ldr	r3, [r5, #8]
 800b502:	f7ff fe62 	bl	800b1ca <PayloadEncrypt>
 800b506:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b508:	d0ec      	beq.n	800b4e4 <LoRaMacCryptoSecureMessage+0x28>
}
 800b50a:	0020      	movs	r0, r4
 800b50c:	b009      	add	sp, #36	; 0x24
 800b50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b510:	792f      	ldrb	r7, [r5, #4]
 800b512:	6829      	ldr	r1, [r5, #0]
 800b514:	3f04      	subs	r7, #4
 800b516:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b518:	240a      	movs	r4, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b51a:	9203      	str	r2, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b51c:	2900      	cmp	r1, #0
 800b51e:	d0f4      	beq.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b520:	2080      	movs	r0, #128	; 0x80
 800b522:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b524:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b526:	0040      	lsls	r0, r0, #1
 800b528:	4282      	cmp	r2, r0
 800b52a:	d8ee      	bhi.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800b52c:	2249      	movs	r2, #73	; 0x49
 800b52e:	a804      	add	r0, sp, #16
        b0[1] = 0x00;
 800b530:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 800b532:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 800b534:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 800b536:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 800b538:	7143      	strb	r3, [r0, #5]
    b0[14] = 0x00;
 800b53a:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b53c:	002b      	movs	r3, r5
 800b53e:	68ac      	ldr	r4, [r5, #8]
    b0[0] = 0x49;
 800b540:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b542:	0a22      	lsrs	r2, r4, #8
    b0[6] = devAddr & 0xFF;
 800b544:	7184      	strb	r4, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b546:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b548:	0c22      	lsrs	r2, r4, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b54a:	0e24      	lsrs	r4, r4, #24
 800b54c:	7244      	strb	r4, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b54e:	0a34      	lsrs	r4, r6, #8
 800b550:	72c4      	strb	r4, [r0, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b552:	0c34      	lsrs	r4, r6, #16
 800b554:	7304      	strb	r4, [r0, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b556:	332c      	adds	r3, #44	; 0x2c
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b558:	0e34      	lsrs	r4, r6, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b55a:	7202      	strb	r2, [r0, #8]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b55c:	7344      	strb	r4, [r0, #13]
    b0[10] = fCnt & 0xFF;
 800b55e:	7286      	strb	r6, [r0, #10]
    b0[15] = msgLen & 0xFF;
 800b560:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b562:	9a03      	ldr	r2, [sp, #12]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	2302      	movs	r3, #2
 800b568:	f7fc f96a 	bl	8007840 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b56c:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b56e:	2800      	cmp	r0, #0
 800b570:	d1cb      	bne.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b572:	0028      	movs	r0, r5
 800b574:	f000 f92f 	bl	800b7d6 <LoRaMacSerializerData>
 800b578:	1e04      	subs	r4, r0, #0
 800b57a:	d1b8      	bne.n	800b4ee <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800b57c:	4b02      	ldr	r3, [pc, #8]	; (800b588 <LoRaMacCryptoSecureMessage+0xcc>)
 800b57e:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800b580:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800b582:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800b584:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800b586:	e7c0      	b.n	800b50a <LoRaMacCryptoSecureMessage+0x4e>
 800b588:	20000f6c 	.word	0x20000f6c

0800b58c <LoRaMacCryptoUnsecureMessage>:
{
 800b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b58e:	b087      	sub	sp, #28
 800b590:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b592:	000f      	movs	r7, r1
 800b594:	001e      	movs	r6, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b596:	240a      	movs	r4, #10
{
 800b598:	9002      	str	r0, [sp, #8]
 800b59a:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	d04a      	beq.n	800b636 <LoRaMacCryptoUnsecureMessage+0xaa>
    uint32_t lastDown = 0;
 800b5a0:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b5a2:	0010      	movs	r0, r2
 800b5a4:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800b5a6:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b5a8:	f7ff fe84 	bl	800b2b4 <GetLastFcntDown.constprop.0>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b5ac:	0028      	movs	r0, r5
 800b5ae:	f000 f882 	bl	800b6b6 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800b5b2:	3406      	adds	r4, #6
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d13e      	bne.n	800b636 <LoRaMacCryptoUnsecureMessage+0xaa>
        if( KeyAddrList[i].AddrID == addrID )
 800b5b8:	4b23      	ldr	r3, [pc, #140]	; (800b648 <LoRaMacCryptoUnsecureMessage+0xbc>)
 800b5ba:	9902      	ldr	r1, [sp, #8]
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	428a      	cmp	r2, r1
 800b5c0:	d004      	beq.n	800b5cc <LoRaMacCryptoUnsecureMessage+0x40>
 800b5c2:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b5c4:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 800b5c6:	428a      	cmp	r2, r1
 800b5c8:	d135      	bne.n	800b636 <LoRaMacCryptoUnsecureMessage+0xaa>
 800b5ca:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800b5cc:	68aa      	ldr	r2, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800b5ce:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800b5d0:	42ba      	cmp	r2, r7
 800b5d2:	d130      	bne.n	800b636 <LoRaMacCryptoUnsecureMessage+0xaa>
    payloadDecryptionKeyID = curItem->AppSkey;
 800b5d4:	40a0      	lsls	r0, r4
 800b5d6:	1818      	adds	r0, r3, r0
 800b5d8:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800b5da:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800b5dc:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800b5de:	7929      	ldrb	r1, [r5, #4]
 800b5e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b5e2:	3904      	subs	r1, #4
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	9600      	str	r6, [sp, #0]
 800b5e8:	003b      	movs	r3, r7
 800b5ea:	6828      	ldr	r0, [r5, #0]
 800b5ec:	b289      	uxth	r1, r1
 800b5ee:	f7ff fe83 	bl	800b2f8 <VerifyCmacB0.constprop.0.isra.0>
 800b5f2:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b5f4:	d11f      	bne.n	800b636 <LoRaMacCryptoUnsecureMessage+0xaa>
    if( macMsg->FPort == 0 )
 800b5f6:	1c6b      	adds	r3, r5, #1
 800b5f8:	7fdb      	ldrb	r3, [r3, #31]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <LoRaMacCryptoUnsecureMessage+0x76>
        payloadDecryptionKeyID = NWK_S_KEY;
 800b5fe:	3302      	adds	r3, #2
 800b600:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800b602:	002b      	movs	r3, r5
 800b604:	3328      	adds	r3, #40	; 0x28
 800b606:	7819      	ldrb	r1, [r3, #0]
 800b608:	2301      	movs	r3, #1
 800b60a:	9601      	str	r6, [sp, #4]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	9a02      	ldr	r2, [sp, #8]
 800b610:	003b      	movs	r3, r7
 800b612:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b614:	f7ff fdd9 	bl	800b1ca <PayloadEncrypt>
 800b618:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b61a:	d10c      	bne.n	800b636 <LoRaMacCryptoUnsecureMessage+0xaa>
    switch( fCntID )
 800b61c:	9803      	ldr	r0, [sp, #12]
 800b61e:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <LoRaMacCryptoUnsecureMessage+0xc0>)
 800b620:	3801      	subs	r0, #1
 800b622:	2803      	cmp	r0, #3
 800b624:	d805      	bhi.n	800b632 <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800b626:	681a      	ldr	r2, [r3, #0]
    switch( fCntID )
 800b628:	f7f4 fd76 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b62c:	0c0a0802 	.word	0x0c0a0802
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800b630:	6116      	str	r6, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	4798      	blx	r3
}
 800b636:	0020      	movs	r0, r4
 800b638:	b007      	add	sp, #28
 800b63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800b63c:	6156      	str	r6, [r2, #20]
            break;
 800b63e:	e7f8      	b.n	800b632 <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800b640:	6196      	str	r6, [r2, #24]
            break;
 800b642:	e7f6      	b.n	800b632 <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800b644:	61d6      	str	r6, [r2, #28]
            break;
 800b646:	e7f4      	b.n	800b632 <LoRaMacCryptoUnsecureMessage+0xa6>
 800b648:	200001b8 	.word	0x200001b8
 800b64c:	20000f6c 	.word	0x20000f6c

0800b650 <LoRaMacCryptoDeriveMcRootKey>:
{
 800b650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b652:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800b654:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800b656:	2900      	cmp	r1, #0
 800b658:	d115      	bne.n	800b686 <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 800b65a:	220c      	movs	r2, #12
 800b65c:	a801      	add	r0, sp, #4
 800b65e:	9100      	str	r1, [sp, #0]
 800b660:	f002 ff9d 	bl	800e59e <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800b664:	4b09      	ldr	r3, [pc, #36]	; (800b68c <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	7883      	ldrb	r3, [r0, #2]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d102      	bne.n	800b674 <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 800b66e:	466a      	mov	r2, sp
 800b670:	331f      	adds	r3, #31
 800b672:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b674:	2304      	movs	r3, #4
 800b676:	2200      	movs	r2, #0
 800b678:	4669      	mov	r1, sp
 800b67a:	6800      	ldr	r0, [r0, #0]
 800b67c:	f7fc f975 	bl	800796a <SecureElementDeriveAndStoreKey>
 800b680:	2800      	cmp	r0, #0
 800b682:	d000      	beq.n	800b686 <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b684:	200f      	movs	r0, #15
}
 800b686:	b005      	add	sp, #20
 800b688:	bd00      	pop	{pc}
 800b68a:	46c0      	nop			; (mov r8, r8)
 800b68c:	20000f6c 	.word	0x20000f6c

0800b690 <LoRaMacCryptoSetKey>:
{
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800b694:	f7fc f960 	bl	8007958 <SecureElementSetKey>
 800b698:	1e04      	subs	r4, r0, #0
 800b69a:	d109      	bne.n	800b6b0 <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	d108      	bne.n	800b6b2 <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800b6a0:	f7ff ffd6 	bl	800b650 <LoRaMacCryptoDeriveMcRootKey>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d103      	bne.n	800b6b0 <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 800b6a8:	f7ff fdee 	bl	800b288 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d000      	beq.n	800b6b2 <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b6b0:	240f      	movs	r4, #15
}
 800b6b2:	0020      	movs	r0, r4
 800b6b4:	bd70      	pop	{r4, r5, r6, pc}

0800b6b6 <LoRaMacParserData>:

    return LORAMAC_PARSER_SUCCESS;
}

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800b6b6:	b570      	push	{r4, r5, r6, lr}
 800b6b8:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800b6ba:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b6bc:	2c00      	cmp	r4, #0
 800b6be:	d054      	beq.n	800b76a <LoRaMacParserData+0xb4>
 800b6c0:	6821      	ldr	r1, [r4, #0]
 800b6c2:	2900      	cmp	r1, #0
 800b6c4:	d051      	beq.n	800b76a <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800b6c6:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800b6c8:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800b6ca:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800b6cc:	7848      	ldrb	r0, [r1, #1]
 800b6ce:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800b6d0:	788a      	ldrb	r2, [r1, #2]
 800b6d2:	0212      	lsls	r2, r2, #8
 800b6d4:	4310      	orrs	r0, r2
 800b6d6:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800b6d8:	78cb      	ldrb	r3, [r1, #3]
 800b6da:	041b      	lsls	r3, r3, #16
 800b6dc:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b6de:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800b6e0:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b6e2:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b6e4:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b6e6:	0612      	lsls	r2, r2, #24
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800b6ec:	794b      	ldrb	r3, [r1, #5]
 800b6ee:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800b6f0:	798b      	ldrb	r3, [r1, #6]
 800b6f2:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b6f4:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b6f6:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b6f8:	0212      	lsls	r2, r2, #8
 800b6fa:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b6fc:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b6fe:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b700:	0712      	lsls	r2, r2, #28
 800b702:	0f12      	lsrs	r2, r2, #28
 800b704:	f001 f938 	bl	800c978 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b708:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800b70a:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800b70c:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b70e:	0709      	lsls	r1, r1, #28
 800b710:	0f09      	lsrs	r1, r1, #28
 800b712:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800b714:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800b716:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800b718:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800b71a:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b71c:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800b71e:	1b93      	subs	r3, r2, r6
 800b720:	2b04      	cmp	r3, #4
 800b722:	dd0c      	ble.n	800b73e <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b728:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b72a:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b72c:	1a52      	subs	r2, r2, r1
 800b72e:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b730:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b732:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800b734:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b736:	b292      	uxth	r2, r2
 800b738:	1859      	adds	r1, r3, r1
 800b73a:	f001 f91d 	bl	800c978 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800b73e:	6822      	ldr	r2, [r4, #0]
 800b740:	7923      	ldrb	r3, [r4, #4]
 800b742:	18d3      	adds	r3, r2, r3
 800b744:	1f1a      	subs	r2, r3, #4
 800b746:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800b748:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800b74a:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800b74c:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b74e:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800b750:	0209      	lsls	r1, r1, #8
 800b752:	4308      	orrs	r0, r1
 800b754:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b756:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800b758:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b75a:	0412      	lsls	r2, r2, #16
 800b75c:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 800b75e:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b760:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	061b      	lsls	r3, r3, #24
 800b766:	431a      	orrs	r2, r3
 800b768:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800b76a:	bd70      	pop	{r4, r5, r6, pc}

0800b76c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800b76c:	b510      	push	{r4, lr}
 800b76e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b770:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b772:	2c00      	cmp	r4, #0
 800b774:	d02e      	beq.n	800b7d4 <LoRaMacSerializerJoinRequest+0x68>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d02b      	beq.n	800b7d4 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800b77c:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b77e:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800b780:	2a16      	cmp	r2, #22
 800b782:	d927      	bls.n	800b7d4 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b784:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b786:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b788:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	2208      	movs	r2, #8
 800b78e:	1c58      	adds	r0, r3, #1
 800b790:	f001 f8fb 	bl	800c98a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800b794:	0021      	movs	r1, r4
 800b796:	6820      	ldr	r0, [r4, #0]
 800b798:	2208      	movs	r2, #8
 800b79a:	3009      	adds	r0, #9
 800b79c:	310e      	adds	r1, #14
 800b79e:	f001 f8f4 	bl	800c98a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b7a2:	8ae3      	ldrh	r3, [r4, #22]
 800b7a4:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b7a6:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b7a8:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800b7aa:	8ae3      	ldrh	r3, [r4, #22]
 800b7ac:	6822      	ldr	r2, [r4, #0]
 800b7ae:	0a1b      	lsrs	r3, r3, #8
 800b7b0:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b7b2:	69a3      	ldr	r3, [r4, #24]
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b7b8:	69a3      	ldr	r3, [r4, #24]
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	0a1b      	lsrs	r3, r3, #8
 800b7be:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b7c0:	69a3      	ldr	r3, [r4, #24]
 800b7c2:	6822      	ldr	r2, [r4, #0]
 800b7c4:	0c1b      	lsrs	r3, r3, #16
 800b7c6:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b7c8:	69a3      	ldr	r3, [r4, #24]
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	0e1b      	lsrs	r3, r3, #24
 800b7ce:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800b7d0:	2317      	movs	r3, #23
 800b7d2:	7123      	strb	r3, [r4, #4]
}
 800b7d4:	bd10      	pop	{r4, pc}

0800b7d6 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800b7d6:	b570      	push	{r4, r5, r6, lr}
 800b7d8:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b7da:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b7dc:	2c00      	cmp	r4, #0
 800b7de:	d068      	beq.n	800b8b2 <LoRaMacSerializerData+0xdc>
 800b7e0:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b7e2:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b7e4:	2900      	cmp	r1, #0
 800b7e6:	d064      	beq.n	800b8b2 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800b7e8:	0025      	movs	r5, r4
 800b7ea:	3528      	adds	r5, #40	; 0x28
 800b7ec:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b7ee:	7b22      	ldrb	r2, [r4, #12]
 800b7f0:	0003      	movs	r3, r0
 800b7f2:	1e5e      	subs	r6, r3, #1
 800b7f4:	41b3      	sbcs	r3, r6
 800b7f6:	0712      	lsls	r2, r2, #28
 800b7f8:	0f12      	lsrs	r2, r2, #28
 800b7fa:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b7fc:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b7fe:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b800:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800b802:	7922      	ldrb	r2, [r4, #4]
 800b804:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b806:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800b808:	429a      	cmp	r2, r3
 800b80a:	d352      	bcc.n	800b8b2 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b80c:	7963      	ldrb	r3, [r4, #5]
 800b80e:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b810:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b812:	68a3      	ldr	r3, [r4, #8]
 800b814:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b816:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b818:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800b81a:	68a3      	ldr	r3, [r4, #8]
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	0a1b      	lsrs	r3, r3, #8
 800b820:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	6822      	ldr	r2, [r4, #0]
 800b826:	0c1b      	lsrs	r3, r3, #16
 800b828:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	0e1b      	lsrs	r3, r3, #24
 800b830:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800b832:	7b23      	ldrb	r3, [r4, #12]
 800b834:	6822      	ldr	r2, [r4, #0]
 800b836:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800b838:	89e3      	ldrh	r3, [r4, #14]
 800b83a:	6822      	ldr	r2, [r4, #0]
 800b83c:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800b83e:	89e3      	ldrh	r3, [r4, #14]
 800b840:	6822      	ldr	r2, [r4, #0]
 800b842:	0a1b      	lsrs	r3, r3, #8
 800b844:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b846:	7b22      	ldrb	r2, [r4, #12]
 800b848:	6820      	ldr	r0, [r4, #0]
 800b84a:	0712      	lsls	r2, r2, #28
 800b84c:	0f12      	lsrs	r2, r2, #28
 800b84e:	3008      	adds	r0, #8
 800b850:	f001 f892 	bl	800c978 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b854:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800b856:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b858:	071b      	lsls	r3, r3, #28
 800b85a:	0f1b      	lsrs	r3, r3, #28
 800b85c:	001e      	movs	r6, r3
 800b85e:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800b860:	2a00      	cmp	r2, #0
 800b862:	d005      	beq.n	800b870 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800b864:	1c62      	adds	r2, r4, #1
 800b866:	7fd2      	ldrb	r2, [r2, #31]
 800b868:	6821      	ldr	r1, [r4, #0]
 800b86a:	3309      	adds	r3, #9
 800b86c:	558a      	strb	r2, [r1, r6]
 800b86e:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	782a      	ldrb	r2, [r5, #0]
 800b874:	1998      	adds	r0, r3, r6
 800b876:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b878:	f001 f87e 	bl	800c978 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b87c:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b87e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b880:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b882:	18f3      	adds	r3, r6, r3
 800b884:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b886:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b888:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b88a:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b88c:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b88e:	b292      	uxth	r2, r2
 800b890:	0a09      	lsrs	r1, r1, #8
 800b892:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b894:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b896:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b898:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b89a:	b292      	uxth	r2, r2
 800b89c:	0c09      	lsrs	r1, r1, #16
 800b89e:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b8a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b8a2:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b8a4:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	0e09      	lsrs	r1, r1, #24
 800b8aa:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b8ac:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b8ae:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800b8b0:	7123      	strb	r3, [r4, #4]
}
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}

0800b8b4 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b8b4:	3801      	subs	r0, #1
 800b8b6:	4243      	negs	r3, r0
 800b8b8:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800b8ba:	b2c0      	uxtb	r0, r0
 800b8bc:	4770      	bx	lr

0800b8be <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b8be:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800b8c0:	2801      	cmp	r0, #1
 800b8c2:	d105      	bne.n	800b8d0 <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 800b8c4:	0008      	movs	r0, r1
 800b8c6:	f000 f911 	bl	800baec <RegionAU915GetPhyParam>
 800b8ca:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800b8cc:	9801      	ldr	r0, [sp, #4]
 800b8ce:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	e7fa      	b.n	800b8cc <RegionGetPhyParam+0xe>

0800b8d6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b8d6:	b510      	push	{r4, lr}
    switch( region )
 800b8d8:	2801      	cmp	r0, #1
 800b8da:	d102      	bne.n	800b8e2 <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 800b8dc:	0008      	movs	r0, r1
 800b8de:	f000 f9b9 	bl	800bc54 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800b8e2:	bd10      	pop	{r4, pc}

0800b8e4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b8e4:	b510      	push	{r4, lr}
    switch( region )
 800b8e6:	2801      	cmp	r0, #1
 800b8e8:	d102      	bne.n	800b8f0 <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 800b8ea:	0008      	movs	r0, r1
 800b8ec:	f000 f9ca 	bl	800bc84 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800b8f2:	2300      	movs	r3, #0
{
 800b8f4:	b510      	push	{r4, lr}
    switch( region )
 800b8f6:	2801      	cmp	r0, #1
 800b8f8:	d103      	bne.n	800b902 <RegionGetNvmCtx+0x10>
        AU915_GET_NVM_CTX( );
 800b8fa:	0008      	movs	r0, r1
 800b8fc:	f000 fa3c 	bl	800bd78 <RegionAU915GetNvmCtx>
 800b900:	0003      	movs	r3, r0
        }
    }
}
 800b902:	0018      	movs	r0, r3
 800b904:	bd10      	pop	{r4, pc}

0800b906 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b906:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800b908:	2300      	movs	r3, #0
{
 800b90a:	0004      	movs	r4, r0
 800b90c:	0008      	movs	r0, r1
 800b90e:	0011      	movs	r1, r2
    switch( region )
 800b910:	2c01      	cmp	r4, #1
 800b912:	d102      	bne.n	800b91a <RegionVerify+0x14>
        AU915_VERIFY( );
 800b914:	f000 fa38 	bl	800bd88 <RegionAU915Verify>
 800b918:	0003      	movs	r3, r0
        }
    }
}
 800b91a:	0018      	movs	r0, r3
 800b91c:	bd10      	pop	{r4, pc}

0800b91e <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800b91e:	2300      	movs	r3, #0
{
 800b920:	b510      	push	{r4, lr}
    switch( region )
 800b922:	2801      	cmp	r0, #1
 800b924:	d103      	bne.n	800b92e <RegionChanMaskSet+0x10>
        AU915_CHAN_MASK_SET( );
 800b926:	0008      	movs	r0, r1
 800b928:	f000 fa58 	bl	800bddc <RegionAU915ChanMaskSet>
 800b92c:	0003      	movs	r3, r0
        }
    }
}
 800b92e:	0018      	movs	r0, r3
 800b930:	bd10      	pop	{r4, pc}

0800b932 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b932:	b510      	push	{r4, lr}
 800b934:	0004      	movs	r4, r0
 800b936:	0008      	movs	r0, r1
 800b938:	0011      	movs	r1, r2
 800b93a:	001a      	movs	r2, r3
    switch( region )
 800b93c:	2c01      	cmp	r4, #1
 800b93e:	d102      	bne.n	800b946 <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b940:	9b02      	ldr	r3, [sp, #8]
 800b942:	f000 fa77 	bl	800be34 <RegionAU915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800b946:	bd10      	pop	{r4, pc}

0800b948 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b948:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800b94a:	2300      	movs	r3, #0
{
 800b94c:	0004      	movs	r4, r0
 800b94e:	0008      	movs	r0, r1
 800b950:	0011      	movs	r1, r2
    switch( region )
 800b952:	2c01      	cmp	r4, #1
 800b954:	d102      	bne.n	800b95c <RegionRxConfig+0x14>
        AU915_RX_CONFIG( );
 800b956:	f000 fa9b 	bl	800be90 <RegionAU915RxConfig>
 800b95a:	0003      	movs	r3, r0
        }
    }
}
 800b95c:	0018      	movs	r0, r3
 800b95e:	bd10      	pop	{r4, pc}

0800b960 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800b964:	2400      	movs	r4, #0
{
 800b966:	0008      	movs	r0, r1
 800b968:	0011      	movs	r1, r2
 800b96a:	001a      	movs	r2, r3
    switch( region )
 800b96c:	2d01      	cmp	r5, #1
 800b96e:	d102      	bne.n	800b976 <RegionTxConfig+0x16>
        AU915_TX_CONFIG( );
 800b970:	f000 faea 	bl	800bf48 <RegionAU915TxConfig>
 800b974:	0004      	movs	r4, r0
        }
    }
}
 800b976:	0020      	movs	r0, r4
 800b978:	bd70      	pop	{r4, r5, r6, pc}

0800b97a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b97a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b97c:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800b97e:	2400      	movs	r4, #0
{
 800b980:	0008      	movs	r0, r1
 800b982:	0011      	movs	r1, r2
 800b984:	001a      	movs	r2, r3
    switch( region )
 800b986:	2d01      	cmp	r5, #1
 800b988:	d105      	bne.n	800b996 <RegionLinkAdrReq+0x1c>
        AU915_LINK_ADR_REQ( );
 800b98a:	9b07      	ldr	r3, [sp, #28]
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	9b06      	ldr	r3, [sp, #24]
 800b990:	f000 fb46 	bl	800c020 <RegionAU915LinkAdrReq>
 800b994:	0004      	movs	r4, r0
        }
    }
}
 800b996:	0020      	movs	r0, r4
 800b998:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b99a <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b99a:	2300      	movs	r3, #0
{
 800b99c:	b510      	push	{r4, lr}
    switch( region )
 800b99e:	2801      	cmp	r0, #1
 800b9a0:	d103      	bne.n	800b9aa <RegionRxParamSetupReq+0x10>
        AU915_RX_PARAM_SETUP_REQ( );
 800b9a2:	0008      	movs	r0, r1
 800b9a4:	f000 fc28 	bl	800c1f8 <RegionAU915RxParamSetupReq>
 800b9a8:	0003      	movs	r3, r0
        }
    }
}
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b9ae:	2300      	movs	r3, #0
{
 800b9b0:	b510      	push	{r4, lr}
    switch( region )
 800b9b2:	2801      	cmp	r0, #1
 800b9b4:	d103      	bne.n	800b9be <RegionNewChannelReq+0x10>
        AU915_NEW_CHANNEL_REQ( );
 800b9b6:	0008      	movs	r0, r1
 800b9b8:	f000 fc45 	bl	800c246 <RegionAU915NewChannelReq>
 800b9bc:	0003      	movs	r3, r0
        }
    }
}
 800b9be:	0018      	movs	r0, r3
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b9c2:	2300      	movs	r3, #0
{
 800b9c4:	b510      	push	{r4, lr}
    switch( region )
 800b9c6:	2801      	cmp	r0, #1
 800b9c8:	d103      	bne.n	800b9d2 <RegionTxParamSetupReq+0x10>
        AU915_TX_PARAM_SETUP_REQ( );
 800b9ca:	0008      	movs	r0, r1
 800b9cc:	f000 fc3d 	bl	800c24a <RegionAU915TxParamSetupReq>
 800b9d0:	0003      	movs	r3, r0
        }
    }
}
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	bd10      	pop	{r4, pc}

0800b9d6 <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b9d6:	2300      	movs	r3, #0
{
 800b9d8:	b510      	push	{r4, lr}
    switch( region )
 800b9da:	2801      	cmp	r0, #1
 800b9dc:	d103      	bne.n	800b9e6 <RegionDlChannelReq+0x10>
        AU915_DL_CHANNEL_REQ( );
 800b9de:	0008      	movs	r0, r1
 800b9e0:	f000 fc35 	bl	800c24e <RegionAU915DlChannelReq>
 800b9e4:	0003      	movs	r3, r0
        }
    }
}
 800b9e6:	0018      	movs	r0, r3
 800b9e8:	bd10      	pop	{r4, pc}

0800b9ea <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b9ea:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800b9ec:	2300      	movs	r3, #0
{
 800b9ee:	0004      	movs	r4, r0
 800b9f0:	0008      	movs	r0, r1
 800b9f2:	0011      	movs	r1, r2
    switch( region )
 800b9f4:	2c01      	cmp	r4, #1
 800b9f6:	d102      	bne.n	800b9fe <RegionAlternateDr+0x14>
        AU915_ALTERNATE_DR( );
 800b9f8:	f000 fc2c 	bl	800c254 <RegionAU915AlternateDr>
 800b9fc:	0003      	movs	r3, r0
        }
    }
}
 800b9fe:	0018      	movs	r0, r3
 800ba00:	bd10      	pop	{r4, pc}

0800ba02 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ba02:	b570      	push	{r4, r5, r6, lr}
 800ba04:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ba06:	2409      	movs	r4, #9
{
 800ba08:	0008      	movs	r0, r1
 800ba0a:	0011      	movs	r1, r2
 800ba0c:	001a      	movs	r2, r3
    switch( region )
 800ba0e:	2d01      	cmp	r5, #1
 800ba10:	d103      	bne.n	800ba1a <RegionNextChannel+0x18>
        AU915_NEXT_CHANNEL( );
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	f000 fc30 	bl	800c278 <RegionAU915NextChannel>
 800ba18:	0004      	movs	r4, r0
        }
    }
}
 800ba1a:	0020      	movs	r0, r4
 800ba1c:	bd70      	pop	{r4, r5, r6, pc}

0800ba1e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800ba1e:	b510      	push	{r4, lr}
    switch( region )
 800ba20:	2801      	cmp	r0, #1
 800ba22:	d102      	bne.n	800ba2a <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 800ba24:	0008      	movs	r0, r1
 800ba26:	f000 fc9b 	bl	800c360 <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800ba2a:	bd10      	pop	{r4, pc}

0800ba2c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	0005      	movs	r5, r0
 800ba30:	0008      	movs	r0, r1
 800ba32:	0011      	movs	r1, r2
 800ba34:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800ba36:	b2cc      	uxtb	r4, r1
    switch( region )
 800ba38:	2d01      	cmp	r5, #1
 800ba3a:	d102      	bne.n	800ba42 <RegionApplyDrOffset+0x16>
        AU915_APPLY_DR_OFFSET( );
 800ba3c:	f000 fcba 	bl	800c3b4 <RegionAU915ApplyDrOffset>
 800ba40:	0004      	movs	r4, r0
        }
    }
}
 800ba42:	0020      	movs	r0, r4
 800ba44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba48 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800ba48:	4800      	ldr	r0, [pc, #0]	; (800ba4c <RegionGetVersion+0x4>)
 800ba4a:	4770      	bx	lr
 800ba4c:	01000300 	.word	0x01000300

0800ba50 <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsAU915[drIndex] )
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <GetBandwidth+0x1c>)
 800ba52:	0080      	lsls	r0, r0, #2
 800ba54:	58c3      	ldr	r3, [r0, r3]
 800ba56:	4a06      	ldr	r2, [pc, #24]	; (800ba70 <GetBandwidth+0x20>)
 800ba58:	2001      	movs	r0, #1
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d004      	beq.n	800ba68 <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800ba5e:	4a05      	ldr	r2, [pc, #20]	; (800ba74 <GetBandwidth+0x24>)
 800ba60:	189b      	adds	r3, r3, r2
 800ba62:	425a      	negs	r2, r3
 800ba64:	4153      	adcs	r3, r2
 800ba66:	0058      	lsls	r0, r3, #1
    }
}
 800ba68:	4770      	bx	lr
 800ba6a:	46c0      	nop			; (mov r8, r8)
 800ba6c:	0800f0a4 	.word	0x0800f0a4
 800ba70:	0003d090 	.word	0x0003d090
 800ba74:	fff85ee0 	.word	0xfff85ee0

0800ba78 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ba78:	b530      	push	{r4, r5, lr}
 800ba7a:	0005      	movs	r5, r0
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	000c      	movs	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
    uint32_t bandwidth = GetBandwidth( datarate );
 800ba80:	f7ff ffe6 	bl	800ba50 <GetBandwidth>
    int8_t phyDr = DataratesAU915[datarate];
 800ba84:	4b08      	ldr	r3, [pc, #32]	; (800baa8 <GetTimeOnAir+0x30>)
    uint32_t bandwidth = GetBandwidth( datarate );
 800ba86:	0001      	movs	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ba88:	575a      	ldrsb	r2, [r3, r5]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	2001      	movs	r0, #1
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	3308      	adds	r3, #8
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <GetTimeOnAir+0x34>)
 800ba96:	b2e4      	uxtb	r4, r4
 800ba98:	9402      	str	r4, [sp, #8]
 800ba9a:	9003      	str	r0, [sp, #12]
 800ba9c:	6a1c      	ldr	r4, [r3, #32]
 800ba9e:	0003      	movs	r3, r0
 800baa0:	47a0      	blx	r4
}
 800baa2:	b005      	add	sp, #20
 800baa4:	bd30      	pop	{r4, r5, pc}
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	0800f10e 	.word	0x0800f10e
 800baac:	0800f22c 	.word	0x0800f22c

0800bab0 <VerifyRfFreq>:
{
 800bab0:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800bab2:	4b0a      	ldr	r3, [pc, #40]	; (800badc <VerifyRfFreq+0x2c>)
{
 800bab4:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	4798      	blx	r3
 800babc:	1e01      	subs	r1, r0, #0
 800babe:	d00b      	beq.n	800bad8 <VerifyRfFreq+0x28>
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <VerifyRfFreq+0x30>)
        return false;
 800bac2:	2100      	movs	r1, #0
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800bac4:	18e0      	adds	r0, r4, r3
 800bac6:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <VerifyRfFreq+0x34>)
 800bac8:	4298      	cmp	r0, r3
 800baca:	d805      	bhi.n	800bad8 <VerifyRfFreq+0x28>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 800bacc:	4906      	ldr	r1, [pc, #24]	; (800bae8 <VerifyRfFreq+0x38>)
 800bace:	f7f4 fbc7 	bl	8000260 <__aeabi_uidivmod>
 800bad2:	424b      	negs	r3, r1
 800bad4:	4159      	adcs	r1, r3
 800bad6:	b2c9      	uxtb	r1, r1
}
 800bad8:	0008      	movs	r0, r1
 800bada:	bd16      	pop	{r1, r2, r4, pc}
 800badc:	0800f22c 	.word	0x0800f22c
 800bae0:	c8f78f60 	.word	0xc8f78f60
 800bae4:	00401640 	.word	0x00401640
 800bae8:	000927c0 	.word	0x000927c0

0800baec <RegionAU915GetPhyParam>:

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 800baec:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800baee:	2200      	movs	r2, #0
{
 800baf0:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800baf2:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800baf4:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800baf6:	3801      	subs	r0, #1
 800baf8:	2838      	cmp	r0, #56	; 0x38
 800bafa:	d831      	bhi.n	800bb60 <RegionAU915GetPhyParam+0x74>
 800bafc:	f7f4 fb0c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bb00:	3030301d 	.word	0x3030301d
 800bb04:	30303030 	.word	0x30303030
 800bb08:	39363030 	.word	0x39363030
 800bb0c:	4e30453b 	.word	0x4e30453b
 800bb10:	52505250 	.word	0x52505250
 800bb14:	61305754 	.word	0x61305754
 800bb18:	67656320 	.word	0x67656320
 800bb1c:	6b303069 	.word	0x6b303069
 800bb20:	3030226e 	.word	0x3030226e
 800bb24:	30303030 	.word	0x30303030
 800bb28:	30303030 	.word	0x30303030
 800bb2c:	70303030 	.word	0x70303030
 800bb30:	207c2076 	.word	0x207c2076
 800bb34:	7e202070 	.word	0x7e202070
 800bb38:	82          	.byte	0x82
 800bb39:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10f      	bne.n	800bb60 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 800bb40:	2308      	movs	r3, #8
 800bb42:	e014      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            if( getPhy->UplinkDwellTime == 0)
 800bb44:	789a      	ldrb	r2, [r3, #2]
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 800bb46:	785b      	ldrb	r3, [r3, #1]
 800bb48:	b25b      	sxtb	r3, r3
            if( getPhy->UplinkDwellTime == 0)
 800bb4a:	2a00      	cmp	r2, #0
 800bb4c:	d10a      	bne.n	800bb64 <RegionAU915GetPhyParam+0x78>
    if( dr == minDr )
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d004      	beq.n	800bb5c <RegionAU915GetPhyParam+0x70>
        nextLowerDr = DR_6;
 800bb52:	3206      	adds	r2, #6
    else if( dr == DR_8 )
 800bb54:	2b08      	cmp	r3, #8
 800bb56:	d001      	beq.n	800bb5c <RegionAU915GetPhyParam+0x70>
        nextLowerDr = dr - 1;
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	b2da      	uxtb	r2, r3
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 800bb5c:	b252      	sxtb	r2, r2
 800bb5e:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800bb60:	9800      	ldr	r0, [sp, #0]
 800bb62:	bd0e      	pop	{r1, r2, r3, pc}
        nextLowerDr = minDr;
 800bb64:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 800bb66:	d0f9      	beq.n	800bb5c <RegionAU915GetPhyParam+0x70>
        nextLowerDr = DR_6;
 800bb68:	2206      	movs	r2, #6
 800bb6a:	e7f3      	b.n	800bb54 <RegionAU915GetPhyParam+0x68>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 800bb6c:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800bb6e:	9300      	str	r3, [sp, #0]
            break;
 800bb70:	e7f6      	b.n	800bb60 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 800bb72:	2320      	movs	r3, #32
 800bb74:	e7fb      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800bb76:	2201      	movs	r2, #1
 800bb78:	569a      	ldrsb	r2, [r3, r2]
            if( getPhy->UplinkDwellTime == 0 )
 800bb7a:	789b      	ldrb	r3, [r3, #2]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d102      	bne.n	800bb86 <RegionAU915GetPhyParam+0x9a>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800bb80:	4b23      	ldr	r3, [pc, #140]	; (800bc10 <RegionAU915GetPhyParam+0x124>)
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800bb82:	5cd3      	ldrb	r3, [r2, r3]
 800bb84:	e7f3      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 800bb86:	4b23      	ldr	r3, [pc, #140]	; (800bc14 <RegionAU915GetPhyParam+0x128>)
 800bb88:	e7fb      	b.n	800bb82 <RegionAU915GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	569a      	ldrsb	r2, [r3, r2]
            if( getPhy->UplinkDwellTime == 0)
 800bb8e:	789b      	ldrb	r3, [r3, #2]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <RegionAU915GetPhyParam+0xac>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800bb94:	4b20      	ldr	r3, [pc, #128]	; (800bc18 <RegionAU915GetPhyParam+0x12c>)
 800bb96:	e7f4      	b.n	800bb82 <RegionAU915GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 800bb98:	4b20      	ldr	r3, [pc, #128]	; (800bc1c <RegionAU915GetPhyParam+0x130>)
 800bb9a:	e7f2      	b.n	800bb82 <RegionAU915GetPhyParam+0x96>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 800bb9c:	4b20      	ldr	r3, [pc, #128]	; (800bc20 <RegionAU915GetPhyParam+0x134>)
 800bb9e:	e7e6      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 800bba0:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <RegionAU915GetPhyParam+0x138>)
 800bba2:	e7e4      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 800bba4:	4b20      	ldr	r3, [pc, #128]	; (800bc28 <RegionAU915GetPhyParam+0x13c>)
 800bba6:	e7e2      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 800bba8:	2380      	movs	r3, #128	; 0x80
 800bbaa:	01db      	lsls	r3, r3, #7
 800bbac:	e7df      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 800bbae:	21fa      	movs	r1, #250	; 0xfa
 800bbb0:	481e      	ldr	r0, [pc, #120]	; (800bc2c <RegionAU915GetPhyParam+0x140>)
 800bbb2:	0089      	lsls	r1, r1, #2
 800bbb4:	f000 fec4 	bl	800c940 <randr>
 800bbb8:	23fa      	movs	r3, #250	; 0xfa
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800bbbe:	9000      	str	r0, [sp, #0]
            break;
 800bbc0:	e7ce      	b.n	800bb60 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 800bbc2:	4b1b      	ldr	r3, [pc, #108]	; (800bc30 <RegionAU915GetPhyParam+0x144>)
 800bbc4:	e7d3      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800bbc6:	4b1b      	ldr	r3, [pc, #108]	; (800bc34 <RegionAU915GetPhyParam+0x148>)
 800bbc8:	e7d1      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800bbca:	4b1b      	ldr	r3, [pc, #108]	; (800bc38 <RegionAU915GetPhyParam+0x14c>)
 800bbcc:	e7cf      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 800bbce:	2348      	movs	r3, #72	; 0x48
 800bbd0:	e7cd      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Channels = NvmCtx.Channels;
 800bbd2:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <RegionAU915GetPhyParam+0x150>)
 800bbd4:	e7cb      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 800bbd6:	4b1a      	ldr	r3, [pc, #104]	; (800bc40 <RegionAU915GetPhyParam+0x154>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800bbd8:	9300      	str	r3, [sp, #0]
            break;
 800bbda:	e7c1      	b.n	800bb60 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800bbdc:	4b19      	ldr	r3, [pc, #100]	; (800bc44 <RegionAU915GetPhyParam+0x158>)
 800bbde:	e7fb      	b.n	800bbd8 <RegionAU915GetPhyParam+0xec>
            phyParam.Value = AU915_BEACON_CHANNEL_FREQ + ( getPhy->Channel * AU915_BEACON_CHANNEL_STEPWIDTH );
 800bbe0:	791a      	ldrb	r2, [r3, #4]
 800bbe2:	4b19      	ldr	r3, [pc, #100]	; (800bc48 <RegionAU915GetPhyParam+0x15c>)
 800bbe4:	4353      	muls	r3, r2
 800bbe6:	4a12      	ldr	r2, [pc, #72]	; (800bc30 <RegionAU915GetPhyParam+0x144>)
 800bbe8:	189b      	adds	r3, r3, r2
 800bbea:	e7c0      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 800bbec:	466a      	mov	r2, sp
 800bbee:	4b17      	ldr	r3, [pc, #92]	; (800bc4c <RegionAU915GetPhyParam+0x160>)
 800bbf0:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	7093      	strb	r3, [r2, #2]
            break;
 800bbf6:	e7b3      	b.n	800bb60 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 800bbf8:	4b13      	ldr	r3, [pc, #76]	; (800bc48 <RegionAU915GetPhyParam+0x15c>)
 800bbfa:	e7b8      	b.n	800bb6e <RegionAU915GetPhyParam+0x82>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800bbfc:	785b      	ldrb	r3, [r3, #1]
 800bbfe:	4a14      	ldr	r2, [pc, #80]	; (800bc50 <RegionAU915GetPhyParam+0x164>)
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	e7be      	b.n	800bb82 <RegionAU915GetPhyParam+0x96>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800bc04:	2001      	movs	r0, #1
 800bc06:	5618      	ldrsb	r0, [r3, r0]
 800bc08:	f7ff ff22 	bl	800ba50 <GetBandwidth>
 800bc0c:	e7d7      	b.n	800bbbe <RegionAU915GetPhyParam+0xd2>
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	0800f11e 	.word	0x0800f11e
 800bc14:	0800f12c 	.word	0x0800f12c
 800bc18:	0800f13a 	.word	0x0800f13a
 800bc1c:	0800f148 	.word	0x0800f148
 800bc20:	00000bb8 	.word	0x00000bb8
 800bc24:	00001388 	.word	0x00001388
 800bc28:	00001770 	.word	0x00001770
 800bc2c:	fffffc18 	.word	0xfffffc18
 800bc30:	370870a0 	.word	0x370870a0
 800bc34:	2000130c 	.word	0x2000130c
 800bc38:	20001324 	.word	0x20001324
 800bc3c:	20000f98 	.word	0x20000f98
 800bc40:	41f00000 	.word	0x41f00000
 800bc44:	4009999a 	.word	0x4009999a
 800bc48:	000927c0 	.word	0x000927c0
 800bc4c:	00000313 	.word	0x00000313
 800bc50:	0800f10e 	.word	0x0800f10e

0800bc54 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800bc54:	230c      	movs	r3, #12
{
 800bc56:	b513      	push	{r0, r1, r4, lr}
 800bc58:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800bc5a:	7842      	ldrb	r2, [r0, #1]
 800bc5c:	7800      	ldrb	r0, [r0, #0]
 800bc5e:	4c08      	ldr	r4, [pc, #32]	; (800bc80 <RegionAU915SetBandTxDone+0x2c>)
 800bc60:	4343      	muls	r3, r0
 800bc62:	2014      	movs	r0, #20
 800bc64:	18e3      	adds	r3, r4, r3
 800bc66:	7a5b      	ldrb	r3, [r3, #9]
 800bc68:	4358      	muls	r0, r3
 800bc6a:	23d8      	movs	r3, #216	; 0xd8
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	18c0      	adds	r0, r0, r3
 800bc70:	690b      	ldr	r3, [r1, #16]
 800bc72:	1900      	adds	r0, r0, r4
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	68cb      	ldr	r3, [r1, #12]
 800bc78:	6889      	ldr	r1, [r1, #8]
 800bc7a:	f000 fc2b 	bl	800c4d4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800bc7e:	bd13      	pop	{r0, r1, r4, pc}
 800bc80:	20000f98 	.word	0x20000f98

0800bc84 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
    Band_t bands[AU915_MAX_NB_BANDS] =
 800bc84:	2301      	movs	r3, #1
{
 800bc86:	b570      	push	{r4, r5, r6, lr}
 800bc88:	b086      	sub	sp, #24
    Band_t bands[AU915_MAX_NB_BANDS] =
 800bc8a:	a901      	add	r1, sp, #4
 800bc8c:	800b      	strh	r3, [r1, #0]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	708b      	strb	r3, [r1, #2]
 800bc92:	604b      	str	r3, [r1, #4]
 800bc94:	608b      	str	r3, [r1, #8]
 800bc96:	60cb      	str	r3, [r1, #12]
 800bc98:	740b      	strb	r3, [r1, #16]
    {
        AU915_BAND0
    };

    switch( params->Type )
 800bc9a:	7904      	ldrb	r4, [r0, #4]
 800bc9c:	2c02      	cmp	r4, #2
 800bc9e:	d812      	bhi.n	800bcc6 <RegionAU915InitDefaults+0x42>
 800bca0:	429c      	cmp	r4, r3
 800bca2:	d014      	beq.n	800bcce <RegionAU915InitDefaults+0x4a>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bca4:	4c28      	ldr	r4, [pc, #160]	; (800bd48 <RegionAU915InitDefaults+0xc4>)
 800bca6:	2206      	movs	r2, #6
 800bca8:	0020      	movs	r0, r4
 800bcaa:	4928      	ldr	r1, [pc, #160]	; (800bd4c <RegionAU915InitDefaults+0xc8>)
 800bcac:	f000 fc03 	bl	800c4b6 <RegionCommonChanMaskCopy>
 800bcb0:	2306      	movs	r3, #6

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
            { // Copy-And the channels mask
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800bcb2:	89a1      	ldrh	r1, [r4, #12]
 800bcb4:	8822      	ldrh	r2, [r4, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800bcb6:	3b01      	subs	r3, #1
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800bcb8:	400a      	ands	r2, r1
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800bcba:	b2db      	uxtb	r3, r3
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800bcbc:	81a2      	strh	r2, [r4, #12]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800bcbe:	3402      	adds	r4, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1f6      	bne.n	800bcb2 <RegionAU915InitDefaults+0x2e>
 800bcc4:	e001      	b.n	800bcca <RegionAU915InitDefaults+0x46>
    switch( params->Type )
 800bcc6:	2c03      	cmp	r4, #3
 800bcc8:	d034      	beq.n	800bd34 <RegionAU915InitDefaults+0xb0>
        default:
        {
            break;
        }
    }
}
 800bcca:	b006      	add	sp, #24
 800bccc:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800bcce:	2214      	movs	r2, #20
 800bcd0:	481f      	ldr	r0, [pc, #124]	; (800bd50 <RegionAU915InitDefaults+0xcc>)
 800bcd2:	f000 fe51 	bl	800c978 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800bcd6:	4b1f      	ldr	r3, [pc, #124]	; (800bd54 <RegionAU915InitDefaults+0xd0>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800bcd8:	2550      	movs	r5, #80	; 0x50
 800bcda:	0019      	movs	r1, r3
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800bcdc:	4a1e      	ldr	r2, [pc, #120]	; (800bd58 <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800bcde:	481f      	ldr	r0, [pc, #124]	; (800bd5c <RegionAU915InitDefaults+0xd8>)
 800bce0:	4e1f      	ldr	r6, [pc, #124]	; (800bd60 <RegionAU915InitDefaults+0xdc>)
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 800bce2:	601a      	str	r2, [r3, #0]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800bce4:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800bce6:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 800bce8:	725c      	strb	r4, [r3, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800bcea:	330c      	adds	r3, #12
 800bcec:	4282      	cmp	r2, r0
 800bcee:	d1f7      	bne.n	800bce0 <RegionAU915InitDefaults+0x5c>
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800bcf0:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	4b1b      	ldr	r3, [pc, #108]	; (800bd64 <RegionAU915InitDefaults+0xe0>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800bcf6:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800bcf8:	4c1c      	ldr	r4, [pc, #112]	; (800bd6c <RegionAU915InitDefaults+0xe8>)
 800bcfa:	4e1d      	ldr	r6, [pc, #116]	; (800bd70 <RegionAU915InitDefaults+0xec>)
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800bcfc:	601a      	str	r2, [r3, #0]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800bcfe:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800bd00:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 800bd02:	7258      	strb	r0, [r3, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800bd04:	330c      	adds	r3, #12
 800bd06:	42a2      	cmp	r2, r4
 800bd08:	d1f7      	bne.n	800bcfa <RegionAU915InitDefaults+0x76>
            NvmCtx.ChannelsDefaultMask[0] = 0x00FF;
 800bd0a:	23e3      	movs	r3, #227	; 0xe3
 800bd0c:	22ff      	movs	r2, #255	; 0xff
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	50ca      	str	r2, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bd12:	4c0d      	ldr	r4, [pc, #52]	; (800bd48 <RegionAU915InitDefaults+0xc4>)
            NvmCtx.ChannelsDefaultMask[2] = 0x0000;
 800bd14:	3304      	adds	r3, #4
 800bd16:	50c8      	str	r0, [r1, r3]
            NvmCtx.ChannelsDefaultMask[4] = 0x0001;
 800bd18:	3afe      	subs	r2, #254	; 0xfe
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	50ca      	str	r2, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bd1e:	0020      	movs	r0, r4
 800bd20:	490a      	ldr	r1, [pc, #40]	; (800bd4c <RegionAU915InitDefaults+0xc8>)
 800bd22:	3205      	adds	r2, #5
 800bd24:	f000 fbc7 	bl	800c4b6 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, CHANNELS_MASK_SIZE );
 800bd28:	2206      	movs	r2, #6
 800bd2a:	0021      	movs	r1, r4
 800bd2c:	4811      	ldr	r0, [pc, #68]	; (800bd74 <RegionAU915InitDefaults+0xf0>)
 800bd2e:	f000 fbc2 	bl	800c4b6 <RegionCommonChanMaskCopy>
            break;
 800bd32:	e7ca      	b.n	800bcca <RegionAU915InitDefaults+0x46>
            if( params->NvmCtx != 0 )
 800bd34:	6801      	ldr	r1, [r0, #0]
 800bd36:	2900      	cmp	r1, #0
 800bd38:	d0c7      	beq.n	800bcca <RegionAU915InitDefaults+0x46>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800bd3a:	22e6      	movs	r2, #230	; 0xe6
 800bd3c:	4805      	ldr	r0, [pc, #20]	; (800bd54 <RegionAU915InitDefaults+0xd0>)
 800bd3e:	0092      	lsls	r2, r2, #2
 800bd40:	f000 fe1a 	bl	800c978 <memcpy1>
}
 800bd44:	e7c1      	b.n	800bcca <RegionAU915InitDefaults+0x46>
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	2000130c 	.word	0x2000130c
 800bd4c:	20001324 	.word	0x20001324
 800bd50:	200012f8 	.word	0x200012f8
 800bd54:	20000f98 	.word	0x20000f98
 800bd58:	368cd800 	.word	0x368cd800
 800bd5c:	37502800 	.word	0x37502800
 800bd60:	00030d40 	.word	0x00030d40
 800bd64:	20001298 	.word	0x20001298
 800bd68:	36978660 	.word	0x36978660
 800bd6c:	375ad660 	.word	0x375ad660
 800bd70:	00186a00 	.word	0x00186a00
 800bd74:	20001318 	.word	0x20001318

0800bd78 <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 800bd78:	23e6      	movs	r3, #230	; 0xe6
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800bd7e:	4801      	ldr	r0, [pc, #4]	; (800bd84 <RegionAU915GetNvmCtx+0xc>)
 800bd80:	4770      	bx	lr
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	20000f98 	.word	0x20000f98

0800bd88 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bd88:	0003      	movs	r3, r0
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	0008      	movs	r0, r1
    switch( phyAttribute )
 800bd8e:	290a      	cmp	r1, #10
 800bd90:	d821      	bhi.n	800bdd6 <RegionAU915Verify+0x4e>
 800bd92:	f7f4 f9c1 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bd96:	2006      	.short	0x2006
 800bd98:	0a202020 	.word	0x0a202020
 800bd9c:	1c200f0a 	.word	0x1c200f0a
 800bda0:	1c          	.byte	0x1c
 800bda1:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	f7ff fe84 	bl	800bab0 <VerifyRfFreq>
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800bda8:	bd10      	pop	{r4, pc}
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 800bdaa:	2000      	movs	r0, #0
 800bdac:	220c      	movs	r2, #12
 800bdae:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	e006      	b.n	800bdc2 <RegionAU915Verify+0x3a>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	5618      	ldrsb	r0, [r3, r0]
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800bdb8:	789b      	ldrb	r3, [r3, #2]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 800bdba:	220d      	movs	r2, #13
 800bdbc:	2108      	movs	r1, #8
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f6      	bne.n	800bdb0 <RegionAU915Verify+0x28>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800bdc2:	f000 fb3b 	bl	800c43c <RegionCommonValueInRange>
 800bdc6:	1e43      	subs	r3, r0, #1
 800bdc8:	4198      	sbcs	r0, r3
 800bdca:	b2c0      	uxtb	r0, r0
 800bdcc:	e7ec      	b.n	800bda8 <RegionAU915Verify+0x20>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	2216      	movs	r2, #22
 800bdd2:	5618      	ldrsb	r0, [r3, r0]
 800bdd4:	e7ec      	b.n	800bdb0 <RegionAU915Verify+0x28>
    switch( phyAttribute )
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e7e6      	b.n	800bda8 <RegionAU915Verify+0x20>
	...

0800bddc <RegionAU915ChanMaskSet>:
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
    }
}

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800bddc:	b570      	push	{r4, r5, r6, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800bdde:	7904      	ldrb	r4, [r0, #4]
 800bde0:	2c00      	cmp	r4, #0
 800bde2:	d003      	beq.n	800bdec <RegionAU915ChanMaskSet+0x10>
 800bde4:	2c01      	cmp	r4, #1
 800bde6:	d017      	beq.n	800be18 <RegionAU915ChanMaskSet+0x3c>
 800bde8:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800bdea:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 800bdec:	4d0e      	ldr	r5, [pc, #56]	; (800be28 <RegionAU915ChanMaskSet+0x4c>)
 800bdee:	2206      	movs	r2, #6
 800bdf0:	6801      	ldr	r1, [r0, #0]
 800bdf2:	0028      	movs	r0, r5
 800bdf4:	f000 fb5f 	bl	800c4b6 <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800bdf8:	23e5      	movs	r3, #229	; 0xe5
 800bdfa:	4a0c      	ldr	r2, [pc, #48]	; (800be2c <RegionAU915ChanMaskSet+0x50>)
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	50d4      	str	r4, [r2, r3]
 800be00:	2306      	movs	r3, #6
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800be02:	89a9      	ldrh	r1, [r5, #12]
 800be04:	882a      	ldrh	r2, [r5, #0]
            for( uint8_t i = 0; i < 6; i++ )
 800be06:	3b01      	subs	r3, #1
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800be08:	400a      	ands	r2, r1
            for( uint8_t i = 0; i < 6; i++ )
 800be0a:	b2db      	uxtb	r3, r3
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800be0c:	81aa      	strh	r2, [r5, #12]
            for( uint8_t i = 0; i < 6; i++ )
 800be0e:	3502      	adds	r5, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1f6      	bne.n	800be02 <RegionAU915ChanMaskSet+0x26>
    return true;
 800be14:	2001      	movs	r0, #1
 800be16:	e7e8      	b.n	800bdea <RegionAU915ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 800be18:	6801      	ldr	r1, [r0, #0]
 800be1a:	2206      	movs	r2, #6
 800be1c:	4804      	ldr	r0, [pc, #16]	; (800be30 <RegionAU915ChanMaskSet+0x54>)
 800be1e:	f000 fb4a 	bl	800c4b6 <RegionCommonChanMaskCopy>
    return true;
 800be22:	0020      	movs	r0, r4
            break;
 800be24:	e7e1      	b.n	800bdea <RegionAU915ChanMaskSet+0xe>
 800be26:	46c0      	nop			; (mov r8, r8)
 800be28:	2000130c 	.word	0x2000130c
 800be2c:	20000f98 	.word	0x20000f98
 800be30:	20001324 	.word	0x20001324

0800be34 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800be34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be36:	001c      	movs	r4, r3
 800be38:	000e      	movs	r6, r1
 800be3a:	0017      	movs	r7, r2
 800be3c:	b085      	sub	sp, #20
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 800be3e:	1c03      	adds	r3, r0, #0
 800be40:	280d      	cmp	r0, #13
 800be42:	dd00      	ble.n	800be46 <RegionAU915ComputeRxWindowParameters+0x12>
 800be44:	230d      	movs	r3, #13
 800be46:	b25d      	sxtb	r5, r3
 800be48:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800be4a:	0028      	movs	r0, r5
 800be4c:	f7ff fe00 	bl	800ba50 <GetBandwidth>

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800be50:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <RegionAU915ComputeRxWindowParameters+0x50>)
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800be52:	70a0      	strb	r0, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800be54:	5d58      	ldrb	r0, [r3, r5]
 800be56:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <RegionAU915ComputeRxWindowParameters+0x54>)
 800be58:	00aa      	lsls	r2, r5, #2
 800be5a:	58d1      	ldr	r1, [r2, r3]
 800be5c:	f000 fc4a 	bl	800c6f4 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800be60:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <RegionAU915ComputeRxWindowParameters+0x58>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800be62:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800be64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	4798      	blx	r3
 800be6a:	0022      	movs	r2, r4
 800be6c:	3408      	adds	r4, #8
 800be6e:	320c      	adds	r2, #12
 800be70:	0003      	movs	r3, r0
 800be72:	9201      	str	r2, [sp, #4]
 800be74:	0031      	movs	r1, r6
 800be76:	003a      	movs	r2, r7
 800be78:	0028      	movs	r0, r5
 800be7a:	9400      	str	r4, [sp, #0]
 800be7c:	f000 fc44 	bl	800c708 <RegionCommonComputeRxWindowParameters>
}
 800be80:	b005      	add	sp, #20
 800be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be84:	0800f10e 	.word	0x0800f10e
 800be88:	0800f0a4 	.word	0x0800f0a4
 800be8c:	0800f22c 	.word	0x0800f22c

0800be90 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800be90:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 800be92:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800be94:	4f26      	ldr	r7, [pc, #152]	; (800bf30 <RegionAU915RxConfig+0xa0>)
{
 800be96:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 800be98:	687b      	ldr	r3, [r7, #4]
{
 800be9a:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800be9c:	5786      	ldrsb	r6, [r0, r6]
{
 800be9e:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800bea0:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 800bea2:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800bea4:	4798      	blx	r3
    {
        return false;
 800bea6:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800bea8:	4298      	cmp	r0, r3
 800beaa:	d13b      	bne.n	800bf24 <RegionAU915RxConfig+0x94>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800beac:	7ce3      	ldrb	r3, [r4, #19]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <RegionAU915RxConfig+0x30>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 800beb2:	7825      	ldrb	r5, [r4, #0]
 800beb4:	3307      	adds	r3, #7
 800beb6:	402b      	ands	r3, r5
 800beb8:	4d1e      	ldr	r5, [pc, #120]	; (800bf34 <RegionAU915RxConfig+0xa4>)
 800beba:	435d      	muls	r5, r3
 800bebc:	4b1e      	ldr	r3, [pc, #120]	; (800bf38 <RegionAU915RxConfig+0xa8>)
 800bebe:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 800bec0:	4b1e      	ldr	r3, [pc, #120]	; (800bf3c <RegionAU915RxConfig+0xac>)

    Radio.SetChannel( frequency );
 800bec2:	0028      	movs	r0, r5
    phyDr = DataratesAU915[dr];
 800bec4:	579b      	ldrsb	r3, [r3, r6]
 800bec6:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	930d      	str	r3, [sp, #52]	; 0x34
 800becc:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800bece:	7ca3      	ldrb	r3, [r4, #18]
 800bed0:	2200      	movs	r2, #0
 800bed2:	9309      	str	r3, [sp, #36]	; 0x24
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	2001      	movs	r0, #1
 800bed8:	b29b      	uxth	r3, r3
 800beda:	9302      	str	r3, [sp, #8]
 800bedc:	2308      	movs	r3, #8
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	9207      	str	r2, [sp, #28]
 800bee4:	930d      	str	r3, [sp, #52]	; 0x34
 800bee6:	9206      	str	r2, [sp, #24]
 800bee8:	0003      	movs	r3, r0
 800beea:	9205      	str	r2, [sp, #20]
 800beec:	9204      	str	r2, [sp, #16]
 800beee:	9203      	str	r2, [sp, #12]
 800bef0:	9200      	str	r2, [sp, #0]
 800bef2:	78a1      	ldrb	r1, [r4, #2]
 800bef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bef6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bef8:	9008      	str	r0, [sp, #32]
 800befa:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 800befc:	7c63      	ldrb	r3, [r4, #17]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d013      	beq.n	800bf2a <RegionAU915RxConfig+0x9a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 800bf02:	4b0f      	ldr	r3, [pc, #60]	; (800bf40 <RegionAU915RxConfig+0xb0>)
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800bf04:	5d99      	ldrb	r1, [r3, r6]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800bf06:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <RegionAU915RxConfig+0xa0>)
 800bf08:	310d      	adds	r1, #13
 800bf0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	b2c9      	uxtb	r1, r1
 800bf10:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf12:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800bf14:	0032      	movs	r2, r6
 800bf16:	0029      	movs	r1, r5
 800bf18:	7ce0      	ldrb	r0, [r4, #19]
 800bf1a:	f000 fcd5 	bl	800c8c8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800bf1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf20:	701e      	strb	r6, [r3, #0]
    return true;
 800bf22:	2301      	movs	r3, #1
}
 800bf24:	0018      	movs	r0, r3
 800bf26:	b00f      	add	sp, #60	; 0x3c
 800bf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800bf2a:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <RegionAU915RxConfig+0xb4>)
 800bf2c:	e7ea      	b.n	800bf04 <RegionAU915RxConfig+0x74>
 800bf2e:	46c0      	nop			; (mov r8, r8)
 800bf30:	0800f22c 	.word	0x0800f22c
 800bf34:	000927c0 	.word	0x000927c0
 800bf38:	370870a0 	.word	0x370870a0
 800bf3c:	0800f10e 	.word	0x0800f10e
 800bf40:	0800f13a 	.word	0x0800f13a
 800bf44:	0800f11e 	.word	0x0800f11e

0800bf48 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4a:	0004      	movs	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800bf4c:	2001      	movs	r0, #1
{
 800bf4e:	b091      	sub	sp, #68	; 0x44
 800bf50:	920d      	str	r2, [sp, #52]	; 0x34
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800bf52:	220c      	movs	r2, #12
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800bf54:	5620      	ldrsb	r0, [r4, r0]
 800bf56:	4b2e      	ldr	r3, [pc, #184]	; (800c010 <RegionAU915TxConfig+0xc8>)
{
 800bf58:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800bf5a:	7821      	ldrb	r1, [r4, #0]
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800bf5c:	561b      	ldrsb	r3, [r3, r0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800bf5e:	434a      	muls	r2, r1
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800bf60:	001f      	movs	r7, r3
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800bf62:	4b2c      	ldr	r3, [pc, #176]	; (800c014 <RegionAU915TxConfig+0xcc>)
 800bf64:	189a      	adds	r2, r3, r2
 800bf66:	7a51      	ldrb	r1, [r2, #9]
 800bf68:	2214      	movs	r2, #20
 800bf6a:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800bf6c:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800bf6e:	189b      	adds	r3, r3, r2
 800bf70:	4a29      	ldr	r2, [pc, #164]	; (800c018 <RegionAU915TxConfig+0xd0>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800bf72:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800bf74:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	78a2      	ldrb	r2, [r4, #2]
 800bf7a:	1c1e      	adds	r6, r3, #0
 800bf7c:	b25b      	sxtb	r3, r3
 800bf7e:	428b      	cmp	r3, r1
 800bf80:	da00      	bge.n	800bf84 <RegionAU915TxConfig+0x3c>
 800bf82:	1c16      	adds	r6, r2, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800bf84:	f7ff fd64 	bl	800ba50 <GetBandwidth>
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800bf88:	b275      	sxtb	r5, r6
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bf8a:	68a2      	ldr	r2, [r4, #8]
 800bf8c:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800bf8e:	900b      	str	r0, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bf90:	0028      	movs	r0, r5
 800bf92:	f000 fbe3 	bl	800c75c <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800bf96:	220c      	movs	r2, #12
 800bf98:	7823      	ldrb	r3, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bf9a:	900e      	str	r0, [sp, #56]	; 0x38
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800bf9c:	4353      	muls	r3, r2
 800bf9e:	4a1f      	ldr	r2, [pc, #124]	; (800c01c <RegionAU915TxConfig+0xd4>)

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800bfa0:	2501      	movs	r5, #1
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800bfa2:	68d1      	ldr	r1, [r2, #12]
 800bfa4:	910f      	str	r1, [sp, #60]	; 0x3c
 800bfa6:	491b      	ldr	r1, [pc, #108]	; (800c014 <RegionAU915TxConfig+0xcc>)
 800bfa8:	5858      	ldr	r0, [r3, r1]
 800bfaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfac:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800bfae:	23fa      	movs	r3, #250	; 0xfa
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	9308      	str	r3, [sp, #32]
 800bfb4:	2308      	movs	r3, #8
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9302      	str	r3, [sp, #8]
 800bfba:	4b18      	ldr	r3, [pc, #96]	; (800c01c <RegionAU915TxConfig+0xd4>)
 800bfbc:	0028      	movs	r0, r5
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bfc2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfc4:	9207      	str	r2, [sp, #28]
 800bfc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc8:	9206      	str	r2, [sp, #24]
 800bfca:	9205      	str	r2, [sp, #20]
 800bfcc:	9203      	str	r2, [sp, #12]
 800bfce:	9700      	str	r7, [sp, #0]
 800bfd0:	9504      	str	r5, [sp, #16]
 800bfd2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bfd4:	9501      	str	r5, [sp, #4]
 800bfd6:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800bfd8:	220c      	movs	r2, #12
 800bfda:	2101      	movs	r1, #1
 800bfdc:	7823      	ldrb	r3, [r4, #0]
 800bfde:	5661      	ldrsb	r1, [r4, r1]
 800bfe0:	4353      	muls	r3, r2
 800bfe2:	4a0c      	ldr	r2, [pc, #48]	; (800c014 <RegionAU915TxConfig+0xcc>)
 800bfe4:	5898      	ldr	r0, [r3, r2]
 800bfe6:	f000 fc99 	bl	800c91c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800bfea:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <RegionAU915TxConfig+0xd4>)
 800bfec:	0028      	movs	r0, r5
 800bfee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bff0:	7b21      	ldrb	r1, [r4, #12]
 800bff2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bff4:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800bff6:	2001      	movs	r0, #1
 800bff8:	89a1      	ldrh	r1, [r4, #12]
 800bffa:	5620      	ldrsb	r0, [r4, r0]
 800bffc:	f7ff fd3c 	bl	800ba78 <GetTimeOnAir>
 800c000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c002:	6018      	str	r0, [r3, #0]

    *txPower = txPowerLimited;
    return true;
}
 800c004:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 800c006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c008:	701e      	strb	r6, [r3, #0]
}
 800c00a:	b011      	add	sp, #68	; 0x44
 800c00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	0800f10e 	.word	0x0800f10e
 800c014:	20000f98 	.word	0x20000f98
 800c018:	00000362 	.word	0x00000362
 800c01c:	0800f22c 	.word	0x0800f22c

0800c020 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c022:	b099      	sub	sp, #100	; 0x64
 800c024:	9105      	str	r1, [sp, #20]
 800c026:	9206      	str	r2, [sp, #24]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c028:	2100      	movs	r1, #0
 800c02a:	2206      	movs	r2, #6
{
 800c02c:	0005      	movs	r5, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c02e:	a80b      	add	r0, sp, #44	; 0x2c
{
 800c030:	9307      	str	r3, [sp, #28]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800c032:	f002 fab4 	bl	800e59e <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800c036:	220c      	movs	r2, #12
 800c038:	2100      	movs	r1, #0
 800c03a:	a80d      	add	r0, sp, #52	; 0x34
 800c03c:	f002 faaf 	bl	800e59e <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 800c040:	2206      	movs	r2, #6
 800c042:	496a      	ldr	r1, [pc, #424]	; (800c1ec <RegionAU915LinkAdrReq+0x1cc>)
 800c044:	a80d      	add	r0, sp, #52	; 0x34
 800c046:	f000 fa36 	bl	800c4b6 <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 800c04a:	2300      	movs	r3, #0
            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800c04c:	27ff      	movs	r7, #255	; 0xff
    uint8_t bytesProcessed = 0;
 800c04e:	9301      	str	r3, [sp, #4]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800c050:	7a2b      	ldrb	r3, [r5, #8]
 800c052:	9a01      	ldr	r2, [sp, #4]
 800c054:	ae0b      	add	r6, sp, #44	; 0x2c
 800c056:	ac0d      	add	r4, sp, #52	; 0x34
 800c058:	4293      	cmp	r3, r2
 800c05a:	d907      	bls.n	800c06c <RegionAU915LinkAdrReq+0x4c>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800c05c:	686b      	ldr	r3, [r5, #4]
 800c05e:	9a01      	ldr	r2, [sp, #4]
 800c060:	0031      	movs	r1, r6
 800c062:	1898      	adds	r0, r3, r2
 800c064:	f000 fae4 	bl	800c630 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800c068:	2800      	cmp	r0, #0
 800c06a:	d167      	bne.n	800c13c <RegionAU915LinkAdrReq+0x11c>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800c06c:	2301      	movs	r3, #1
 800c06e:	56f3      	ldrsb	r3, [r6, r3]
 800c070:	2b05      	cmp	r3, #5
 800c072:	dc07      	bgt.n	800c084 <RegionAU915LinkAdrReq+0x64>
 800c074:	0020      	movs	r0, r4
 800c076:	2204      	movs	r2, #4
 800c078:	2100      	movs	r1, #0
 800c07a:	f000 f9fd 	bl	800c478 <RegionCommonCountChannels>
    {
        status &= 0xFE; // Channel mask KO
 800c07e:	2406      	movs	r4, #6
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800c080:	2801      	cmp	r0, #1
 800c082:	d900      	bls.n	800c086 <RegionAU915LinkAdrReq+0x66>
    uint8_t bytesProcessed = 0;
 800c084:	2407      	movs	r4, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c086:	2302      	movs	r3, #2
 800c088:	aa08      	add	r2, sp, #32
 800c08a:	7113      	strb	r3, [r2, #4]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800c08c:	7a6b      	ldrb	r3, [r5, #9]
    phyParam = RegionAU915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800c08e:	af10      	add	r7, sp, #64	; 0x40
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800c090:	a809      	add	r0, sp, #36	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800c092:	7193      	strb	r3, [r2, #6]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800c094:	f7ff fd2a 	bl	800baec <RegionAU915GetPhyParam>
    linkAdrVerifyParams.Status = status;
 800c098:	713c      	strb	r4, [r7, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800c09a:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c09c:	a908      	add	r1, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800c09e:	717b      	strb	r3, [r7, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800c0a0:	ab0b      	add	r3, sp, #44	; 0x2c
 800c0a2:	785a      	ldrb	r2, [r3, #1]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800c0a4:	4c52      	ldr	r4, [pc, #328]	; (800c1f0 <RegionAU915LinkAdrReq+0x1d0>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800c0a6:	71ba      	strb	r2, [r7, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800c0a8:	789a      	ldrb	r2, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800c0aa:	ae0d      	add	r6, sp, #52	; 0x34
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800c0ac:	71fa      	strb	r2, [r7, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	723a      	strb	r2, [r7, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800c0b2:	7aea      	ldrb	r2, [r5, #11]
 800c0b4:	727a      	strb	r2, [r7, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800c0b6:	7b2a      	ldrb	r2, [r5, #12]
 800c0b8:	72ba      	strb	r2, [r7, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800c0ba:	7b6a      	ldrb	r2, [r5, #13]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800c0bc:	7538      	strb	r0, [r7, #20]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800c0be:	72fa      	strb	r2, [r7, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800c0c0:	2248      	movs	r2, #72	; 0x48
 800c0c2:	733a      	strb	r2, [r7, #12]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800c0c4:	3a3c      	subs	r2, #60	; 0x3c
 800c0c6:	757a      	strb	r2, [r7, #21]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 800c0c8:	320a      	adds	r2, #10
 800c0ca:	83ba      	strh	r2, [r7, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800c0cc:	682a      	ldr	r2, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c0ce:	a808      	add	r0, sp, #32
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800c0d0:	9210      	str	r2, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c0d2:	220e      	movs	r2, #14
 800c0d4:	1852      	adds	r2, r2, r1
 800c0d6:	210d      	movs	r1, #13
 800c0d8:	1809      	adds	r1, r1, r0
 800c0da:	0038      	movs	r0, r7
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800c0dc:	9614      	str	r6, [sp, #80]	; 0x50
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800c0de:	9416      	str	r4, [sp, #88]	; 0x58
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800c0e0:	f000 fac1 	bl	800c666 <RegionCommonLinkAdrReqVerifyParams>
 800c0e4:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800c0e6:	2807      	cmp	r0, #7
 800c0e8:	d118      	bne.n	800c11c <RegionAU915LinkAdrReq+0xfc>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 800c0ea:	2206      	movs	r2, #6
 800c0ec:	0031      	movs	r1, r6
 800c0ee:	483f      	ldr	r0, [pc, #252]	; (800c1ec <RegionAU915LinkAdrReq+0x1cc>)
 800c0f0:	f000 f9e1 	bl	800c4b6 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 800c0f4:	22e0      	movs	r2, #224	; 0xe0
 800c0f6:	23dd      	movs	r3, #221	; 0xdd
 800c0f8:	0092      	lsls	r2, r2, #2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	58a1      	ldr	r1, [r4, r2]
 800c0fe:	58e3      	ldr	r3, [r4, r3]
 800c100:	400b      	ands	r3, r1
 800c102:	50a3      	str	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 800c104:	23de      	movs	r3, #222	; 0xde
 800c106:	3204      	adds	r2, #4
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	58a1      	ldr	r1, [r4, r2]
 800c10c:	58e3      	ldr	r3, [r4, r3]
 800c10e:	400b      	ands	r3, r1
 800c110:	50a3      	str	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 800c112:	23df      	movs	r3, #223	; 0xdf
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	58e2      	ldr	r2, [r4, r3]
 800c118:	330c      	adds	r3, #12
 800c11a:	50e2      	str	r2, [r4, r3]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800c11c:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800c11e:	ab0b      	add	r3, sp, #44	; 0x2c
 800c120:	785a      	ldrb	r2, [r3, #1]
 800c122:	9905      	ldr	r1, [sp, #20]
 800c124:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800c126:	789a      	ldrb	r2, [r3, #2]
 800c128:	9906      	ldr	r1, [sp, #24]
    *nbRepOut = linkAdrParams.NbRep;
 800c12a:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 800c12c:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800c12e:	9a07      	ldr	r2, [sp, #28]
 800c130:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800c132:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c134:	9a01      	ldr	r2, [sp, #4]
 800c136:	701a      	strb	r2, [r3, #0]
}
 800c138:	b019      	add	sp, #100	; 0x64
 800c13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800c13c:	9b01      	ldr	r3, [sp, #4]
 800c13e:	1818      	adds	r0, r3, r0
 800c140:	b2c3      	uxtb	r3, r0
 800c142:	9301      	str	r3, [sp, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800c144:	78f3      	ldrb	r3, [r6, #3]
 800c146:	2b06      	cmp	r3, #6
 800c148:	d106      	bne.n	800c158 <RegionAU915LinkAdrReq+0x138>
            channelsMask[1] = 0x0000;//0xFFFF;
 800c14a:	2300      	movs	r3, #0
            channelsMask[0] = 0x00FF;//0xFFFF;
 800c14c:	8027      	strh	r7, [r4, #0]
            channelsMask[1] = 0x0000;
 800c14e:	8063      	strh	r3, [r4, #2]
            channelsMask[2] = 0x0000;
 800c150:	80a3      	strh	r3, [r4, #4]
            channelsMask[3] = 0x0000;
 800c152:	80e3      	strh	r3, [r4, #6]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800c154:	8123      	strh	r3, [r4, #8]
 800c156:	e77b      	b.n	800c050 <RegionAU915LinkAdrReq+0x30>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800c158:	2b07      	cmp	r3, #7
 800c15a:	d102      	bne.n	800c162 <RegionAU915LinkAdrReq+0x142>
            channelsMask[0] = 0x0000;
 800c15c:	2300      	movs	r3, #0
 800c15e:	8023      	strh	r3, [r4, #0]
 800c160:	e7f5      	b.n	800c14e <RegionAU915LinkAdrReq+0x12e>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800c162:	88b2      	ldrh	r2, [r6, #4]
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800c164:	2b05      	cmp	r3, #5
 800c166:	d13d      	bne.n	800c1e4 <RegionAU915LinkAdrReq+0x1c4>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800c168:	2100      	movs	r1, #0
 800c16a:	403a      	ands	r2, r7
 800c16c:	9204      	str	r2, [sp, #16]
            uint8_t cntChannelMask = 0;
 800c16e:	000a      	movs	r2, r1
                        channelsMask[4] |= ( bitMask << i );
 800c170:	2001      	movs	r0, #1
                    if( ( i % 2 ) == 0 )
 800c172:	2301      	movs	r3, #1
                        channelsMask[4] |= ( bitMask << i );
 800c174:	4088      	lsls	r0, r1
                    if( ( i % 2 ) == 0 )
 800c176:	400b      	ands	r3, r1
                        channelsMask[cntChannelMask] |= 0x00FF;
 800c178:	0056      	lsls	r6, r2, #1
                    if( ( i % 2 ) == 0 )
 800c17a:	469c      	mov	ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800c17c:	5b33      	ldrh	r3, [r6, r4]
 800c17e:	9302      	str	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800c180:	b203      	sxth	r3, r0
 800c182:	9303      	str	r3, [sp, #12]
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800c184:	0003      	movs	r3, r0
 800c186:	9804      	ldr	r0, [sp, #16]
 800c188:	4203      	tst	r3, r0
 800c18a:	d018      	beq.n	800c1be <RegionAU915LinkAdrReq+0x19e>
                    if( ( i % 2 ) == 0 )
 800c18c:	4663      	mov	r3, ip
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10a      	bne.n	800c1a8 <RegionAU915LinkAdrReq+0x188>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800c192:	9b02      	ldr	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800c194:	9803      	ldr	r0, [sp, #12]
                        channelsMask[cntChannelMask] |= 0x00FF;
 800c196:	433b      	orrs	r3, r7
 800c198:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800c19a:	8923      	ldrh	r3, [r4, #8]
 800c19c:	4303      	orrs	r3, r0
 800c19e:	8123      	strh	r3, [r4, #8]
            for( uint8_t i = 0; i <= 7; i++ )
 800c1a0:	3101      	adds	r1, #1
 800c1a2:	2908      	cmp	r1, #8
 800c1a4:	d1e4      	bne.n	800c170 <RegionAU915LinkAdrReq+0x150>
 800c1a6:	e753      	b.n	800c050 <RegionAU915LinkAdrReq+0x30>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800c1a8:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <RegionAU915LinkAdrReq+0x1d4>)
 800c1aa:	9802      	ldr	r0, [sp, #8]
 800c1ac:	4318      	orrs	r0, r3
 800c1ae:	5330      	strh	r0, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800c1b0:	8923      	ldrh	r3, [r4, #8]
 800c1b2:	9803      	ldr	r0, [sp, #12]
 800c1b4:	4303      	orrs	r3, r0
 800c1b6:	8123      	strh	r3, [r4, #8]
                        cntChannelMask++;
 800c1b8:	3201      	adds	r2, #1
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	e7f0      	b.n	800c1a0 <RegionAU915LinkAdrReq+0x180>
                        channelsMask[4] &= ~( bitMask << i );
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	43d8      	mvns	r0, r3
                    if( ( i % 2 ) == 0 )
 800c1c2:	4663      	mov	r3, ip
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d106      	bne.n	800c1d6 <RegionAU915LinkAdrReq+0x1b6>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800c1c8:	9b02      	ldr	r3, [sp, #8]
 800c1ca:	43bb      	bics	r3, r7
 800c1cc:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800c1ce:	8923      	ldrh	r3, [r4, #8]
 800c1d0:	4018      	ands	r0, r3
 800c1d2:	8120      	strh	r0, [r4, #8]
 800c1d4:	e7e4      	b.n	800c1a0 <RegionAU915LinkAdrReq+0x180>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800c1d6:	9b02      	ldr	r3, [sp, #8]
 800c1d8:	403b      	ands	r3, r7
 800c1da:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800c1dc:	8923      	ldrh	r3, [r4, #8]
 800c1de:	4018      	ands	r0, r3
 800c1e0:	8120      	strh	r0, [r4, #8]
 800c1e2:	e7e9      	b.n	800c1b8 <RegionAU915LinkAdrReq+0x198>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	531a      	strh	r2, [r3, r4]
 800c1e8:	e732      	b.n	800c050 <RegionAU915LinkAdrReq+0x30>
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	2000130c 	.word	0x2000130c
 800c1f0:	20000f98 	.word	0x20000f98
 800c1f4:	ffffff00 	.word	0xffffff00

0800c1f8 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800c1fc:	6840      	ldr	r0, [r0, #4]
 800c1fe:	f7ff fc57 	bl	800bab0 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800c202:	1e43      	subs	r3, r0, #1
 800c204:	4198      	sbcs	r0, r3
 800c206:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800c208:	2000      	movs	r0, #0
 800c20a:	220d      	movs	r2, #13
 800c20c:	2108      	movs	r1, #8
 800c20e:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800c210:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800c212:	f000 f913 	bl	800c43c <RegionCommonValueInRange>
 800c216:	2800      	cmp	r0, #0
 800c218:	d101      	bne.n	800c21e <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800c21a:	2302      	movs	r3, #2
 800c21c:	439c      	bics	r4, r3
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 800c21e:	2300      	movs	r3, #0
 800c220:	56eb      	ldrsb	r3, [r5, r3]
 800c222:	2b07      	cmp	r3, #7
 800c224:	d001      	beq.n	800c22a <RegionAU915RxParamSetupReq+0x32>
 800c226:	2b0d      	cmp	r3, #13
 800c228:	dd01      	ble.n	800c22e <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800c22a:	2302      	movs	r3, #2
 800c22c:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 800c22e:	2001      	movs	r0, #1
 800c230:	2206      	movs	r2, #6
 800c232:	2100      	movs	r1, #0
 800c234:	5628      	ldrsb	r0, [r5, r0]
 800c236:	f000 f901 	bl	800c43c <RegionCommonValueInRange>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d101      	bne.n	800c242 <RegionAU915RxParamSetupReq+0x4a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800c23e:	2304      	movs	r3, #4
 800c240:	439c      	bics	r4, r3
    }

    return status;
}
 800c242:	0020      	movs	r0, r4
 800c244:	bd70      	pop	{r4, r5, r6, pc}

0800c246 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 800c246:	2000      	movs	r0, #0
 800c248:	4770      	bx	lr

0800c24a <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800c24a:	2000      	movs	r0, #0
 800c24c:	4770      	bx	lr

0800c24e <RegionAU915DlChannelReq>:
 800c24e:	2000      	movs	r0, #0
 800c250:	4770      	bx	lr
	...

0800c254 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    static int8_t trialsCount = 0;

    // Re-enable 500 kHz default channels
    NvmCtx.ChannelsMask[4] = CHANNELS_MASK_500KHZ_MASK;
 800c254:	23df      	movs	r3, #223	; 0xdf
 800c256:	2100      	movs	r1, #0
 800c258:	4a05      	ldr	r2, [pc, #20]	; (800c270 <RegionAU915AlternateDr+0x1c>)
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	52d1      	strh	r1, [r2, r3]

    if( ( trialsCount & 0x01 ) == 0x01 )
 800c25e:	4a05      	ldr	r2, [pc, #20]	; (800c274 <RegionAU915AlternateDr+0x20>)
    {
        currentDr = DR_6;
 800c260:	2006      	movs	r0, #6
    if( ( trialsCount & 0x01 ) == 0x01 )
 800c262:	7813      	ldrb	r3, [r2, #0]
 800c264:	07d9      	lsls	r1, r3, #31
 800c266:	d400      	bmi.n	800c26a <RegionAU915AlternateDr+0x16>
    }
    else
    {
        currentDr = DR_2;
 800c268:	3804      	subs	r0, #4
    }
    trialsCount++;
 800c26a:	3301      	adds	r3, #1
 800c26c:	7013      	strb	r3, [r2, #0]
    return currentDr;
}
 800c26e:	4770      	bx	lr
 800c270:	20000f98 	.word	0x20000f98
 800c274:	20001330 	.word	0x20001330

0800c278 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c27a:	b0a7      	sub	sp, #156	; 0x9c
 800c27c:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800c27e:	230a      	movs	r3, #10
 800c280:	2500      	movs	r5, #0
{
 800c282:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 800c284:	aa04      	add	r2, sp, #16
 800c286:	189b      	adds	r3, r3, r2
 800c288:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800c28a:	230b      	movs	r3, #11
{
 800c28c:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800c28e:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800c290:	0029      	movs	r1, r5
 800c292:	2244      	movs	r2, #68	; 0x44
{
 800c294:	0004      	movs	r4, r0
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800c296:	a815      	add	r0, sp, #84	; 0x54
    uint8_t nbRestrictedChannels = 0;
 800c298:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800c29a:	9514      	str	r5, [sp, #80]	; 0x50
 800c29c:	f002 f97f 	bl	800e59e <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 800c2a0:	4e2b      	ldr	r6, [pc, #172]	; (800c350 <RegionAU915NextChannel+0xd8>)
 800c2a2:	2204      	movs	r2, #4
 800c2a4:	0029      	movs	r1, r5
 800c2a6:	0030      	movs	r0, r6
 800c2a8:	f000 f8e6 	bl	800c478 <RegionCommonCountChannels>
 800c2ac:	42a8      	cmp	r0, r5
 800c2ae:	d104      	bne.n	800c2ba <RegionAU915NextChannel+0x42>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 800c2b0:	2204      	movs	r2, #4
 800c2b2:	0030      	movs	r0, r6
 800c2b4:	4927      	ldr	r1, [pc, #156]	; (800c354 <RegionAU915NextChannel+0xdc>)
 800c2b6:	f000 f8fe 	bl	800c4b6 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 800c2ba:	2008      	movs	r0, #8
 800c2bc:	5620      	ldrsb	r0, [r4, r0]
 800c2be:	2805      	cmp	r0, #5
 800c2c0:	dd05      	ble.n	800c2ce <RegionAU915NextChannel+0x56>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 800c2c2:	22df      	movs	r2, #223	; 0xdf
 800c2c4:	4b24      	ldr	r3, [pc, #144]	; (800c358 <RegionAU915NextChannel+0xe0>)
 800c2c6:	0092      	lsls	r2, r2, #2
 800c2c8:	5a99      	ldrh	r1, [r3, r2]
 800c2ca:	320c      	adds	r2, #12
 800c2cc:	5299      	strh	r1, [r3, r2]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c2ce:	7a63      	ldrb	r3, [r4, #9]
 800c2d0:	ae07      	add	r6, sp, #28
 800c2d2:	7033      	strb	r3, [r6, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMaskRemaining;
 800c2d4:	4b1e      	ldr	r3, [pc, #120]	; (800c350 <RegionAU915NextChannel+0xd8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c2d6:	7070      	strb	r0, [r6, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMaskRemaining;
 800c2d8:	9308      	str	r3, [sp, #32]
    countChannelsParams.Channels = NvmCtx.Channels;
 800c2da:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <RegionAU915NextChannel+0xe0>)
    countChannelsParams.Bands = NvmCtx.Bands;
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = 0;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c2dc:	ad0c      	add	r5, sp, #48	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 800c2de:	9309      	str	r3, [sp, #36]	; 0x24
    countChannelsParams.Bands = NvmCtx.Bands;
 800c2e0:	4b1e      	ldr	r3, [pc, #120]	; (800c35c <RegionAU915NextChannel+0xe4>)
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c2e2:	0022      	movs	r2, r4
    countChannelsParams.Bands = NvmCtx.Bands;
 800c2e4:	930a      	str	r3, [sp, #40]	; 0x28
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 800c2e6:	2348      	movs	r3, #72	; 0x48
 800c2e8:	930b      	str	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c2ea:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c2ec:	320c      	adds	r2, #12
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c2ee:	930c      	str	r3, [sp, #48]	; 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c2f0:	6863      	ldr	r3, [r4, #4]
 800c2f2:	930d      	str	r3, [sp, #52]	; 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c2f4:	7aa3      	ldrb	r3, [r4, #10]
 800c2f6:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c2fc:	ab0f      	add	r3, sp, #60	; 0x3c
 800c2fe:	ca82      	ldmia	r2!, {r1, r7}
 800c300:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c302:	7d23      	ldrb	r3, [r4, #20]
 800c304:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c306:	8ae1      	ldrh	r1, [r4, #22]
 800c308:	f7ff fbb6 	bl	800ba78 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c30c:	9613      	str	r6, [sp, #76]	; 0x4c

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c30e:	260a      	movs	r6, #10
 800c310:	ab04      	add	r3, sp, #16
 800c312:	18f6      	adds	r6, r6, r3
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	aa04      	add	r2, sp, #16
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	230b      	movs	r3, #11
 800c31c:	ac14      	add	r4, sp, #80	; 0x50
 800c31e:	189b      	adds	r3, r3, r2
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c320:	9012      	str	r0, [sp, #72]	; 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	0028      	movs	r0, r5
 800c326:	0033      	movs	r3, r6
 800c328:	0022      	movs	r2, r4
 800c32a:	9905      	ldr	r1, [sp, #20]
 800c32c:	f000 fa87 	bl	800c83e <RegionCommonIdentifyChannels>
 800c330:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c332:	d10a      	bne.n	800c34a <RegionAU915NextChannel+0xd2>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c334:	7831      	ldrb	r1, [r6, #0]
 800c336:	3901      	subs	r1, #1
 800c338:	f000 fb02 	bl	800c940 <randr>
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	5c21      	ldrb	r1, [r4, r0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 800c340:	2240      	movs	r2, #64	; 0x40
 800c342:	4803      	ldr	r0, [pc, #12]	; (800c350 <RegionAU915NextChannel+0xd8>)
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c344:	7019      	strb	r1, [r3, #0]
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 800c346:	f000 f883 	bl	800c450 <RegionCommonChanDisable>
    }
    return status;
}
 800c34a:	0028      	movs	r0, r5
 800c34c:	b027      	add	sp, #156	; 0x9c
 800c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c350:	20001318 	.word	0x20001318
 800c354:	2000130c 	.word	0x2000130c
 800c358:	20000f98 	.word	0x20000f98
 800c35c:	200012f8 	.word	0x200012f8

0800c360 <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c360:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800c362:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800c364:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800c366:	4b10      	ldr	r3, [pc, #64]	; (800c3a8 <RegionAU915SetContinuousWave+0x48>)
 800c368:	434a      	muls	r2, r1
 800c36a:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800c36c:	189a      	adds	r2, r3, r2
 800c36e:	7a51      	ldrb	r1, [r2, #9]
 800c370:	2214      	movs	r2, #20
{
 800c372:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800c374:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c376:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800c378:	189b      	adds	r3, r3, r2
 800c37a:	4a0c      	ldr	r2, [pc, #48]	; (800c3ac <RegionAU915SetContinuousWave+0x4c>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c37c:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800c37e:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	7882      	ldrb	r2, [r0, #2]
 800c384:	1c18      	adds	r0, r3, #0
 800c386:	b25b      	sxtb	r3, r3
 800c388:	428b      	cmp	r3, r1
 800c38a:	da00      	bge.n	800c38e <RegionAU915SetContinuousWave+0x2e>
 800c38c:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c38e:	68a2      	ldr	r2, [r4, #8]
 800c390:	6861      	ldr	r1, [r4, #4]
 800c392:	b240      	sxtb	r0, r0
 800c394:	f000 f9e2 	bl	800c75c <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c398:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <RegionAU915SetContinuousWave+0x50>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c39a:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39e:	0028      	movs	r0, r5
 800c3a0:	89a2      	ldrh	r2, [r4, #12]
 800c3a2:	9301      	str	r3, [sp, #4]
 800c3a4:	4798      	blx	r3
}
 800c3a6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800c3a8:	20000f98 	.word	0x20000f98
 800c3ac:	00000362 	.word	0x00000362
 800c3b0:	0800f22c 	.word	0x0800f22c

0800c3b4 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 800c3b4:	2306      	movs	r3, #6
 800c3b6:	434b      	muls	r3, r1
 800c3b8:	4904      	ldr	r1, [pc, #16]	; (800c3cc <RegionAU915ApplyDrOffset+0x18>)
 800c3ba:	18c9      	adds	r1, r1, r3
 800c3bc:	568b      	ldrsb	r3, [r1, r2]
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
        }
    }
    return datarate;
 800c3be:	1c18      	adds	r0, r3, #0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	da00      	bge.n	800c3c6 <RegionAU915ApplyDrOffset+0x12>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	b2c0      	uxtb	r0, r0
}
 800c3c8:	4770      	bx	lr
 800c3ca:	46c0      	nop			; (mov r8, r8)
 800c3cc:	0800f0e4 	.word	0x0800f0e4

0800c3d0 <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800c3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3d2:	9101      	str	r1, [sp, #4]
 800c3d4:	a908      	add	r1, sp, #32
 800c3d6:	7809      	ldrb	r1, [r1, #0]
 800c3d8:	9000      	str	r0, [sp, #0]
 800c3da:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800c3dc:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	db29      	blt.n	800c436 <RegionCommonChanVerifyDr+0x66>
 800c3e2:	428a      	cmp	r2, r1
 800c3e4:	dc27      	bgt.n	800c436 <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c3e6:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c3e8:	260f      	movs	r6, #15
 800c3ea:	e01e      	b.n	800c42a <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c3ec:	9c01      	ldr	r4, [sp, #4]
 800c3ee:	0041      	lsls	r1, r0, #1
 800c3f0:	5b09      	ldrh	r1, [r1, r4]
 800c3f2:	2500      	movs	r5, #0
 800c3f4:	468c      	mov	ip, r1
 800c3f6:	210c      	movs	r1, #12
 800c3f8:	434b      	muls	r3, r1
 800c3fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3fc:	18cb      	adds	r3, r1, r3
 800c3fe:	4661      	mov	r1, ip
 800c400:	4129      	asrs	r1, r5
 800c402:	4239      	tst	r1, r7
 800c404:	d00b      	beq.n	800c41e <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800c406:	2408      	movs	r4, #8
 800c408:	7a19      	ldrb	r1, [r3, #8]
 800c40a:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c40c:	0709      	lsls	r1, r1, #28
 800c40e:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800c410:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 800c412:	4031      	ands	r1, r6
 800c414:	428a      	cmp	r2, r1
 800c416:	db02      	blt.n	800c41e <RegionCommonChanVerifyDr+0x4e>
 800c418:	4034      	ands	r4, r6
 800c41a:	42a2      	cmp	r2, r4
 800c41c:	dd0c      	ble.n	800c438 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800c41e:	3501      	adds	r5, #1
 800c420:	330c      	adds	r3, #12
 800c422:	2d10      	cmp	r5, #16
 800c424:	d1eb      	bne.n	800c3fe <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c426:	3001      	adds	r0, #1
 800c428:	b2c0      	uxtb	r0, r0
 800c42a:	0103      	lsls	r3, r0, #4
 800c42c:	9900      	ldr	r1, [sp, #0]
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	4299      	cmp	r1, r3
 800c432:	d8db      	bhi.n	800c3ec <RegionCommonChanVerifyDr+0x1c>
        return false;
 800c434:	2000      	movs	r0, #0
}
 800c436:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800c438:	2001      	movs	r0, #1
 800c43a:	e7fc      	b.n	800c436 <RegionCommonChanVerifyDr+0x66>

0800c43c <RegionCommonValueInRange>:
{
 800c43c:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800c43e:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800c440:	428b      	cmp	r3, r1
 800c442:	db04      	blt.n	800c44e <RegionCommonValueInRange+0x12>
 800c444:	0fd8      	lsrs	r0, r3, #31
 800c446:	17d1      	asrs	r1, r2, #31
 800c448:	429a      	cmp	r2, r3
 800c44a:	4148      	adcs	r0, r1
        return 1;
 800c44c:	b2c0      	uxtb	r0, r0
}
 800c44e:	4770      	bx	lr

0800c450 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800c450:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800c452:	090b      	lsrs	r3, r1, #4
{
 800c454:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c456:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800c458:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c45a:	429d      	cmp	r5, r3
 800c45c:	d30b      	bcc.n	800c476 <RegionCommonChanDisable+0x26>
 800c45e:	4291      	cmp	r1, r2
 800c460:	d209      	bcs.n	800c476 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c462:	220f      	movs	r2, #15
 800c464:	3001      	adds	r0, #1
 800c466:	4011      	ands	r1, r2
 800c468:	0002      	movs	r2, r0
 800c46a:	408a      	lsls	r2, r1
 800c46c:	0011      	movs	r1, r2
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	5ae2      	ldrh	r2, [r4, r3]
 800c472:	438a      	bics	r2, r1
 800c474:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800c476:	bd30      	pop	{r4, r5, pc}

0800c478 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c47a:	1e03      	subs	r3, r0, #0
 800c47c:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c47e:	d005      	beq.n	800c48c <RegionCommonCountChannels+0x14>
 800c480:	0048      	lsls	r0, r1, #1
 800c482:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800c484:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c486:	9a01      	ldr	r2, [sp, #4]
 800c488:	4291      	cmp	r1, r2
 800c48a:	d300      	bcc.n	800c48e <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800c48c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c48e:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800c490:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c492:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c494:	2501      	movs	r5, #1
 800c496:	40a5      	lsls	r5, r4
 800c498:	002e      	movs	r6, r5
 800c49a:	403e      	ands	r6, r7
 800c49c:	42b5      	cmp	r5, r6
 800c49e:	d101      	bne.n	800c4a4 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800c4a4:	3401      	adds	r4, #1
 800c4a6:	2c10      	cmp	r4, #16
 800c4a8:	d1f4      	bne.n	800c494 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c4aa:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c4ac:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c4ae:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c4b0:	b2c9      	uxtb	r1, r1
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	e7e7      	b.n	800c486 <RegionCommonCountChannels+0xe>

0800c4b6 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800c4b6:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d005      	beq.n	800c4c8 <RegionCommonChanMaskCopy+0x12>
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	d003      	beq.n	800c4c8 <RegionCommonChanMaskCopy+0x12>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d100      	bne.n	800c4ca <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800c4c8:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c4ca:	5acc      	ldrh	r4, [r1, r3]
 800c4cc:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800c4ce:	3302      	adds	r3, #2
 800c4d0:	e7f8      	b.n	800c4c4 <RegionCommonChanMaskCopy+0xe>
	...

0800c4d4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	b570      	push	{r4, r5, r6, lr}
 800c4d8:	8805      	ldrh	r5, [r0, #0]
 800c4da:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	d111      	bne.n	800c504 <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 800c4e0:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800c4e2:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800c4e4:	0136      	lsls	r6, r6, #4
 800c4e6:	42b3      	cmp	r3, r6
 800c4e8:	d307      	bcc.n	800c4fa <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800c4ea:	4c0e      	ldr	r4, [pc, #56]	; (800c524 <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	4152      	adcs	r2, r2
 800c4f0:	4254      	negs	r4, r2
 800c4f2:	4a0d      	ldr	r2, [pc, #52]	; (800c528 <RegionCommonSetBandTxDone+0x54>)
 800c4f4:	4b0d      	ldr	r3, [pc, #52]	; (800c52c <RegionCommonSetBandTxDone+0x58>)
 800c4f6:	4014      	ands	r4, r2
 800c4f8:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c4fa:	1c2b      	adds	r3, r5, #0
 800c4fc:	42a5      	cmp	r5, r4
 800c4fe:	d200      	bcs.n	800c502 <RegionCommonSetBandTxDone+0x2e>
 800c500:	1c23      	adds	r3, r4, #0
 800c502:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c504:	6882      	ldr	r2, [r0, #8]
 800c506:	1c2b      	adds	r3, r5, #0
 800c508:	2d00      	cmp	r5, #0
 800c50a:	d100      	bne.n	800c50e <RegionCommonSetBandTxDone+0x3a>
 800c50c:	2301      	movs	r3, #1
 800c50e:	b29b      	uxth	r3, r3
 800c510:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800c512:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c514:	428a      	cmp	r2, r1
 800c516:	d900      	bls.n	800c51a <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c518:	1a53      	subs	r3, r2, r1
 800c51a:	6083      	str	r3, [r0, #8]
    }
}
 800c51c:	bc70      	pop	{r4, r5, r6}
 800c51e:	bc08      	pop	{r3}
 800c520:	b002      	add	sp, #8
 800c522:	4718      	bx	r3
 800c524:	00009aaf 	.word	0x00009aaf
 800c528:	ffffdcd8 	.word	0xffffdcd8
 800c52c:	00002710 	.word	0x00002710

0800c530 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c532:	b087      	sub	sp, #28
 800c534:	9302      	str	r3, [sp, #8]
 800c536:	ab0c      	add	r3, sp, #48	; 0x30
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	0015      	movs	r5, r2
 800c53c:	000c      	movs	r4, r1
 800c53e:	9305      	str	r3, [sp, #20]
 800c540:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c542:	f001 fd3d 	bl	800dfc0 <UTIL_TIMER_GetCurrentTime>
 800c546:	2214      	movs	r2, #20
 800c548:	4355      	muls	r5, r2
 800c54a:	1963      	adds	r3, r4, r5
 800c54c:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c54e:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800c550:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c552:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c554:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c556:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 800c558:	9b04      	ldr	r3, [sp, #16]
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	d107      	bne.n	800c56e <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 800c55e:	2e00      	cmp	r6, #0
 800c560:	d102      	bne.n	800c568 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800c562:	2301      	movs	r3, #1
 800c564:	425b      	negs	r3, r3
 800c566:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 800c568:	9801      	ldr	r0, [sp, #4]
 800c56a:	b007      	add	sp, #28
 800c56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c56e:	990d      	ldr	r1, [sp, #52]	; 0x34
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c570:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 800c572:	2f00      	cmp	r7, #0
 800c574:	d112      	bne.n	800c59c <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 800c576:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800c578:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800c57a:	0100      	lsls	r0, r0, #4
 800c57c:	4281      	cmp	r1, r0
 800c57e:	d308      	bcc.n	800c592 <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 800c580:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800c582:	4b27      	ldr	r3, [pc, #156]	; (800c620 <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800c584:	428b      	cmp	r3, r1
 800c586:	4178      	adcs	r0, r7
 800c588:	4926      	ldr	r1, [pc, #152]	; (800c624 <RegionCommonUpdateBandTimeOff+0xf4>)
 800c58a:	4243      	negs	r3, r0
 800c58c:	400b      	ands	r3, r1
 800c58e:	4926      	ldr	r1, [pc, #152]	; (800c628 <RegionCommonUpdateBandTimeOff+0xf8>)
 800c590:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c592:	1c11      	adds	r1, r2, #0
 800c594:	429a      	cmp	r2, r3
 800c596:	d200      	bcs.n	800c59a <RegionCommonUpdateBandTimeOff+0x6a>
 800c598:	1c19      	adds	r1, r3, #0
 800c59a:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 800c59c:	1c15      	adds	r5, r2, #0
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	d100      	bne.n	800c5a4 <RegionCommonUpdateBandTimeOff+0x74>
 800c5a2:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	b2ad      	uxth	r5, r5
    if( joined == false )
 800c5a8:	2f00      	cmp	r7, #0
 800c5aa:	d104      	bne.n	800c5b6 <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 800c5ac:	2164      	movs	r1, #100	; 0x64
 800c5ae:	0028      	movs	r0, r5
 800c5b0:	f7f3 fdd0 	bl	8000154 <__udivsi3>
 800c5b4:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800c5b6:	4b1d      	ldr	r3, [pc, #116]	; (800c62c <RegionCommonUpdateBandTimeOff+0xfc>)
 800c5b8:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 800c5ba:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800c5bc:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d100      	bne.n	800c5c4 <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 800c5c2:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 800c5c4:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 800c5c6:	2f00      	cmp	r7, #0
 800c5c8:	d102      	bne.n	800c5d0 <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 800c5ca:	2a00      	cmp	r2, #0
 800c5cc:	d103      	bne.n	800c5d6 <RegionCommonUpdateBandTimeOff+0xa6>
 800c5ce:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	d100      	bne.n	800c5d6 <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 800c5d4:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c5d6:	f001 fcfd 	bl	800dfd4 <UTIL_TIMER_GetElapsedTime>
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 800c5de:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c5e0:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 800c5e2:	4298      	cmp	r0, r3
 800c5e4:	d900      	bls.n	800c5e8 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 800c5e6:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 800c5e8:	9a03      	ldr	r2, [sp, #12]
 800c5ea:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c5ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5ee:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c5f0:	68a2      	ldr	r2, [r4, #8]
 800c5f2:	42aa      	cmp	r2, r5
 800c5f4:	d802      	bhi.n	800c5fc <RegionCommonUpdateBandTimeOff+0xcc>
 800c5f6:	9902      	ldr	r1, [sp, #8]
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d105      	bne.n	800c608 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	7423      	strb	r3, [r4, #16]
            validBands++;
 800c600:	18f6      	adds	r6, r6, r3
                validBands++;
 800c602:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800c604:	3414      	adds	r4, #20
 800c606:	e7a7      	b.n	800c558 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 800c608:	2100      	movs	r1, #0
 800c60a:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 800c60c:	429d      	cmp	r5, r3
 800c60e:	d2f9      	bcs.n	800c604 <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	1aad      	subs	r5, r5, r2
 800c614:	42ab      	cmp	r3, r5
 800c616:	d900      	bls.n	800c61a <RegionCommonUpdateBandTimeOff+0xea>
 800c618:	9501      	str	r5, [sp, #4]
                validBands++;
 800c61a:	3601      	adds	r6, #1
 800c61c:	e7f1      	b.n	800c602 <RegionCommonUpdateBandTimeOff+0xd2>
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	00009aaf 	.word	0x00009aaf
 800c624:	ffffdcd8 	.word	0xffffdcd8
 800c628:	00002710 	.word	0x00002710
 800c62c:	0036ee80 	.word	0x0036ee80

0800c630 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800c630:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c632:	7802      	ldrb	r2, [r0, #0]
{
 800c634:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800c636:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c638:	2a03      	cmp	r2, #3
 800c63a:	d113      	bne.n	800c664 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800c63c:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c63e:	300f      	adds	r0, #15
 800c640:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c642:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c644:	4004      	ands	r4, r0
 800c646:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c648:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c64a:	789a      	ldrb	r2, [r3, #2]
 800c64c:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c64e:	78dc      	ldrb	r4, [r3, #3]
 800c650:	0224      	lsls	r4, r4, #8
 800c652:	4322      	orrs	r2, r4
 800c654:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800c656:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c658:	065a      	lsls	r2, r3, #25
 800c65a:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800c65c:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c65e:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c660:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800c662:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800c664:	bd10      	pop	{r4, pc}

0800c666 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c666:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c668:	b087      	sub	sp, #28
 800c66a:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800c66c:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800c66e:	2707      	movs	r7, #7
{
 800c670:	9103      	str	r1, [sp, #12]
 800c672:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800c674:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800c676:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c678:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c67a:	7943      	ldrb	r3, [r0, #5]
{
 800c67c:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800c67e:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800c680:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800c682:	2b00      	cmp	r3, #0
 800c684:	d026      	beq.n	800c6d4 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800c686:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800c688:	2d00      	cmp	r5, #0
 800c68a:	d019      	beq.n	800c6c0 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c68c:	69a2      	ldr	r2, [r4, #24]
 800c68e:	2314      	movs	r3, #20
 800c690:	9201      	str	r2, [sp, #4]
 800c692:	2215      	movs	r2, #21
 800c694:	56a2      	ldrsb	r2, [r4, r2]
 800c696:	56e3      	ldrsb	r3, [r4, r3]
 800c698:	9200      	str	r2, [sp, #0]
 800c69a:	7b20      	ldrb	r0, [r4, #12]
 800c69c:	9a02      	ldr	r2, [sp, #8]
 800c69e:	6921      	ldr	r1, [r4, #16]
 800c6a0:	f7ff fe96 	bl	800c3d0 <RegionCommonChanVerifyDr>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d101      	bne.n	800c6ac <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c6ac:	231d      	movs	r3, #29
 800c6ae:	221c      	movs	r2, #28
 800c6b0:	56e3      	ldrsb	r3, [r4, r3]
 800c6b2:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800c6b4:	42bb      	cmp	r3, r7
 800c6b6:	dc15      	bgt.n	800c6e4 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800c6b8:	42ba      	cmp	r2, r7
 800c6ba:	da14      	bge.n	800c6e6 <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c6bc:	2304      	movs	r3, #4
 800c6be:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800c6c0:	0028      	movs	r0, r5
    *dr = datarate;
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	9a02      	ldr	r2, [sp, #8]
 800c6c6:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800c6c8:	9b04      	ldr	r3, [sp, #16]
 800c6ca:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800c6cc:	9b05      	ldr	r3, [sp, #20]
 800c6ce:	701e      	strb	r6, [r3, #0]
}
 800c6d0:	b007      	add	sp, #28
 800c6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800c6d4:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800c6d6:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800c6d8:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800c6da:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800c6dc:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800c6de:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800c6e0:	57c7      	ldrsb	r7, [r0, r7]
 800c6e2:	e7d1      	b.n	800c688 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800c6e4:	001f      	movs	r7, r3
    if( status == 0x07 )
 800c6e6:	2d07      	cmp	r5, #7
 800c6e8:	d1ea      	bne.n	800c6c0 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	d1e8      	bne.n	800c6c0 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7e6      	b.n	800c6c0 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800c6f4 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 800c6f8:	4802      	ldr	r0, [pc, #8]	; (800c704 <RegionCommonComputeSymbolTimeLoRa+0x10>)
 800c6fa:	f7f3 fd2b 	bl	8000154 <__udivsi3>
 800c6fe:	40a0      	lsls	r0, r4
}
 800c700:	bd10      	pop	{r4, pc}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	3b9aca00 	.word	0x3b9aca00

0800c708 <RegionCommonComputeRxWindowParameters>:
    // ((8 * 1000000) / 50);
    return 160000UL;
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800c70c:	480f      	ldr	r0, [pc, #60]	; (800c74c <RegionCommonComputeRxWindowParameters+0x44>)
{
 800c70e:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800c710:	4350      	muls	r0, r2
 800c712:	1e62      	subs	r2, r4, #1
 800c714:	0021      	movs	r1, r4
 800c716:	1880      	adds	r0, r0, r2
{
 800c718:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800c71a:	f7f3 fd1b 	bl	8000154 <__udivsi3>
 800c71e:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <RegionCommonComputeRxWindowParameters+0x48>)
 800c720:	18f3      	adds	r3, r6, r3
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	18c0      	adds	r0, r0, r3
 800c726:	42b0      	cmp	r0, r6
 800c728:	d200      	bcs.n	800c72c <RegionCommonComputeRxWindowParameters+0x24>
 800c72a:	0030      	movs	r0, r6
 800c72c:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800c72e:	4909      	ldr	r1, [pc, #36]	; (800c754 <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800c730:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800c732:	00a3      	lsls	r3, r4, #2
 800c734:	4344      	muls	r4, r0
 800c736:	0864      	lsrs	r4, r4, #1
 800c738:	1b18      	subs	r0, r3, r4
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <RegionCommonComputeRxWindowParameters+0x50>)
 800c73c:	43ed      	mvns	r5, r5
 800c73e:	18c0      	adds	r0, r0, r3
 800c740:	f7f3 fd92 	bl	8000268 <__divsi3>
 800c744:	9b05      	ldr	r3, [sp, #20]
 800c746:	1940      	adds	r0, r0, r5
 800c748:	6018      	str	r0, [r3, #0]
}
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	001e8480 	.word	0x001e8480
 800c750:	7ffffffc 	.word	0x7ffffffc
 800c754:	000f4240 	.word	0x000f4240
 800c758:	000f423f 	.word	0x000f423f

0800c75c <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800c75c:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c75e:	0040      	lsls	r0, r0, #1
{
 800c760:	1c14      	adds	r4, r2, #0
 800c762:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c764:	f7f4 f990 	bl	8000a88 <__aeabi_ui2f>
 800c768:	1c01      	adds	r1, r0, #0
 800c76a:	1c28      	adds	r0, r5, #0
 800c76c:	f7f3 ffde 	bl	800072c <__aeabi_fsub>
 800c770:	1c21      	adds	r1, r4, #0
 800c772:	f7f3 ffdb 	bl	800072c <__aeabi_fsub>
 800c776:	f7f5 fcf5 	bl	8002164 <__aeabi_f2d>
 800c77a:	f001 ff19 	bl	800e5b0 <floor>
 800c77e:	f7f5 fc95 	bl	80020ac <__aeabi_d2iz>

    return phyTxPower;
 800c782:	b240      	sxtb	r0, r0
}
 800c784:	bd70      	pop	{r4, r5, r6, pc}

0800c786 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800c786:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c788:	b089      	sub	sp, #36	; 0x24
 800c78a:	9307      	str	r3, [sp, #28]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c78c:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800c78e:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800c790:	001d      	movs	r5, r3
{
 800c792:	9105      	str	r1, [sp, #20]
 800c794:	9206      	str	r2, [sp, #24]
 800c796:	011a      	lsls	r2, r3, #4
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c79c:	9901      	ldr	r1, [sp, #4]
 800c79e:	8a02      	ldrh	r2, [r0, #16]
 800c7a0:	428a      	cmp	r2, r1
 800c7a2:	d806      	bhi.n	800c7b2 <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800c7a4:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800c7a6:	9b06      	ldr	r3, [sp, #24]
 800c7a8:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800c7aa:	9b07      	ldr	r3, [sp, #28]
 800c7ac:	701a      	strb	r2, [r3, #0]
}
 800c7ae:	b009      	add	sp, #36	; 0x24
 800c7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7b2:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800c7b4:	005a      	lsls	r2, r3, #1
 800c7b6:	9204      	str	r2, [sp, #16]
 800c7b8:	9a01      	ldr	r2, [sp, #4]
 800c7ba:	4356      	muls	r6, r2
 800c7bc:	2200      	movs	r2, #0
 800c7be:	6841      	ldr	r1, [r0, #4]
 800c7c0:	9c04      	ldr	r4, [sp, #16]
 800c7c2:	2701      	movs	r7, #1
 800c7c4:	5b09      	ldrh	r1, [r1, r4]
 800c7c6:	4111      	asrs	r1, r2
 800c7c8:	4239      	tst	r1, r7
 800c7ca:	d02a      	beq.n	800c822 <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800c7cc:	6881      	ldr	r1, [r0, #8]
 800c7ce:	198c      	adds	r4, r1, r6
 800c7d0:	6821      	ldr	r1, [r4, #0]
 800c7d2:	2900      	cmp	r1, #0
 800c7d4:	d025      	beq.n	800c822 <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800c7d6:	7801      	ldrb	r1, [r0, #0]
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	d105      	bne.n	800c7e8 <RegionCommonCountNbOfEnabledChannels+0x62>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 800c7dc:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800c7de:	2900      	cmp	r1, #0
 800c7e0:	d002      	beq.n	800c7e8 <RegionCommonCountNbOfEnabledChannels+0x62>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 800c7e2:	4111      	asrs	r1, r2
 800c7e4:	4239      	tst	r1, r7
 800c7e6:	d01c      	beq.n	800c822 <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800c7e8:	2101      	movs	r1, #1
 800c7ea:	5641      	ldrsb	r1, [r0, r1]
 800c7ec:	9102      	str	r1, [sp, #8]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800c7ee:	7a21      	ldrb	r1, [r4, #8]
 800c7f0:	070f      	lsls	r7, r1, #28
 800c7f2:	9103      	str	r1, [sp, #12]
    if( ( value >= min ) && ( value <= max ) )
 800c7f4:	9902      	ldr	r1, [sp, #8]
 800c7f6:	173f      	asrs	r7, r7, #28
 800c7f8:	42b9      	cmp	r1, r7
 800c7fa:	db12      	blt.n	800c822 <RegionCommonCountNbOfEnabledChannels+0x9c>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800c7fc:	4669      	mov	r1, sp
 800c7fe:	7b09      	ldrb	r1, [r1, #12]
    if( ( value >= min ) && ( value <= max ) )
 800c800:	9f02      	ldr	r7, [sp, #8]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800c802:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800c804:	1109      	asrs	r1, r1, #4
 800c806:	428f      	cmp	r7, r1
 800c808:	dc0b      	bgt.n	800c822 <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800c80a:	7a61      	ldrb	r1, [r4, #9]
 800c80c:	2414      	movs	r4, #20
 800c80e:	4361      	muls	r1, r4
 800c810:	68c4      	ldr	r4, [r0, #12]
 800c812:	1861      	adds	r1, r4, r1
 800c814:	7c09      	ldrb	r1, [r1, #16]
 800c816:	2900      	cmp	r1, #0
 800c818:	d10a      	bne.n	800c830 <RegionCommonCountNbOfEnabledChannels+0xaa>
                    nbRestrictedChannelsCount++;
 800c81a:	4661      	mov	r1, ip
 800c81c:	3101      	adds	r1, #1
 800c81e:	b2c9      	uxtb	r1, r1
 800c820:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800c822:	3201      	adds	r2, #1
 800c824:	360c      	adds	r6, #12
 800c826:	2a10      	cmp	r2, #16
 800c828:	d1c9      	bne.n	800c7be <RegionCommonCountNbOfEnabledChannels+0x38>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c82a:	3301      	adds	r3, #1
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	e7b2      	b.n	800c796 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800c830:	9c01      	ldr	r4, [sp, #4]
 800c832:	9f05      	ldr	r7, [sp, #20]
 800c834:	1c69      	adds	r1, r5, #1
 800c836:	18a4      	adds	r4, r4, r2
 800c838:	557c      	strb	r4, [r7, r5]
 800c83a:	b2cd      	uxtb	r5, r1
 800c83c:	e7f1      	b.n	800c822 <RegionCommonCountNbOfEnabledChannels+0x9c>

0800c83e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800c83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c840:	0004      	movs	r4, r0
 800c842:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800c844:	6840      	ldr	r0, [r0, #4]
{
 800c846:	001d      	movs	r5, r3
 800c848:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c84a:	9204      	str	r2, [sp, #16]
 800c84c:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800c84e:	f001 fbc1 	bl	800dfd4 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800c852:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800c854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800c856:	1a1b      	subs	r3, r3, r0
 800c858:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800c85a:	2301      	movs	r3, #1
 800c85c:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800c862:	6863      	ldr	r3, [r4, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <RegionCommonIdentifyChannels+0x30>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	4283      	cmp	r3, r0
 800c86c:	d825      	bhi.n	800c8ba <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800c872:	7a62      	ldrb	r2, [r4, #9]
 800c874:	69e1      	ldr	r1, [r4, #28]
 800c876:	4694      	mov	ip, r2
 800c878:	780a      	ldrb	r2, [r1, #0]
 800c87a:	69a1      	ldr	r1, [r4, #24]
 800c87c:	9205      	str	r2, [sp, #20]
 800c87e:	9103      	str	r1, [sp, #12]
 800c880:	0021      	movs	r1, r4
 800c882:	ae01      	add	r6, sp, #4
 800c884:	310c      	adds	r1, #12
 800c886:	7a23      	ldrb	r3, [r4, #8]
 800c888:	c905      	ldmia	r1!, {r0, r2}
 800c88a:	c605      	stmia	r6!, {r0, r2}
 800c88c:	7d21      	ldrb	r1, [r4, #20]
 800c88e:	4662      	mov	r2, ip
 800c890:	9100      	str	r1, [sp, #0]
 800c892:	69e1      	ldr	r1, [r4, #28]
 800c894:	9805      	ldr	r0, [sp, #20]
 800c896:	68c9      	ldr	r1, [r1, #12]
 800c898:	f7ff fe4a 	bl	800c530 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800c89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800c89e:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800c8a0:	002a      	movs	r2, r5
 800c8a2:	9904      	ldr	r1, [sp, #16]
 800c8a4:	69e0      	ldr	r0, [r4, #28]
 800c8a6:	f7ff ff6e 	bl	800c786 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800c8aa:	782b      	ldrb	r3, [r5, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d004      	beq.n	800c8ba <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 800c8b0:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 800c8b2:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 800c8b4:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800c8b6:	b007      	add	sp, #28
 800c8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800c8ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8bc:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800c8be:	4243      	negs	r3, r0
 800c8c0:	4158      	adcs	r0, r3
 800c8c2:	300b      	adds	r0, #11
 800c8c4:	e7f7      	b.n	800c8b6 <RegionCommonIdentifyChannels+0x78>
	...

0800c8c8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ca:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800c8cc:	ac04      	add	r4, sp, #16
 800c8ce:	0025      	movs	r5, r4
{
 800c8d0:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <RegionCommonRxConfigPrint+0x48>)
 800c8d4:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800c8d6:	c5c4      	stmia	r5!, {r2, r6, r7}
 800c8d8:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800c8da:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800c8dc:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800c8de:	2805      	cmp	r0, #5
 800c8e0:	d80c      	bhi.n	800c8fc <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800c8e2:	9101      	str	r1, [sp, #4]
 800c8e4:	0080      	lsls	r0, r0, #2
 800c8e6:	9302      	str	r3, [sp, #8]
 800c8e8:	5903      	ldr	r3, [r0, r4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	2002      	movs	r0, #2
 800c8f2:	4b08      	ldr	r3, [pc, #32]	; (800c914 <RegionCommonRxConfigPrint+0x4c>)
 800c8f4:	f001 fd76 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800c8f8:	b00b      	add	sp, #44	; 0x2c
 800c8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	9100      	str	r1, [sp, #0]
 800c900:	2201      	movs	r2, #1
 800c902:	2100      	movs	r1, #0
 800c904:	4b04      	ldr	r3, [pc, #16]	; (800c918 <RegionCommonRxConfigPrint+0x50>)
 800c906:	2002      	movs	r0, #2
 800c908:	f001 fd6c 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c90c:	e7f4      	b.n	800c8f8 <RegionCommonRxConfigPrint+0x30>
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	0800e6dc 	.word	0x0800e6dc
 800c914:	0800f16a 	.word	0x0800f16a
 800c918:	0800f189 	.word	0x0800f189

0800c91c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800c91c:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800c91e:	4b04      	ldr	r3, [pc, #16]	; (800c930 <RegionCommonTxConfigPrint+0x14>)
 800c920:	9101      	str	r1, [sp, #4]
 800c922:	9000      	str	r0, [sp, #0]
 800c924:	2201      	movs	r2, #1
 800c926:	2100      	movs	r1, #0
 800c928:	2002      	movs	r0, #2
 800c92a:	f001 fd5b 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c92e:	bd07      	pop	{r0, r1, r2, pc}
 800c930:	0800f1a5 	.word	0x0800f1a5

0800c934 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800c934:	4b01      	ldr	r3, [pc, #4]	; (800c93c <srand1+0x8>)
 800c936:	6018      	str	r0, [r3, #0]
}
 800c938:	4770      	bx	lr
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	200001c0 	.word	0x200001c0

0800c940 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c940:	4b09      	ldr	r3, [pc, #36]	; (800c968 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800c942:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c944:	681a      	ldr	r2, [r3, #0]
{
 800c946:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c948:	4808      	ldr	r0, [pc, #32]	; (800c96c <randr+0x2c>)
{
 800c94a:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c94c:	4350      	muls	r0, r2
 800c94e:	4a08      	ldr	r2, [pc, #32]	; (800c970 <randr+0x30>)
 800c950:	4908      	ldr	r1, [pc, #32]	; (800c974 <randr+0x34>)
 800c952:	1880      	adds	r0, r0, r2
 800c954:	6018      	str	r0, [r3, #0]
 800c956:	f7f3 fc83 	bl	8000260 <__aeabi_uidivmod>
 800c95a:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800c95c:	1b61      	subs	r1, r4, r5
 800c95e:	3101      	adds	r1, #1
 800c960:	f7f3 fd68 	bl	8000434 <__aeabi_idivmod>
 800c964:	1948      	adds	r0, r1, r5
}
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	200001c0 	.word	0x200001c0
 800c96c:	41c64e6d 	.word	0x41c64e6d
 800c970:	00003039 	.word	0x00003039
 800c974:	7fffffff 	.word	0x7fffffff

0800c978 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c978:	2300      	movs	r3, #0
{
 800c97a:	b510      	push	{r4, lr}
    while( size-- )
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d100      	bne.n	800c982 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800c980:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800c982:	5ccc      	ldrb	r4, [r1, r3]
 800c984:	54c4      	strb	r4, [r0, r3]
 800c986:	3301      	adds	r3, #1
 800c988:	e7f8      	b.n	800c97c <memcpy1+0x4>

0800c98a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800c98a:	1e53      	subs	r3, r2, #1
 800c98c:	18c0      	adds	r0, r0, r3
    while( size-- )
 800c98e:	2300      	movs	r3, #0
{
 800c990:	b530      	push	{r4, r5, lr}
    while( size-- )
 800c992:	429a      	cmp	r2, r3
 800c994:	d100      	bne.n	800c998 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800c996:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800c998:	5ccd      	ldrb	r5, [r1, r3]
 800c99a:	425c      	negs	r4, r3
 800c99c:	5505      	strb	r5, [r0, r4]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	e7f7      	b.n	800c992 <memcpyr+0x8>

0800c9a2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800c9a2:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800c9a4:	f001 fdfb 	bl	800e59e <memset>
    }
}
 800c9a8:	bd10      	pop	{r4, pc}

0800c9aa <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	4770      	bx	lr
	...

0800c9b0 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 800c9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9b2:	0014      	movs	r4, r2
 800c9b4:	aa08      	add	r2, sp, #32
 800c9b6:	8816      	ldrh	r6, [r2, #0]
 800c9b8:	aa09      	add	r2, sp, #36	; 0x24
 800c9ba:	000d      	movs	r5, r1
 800c9bc:	7812      	ldrb	r2, [r2, #0]
 800c9be:	a90a      	add	r1, sp, #40	; 0x28
 800c9c0:	780f      	ldrb	r7, [r1, #0]
 800c9c2:	a90b      	add	r1, sp, #44	; 0x2c
 800c9c4:	4694      	mov	ip, r2
 800c9c6:	7809      	ldrb	r1, [r1, #0]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

	if( modem == MODEM_LORA){
 800c9c8:	2801      	cmp	r0, #1
 800c9ca:	d150      	bne.n	800ca6e <RadioTimeOnAir+0xbe>
    int32_t crDenom           = coderate + 4;
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c9d0:	1f63      	subs	r3, r4, #5
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d804      	bhi.n	800c9e0 <RadioTimeOnAir+0x30>
        if( preambleLen < 12 )
 800c9d6:	1c33      	adds	r3, r6, #0
 800c9d8:	2e0c      	cmp	r6, #12
 800c9da:	d200      	bcs.n	800c9de <RadioTimeOnAir+0x2e>
 800c9dc:	230c      	movs	r3, #12
 800c9de:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	d13c      	bne.n	800ca5e <RadioTimeOnAir+0xae>
 800c9e4:	0023      	movs	r3, r4
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	002a      	movs	r2, r5
 800c9ea:	3b0b      	subs	r3, #11
 800c9ec:	4298      	cmp	r0, r3
 800c9ee:	416a      	adcs	r2, r5
 800c9f0:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c9f2:	b2db      	uxtb	r3, r3
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c9f4:	00f8      	lsls	r0, r7, #3
                            ( crcOn ? 16 : 0 ) -
 800c9f6:	1e4f      	subs	r7, r1, #1
 800c9f8:	41b9      	sbcs	r1, r7
 800c9fa:	010f      	lsls	r7, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c9fc:	19c0      	adds	r0, r0, r7
                            ( fixLen ? 0 : 20 );
 800c9fe:	4662      	mov	r2, ip
 800ca00:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 800ca02:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800ca04:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800ca06:	42ba      	cmp	r2, r7
 800ca08:	d100      	bne.n	800ca0c <RadioTimeOnAir+0x5c>
 800ca0a:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 800ca0c:	19c0      	adds	r0, r0, r7
            ceilDenominator = 4 * ( datarate - 2 );
 800ca0e:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800ca10:	2c06      	cmp	r4, #6
 800ca12:	d903      	bls.n	800ca1c <RadioTimeOnAir+0x6c>
        ceilNumerator += 8;
 800ca14:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d000      	beq.n	800ca1c <RadioTimeOnAir+0x6c>
            ceilDenominator = 4 * ( datarate - 2 );
 800ca1a:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800ca1c:	43c3      	mvns	r3, r0
 800ca1e:	17db      	asrs	r3, r3, #31
 800ca20:	4018      	ands	r0, r3
 800ca22:	1840      	adds	r0, r0, r1
 800ca24:	3801      	subs	r0, #1
 800ca26:	f7f3 fc1f 	bl	8000268 <__divsi3>
 800ca2a:	9b01      	ldr	r3, [sp, #4]
 800ca2c:	4343      	muls	r3, r0
 800ca2e:	199e      	adds	r6, r3, r6
        intermediate += 2;
 800ca30:	0032      	movs	r2, r6
 800ca32:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800ca34:	2c06      	cmp	r4, #6
 800ca36:	d900      	bls.n	800ca3a <RadioTimeOnAir+0x8a>
    int32_t intermediate =
 800ca38:	3a02      	subs	r2, #2
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
															  coderate, preambleLen,
															  fixLen, payloadLen, crcOn );
		denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800ca3a:	4b0f      	ldr	r3, [pc, #60]	; (800ca78 <RadioTimeOnAir+0xc8>)
 800ca3c:	5d5b      	ldrb	r3, [r3, r5]
    switch( bw )
 800ca3e:	2b0a      	cmp	r3, #10
 800ca40:	d818      	bhi.n	800ca74 <RadioTimeOnAir+0xc4>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ca42:	0092      	lsls	r2, r2, #2
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800ca44:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ca46:	3201      	adds	r2, #1
 800ca48:	40ba      	lsls	r2, r7
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800ca4a:	0080      	lsls	r0, r0, #2
 800ca4c:	4350      	muls	r0, r2
 800ca4e:	4a0b      	ldr	r2, [pc, #44]	; (800ca7c <RadioTimeOnAir+0xcc>)
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	5899      	ldr	r1, [r3, r2]
	}
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 800ca54:	1840      	adds	r0, r0, r1
 800ca56:	3801      	subs	r0, #1
 800ca58:	f7f3 fb7c 	bl	8000154 <__udivsi3>
}
 800ca5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bool    lowDatareOptimize = false;
 800ca5e:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ca60:	2d01      	cmp	r5, #1
 800ca62:	d1c7      	bne.n	800c9f4 <RadioTimeOnAir+0x44>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ca64:	0023      	movs	r3, r4
 800ca66:	3b0c      	subs	r3, #12
 800ca68:	4258      	negs	r0, r3
 800ca6a:	4143      	adcs	r3, r0
 800ca6c:	e7c1      	b.n	800c9f2 <RadioTimeOnAir+0x42>
    uint32_t denominator = 1;
 800ca6e:	2101      	movs	r1, #1
    uint32_t numerator = 0;
 800ca70:	2000      	movs	r0, #0
 800ca72:	e7ef      	b.n	800ca54 <RadioTimeOnAir+0xa4>
    return ( numerator + denominator - 1 ) / denominator;
 800ca74:	deff      	udf	#255	; 0xff
 800ca76:	46c0      	nop			; (mov r8, r8)
 800ca78:	0800f1f6 	.word	0x0800f1f6
 800ca7c:	0800f1fc 	.word	0x0800f1fc

0800ca80 <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ca80:	4b04      	ldr	r3, [pc, #16]	; (800ca94 <RadioOnTxTimeoutIrq+0x14>)
{
 800ca82:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <RadioOnTxTimeoutIrq+0x12>
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d000      	beq.n	800ca92 <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 800ca90:	4798      	blx	r3
    }
}
 800ca92:	bd10      	pop	{r4, pc}
 800ca94:	20001334 	.word	0x20001334

0800ca98 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ca98:	4b04      	ldr	r3, [pc, #16]	; (800caac <RadioOnRxTimeoutIrq+0x14>)
{
 800ca9a:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d003      	beq.n	800caaa <RadioOnRxTimeoutIrq+0x12>
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d000      	beq.n	800caaa <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 800caa8:	4798      	blx	r3
    }
}
 800caaa:	bd10      	pop	{r4, pc}
 800caac:	20001334 	.word	0x20001334

0800cab0 <RadioStandby>:
{
 800cab0:	b510      	push	{r4, lr}
	SX126xSetStandby(STDBY_XOSC);//SX126xSetStandby( STDBY_RC );
 800cab2:	2001      	movs	r0, #1
 800cab4:	f000 fbc8 	bl	800d248 <SX126xSetStandby>
}
 800cab8:	bd10      	pop	{r4, pc}
	...

0800cabc <RadioGetStatus>:
{
 800cabc:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 800cabe:	f000 fb6b 	bl	800d198 <SX126xGetOperatingMode>
 800cac2:	1f03      	subs	r3, r0, #4
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	2000      	movs	r0, #0
 800cac8:	2b03      	cmp	r3, #3
 800caca:	d801      	bhi.n	800cad0 <RadioGetStatus+0x14>
 800cacc:	4a01      	ldr	r2, [pc, #4]	; (800cad4 <RadioGetStatus+0x18>)
 800cace:	5cd0      	ldrb	r0, [r2, r3]
}
 800cad0:	bd10      	pop	{r4, pc}
 800cad2:	46c0      	nop			; (mov r8, r8)
 800cad4:	0800f228 	.word	0x0800f228

0800cad8 <RadioSetChannel>:
{
 800cad8:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 800cada:	f000 fca5 	bl	800d428 <SX126xSetRfFrequency>
}
 800cade:	bd10      	pop	{r4, pc}

0800cae0 <RadioRead>:
{
 800cae0:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 800cae2:	b280      	uxth	r0, r0
 800cae4:	f000 fe52 	bl	800d78c <SX126xReadRegister>
}
 800cae8:	bd10      	pop	{r4, pc}

0800caea <RadioWrite>:
{
 800caea:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 800caec:	b280      	uxth	r0, r0
 800caee:	f000 fdad 	bl	800d64c <SX126xWriteRegister>
}
 800caf2:	bd10      	pop	{r4, pc}

0800caf4 <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800caf4:	2300      	movs	r3, #0
{
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800cafa:	4910      	ldr	r1, [pc, #64]	; (800cb3c <RadioSend+0x48>)
 800cafc:	001a      	movs	r2, r3
{
 800cafe:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800cb00:	0008      	movs	r0, r1
 800cb02:	f000 fc41 	bl	800d388 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 800cb06:	f000 fb65 	bl	800d1d4 <SX126xGetPacketType>
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	; (800cb40 <RadioSend+0x4c>)
 800cb0c:	2801      	cmp	r0, #1
 800cb0e:	d112      	bne.n	800cb36 <RadioSend+0x42>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800cb10:	73dc      	strb	r4, [r3, #15]
    SX126xSetPacketParams( &SX126x.PacketParams );
 800cb12:	0018      	movs	r0, r3
 800cb14:	f000 fcde 	bl	800d4d4 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 800cb18:	2200      	movs	r2, #0
 800cb1a:	0028      	movs	r0, r5
 800cb1c:	0021      	movs	r1, r4
 800cb1e:	f000 feeb 	bl	800d8f8 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800cb22:	4c08      	ldr	r4, [pc, #32]	; (800cb44 <RadioSend+0x50>)
 800cb24:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <RadioSend+0x54>)
 800cb26:	0020      	movs	r0, r4
 800cb28:	6819      	ldr	r1, [r3, #0]
 800cb2a:	f001 fb3d 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800cb2e:	0020      	movs	r0, r4
 800cb30:	f001 fade 	bl	800e0f0 <UTIL_TIMER_Start>
}
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800cb36:	721c      	strb	r4, [r3, #8]
 800cb38:	e7eb      	b.n	800cb12 <RadioSend+0x1e>
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	00000201 	.word	0x00000201
 800cb40:	2000146c 	.word	0x2000146c
 800cb44:	200014ac 	.word	0x200014ac
 800cb48:	200014a8 	.word	0x200014a8

0800cb4c <RadioSleep>:
{
 800cb4c:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 800cb4e:	2004      	movs	r0, #4
 800cb50:	f000 fb62 	bl	800d218 <SX126xSetSleep>
    RADIO_DELAY_MS( 2 );
 800cb54:	2002      	movs	r0, #2
 800cb56:	f7f6 f8b5 	bl	8002cc4 <HAL_Delay>
}
 800cb5a:	bd10      	pop	{r4, pc}

0800cb5c <RadioSetRxDutyCycle>:
{
 800cb5c:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800cb5e:	f000 fb85 	bl	800d26c <SX126xSetRxDutyCycle>
}
 800cb62:	bd10      	pop	{r4, pc}

0800cb64 <RadioSetTxContinuousWave>:
{
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	000d      	movs	r5, r1
 800cb68:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 800cb6a:	f000 fc5d 	bl	800d428 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800cb6e:	0028      	movs	r0, r5
 800cb70:	f000 fe76 	bl	800d860 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800cb74:	f000 fb92 	bl	800d29c <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 800cb78:	21fa      	movs	r1, #250	; 0xfa
 800cb7a:	0089      	lsls	r1, r1, #2
 800cb7c:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 800cb7e:	4c04      	ldr	r4, [pc, #16]	; (800cb90 <RadioSetTxContinuousWave+0x2c>)
 800cb80:	0020      	movs	r0, r4
 800cb82:	f001 fb11 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800cb86:	0020      	movs	r0, r4
 800cb88:	f001 fab2 	bl	800e0f0 <UTIL_TIMER_Start>
}
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	200014ac 	.word	0x200014ac

0800cb94 <RadioWriteBuffer>:
{
 800cb94:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 800cb96:	b280      	uxth	r0, r0
 800cb98:	f000 fd38 	bl	800d60c <SX126xWriteRegisters>
}
 800cb9c:	bd10      	pop	{r4, pc}

0800cb9e <RadioReadBuffer>:
{
 800cb9e:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 800cba0:	b280      	uxth	r0, r0
 800cba2:	f000 fdcf 	bl	800d744 <SX126xReadRegisters>
}
 800cba6:	bd10      	pop	{r4, pc}

0800cba8 <RadioGetWakeupTime>:
{
 800cba8:	b510      	push	{r4, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800cbaa:	f7f7 f8dd 	bl	8003d68 <SX1262DVK1CAS_RADIO_GetWakeUpTime>
 800cbae:	3003      	adds	r0, #3
}
 800cbb0:	bd10      	pop	{r4, pc}
	...

0800cbb4 <RadioInit>:
    RadioEvents = events;
 800cbb4:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <RadioInit+0x60>)
{
 800cbb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RadioEvents = events;
 800cbb8:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 800cbba:	4817      	ldr	r0, [pc, #92]	; (800cc18 <RadioInit+0x64>)
 800cbbc:	f000 fc12 	bl	800d3e4 <SX126xInit>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f000 fb41 	bl	800d248 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	f000 fb7d 	bl	800d2c6 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 800cbcc:	2100      	movs	r1, #0
 800cbce:	0008      	movs	r0, r1
 800cbd0:	f000 fcb0 	bl	800d534 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800cbd4:	2104      	movs	r1, #4
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	f000 fe1a 	bl	800d810 <SX126xSetTxParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800cbdc:	2501      	movs	r5, #1
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cbde:	2300      	movs	r3, #0
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800cbe0:	2400      	movs	r4, #0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cbe2:	480e      	ldr	r0, [pc, #56]	; (800cc1c <RadioInit+0x68>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800cbe4:	426d      	negs	r5, r5
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cbe6:	001a      	movs	r2, r3
 800cbe8:	0001      	movs	r1, r0
 800cbea:	f000 fbcd 	bl	800d388 <SX126xSetDioIrqParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800cbee:	0029      	movs	r1, r5
 800cbf0:	0022      	movs	r2, r4
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <RadioInit+0x6c>)
 800cbf4:	9400      	str	r4, [sp, #0]
 800cbf6:	480b      	ldr	r0, [pc, #44]	; (800cc24 <RadioInit+0x70>)
 800cbf8:	f001 f9c6 	bl	800df88 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800cbfc:	0029      	movs	r1, r5
 800cbfe:	0022      	movs	r2, r4
 800cc00:	4b09      	ldr	r3, [pc, #36]	; (800cc28 <RadioInit+0x74>)
 800cc02:	9400      	str	r4, [sp, #0]
 800cc04:	4809      	ldr	r0, [pc, #36]	; (800cc2c <RadioInit+0x78>)
 800cc06:	f001 f9bf 	bl	800df88 <UTIL_TIMER_Create>
    IrqFired = false;
 800cc0a:	4b09      	ldr	r3, [pc, #36]	; (800cc30 <RadioInit+0x7c>)
 800cc0c:	701c      	strb	r4, [r3, #0]
    return ( uint32_t )RadioGetWakeupTime( ) ;
 800cc0e:	f7ff ffcb 	bl	800cba8 <RadioGetWakeupTime>
}
 800cc12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800cc14:	20001334 	.word	0x20001334
 800cc18:	0800cec9 	.word	0x0800cec9
 800cc1c:	0000ffff 	.word	0x0000ffff
 800cc20:	0800ca81 	.word	0x0800ca81
 800cc24:	200014ac 	.word	0x200014ac
 800cc28:	0800ca99 	.word	0x0800ca99
 800cc2c:	20001454 	.word	0x20001454
 800cc30:	20001331 	.word	0x20001331

0800cc34 <RadioSetMaxPayloadLength>:
{
 800cc34:	b510      	push	{r4, lr}
    if( modem == MODEM_LORA )
 800cc36:	2801      	cmp	r0, #1
 800cc38:	d105      	bne.n	800cc46 <RadioSetMaxPayloadLength+0x12>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800cc3a:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <RadioSetMaxPayloadLength+0x14>)
 800cc3c:	4803      	ldr	r0, [pc, #12]	; (800cc4c <RadioSetMaxPayloadLength+0x18>)
 800cc3e:	7019      	strb	r1, [r3, #0]
 800cc40:	73c1      	strb	r1, [r0, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 800cc42:	f000 fc47 	bl	800d4d4 <SX126xSetPacketParams>
}
 800cc46:	bd10      	pop	{r4, pc}
 800cc48:	200001c4 	.word	0x200001c4
 800cc4c:	2000146c 	.word	0x2000146c

0800cc50 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800cc50:	2300      	movs	r3, #0
 800cc52:	490e      	ldr	r1, [pc, #56]	; (800cc8c <RadioRx+0x3c>)
{
 800cc54:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800cc56:	001a      	movs	r2, r3
{
 800cc58:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800cc5a:	0008      	movs	r0, r1
 800cc5c:	f000 fb94 	bl	800d388 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800cc60:	2c00      	cmp	r4, #0
 800cc62:	d007      	beq.n	800cc74 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800cc64:	4d0a      	ldr	r5, [pc, #40]	; (800cc90 <RadioRx+0x40>)
 800cc66:	0021      	movs	r1, r4
 800cc68:	0028      	movs	r0, r5
 800cc6a:	f001 fa9d 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800cc6e:	0028      	movs	r0, r5
 800cc70:	f001 fa3e 	bl	800e0f0 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800cc74:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <RadioRx+0x44>)
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800cc7c:	4806      	ldr	r0, [pc, #24]	; (800cc98 <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 800cc7e:	f000 fd11 	bl	800d6a4 <SX126xSetRx>
}
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 800cc84:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <RadioRx+0x4c>)
 800cc86:	6818      	ldr	r0, [r3, #0]
 800cc88:	0180      	lsls	r0, r0, #6
 800cc8a:	e7f8      	b.n	800cc7e <RadioRx+0x2e>
 800cc8c:	0000ffff 	.word	0x0000ffff
 800cc90:	20001454 	.word	0x20001454
 800cc94:	2000144d 	.word	0x2000144d
 800cc98:	00ffffff 	.word	0x00ffffff
 800cc9c:	20001450 	.word	0x20001450

0800cca0 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800cca0:	2300      	movs	r3, #0
 800cca2:	490e      	ldr	r1, [pc, #56]	; (800ccdc <RadioRxBoosted+0x3c>)
{
 800cca4:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800cca6:	001a      	movs	r2, r3
{
 800cca8:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800ccaa:	0008      	movs	r0, r1
 800ccac:	f000 fb6c 	bl	800d388 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800ccb0:	2c00      	cmp	r4, #0
 800ccb2:	d007      	beq.n	800ccc4 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ccb4:	4d0a      	ldr	r5, [pc, #40]	; (800cce0 <RadioRxBoosted+0x40>)
 800ccb6:	0021      	movs	r1, r4
 800ccb8:	0028      	movs	r0, r5
 800ccba:	f001 fa75 	bl	800e1a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ccbe:	0028      	movs	r0, r5
 800ccc0:	f001 fa16 	bl	800e0f0 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800ccc4:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <RadioRxBoosted+0x44>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800cccc:	4806      	ldr	r0, [pc, #24]	; (800cce8 <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 800ccce:	f000 fd0b 	bl	800d6e8 <SX126xSetRxBoosted>
}
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 800ccd4:	4b05      	ldr	r3, [pc, #20]	; (800ccec <RadioRxBoosted+0x4c>)
 800ccd6:	6818      	ldr	r0, [r3, #0]
 800ccd8:	0180      	lsls	r0, r0, #6
 800ccda:	e7f8      	b.n	800ccce <RadioRxBoosted+0x2e>
 800ccdc:	0000ffff 	.word	0x0000ffff
 800cce0:	20001454 	.word	0x20001454
 800cce4:	2000144d 	.word	0x2000144d
 800cce8:	00ffffff 	.word	0x00ffffff
 800ccec:	20001450 	.word	0x20001450

0800ccf0 <RadioIrqProcess>:
  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
    if( IrqFired == true )
 800ccf0:	4b67      	ldr	r3, [pc, #412]	; (800ce90 <RadioIrqProcess+0x1a0>)
{
 800ccf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( IrqFired == true )
 800ccf4:	781a      	ldrb	r2, [r3, #0]
 800ccf6:	2a00      	cmp	r2, #0
 800ccf8:	d100      	bne.n	800ccfc <RadioIrqProcess+0xc>
 800ccfa:	e086      	b.n	800ce0a <RadioIrqProcess+0x11a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccfc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cd00:	b672      	cpsid	i
    {
        CRITICAL_SECTION_BEGIN( );
        // Clear IRQ flag
        IrqFired = false;
 800cd02:	2100      	movs	r1, #0
 800cd04:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd06:	f382 8810 	msr	PRIMASK, r2
        CRITICAL_SECTION_END( );

        uint16_t irqRegs = SX126xGetIrqStatus( );
 800cd0a:	f000 fc48 	bl	800d59e <SX126xGetIrqStatus>
 800cd0e:	0004      	movs	r4, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800cd10:	4860      	ldr	r0, [pc, #384]	; (800ce94 <RadioIrqProcess+0x1a4>)
 800cd12:	f000 fc19 	bl	800d548 <SX126xClearIrqStatus>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800cd16:	07e3      	lsls	r3, r4, #31
 800cd18:	d50d      	bpl.n	800cd36 <RadioIrqProcess+0x46>
        {
            TimerStop( &TxTimeoutTimer );
 800cd1a:	485f      	ldr	r0, [pc, #380]	; (800ce98 <RadioIrqProcess+0x1a8>)
 800cd1c:	f001 f994 	bl	800e048 <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800cd20:	2002      	movs	r0, #2
 800cd22:	f000 fa3f 	bl	800d1a4 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800cd26:	4b5d      	ldr	r3, [pc, #372]	; (800ce9c <RadioIrqProcess+0x1ac>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <RadioIrqProcess+0x46>
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d000      	beq.n	800cd36 <RadioIrqProcess+0x46>
            {
                RadioEvents->TxDone( );
 800cd34:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800cd36:	2502      	movs	r5, #2
 800cd38:	422c      	tst	r4, r5
 800cd3a:	d010      	beq.n	800cd5e <RadioIrqProcess+0x6e>
        {
            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800cd3c:	4f57      	ldr	r7, [pc, #348]	; (800ce9c <RadioIrqProcess+0x1ac>)
 800cd3e:	4e58      	ldr	r6, [pc, #352]	; (800cea0 <RadioIrqProcess+0x1b0>)
 800cd40:	0663      	lsls	r3, r4, #25
 800cd42:	d563      	bpl.n	800ce0c <RadioIrqProcess+0x11c>
            {
                if( RxContinuous == false )
 800cd44:	7833      	ldrb	r3, [r6, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d102      	bne.n	800cd50 <RadioIrqProcess+0x60>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800cd4a:	0028      	movs	r0, r5
 800cd4c:	f000 fa2a 	bl	800d1a4 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <RadioIrqProcess+0x6e>
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d000      	beq.n	800cd5e <RadioIrqProcess+0x6e>
                {
                    RadioEvents->RxError( );
 800cd5c:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800cd5e:	0623      	lsls	r3, r4, #24
 800cd60:	d50c      	bpl.n	800cd7c <RadioIrqProcess+0x8c>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
        	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800cd62:	2002      	movs	r0, #2
 800cd64:	f000 fa1e 	bl	800d1a4 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800cd68:	4b4c      	ldr	r3, [pc, #304]	; (800ce9c <RadioIrqProcess+0x1ac>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d005      	beq.n	800cd7c <RadioIrqProcess+0x8c>
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <RadioIrqProcess+0x8c>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800cd76:	05e0      	lsls	r0, r4, #23
 800cd78:	0fc0      	lsrs	r0, r0, #31
 800cd7a:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800cd7c:	05a3      	lsls	r3, r4, #22
 800cd7e:	d512      	bpl.n	800cda6 <RadioIrqProcess+0xb6>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800cd80:	f000 fa0a 	bl	800d198 <SX126xGetOperatingMode>
 800cd84:	2804      	cmp	r0, #4
 800cd86:	d000      	beq.n	800cd8a <RadioIrqProcess+0x9a>
 800cd88:	e071      	b.n	800ce6e <RadioIrqProcess+0x17e>
            {
                TimerStop( &TxTimeoutTimer );
 800cd8a:	4843      	ldr	r0, [pc, #268]	; (800ce98 <RadioIrqProcess+0x1a8>)
 800cd8c:	f001 f95c 	bl	800e048 <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800cd90:	2002      	movs	r0, #2
 800cd92:	f000 fa07 	bl	800d1a4 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800cd96:	4b41      	ldr	r3, [pc, #260]	; (800ce9c <RadioIrqProcess+0x1ac>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <RadioIrqProcess+0xb6>
 800cd9e:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d000      	beq.n	800cda6 <RadioIrqProcess+0xb6>
                {
                    RadioEvents->RxTimeout( );
 800cda4:	4798      	blx	r3
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 800cda6:	0763      	lsls	r3, r4, #29
 800cda8:	d505      	bpl.n	800cdb6 <RadioIrqProcess+0xc6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800cdaa:	2200      	movs	r2, #0
 800cdac:	2003      	movs	r0, #3
 800cdae:	0011      	movs	r1, r2
 800cdb0:	4b3c      	ldr	r3, [pc, #240]	; (800cea4 <RadioIrqProcess+0x1b4>)
 800cdb2:	f001 fb17 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800cdb6:	0723      	lsls	r3, r4, #28
 800cdb8:	d505      	bpl.n	800cdc6 <RadioIrqProcess+0xd6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2003      	movs	r0, #3
 800cdbe:	0011      	movs	r1, r2
 800cdc0:	4b39      	ldr	r3, [pc, #228]	; (800cea8 <RadioIrqProcess+0x1b8>)
 800cdc2:	f001 fb0f 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800cdc6:	06e3      	lsls	r3, r4, #27
 800cdc8:	d505      	bpl.n	800cdd6 <RadioIrqProcess+0xe6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2003      	movs	r0, #3
 800cdce:	0011      	movs	r1, r2
 800cdd0:	4b36      	ldr	r3, [pc, #216]	; (800ceac <RadioIrqProcess+0x1bc>)
 800cdd2:	f001 fb07 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800cdd6:	06a3      	lsls	r3, r4, #26
 800cdd8:	d517      	bpl.n	800ce0a <RadioIrqProcess+0x11a>
        {
            TimerStop( &RxTimeoutTimer );
 800cdda:	4835      	ldr	r0, [pc, #212]	; (800ceb0 <RadioIrqProcess+0x1c0>)
 800cddc:	f001 f934 	bl	800e048 <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 800cde0:	4b2f      	ldr	r3, [pc, #188]	; (800cea0 <RadioIrqProcess+0x1b0>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <RadioIrqProcess+0xfe>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800cde8:	2002      	movs	r0, #2
 800cdea:	f000 f9db 	bl	800d1a4 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800cdee:	4b2b      	ldr	r3, [pc, #172]	; (800ce9c <RadioIrqProcess+0x1ac>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d009      	beq.n	800ce0a <RadioIrqProcess+0x11a>
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d006      	beq.n	800ce0a <RadioIrqProcess+0x11a>
            {
                RadioEvents->RxTimeout( );
 800cdfc:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 800cdfe:	2200      	movs	r2, #0
 800ce00:	2003      	movs	r0, #3
 800ce02:	0011      	movs	r1, r2
 800ce04:	4b2b      	ldr	r3, [pc, #172]	; (800ceb4 <RadioIrqProcess+0x1c4>)
 800ce06:	f001 faed 	bl	800e3e4 <UTIL_ADV_TRACE_COND_FSend>
            }
        }
    }
}
 800ce0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                TimerStop( &RxTimeoutTimer );
 800ce0c:	4828      	ldr	r0, [pc, #160]	; (800ceb0 <RadioIrqProcess+0x1c0>)
 800ce0e:	f001 f91b 	bl	800e048 <UTIL_TIMER_Stop>
                if( RxContinuous == false )
 800ce12:	7836      	ldrb	r6, [r6, #0]
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	d10e      	bne.n	800ce36 <RadioIrqProcess+0x146>
                	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800ce18:	0028      	movs	r0, r5
 800ce1a:	f000 f9c3 	bl	800d1a4 <SX126xSetOperatingMode>
                    SX126xWriteRegister( 0x0902, 0x00 );
 800ce1e:	0031      	movs	r1, r6
 800ce20:	4825      	ldr	r0, [pc, #148]	; (800ceb8 <RadioIrqProcess+0x1c8>)
 800ce22:	f000 fc13 	bl	800d64c <SX126xWriteRegister>
                    SX126xWriteRegister( 0x0944, SX126xReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800ce26:	4825      	ldr	r0, [pc, #148]	; (800cebc <RadioIrqProcess+0x1cc>)
 800ce28:	f000 fcb0 	bl	800d78c <SX126xReadRegister>
 800ce2c:	4305      	orrs	r5, r0
 800ce2e:	b2e9      	uxtb	r1, r5
 800ce30:	4822      	ldr	r0, [pc, #136]	; (800cebc <RadioIrqProcess+0x1cc>)
 800ce32:	f000 fc0b 	bl	800d64c <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 800ce36:	466b      	mov	r3, sp
 800ce38:	4e21      	ldr	r6, [pc, #132]	; (800cec0 <RadioIrqProcess+0x1d0>)
 800ce3a:	1dd9      	adds	r1, r3, #7
 800ce3c:	22ff      	movs	r2, #255	; 0xff
 800ce3e:	0030      	movs	r0, r6
 800ce40:	f000 fd83 	bl	800d94a <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 800ce44:	4d1f      	ldr	r5, [pc, #124]	; (800cec4 <RadioIrqProcess+0x1d4>)
 800ce46:	0028      	movs	r0, r5
 800ce48:	f000 fbb4 	bl	800d5b4 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d100      	bne.n	800ce54 <RadioIrqProcess+0x164>
 800ce52:	e784      	b.n	800cd5e <RadioIrqProcess+0x6e>
 800ce54:	689f      	ldr	r7, [r3, #8]
 800ce56:	2f00      	cmp	r7, #0
 800ce58:	d100      	bne.n	800ce5c <RadioIrqProcess+0x16c>
 800ce5a:	e780      	b.n	800cd5e <RadioIrqProcess+0x6e>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 800ce5c:	4669      	mov	r1, sp
 800ce5e:	230d      	movs	r3, #13
 800ce60:	220c      	movs	r2, #12
 800ce62:	0030      	movs	r0, r6
 800ce64:	56eb      	ldrsb	r3, [r5, r3]
 800ce66:	56aa      	ldrsb	r2, [r5, r2]
 800ce68:	79c9      	ldrb	r1, [r1, #7]
 800ce6a:	47b8      	blx	r7
 800ce6c:	e777      	b.n	800cd5e <RadioIrqProcess+0x6e>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 800ce6e:	f000 f993 	bl	800d198 <SX126xGetOperatingMode>
 800ce72:	2805      	cmp	r0, #5
 800ce74:	d197      	bne.n	800cda6 <RadioIrqProcess+0xb6>
                TimerStop( &RxTimeoutTimer );
 800ce76:	480e      	ldr	r0, [pc, #56]	; (800ceb0 <RadioIrqProcess+0x1c0>)
 800ce78:	f001 f8e6 	bl	800e048 <UTIL_TIMER_Stop>
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800ce7c:	2002      	movs	r0, #2
 800ce7e:	f000 f991 	bl	800d1a4 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ce82:	4b06      	ldr	r3, [pc, #24]	; (800ce9c <RadioIrqProcess+0x1ac>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d100      	bne.n	800ce8c <RadioIrqProcess+0x19c>
 800ce8a:	e78c      	b.n	800cda6 <RadioIrqProcess+0xb6>
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	e787      	b.n	800cda0 <RadioIrqProcess+0xb0>
 800ce90:	20001331 	.word	0x20001331
 800ce94:	0000ffff 	.word	0x0000ffff
 800ce98:	200014ac 	.word	0x200014ac
 800ce9c:	20001334 	.word	0x20001334
 800cea0:	2000144d 	.word	0x2000144d
 800cea4:	0800f1c1 	.word	0x0800f1c1
 800cea8:	0800f1ce 	.word	0x0800f1ce
 800ceac:	0800f1dc 	.word	0x0800f1dc
 800ceb0:	20001454 	.word	0x20001454
 800ceb4:	0800f1e9 	.word	0x0800f1e9
 800ceb8:	00000902 	.word	0x00000902
 800cebc:	00000944 	.word	0x00000944
 800cec0:	2000134e 	.word	0x2000134e
 800cec4:	20001338 	.word	0x20001338

0800cec8 <RadioOnDioIrq>:
  IrqFired = true;
 800cec8:	2201      	movs	r2, #1
{
 800ceca:	b510      	push	{r4, lr}
  IrqFired = true;
 800cecc:	4b02      	ldr	r3, [pc, #8]	; (800ced8 <RadioOnDioIrq+0x10>)
 800cece:	701a      	strb	r2, [r3, #0]
  RadioIrqProcess();
 800ced0:	f7ff ff0e 	bl	800ccf0 <RadioIrqProcess>
}
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	46c0      	nop			; (mov r8, r8)
 800ced8:	20001331 	.word	0x20001331

0800cedc <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800cedc:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <RadioSetPublicNetwork+0x34>)
{
 800cede:	b510      	push	{r4, lr}
 800cee0:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800cee2:	7018      	strb	r0, [r3, #0]
 800cee4:	7058      	strb	r0, [r3, #1]
    if( modem == MODEM_LORA){
 800cee6:	f000 f817 	bl	800cf18 <RadioSetModem.part.0>
    if( enable == true )
 800ceea:	2c00      	cmp	r4, #0
 800ceec:	d009      	beq.n	800cf02 <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800ceee:	20e8      	movs	r0, #232	; 0xe8
 800cef0:	2134      	movs	r1, #52	; 0x34
 800cef2:	00c0      	lsls	r0, r0, #3
 800cef4:	f000 fbaa 	bl	800d64c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800cef8:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800cefa:	4806      	ldr	r0, [pc, #24]	; (800cf14 <RadioSetPublicNetwork+0x38>)
 800cefc:	f000 fba6 	bl	800d64c <SX126xWriteRegister>
}
 800cf00:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800cf02:	20e8      	movs	r0, #232	; 0xe8
 800cf04:	2114      	movs	r1, #20
 800cf06:	00c0      	lsls	r0, r0, #3
 800cf08:	f000 fba0 	bl	800d64c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800cf0c:	2124      	movs	r1, #36	; 0x24
 800cf0e:	e7f4      	b.n	800cefa <RadioSetPublicNetwork+0x1e>
 800cf10:	2000134c 	.word	0x2000134c
 800cf14:	00000741 	.word	0x00000741

0800cf18 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800cf18:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 800cf1a:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800cf1c:	f000 faa8 	bl	800d470 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800cf20:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <RadioSetModem.part.0+0x1c>)
 800cf22:	7818      	ldrb	r0, [r3, #0]
 800cf24:	785a      	ldrb	r2, [r3, #1]
 800cf26:	4282      	cmp	r2, r0
 800cf28:	d002      	beq.n	800cf30 <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800cf2a:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800cf2c:	f7ff ffd6 	bl	800cedc <RadioSetPublicNetwork>
}
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	46c0      	nop			; (mov r8, r8)
 800cf34:	2000134c 	.word	0x2000134c

0800cf38 <RadioSetModem>:
{
 800cf38:	b510      	push	{r4, lr}
    if( modem == MODEM_LORA){
 800cf3a:	2801      	cmp	r0, #1
 800cf3c:	d101      	bne.n	800cf42 <RadioSetModem+0xa>
 800cf3e:	f7ff ffeb 	bl	800cf18 <RadioSetModem.part.0>
}
 800cf42:	bd10      	pop	{r4, pc}

0800cf44 <RadioRandom>:
{
 800cf44:	b510      	push	{r4, lr}
 800cf46:	f7ff ffe7 	bl	800cf18 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	001a      	movs	r2, r3
 800cf4e:	0019      	movs	r1, r3
 800cf50:	0018      	movs	r0, r3
 800cf52:	f000 fa19 	bl	800d388 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 800cf56:	f000 fc23 	bl	800d7a0 <SX126xGetRandom>
}
 800cf5a:	bd10      	pop	{r4, pc}

0800cf5c <RadioSetRxConfig>:
{
 800cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	9303      	str	r3, [sp, #12]
 800cf62:	ab0d      	add	r3, sp, #52	; 0x34
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	0015      	movs	r5, r2
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	ab0e      	add	r3, sp, #56	; 0x38
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	000e      	movs	r6, r1
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	ab0f      	add	r3, sp, #60	; 0x3c
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	a906      	add	r1, sp, #24
 800cf78:	9302      	str	r3, [sp, #8]
 800cf7a:	ab10      	add	r3, sp, #64	; 0x40
 800cf7c:	781a      	ldrb	r2, [r3, #0]
 800cf7e:	ab11      	add	r3, sp, #68	; 0x44
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	0007      	movs	r7, r0
 800cf84:	9304      	str	r3, [sp, #16]
 800cf86:	2319      	movs	r3, #25
 800cf88:	185b      	adds	r3, r3, r1
 800cf8a:	7fdb      	ldrb	r3, [r3, #31]
 800cf8c:	9305      	str	r3, [sp, #20]
 800cf8e:	231d      	movs	r3, #29
 800cf90:	185b      	adds	r3, r3, r1
 800cf92:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 800cf94:	4938      	ldr	r1, [pc, #224]	; (800d078 <RadioSetRxConfig+0x11c>)
 800cf96:	700b      	strb	r3, [r1, #0]
        symbTimeout = 0;
 800cf98:	4259      	negs	r1, r3
 800cf9a:	414b      	adcs	r3, r1
 800cf9c:	9900      	ldr	r1, [sp, #0]
 800cf9e:	425b      	negs	r3, r3
 800cfa0:	4019      	ands	r1, r3
    if( fixLen == true )
 800cfa2:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 800cfa4:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d100      	bne.n	800cfac <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 800cfaa:	22ff      	movs	r2, #255	; 0xff
 800cfac:	4b33      	ldr	r3, [pc, #204]	; (800d07c <RadioSetRxConfig+0x120>)
 800cfae:	701a      	strb	r2, [r3, #0]
    if(modem == MODEM_LORA){
 800cfb0:	2f01      	cmp	r7, #1
 800cfb2:	d14d      	bne.n	800d050 <RadioSetRxConfig+0xf4>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	f000 f97d 	bl	800d2b4 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800cfba:	4c31      	ldr	r4, [pc, #196]	; (800d080 <RadioSetRxConfig+0x124>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800cfbc:	4931      	ldr	r1, [pc, #196]	; (800d084 <RadioSetRxConfig+0x128>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800cfbe:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800cfc0:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800cfc2:	3328      	adds	r3, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800cfc4:	3238      	adds	r2, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800cfc6:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800cfc8:	b2eb      	uxtb	r3, r5
 800cfca:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800cfcc:	0022      	movs	r2, r4
 800cfce:	5d89      	ldrb	r1, [r1, r6]
 800cfd0:	3239      	adds	r2, #57	; 0x39
 800cfd2:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800cfd4:	0022      	movs	r2, r4
 800cfd6:	9903      	ldr	r1, [sp, #12]
 800cfd8:	323a      	adds	r2, #58	; 0x3a
 800cfda:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	d139      	bne.n	800d054 <RadioSetRxConfig+0xf8>
 800cfe0:	3d0b      	subs	r5, #11
 800cfe2:	42af      	cmp	r7, r5
 800cfe4:	4176      	adcs	r6, r6
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800cfe6:	b2f1      	uxtb	r1, r6
 800cfe8:	0022      	movs	r2, r4
 800cfea:	323b      	adds	r2, #59	; 0x3b
 800cfec:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800cfee:	2201      	movs	r2, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800cff0:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800cff2:	7022      	strb	r2, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d835      	bhi.n	800d064 <RadioSetRxConfig+0x108>
                if( preambleLen < 12 )
 800cff8:	9b01      	ldr	r3, [sp, #4]
 800cffa:	2b0b      	cmp	r3, #11
 800cffc:	d832      	bhi.n	800d064 <RadioSetRxConfig+0x108>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800cffe:	230c      	movs	r3, #12
 800d000:	81a3      	strh	r3, [r4, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800d002:	9b02      	ldr	r3, [sp, #8]
 800d004:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d006:	4b1d      	ldr	r3, [pc, #116]	; (800d07c <RadioSetRxConfig+0x120>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800d00c:	9b04      	ldr	r3, [sp, #16]
 800d00e:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800d010:	9b05      	ldr	r3, [sp, #20]
 800d012:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800d014:	f7ff fd4c 	bl	800cab0 <RadioStandby>
    if( modem == MODEM_LORA){
 800d018:	f7ff ff7e 	bl	800cf18 <RadioSetModem.part.0>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800d01c:	0020      	movs	r0, r4
 800d01e:	3028      	adds	r0, #40	; 0x28
 800d020:	f000 fa34 	bl	800d48c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800d024:	0020      	movs	r0, r4
 800d026:	f000 fa55 	bl	800d4d4 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 800d02a:	466b      	mov	r3, sp
 800d02c:	7818      	ldrb	r0, [r3, #0]
 800d02e:	f000 fb73 	bl	800d718 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800d032:	7c63      	ldrb	r3, [r4, #17]
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800d034:	4814      	ldr	r0, [pc, #80]	; (800d088 <RadioSetRxConfig+0x12c>)
 800d036:	2404      	movs	r4, #4
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d117      	bne.n	800d06c <RadioSetRxConfig+0x110>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800d03c:	f000 fba6 	bl	800d78c <SX126xReadRegister>
 800d040:	43a0      	bics	r0, r4
 800d042:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800d044:	4810      	ldr	r0, [pc, #64]	; (800d088 <RadioSetRxConfig+0x12c>)
 800d046:	f000 fb01 	bl	800d64c <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 800d04a:	4b10      	ldr	r3, [pc, #64]	; (800d08c <RadioSetRxConfig+0x130>)
 800d04c:	4a10      	ldr	r2, [pc, #64]	; (800d090 <RadioSetRxConfig+0x134>)
 800d04e:	601a      	str	r2, [r3, #0]
}
 800d050:	b007      	add	sp, #28
 800d052:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d054:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d056:	2e01      	cmp	r6, #1
 800d058:	d1c6      	bne.n	800cfe8 <RadioSetRxConfig+0x8c>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d05a:	3d0c      	subs	r5, #12
 800d05c:	426a      	negs	r2, r5
 800d05e:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d060:	b2e9      	uxtb	r1, r5
 800d062:	e7c1      	b.n	800cfe8 <RadioSetRxConfig+0x8c>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d064:	4b06      	ldr	r3, [pc, #24]	; (800d080 <RadioSetRxConfig+0x124>)
 800d066:	9a01      	ldr	r2, [sp, #4]
 800d068:	819a      	strh	r2, [r3, #12]
 800d06a:	e7ca      	b.n	800d002 <RadioSetRxConfig+0xa6>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800d06c:	f000 fb8e 	bl	800d78c <SX126xReadRegister>
 800d070:	4304      	orrs	r4, r0
 800d072:	b2e1      	uxtb	r1, r4
 800d074:	e7e6      	b.n	800d044 <RadioSetRxConfig+0xe8>
 800d076:	46c0      	nop			; (mov r8, r8)
 800d078:	2000144d 	.word	0x2000144d
 800d07c:	200001c4 	.word	0x200001c4
 800d080:	2000146c 	.word	0x2000146c
 800d084:	0800f1f6 	.word	0x0800f1f6
 800d088:	00000736 	.word	0x00000736
 800d08c:	20001450 	.word	0x20001450
 800d090:	0000ffff 	.word	0x0000ffff

0800d094 <RadioSetTxConfig>:
{
 800d094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d096:	b087      	sub	sp, #28
 800d098:	9101      	str	r1, [sp, #4]
 800d09a:	a90c      	add	r1, sp, #48	; 0x30
 800d09c:	c904      	ldmia	r1!, {r2}
 800d09e:	7809      	ldrb	r1, [r1, #0]
 800d0a0:	9102      	str	r1, [sp, #8]
 800d0a2:	a90e      	add	r1, sp, #56	; 0x38
 800d0a4:	880e      	ldrh	r6, [r1, #0]
 800d0a6:	a90f      	add	r1, sp, #60	; 0x3c
 800d0a8:	7809      	ldrb	r1, [r1, #0]
 800d0aa:	9103      	str	r1, [sp, #12]
 800d0ac:	a910      	add	r1, sp, #64	; 0x40
 800d0ae:	7809      	ldrb	r1, [r1, #0]
 800d0b0:	9104      	str	r1, [sp, #16]
 800d0b2:	a913      	add	r1, sp, #76	; 0x4c
 800d0b4:	7809      	ldrb	r1, [r1, #0]
 800d0b6:	9105      	str	r1, [sp, #20]
    if( modem == MODEM_LORA){
 800d0b8:	2801      	cmp	r0, #1
 800d0ba:	d136      	bne.n	800d12a <RadioSetTxConfig+0x96>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d0bc:	4c2e      	ldr	r4, [pc, #184]	; (800d178 <RadioSetTxConfig+0xe4>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800d0be:	4d2f      	ldr	r5, [pc, #188]	; (800d17c <RadioSetTxConfig+0xe8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d0c0:	0021      	movs	r1, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800d0c2:	0027      	movs	r7, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d0c4:	3128      	adds	r1, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800d0c6:	3738      	adds	r7, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d0c8:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800d0ca:	b2d1      	uxtb	r1, r2
 800d0cc:	7039      	strb	r1, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800d0ce:	0027      	movs	r7, r4
 800d0d0:	5ced      	ldrb	r5, [r5, r3]
 800d0d2:	3739      	adds	r7, #57	; 0x39
 800d0d4:	703d      	strb	r5, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800d0d6:	0027      	movs	r7, r4
 800d0d8:	9d02      	ldr	r5, [sp, #8]
 800d0da:	373a      	adds	r7, #58	; 0x3a
 800d0dc:	703d      	strb	r5, [r7, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d139      	bne.n	800d156 <RadioSetTxConfig+0xc2>
 800d0e2:	3a0b      	subs	r2, #11
 800d0e4:	4290      	cmp	r0, r2
 800d0e6:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d0e8:	b2d8      	uxtb	r0, r3
 800d0ea:	0023      	movs	r3, r4
 800d0ec:	333b      	adds	r3, #59	; 0x3b
 800d0ee:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d0f0:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d0f2:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d0f4:	7023      	strb	r3, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d0f6:	4299      	cmp	r1, r3
 800d0f8:	d835      	bhi.n	800d166 <RadioSetTxConfig+0xd2>
                if( preambleLen < 12 )
 800d0fa:	2e0b      	cmp	r6, #11
 800d0fc:	d833      	bhi.n	800d166 <RadioSetTxConfig+0xd2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800d0fe:	330b      	adds	r3, #11
 800d100:	81a3      	strh	r3, [r4, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d106:	4b1e      	ldr	r3, [pc, #120]	; (800d180 <RadioSetTxConfig+0xec>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800d10c:	9b04      	ldr	r3, [sp, #16]
 800d10e:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800d110:	9b05      	ldr	r3, [sp, #20]
 800d112:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800d114:	f7ff fccc 	bl	800cab0 <RadioStandby>
    if( modem == MODEM_LORA){
 800d118:	f7ff fefe 	bl	800cf18 <RadioSetModem.part.0>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800d11c:	0020      	movs	r0, r4
 800d11e:	3028      	adds	r0, #40	; 0x28
 800d120:	f000 f9b4 	bl	800d48c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800d124:	0020      	movs	r0, r4
 800d126:	f000 f9d5 	bl	800d4d4 <SX126xSetPacketParams>
    if( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800d12a:	4b13      	ldr	r3, [pc, #76]	; (800d178 <RadioSetTxConfig+0xe4>)
 800d12c:	2404      	movs	r4, #4
 800d12e:	3339      	adds	r3, #57	; 0x39
 800d130:	781b      	ldrb	r3, [r3, #0]
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800d132:	4814      	ldr	r0, [pc, #80]	; (800d184 <RadioSetTxConfig+0xf0>)
    if( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800d134:	2b06      	cmp	r3, #6
 800d136:	d119      	bne.n	800d16c <RadioSetTxConfig+0xd8>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800d138:	f000 fb28 	bl	800d78c <SX126xReadRegister>
 800d13c:	43a0      	bics	r0, r4
 800d13e:	b2c1      	uxtb	r1, r0
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800d140:	4810      	ldr	r0, [pc, #64]	; (800d184 <RadioSetTxConfig+0xf0>)
 800d142:	f000 fa83 	bl	800d64c <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800d146:	9801      	ldr	r0, [sp, #4]
 800d148:	f000 fb8a 	bl	800d860 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800d14c:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <RadioSetTxConfig+0xf4>)
 800d14e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d150:	601a      	str	r2, [r3, #0]
}
 800d152:	b007      	add	sp, #28
 800d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d156:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d1c6      	bne.n	800d0ea <RadioSetTxConfig+0x56>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d15c:	3a0c      	subs	r2, #12
 800d15e:	4253      	negs	r3, r2
 800d160:	415a      	adcs	r2, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d162:	b2d0      	uxtb	r0, r2
 800d164:	e7c1      	b.n	800d0ea <RadioSetTxConfig+0x56>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d166:	4b04      	ldr	r3, [pc, #16]	; (800d178 <RadioSetTxConfig+0xe4>)
 800d168:	819e      	strh	r6, [r3, #12]
 800d16a:	e7ca      	b.n	800d102 <RadioSetTxConfig+0x6e>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800d16c:	f000 fb0e 	bl	800d78c <SX126xReadRegister>
 800d170:	4304      	orrs	r4, r0
 800d172:	b2e1      	uxtb	r1, r4
 800d174:	e7e4      	b.n	800d140 <RadioSetTxConfig+0xac>
 800d176:	46c0      	nop			; (mov r8, r8)
 800d178:	2000146c 	.word	0x2000146c
 800d17c:	0800f1f6 	.word	0x0800f1f6
 800d180:	200001c4 	.word	0x200001c4
 800d184:	00000889 	.word	0x00000889
 800d188:	200014a8 	.word	0x200014a8

0800d18c <SX126xFreqCorrection>:

    SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
}

void SX126xFreqCorrection(uint8_t trim){
	xta_trim = trim;
 800d18c:	4b01      	ldr	r3, [pc, #4]	; (800d194 <SX126xFreqCorrection+0x8>)
 800d18e:	7018      	strb	r0, [r3, #0]
}
 800d190:	4770      	bx	lr
 800d192:	46c0      	nop			; (mov r8, r8)
 800d194:	200001c5 	.word	0x200001c5

0800d198 <SX126xGetOperatingMode>:


RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 800d198:	4b01      	ldr	r3, [pc, #4]	; (800d1a0 <SX126xGetOperatingMode+0x8>)
 800d19a:	7818      	ldrb	r0, [r3, #0]
}
 800d19c:	4770      	bx	lr
 800d19e:	46c0      	nop			; (mov r8, r8)
 800d1a0:	200014ca 	.word	0x200014ca

0800d1a4 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 800d1a4:	4b01      	ldr	r3, [pc, #4]	; (800d1ac <SX126xSetOperatingMode+0x8>)
 800d1a6:	7018      	strb	r0, [r3, #0]
}
 800d1a8:	4770      	bx	lr
 800d1aa:	46c0      	nop			; (mov r8, r8)
 800d1ac:	200014ca 	.word	0x200014ca

0800d1b0 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800d1b0:	b510      	push	{r4, lr}
    return OperatingMode;
 800d1b2:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <SX126xCheckDeviceReady+0x20>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <SX126xCheckDeviceReady+0xe>
 800d1ba:	2b06      	cmp	r3, #6
 800d1bc:	d104      	bne.n	800d1c8 <SX126xCheckDeviceReady+0x18>
    {
        Sx_Board_WakeUp( );
 800d1be:	f7f6 fe47 	bl	8003e50 <SX1262DVK1CAS_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        Sx_Board_SetAntSw( RFSW_ON );
 800d1c2:	2005      	movs	r0, #5
 800d1c4:	f7f6 fe22 	bl	8003e0c <SX1262DVK1CAS_RADIO_SetAntSw>
    }
    Sx_Board_WaitOnBusy( );
 800d1c8:	f7f6 fe0a 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	46c0      	nop			; (mov r8, r8)
 800d1d0:	200014ca 	.word	0x200014ca

0800d1d4 <SX126xGetPacketType>:
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 800d1d4:	4b01      	ldr	r3, [pc, #4]	; (800d1dc <SX126xGetPacketType+0x8>)
 800d1d6:	7818      	ldrb	r0, [r3, #0]
}
 800d1d8:	4770      	bx	lr
 800d1da:	46c0      	nop			; (mov r8, r8)
 800d1dc:	200014cb 	.word	0x200014cb

0800d1e0 <SX126xWriteCommand>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	0006      	movs	r6, r0
 800d1e4:	000c      	movs	r4, r1
 800d1e6:	0015      	movs	r5, r2
    SX126xCheckDeviceReady( );
 800d1e8:	f7ff ffe2 	bl	800d1b0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	f7f6 fe01 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800d1f2:	b2b0      	uxth	r0, r6
 800d1f4:	f7f6 fe1e 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 800d1f8:	1965      	adds	r5, r4, r5
 800d1fa:	42ac      	cmp	r4, r5
 800d1fc:	d107      	bne.n	800d20e <SX126xWriteCommand+0x2e>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800d1fe:	2001      	movs	r0, #1
 800d200:	f7f6 fdf8 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 800d204:	2e84      	cmp	r6, #132	; 0x84
 800d206:	d001      	beq.n	800d20c <SX126xWriteCommand+0x2c>
    {
        Sx_Board_WaitOnBusy( );
 800d208:	f7f6 fdea 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
    }
}
 800d20c:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800d20e:	7820      	ldrb	r0, [r4, #0]
 800d210:	f7f6 fe10 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800d214:	3401      	adds	r4, #1
 800d216:	e7f0      	b.n	800d1fa <SX126xWriteCommand+0x1a>

0800d218 <SX126xSetSleep>:
{
 800d218:	b513      	push	{r0, r1, r4, lr}
 800d21a:	1c04      	adds	r4, r0, #0
    Sx_Board_SetAntSw( RFSW_OFF );
 800d21c:	2000      	movs	r0, #0
 800d21e:	f7f6 fdf5 	bl	8003e0c <SX1262DVK1CAS_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800d222:	2006      	movs	r0, #6
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d224:	466b      	mov	r3, sp
 800d226:	4020      	ands	r0, r4
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800d228:	07e4      	lsls	r4, r4, #31
 800d22a:	0fe4      	lsrs	r4, r4, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d22c:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800d22e:	4304      	orrs	r4, r0
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800d230:	2201      	movs	r2, #1
 800d232:	2084      	movs	r0, #132	; 0x84
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d234:	700c      	strb	r4, [r1, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800d236:	f7ff ffd3 	bl	800d1e0 <SX126xWriteCommand>
    OperatingMode = mode;
 800d23a:	2200      	movs	r2, #0
 800d23c:	4b01      	ldr	r3, [pc, #4]	; (800d244 <SX126xSetSleep+0x2c>)
 800d23e:	701a      	strb	r2, [r3, #0]
}
 800d240:	bd13      	pop	{r0, r1, r4, pc}
 800d242:	46c0      	nop			; (mov r8, r8)
 800d244:	200014ca 	.word	0x200014ca

0800d248 <SX126xSetStandby>:
{
 800d248:	b507      	push	{r0, r1, r2, lr}
 800d24a:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800d24c:	2201      	movs	r2, #1
{
 800d24e:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800d250:	1dd9      	adds	r1, r3, #7
 800d252:	2080      	movs	r0, #128	; 0x80
 800d254:	f7ff ffc4 	bl	800d1e0 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800d258:	466b      	mov	r3, sp
 800d25a:	79db      	ldrb	r3, [r3, #7]
    OperatingMode = mode;
 800d25c:	1e5a      	subs	r2, r3, #1
 800d25e:	4193      	sbcs	r3, r2
 800d260:	4a01      	ldr	r2, [pc, #4]	; (800d268 <SX126xSetStandby+0x20>)
 800d262:	3301      	adds	r3, #1
 800d264:	7013      	strb	r3, [r2, #0]
}
 800d266:	bd07      	pop	{r0, r1, r2, pc}
 800d268:	200014ca 	.word	0x200014ca

0800d26c <SX126xSetRxDutyCycle>:
{
 800d26c:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800d26e:	466a      	mov	r2, sp
 800d270:	0c03      	lsrs	r3, r0, #16
 800d272:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800d274:	0a03      	lsrs	r3, r0, #8
 800d276:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800d278:	0c0b      	lsrs	r3, r1, #16
 800d27a:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800d27c:	0a0b      	lsrs	r3, r1, #8
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800d27e:	7090      	strb	r0, [r2, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800d280:	7113      	strb	r3, [r2, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800d282:	7151      	strb	r1, [r2, #5]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800d284:	2094      	movs	r0, #148	; 0x94
 800d286:	2206      	movs	r2, #6
 800d288:	4669      	mov	r1, sp
 800d28a:	f7ff ffa9 	bl	800d1e0 <SX126xWriteCommand>
    OperatingMode = mode;
 800d28e:	2206      	movs	r2, #6
 800d290:	4b01      	ldr	r3, [pc, #4]	; (800d298 <SX126xSetRxDutyCycle+0x2c>)
 800d292:	701a      	strb	r2, [r3, #0]
}
 800d294:	bd07      	pop	{r0, r1, r2, pc}
 800d296:	46c0      	nop			; (mov r8, r8)
 800d298:	200014ca 	.word	0x200014ca

0800d29c <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800d29c:	2200      	movs	r2, #0
{
 800d29e:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	20d1      	movs	r0, #209	; 0xd1
 800d2a4:	f7ff ff9c 	bl	800d1e0 <SX126xWriteCommand>
    OperatingMode = mode;
 800d2a8:	2204      	movs	r2, #4
 800d2aa:	4b01      	ldr	r3, [pc, #4]	; (800d2b0 <SX126xSetTxContinuousWave+0x14>)
 800d2ac:	701a      	strb	r2, [r3, #0]
}
 800d2ae:	bd10      	pop	{r4, pc}
 800d2b0:	200014ca 	.word	0x200014ca

0800d2b4 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 800d2b4:	b507      	push	{r0, r1, r2, lr}
 800d2b6:	466b      	mov	r3, sp
 800d2b8:	1dd9      	adds	r1, r3, #7
 800d2ba:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800d2bc:	2201      	movs	r2, #1
 800d2be:	209f      	movs	r0, #159	; 0x9f
 800d2c0:	f7ff ff8e 	bl	800d1e0 <SX126xWriteCommand>
}
 800d2c4:	bd07      	pop	{r0, r1, r2, pc}

0800d2c6 <SX126xSetRegulatorMode>:
{
 800d2c6:	b507      	push	{r0, r1, r2, lr}
 800d2c8:	466b      	mov	r3, sp
 800d2ca:	1dd9      	adds	r1, r3, #7
 800d2cc:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	2096      	movs	r0, #150	; 0x96
 800d2d2:	f7ff ff85 	bl	800d1e0 <SX126xWriteCommand>
}
 800d2d6:	bd07      	pop	{r0, r1, r2, pc}

0800d2d8 <SX126xCalibrate>:
{
 800d2d8:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800d2da:	466a      	mov	r2, sp
{
 800d2dc:	1c03      	adds	r3, r0, #0
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800d2de:	2060      	movs	r0, #96	; 0x60
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800d2e0:	1dd1      	adds	r1, r2, #7
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800d2e2:	07da      	lsls	r2, r3, #31
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800d2e4:	4018      	ands	r0, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800d2e6:	0fd2      	lsrs	r2, r2, #31
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800d2e8:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800d2ea:	2210      	movs	r2, #16
 800d2ec:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800d2ee:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800d2f0:	2208      	movs	r2, #8
 800d2f2:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800d2f4:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800d2fa:	4310      	orrs	r0, r2
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	4013      	ands	r3, r2
 800d300:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800d302:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 800d304:	3a01      	subs	r2, #1
 800d306:	2089      	movs	r0, #137	; 0x89
 800d308:	f7ff ff6a 	bl	800d1e0 <SX126xWriteCommand>
}
 800d30c:	bd07      	pop	{r0, r1, r2, pc}
	...

0800d310 <SX126xCalibrateImage>:
{
 800d310:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800d312:	4b12      	ldr	r3, [pc, #72]	; (800d35c <SX126xCalibrateImage+0x4c>)
 800d314:	a901      	add	r1, sp, #4
 800d316:	4298      	cmp	r0, r3
 800d318:	d908      	bls.n	800d32c <SX126xCalibrateImage+0x1c>
        calFreq[0] = 0xE1;
 800d31a:	23e1      	movs	r3, #225	; 0xe1
 800d31c:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0xE9;
 800d31e:	3308      	adds	r3, #8
        calFreq[1] = 0x6F;
 800d320:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800d322:	2202      	movs	r2, #2
 800d324:	2098      	movs	r0, #152	; 0x98
 800d326:	f7ff ff5b 	bl	800d1e0 <SX126xWriteCommand>
}
 800d32a:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 800d32c:	4b0c      	ldr	r3, [pc, #48]	; (800d360 <SX126xCalibrateImage+0x50>)
 800d32e:	4298      	cmp	r0, r3
 800d330:	d903      	bls.n	800d33a <SX126xCalibrateImage+0x2a>
        calFreq[0] = 0xD7;
 800d332:	23d7      	movs	r3, #215	; 0xd7
        calFreq[0] = 0x6B;
 800d334:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x6F;
 800d336:	3304      	adds	r3, #4
 800d338:	e7f2      	b.n	800d320 <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 800d33a:	4b0a      	ldr	r3, [pc, #40]	; (800d364 <SX126xCalibrateImage+0x54>)
 800d33c:	4298      	cmp	r0, r3
 800d33e:	d901      	bls.n	800d344 <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xC1;
 800d340:	23c1      	movs	r3, #193	; 0xc1
 800d342:	e7f7      	b.n	800d334 <SX126xCalibrateImage+0x24>
    else if( freq > 460000000 )
 800d344:	4b08      	ldr	r3, [pc, #32]	; (800d368 <SX126xCalibrateImage+0x58>)
 800d346:	4298      	cmp	r0, r3
 800d348:	d903      	bls.n	800d352 <SX126xCalibrateImage+0x42>
        calFreq[0] = 0x75;
 800d34a:	2375      	movs	r3, #117	; 0x75
 800d34c:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x81;
 800d34e:	330c      	adds	r3, #12
 800d350:	e7e6      	b.n	800d320 <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 800d352:	4b06      	ldr	r3, [pc, #24]	; (800d36c <SX126xCalibrateImage+0x5c>)
 800d354:	4298      	cmp	r0, r3
 800d356:	d9e4      	bls.n	800d322 <SX126xCalibrateImage+0x12>
        calFreq[0] = 0x6B;
 800d358:	236b      	movs	r3, #107	; 0x6b
 800d35a:	e7eb      	b.n	800d334 <SX126xCalibrateImage+0x24>
 800d35c:	35a4e900 	.word	0x35a4e900
 800d360:	32a9f880 	.word	0x32a9f880
 800d364:	2de54480 	.word	0x2de54480
 800d368:	1b6b0b00 	.word	0x1b6b0b00
 800d36c:	1954fc40 	.word	0x1954fc40

0800d370 <SX126xSetPaConfig>:
{
 800d370:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 800d372:	ac01      	add	r4, sp, #4
 800d374:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 800d376:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 800d378:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800d37a:	0021      	movs	r1, r4
 800d37c:	2204      	movs	r2, #4
 800d37e:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 800d380:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800d382:	f7ff ff2d 	bl	800d1e0 <SX126xWriteCommand>
}
 800d386:	bd13      	pop	{r0, r1, r4, pc}

0800d388 <SX126xSetDioIrqParams>:
{
 800d388:	b537      	push	{r0, r1, r2, r4, r5, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800d38a:	466d      	mov	r5, sp
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800d38c:	7068      	strb	r0, [r5, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800d38e:	70e9      	strb	r1, [r5, #3]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800d390:	716a      	strb	r2, [r5, #5]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800d392:	0a04      	lsrs	r4, r0, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800d394:	0a08      	lsrs	r0, r1, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800d396:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800d398:	0a1a      	lsrs	r2, r3, #8
 800d39a:	71aa      	strb	r2, [r5, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800d39c:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800d39e:	70a8      	strb	r0, [r5, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800d3a0:	7129      	strb	r1, [r5, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800d3a2:	0010      	movs	r0, r2
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800d3a4:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800d3a6:	702c      	strb	r4, [r5, #0]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800d3a8:	71eb      	strb	r3, [r5, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800d3aa:	f7ff ff19 	bl	800d1e0 <SX126xWriteCommand>
}
 800d3ae:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800d3b0 <SX126xSetDio2AsRfSwitchCtrl>:
{
 800d3b0:	b507      	push	{r0, r1, r2, lr}
 800d3b2:	466b      	mov	r3, sp
 800d3b4:	1dd9      	adds	r1, r3, #7
 800d3b6:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	209d      	movs	r0, #157	; 0x9d
 800d3bc:	f7ff ff10 	bl	800d1e0 <SX126xWriteCommand>
}
 800d3c0:	bd07      	pop	{r0, r1, r2, pc}

0800d3c2 <SX126xSetDio3AsTcxoCtrl>:
{
 800d3c2:	b507      	push	{r0, r1, r2, lr}
 800d3c4:	000b      	movs	r3, r1
    buf[0] = tcxoVoltage & 0x07;
 800d3c6:	2207      	movs	r2, #7
 800d3c8:	a901      	add	r1, sp, #4
 800d3ca:	4010      	ands	r0, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d3cc:	0c1a      	lsrs	r2, r3, #16
 800d3ce:	704a      	strb	r2, [r1, #1]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d3d0:	0a1a      	lsrs	r2, r3, #8
    buf[0] = tcxoVoltage & 0x07;
 800d3d2:	7008      	strb	r0, [r1, #0]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d3d4:	708a      	strb	r2, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800d3d6:	2097      	movs	r0, #151	; 0x97
 800d3d8:	2204      	movs	r2, #4
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800d3da:	70cb      	strb	r3, [r1, #3]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800d3dc:	f7ff ff00 	bl	800d1e0 <SX126xWriteCommand>
}
 800d3e0:	bd07      	pop	{r0, r1, r2, pc}
	...

0800d3e4 <SX126xInit>:
{
 800d3e4:	b507      	push	{r0, r1, r2, lr}
 800d3e6:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 800d3e8:	f7f6 fcc0 	bl	8003d6c <SX1262DVK1CAS_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 800d3ec:	a801      	add	r0, sp, #4
 800d3ee:	f7f6 fca1 	bl	8003d34 <SX1262DVK1CAS_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 800d3f2:	f7f6 fd2d 	bl	8003e50 <SX1262DVK1CAS_RADIO_WakeUp>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	f7ff ff26 	bl	800d248 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 800d3fc:	f7f6 fd14 	bl	8003e28 <SX1262DVK1CAS_RADIO_BoardIsTcxo>
 800d400:	2800      	cmp	r0, #0
 800d402:	d008      	beq.n	800d416 <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 800d404:	f7f6 fcb0 	bl	8003d68 <SX1262DVK1CAS_RADIO_GetWakeUpTime>
 800d408:	0181      	lsls	r1, r0, #6
 800d40a:	2001      	movs	r0, #1
 800d40c:	f7ff ffd9 	bl	800d3c2 <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 800d410:	207f      	movs	r0, #127	; 0x7f
 800d412:	f7ff ff61 	bl	800d2d8 <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 800d416:	2001      	movs	r0, #1
 800d418:	f7ff ffca 	bl	800d3b0 <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = mode;
 800d41c:	2202      	movs	r2, #2
 800d41e:	4b01      	ldr	r3, [pc, #4]	; (800d424 <SX126xInit+0x40>)
 800d420:	701a      	strb	r2, [r3, #0]
}
 800d422:	bd07      	pop	{r0, r1, r2, pc}
 800d424:	200014ca 	.word	0x200014ca

0800d428 <SX126xSetRfFrequency>:
{
 800d428:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 800d42a:	4d0f      	ldr	r5, [pc, #60]	; (800d468 <SX126xSetRfFrequency+0x40>)
{
 800d42c:	0004      	movs	r4, r0
    if( ImageCalibrated == false )
 800d42e:	782b      	ldrb	r3, [r5, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d103      	bne.n	800d43c <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 800d434:	f7ff ff6c 	bl	800d310 <SX126xCalibrateImage>
        ImageCalibrated = true;
 800d438:	2301      	movs	r3, #1
 800d43a:	702b      	strb	r3, [r5, #0]
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 800d43c:	0020      	movs	r0, r4
 800d43e:	f7f4 fe6b 	bl	8002118 <__aeabi_ui2d>
 800d442:	2200      	movs	r2, #0
 800d444:	4b09      	ldr	r3, [pc, #36]	; (800d46c <SX126xSetRfFrequency+0x44>)
 800d446:	f7f3 fe9d 	bl	8001184 <__aeabi_ddiv>
 800d44a:	f7f3 f885 	bl	8000558 <__aeabi_d2uiz>
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 800d44e:	a901      	add	r1, sp, #4
 800d450:	0e03      	lsrs	r3, r0, #24
 800d452:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 800d454:	0c03      	lsrs	r3, r0, #16
 800d456:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 800d458:	0a03      	lsrs	r3, r0, #8
    buf[3] = ( uint8_t )( freq & 0xFF );
 800d45a:	70c8      	strb	r0, [r1, #3]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800d45c:	2204      	movs	r2, #4
 800d45e:	2086      	movs	r0, #134	; 0x86
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 800d460:	708b      	strb	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800d462:	f7ff febd 	bl	800d1e0 <SX126xWriteCommand>
}
 800d466:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800d468:	200014c8 	.word	0x200014c8
 800d46c:	3fee8480 	.word	0x3fee8480

0800d470 <SX126xSetPacketType>:
{
 800d470:	b507      	push	{r0, r1, r2, lr}
 800d472:	466b      	mov	r3, sp
 800d474:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 800d476:	4b04      	ldr	r3, [pc, #16]	; (800d488 <SX126xSetPacketType+0x18>)
{
 800d478:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 800d47a:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800d47c:	2201      	movs	r2, #1
 800d47e:	208a      	movs	r0, #138	; 0x8a
 800d480:	f7ff feae 	bl	800d1e0 <SX126xWriteCommand>
}
 800d484:	bd07      	pop	{r0, r1, r2, pc}
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	200014cb 	.word	0x200014cb

0800d48c <SX126xSetModulationParams>:
{
 800d48c:	b513      	push	{r0, r1, r4, lr}
 800d48e:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800d490:	2208      	movs	r2, #8
 800d492:	4668      	mov	r0, sp
 800d494:	490d      	ldr	r1, [pc, #52]	; (800d4cc <SX126xSetModulationParams+0x40>)
 800d496:	f001 f879 	bl	800e58c <memcpy>
    if( PacketType != modulationParams->PacketType )
 800d49a:	4b0d      	ldr	r3, [pc, #52]	; (800d4d0 <SX126xSetModulationParams+0x44>)
 800d49c:	7820      	ldrb	r0, [r4, #0]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	4283      	cmp	r3, r0
 800d4a2:	d001      	beq.n	800d4a8 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 800d4a4:	f7ff ffe4 	bl	800d470 <SX126xSetPacketType>
    if( modulationParams->PacketType == PACKET_TYPE_LORA)
 800d4a8:	7823      	ldrb	r3, [r4, #0]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d10d      	bne.n	800d4ca <SX126xSetModulationParams+0x3e>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800d4ae:	466a      	mov	r2, sp
 800d4b0:	7c23      	ldrb	r3, [r4, #16]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800d4b2:	4669      	mov	r1, sp
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800d4b4:	7013      	strb	r3, [r2, #0]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800d4b6:	7c63      	ldrb	r3, [r4, #17]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800d4b8:	208b      	movs	r0, #139	; 0x8b
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800d4ba:	7053      	strb	r3, [r2, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800d4bc:	7ca3      	ldrb	r3, [r4, #18]
 800d4be:	7093      	strb	r3, [r2, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800d4c0:	7ce3      	ldrb	r3, [r4, #19]
 800d4c2:	70d3      	strb	r3, [r2, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800d4c4:	2204      	movs	r2, #4
 800d4c6:	f7ff fe8b 	bl	800d1e0 <SX126xWriteCommand>
}
 800d4ca:	bd13      	pop	{r0, r1, r4, pc}
 800d4cc:	0800e6f4 	.word	0x0800e6f4
 800d4d0:	200014cb 	.word	0x200014cb

0800d4d4 <SX126xSetPacketParams>:
{
 800d4d4:	b530      	push	{r4, r5, lr}
 800d4d6:	0004      	movs	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800d4d8:	4913      	ldr	r1, [pc, #76]	; (800d528 <SX126xSetPacketParams+0x54>)
{
 800d4da:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800d4dc:	ad01      	add	r5, sp, #4
 800d4de:	2209      	movs	r2, #9
 800d4e0:	0028      	movs	r0, r5
 800d4e2:	3108      	adds	r1, #8
 800d4e4:	f001 f852 	bl	800e58c <memcpy>
    if( PacketType != packetParams->PacketType )
 800d4e8:	4b10      	ldr	r3, [pc, #64]	; (800d52c <SX126xSetPacketParams+0x58>)
 800d4ea:	7820      	ldrb	r0, [r4, #0]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	4283      	cmp	r3, r0
 800d4f0:	d001      	beq.n	800d4f6 <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 800d4f2:	f7ff ffbd 	bl	800d470 <SX126xSetPacketType>
    if( packetParams->PacketType == PACKET_TYPE_LORA)
 800d4f6:	7823      	ldrb	r3, [r4, #0]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d10d      	bne.n	800d518 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	0a1a      	lsrs	r2, r3, #8
 800d500:	702a      	strb	r2, [r5, #0]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800d502:	706b      	strb	r3, [r5, #1]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800d504:	4a0a      	ldr	r2, [pc, #40]	; (800d530 <SX126xSetPacketParams+0x5c>)
 800d506:	7ba3      	ldrb	r3, [r4, #14]
 800d508:	7013      	strb	r3, [r2, #0]
 800d50a:	70ab      	strb	r3, [r5, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800d50c:	7be3      	ldrb	r3, [r4, #15]
 800d50e:	70eb      	strb	r3, [r5, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800d510:	7c23      	ldrb	r3, [r4, #16]
 800d512:	712b      	strb	r3, [r5, #4]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800d514:	7c63      	ldrb	r3, [r4, #17]
 800d516:	716b      	strb	r3, [r5, #5]
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800d518:	2206      	movs	r2, #6
 800d51a:	0029      	movs	r1, r5
 800d51c:	208c      	movs	r0, #140	; 0x8c
 800d51e:	f7ff fe5f 	bl	800d1e0 <SX126xWriteCommand>
}
 800d522:	b005      	add	sp, #20
 800d524:	bd30      	pop	{r4, r5, pc}
 800d526:	46c0      	nop			; (mov r8, r8)
 800d528:	0800e6f4 	.word	0x0800e6f4
 800d52c:	200014cb 	.word	0x200014cb
 800d530:	200014c9 	.word	0x200014c9

0800d534 <SX126xSetBufferBaseAddress>:
{
 800d534:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 800d536:	466b      	mov	r3, sp
 800d538:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 800d53a:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800d53c:	2202      	movs	r2, #2
 800d53e:	208f      	movs	r0, #143	; 0x8f
 800d540:	a901      	add	r1, sp, #4
 800d542:	f7ff fe4d 	bl	800d1e0 <SX126xWriteCommand>
}
 800d546:	bd07      	pop	{r0, r1, r2, pc}

0800d548 <SX126xClearIrqStatus>:
{
 800d548:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800d54a:	466a      	mov	r2, sp
 800d54c:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 800d54e:	7150      	strb	r0, [r2, #5]
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800d550:	7113      	strb	r3, [r2, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800d552:	2202      	movs	r2, #2
 800d554:	a901      	add	r1, sp, #4
 800d556:	0010      	movs	r0, r2
 800d558:	f7ff fe42 	bl	800d1e0 <SX126xWriteCommand>
}
 800d55c:	bd07      	pop	{r0, r1, r2, pc}

0800d55e <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800d55e:	b570      	push	{r4, r5, r6, lr}
 800d560:	0006      	movs	r6, r0
 800d562:	000c      	movs	r4, r1
 800d564:	0015      	movs	r5, r2
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 800d566:	f7ff fe23 	bl	800d1b0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800d56a:	2000      	movs	r0, #0
 800d56c:	f7f6 fc42 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800d570:	b2b0      	uxth	r0, r6
 800d572:	f7f6 fc5f 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 800d576:	2000      	movs	r0, #0
 800d578:	f7f6 fc5c 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
 800d57c:	1965      	adds	r5, r4, r5
 800d57e:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 800d580:	42ac      	cmp	r4, r5
 800d582:	d106      	bne.n	800d592 <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 800d584:	2001      	movs	r0, #1
 800d586:	f7f6 fc35 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800d58a:	f7f6 fc29 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>

    return status;
}
 800d58e:	0030      	movs	r0, r6
 800d590:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800d592:	2000      	movs	r0, #0
 800d594:	f7f6 fc4e 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
 800d598:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800d59a:	3401      	adds	r4, #1
 800d59c:	e7f0      	b.n	800d580 <SX126xReadCommand+0x22>

0800d59e <SX126xGetIrqStatus>:
{
 800d59e:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800d5a0:	ac01      	add	r4, sp, #4
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	0021      	movs	r1, r4
 800d5a6:	2012      	movs	r0, #18
 800d5a8:	f7ff ffd9 	bl	800d55e <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800d5ac:	8820      	ldrh	r0, [r4, #0]
 800d5ae:	ba40      	rev16	r0, r0
 800d5b0:	b280      	uxth	r0, r0
}
 800d5b2:	bd16      	pop	{r1, r2, r4, pc}

0800d5b4 <SX126xGetPacketStatus>:
{
 800d5b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5b6:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800d5b8:	ad01      	add	r5, sp, #4
 800d5ba:	2203      	movs	r2, #3
 800d5bc:	0029      	movs	r1, r5
 800d5be:	2014      	movs	r0, #20
 800d5c0:	f7ff ffcd 	bl	800d55e <SX126xReadCommand>
    return PacketType;
 800d5c4:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <SX126xGetPacketStatus+0x50>)
 800d5c6:	781e      	ldrb	r6, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 800d5c8:	7026      	strb	r6, [r4, #0]
    if( pktStatus->packetType == PACKET_TYPE_LORA)
 800d5ca:	2e01      	cmp	r6, #1
 800d5cc:	d110      	bne.n	800d5f0 <SX126xGetPacketStatus+0x3c>
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800d5ce:	782b      	ldrb	r3, [r5, #0]
 800d5d0:	425b      	negs	r3, r3
 800d5d2:	105b      	asrs	r3, r3, #1
 800d5d4:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	56eb      	ldrsb	r3, [r5, r3]
 800d5da:	3302      	adds	r3, #2
 800d5dc:	109b      	asrs	r3, r3, #2
 800d5de:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800d5e0:	78ab      	ldrb	r3, [r5, #2]
 800d5e2:	425b      	negs	r3, r3
 800d5e4:	105b      	asrs	r3, r3, #1
 800d5e6:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800d5e8:	4b07      	ldr	r3, [pc, #28]	; (800d608 <SX126xGetPacketStatus+0x54>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6123      	str	r3, [r4, #16]
}
 800d5ee:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    }else if(pktStatus->packetType == PACKET_TYPE_NONE){
 800d5f0:	2e0f      	cmp	r6, #15
 800d5f2:	d1fc      	bne.n	800d5ee <SX126xGetPacketStatus+0x3a>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800d5f4:	2214      	movs	r2, #20
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	0020      	movs	r0, r4
 800d5fa:	f000 ffd0 	bl	800e59e <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800d5fe:	7026      	strb	r6, [r4, #0]
}
 800d600:	e7f5      	b.n	800d5ee <SX126xGetPacketStatus+0x3a>
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	200014cb 	.word	0x200014cb
 800d608:	200014c4 	.word	0x200014c4

0800d60c <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	0005      	movs	r5, r0
 800d610:	000c      	movs	r4, r1
 800d612:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800d614:	f7ff fdcc 	bl	800d1b0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800d618:	2000      	movs	r0, #0
 800d61a:	f7f6 fbeb 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 800d61e:	200d      	movs	r0, #13
 800d620:	f7f6 fc08 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800d624:	0a28      	lsrs	r0, r5, #8
 800d626:	f7f6 fc05 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800d62a:	b2e8      	uxtb	r0, r5
 800d62c:	f7f6 fc02 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 800d630:	19a6      	adds	r6, r4, r6
 800d632:	42b4      	cmp	r4, r6
 800d634:	d105      	bne.n	800d642 <SX126xWriteRegisters+0x36>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800d636:	2001      	movs	r0, #1
 800d638:	f7f6 fbdc 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800d63c:	f7f6 fbd0 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800d640:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800d642:	7820      	ldrb	r0, [r4, #0]
 800d644:	f7f6 fbf6 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800d648:	3401      	adds	r4, #1
 800d64a:	e7f2      	b.n	800d632 <SX126xWriteRegisters+0x26>

0800d64c <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800d64c:	b507      	push	{r0, r1, r2, lr}
 800d64e:	466b      	mov	r3, sp
 800d650:	71d9      	strb	r1, [r3, #7]
 800d652:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 800d654:	2201      	movs	r2, #1
 800d656:	0019      	movs	r1, r3
 800d658:	f7ff ffd8 	bl	800d60c <SX126xWriteRegisters>
}
 800d65c:	bd07      	pop	{r0, r1, r2, pc}
	...

0800d660 <SX126xSetTx>:
{
 800d660:	b537      	push	{r0, r1, r2, r4, r5, lr}
    OperatingMode = mode;
 800d662:	2204      	movs	r2, #4
 800d664:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <SX126xSetTx+0x34>)
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d666:	4d0c      	ldr	r5, [pc, #48]	; (800d698 <SX126xSetTx+0x38>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d668:	ac01      	add	r4, sp, #4
    OperatingMode = mode;
 800d66a:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d66c:	0c03      	lsrs	r3, r0, #16
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d66e:	7829      	ldrb	r1, [r5, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d670:	7023      	strb	r3, [r4, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d672:	70a0      	strb	r0, [r4, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d674:	0a03      	lsrs	r3, r0, #8
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d676:	4809      	ldr	r0, [pc, #36]	; (800d69c <SX126xSetTx+0x3c>)
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d678:	7063      	strb	r3, [r4, #1]
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d67a:	f7ff ffe7 	bl	800d64c <SX126xWriteRegister>
	SX126xWriteRegister(REG_XTB_TRIM, xta_trim);
 800d67e:	7829      	ldrb	r1, [r5, #0]
 800d680:	4807      	ldr	r0, [pc, #28]	; (800d6a0 <SX126xSetTx+0x40>)
 800d682:	f7ff ffe3 	bl	800d64c <SX126xWriteRegister>
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800d686:	2203      	movs	r2, #3
 800d688:	0021      	movs	r1, r4
 800d68a:	2083      	movs	r0, #131	; 0x83
 800d68c:	f7ff fda8 	bl	800d1e0 <SX126xWriteCommand>
}
 800d690:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800d692:	46c0      	nop			; (mov r8, r8)
 800d694:	200014ca 	.word	0x200014ca
 800d698:	200001c5 	.word	0x200001c5
 800d69c:	00000911 	.word	0x00000911
 800d6a0:	00000912 	.word	0x00000912

0800d6a4 <SX126xSetRx>:
{
 800d6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    OperatingMode = mode;
 800d6a6:	2205      	movs	r2, #5
 800d6a8:	4b0b      	ldr	r3, [pc, #44]	; (800d6d8 <SX126xSetRx+0x34>)
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d6aa:	4d0c      	ldr	r5, [pc, #48]	; (800d6dc <SX126xSetRx+0x38>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d6ac:	ac01      	add	r4, sp, #4
    OperatingMode = mode;
 800d6ae:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d6b0:	0c03      	lsrs	r3, r0, #16
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d6b2:	7829      	ldrb	r1, [r5, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d6b4:	7023      	strb	r3, [r4, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d6b6:	70a0      	strb	r0, [r4, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d6b8:	0a03      	lsrs	r3, r0, #8
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d6ba:	4809      	ldr	r0, [pc, #36]	; (800d6e0 <SX126xSetRx+0x3c>)
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d6bc:	7063      	strb	r3, [r4, #1]
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800d6be:	f7ff ffc5 	bl	800d64c <SX126xWriteRegister>
	SX126xWriteRegister(REG_XTB_TRIM, xta_trim);
 800d6c2:	7829      	ldrb	r1, [r5, #0]
 800d6c4:	4807      	ldr	r0, [pc, #28]	; (800d6e4 <SX126xSetRx+0x40>)
 800d6c6:	f7ff ffc1 	bl	800d64c <SX126xWriteRegister>
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800d6ca:	2203      	movs	r2, #3
 800d6cc:	0021      	movs	r1, r4
 800d6ce:	2082      	movs	r0, #130	; 0x82
 800d6d0:	f7ff fd86 	bl	800d1e0 <SX126xWriteCommand>
}
 800d6d4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800d6d6:	46c0      	nop			; (mov r8, r8)
 800d6d8:	200014ca 	.word	0x200014ca
 800d6dc:	200001c5 	.word	0x200001c5
 800d6e0:	00000911 	.word	0x00000911
 800d6e4:	00000912 	.word	0x00000912

0800d6e8 <SX126xSetRxBoosted>:
{
 800d6e8:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800d6ea:	2205      	movs	r2, #5
{
 800d6ec:	0004      	movs	r4, r0
    OperatingMode = mode;
 800d6ee:	4b08      	ldr	r3, [pc, #32]	; (800d710 <SX126xSetRxBoosted+0x28>)
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800d6f0:	2196      	movs	r1, #150	; 0x96
 800d6f2:	4808      	ldr	r0, [pc, #32]	; (800d714 <SX126xSetRxBoosted+0x2c>)
    OperatingMode = mode;
 800d6f4:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800d6f6:	f7ff ffa9 	bl	800d64c <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d6fa:	a901      	add	r1, sp, #4
 800d6fc:	0c23      	lsrs	r3, r4, #16
 800d6fe:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d700:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800d702:	2203      	movs	r2, #3
 800d704:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d706:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d708:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800d70a:	f7ff fd69 	bl	800d1e0 <SX126xWriteCommand>
}
 800d70e:	bd13      	pop	{r0, r1, r4, pc}
 800d710:	200014ca 	.word	0x200014ca
 800d714:	000008ac 	.word	0x000008ac

0800d718 <SX126xSetLoRaSymbNumTimeout>:
{
 800d718:	b507      	push	{r0, r1, r2, lr}
 800d71a:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800d71c:	2201      	movs	r2, #1
{
 800d71e:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800d720:	1dd9      	adds	r1, r3, #7
 800d722:	20a0      	movs	r0, #160	; 0xa0
 800d724:	f7ff fd5c 	bl	800d1e0 <SX126xWriteCommand>
    if( symbNum >= 64 )
 800d728:	466b      	mov	r3, sp
 800d72a:	79d9      	ldrb	r1, [r3, #7]
 800d72c:	293f      	cmp	r1, #63	; 0x3f
 800d72e:	d906      	bls.n	800d73e <SX126xSetLoRaSymbNumTimeout+0x26>
            mant >>= 2;
 800d730:	08c9      	lsrs	r1, r1, #3
        reg = exp + ( mant << 3 );
 800d732:	00c9      	lsls	r1, r1, #3
 800d734:	3101      	adds	r1, #1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800d736:	4802      	ldr	r0, [pc, #8]	; (800d740 <SX126xSetLoRaSymbNumTimeout+0x28>)
 800d738:	b2c9      	uxtb	r1, r1
 800d73a:	f7ff ff87 	bl	800d64c <SX126xWriteRegister>
}
 800d73e:	bd07      	pop	{r0, r1, r2, pc}
 800d740:	00000706 	.word	0x00000706

0800d744 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	0005      	movs	r5, r0
 800d748:	000c      	movs	r4, r1
 800d74a:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800d74c:	f7ff fd30 	bl	800d1b0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800d750:	2000      	movs	r0, #0
 800d752:	f7f6 fb4f 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 800d756:	201d      	movs	r0, #29
 800d758:	f7f6 fb6c 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800d75c:	0a28      	lsrs	r0, r5, #8
 800d75e:	f7f6 fb69 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800d762:	b2e8      	uxtb	r0, r5
 800d764:	f7f6 fb66 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800d768:	2000      	movs	r0, #0
 800d76a:	f7f6 fb63 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800d76e:	19a6      	adds	r6, r4, r6
 800d770:	42b4      	cmp	r4, r6
 800d772:	d105      	bne.n	800d780 <SX126xReadRegisters+0x3c>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800d774:	2001      	movs	r0, #1
 800d776:	f7f6 fb3d 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800d77a:	f7f6 fb31 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800d77e:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800d780:	2000      	movs	r0, #0
 800d782:	f7f6 fb57 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
 800d786:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800d788:	3401      	adds	r4, #1
 800d78a:	e7f1      	b.n	800d770 <SX126xReadRegisters+0x2c>

0800d78c <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 800d78c:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800d78e:	466b      	mov	r3, sp
 800d790:	1ddc      	adds	r4, r3, #7
 800d792:	2201      	movs	r2, #1
 800d794:	0021      	movs	r1, r4
 800d796:	f7ff ffd5 	bl	800d744 <SX126xReadRegisters>
    return data;
 800d79a:	7820      	ldrb	r0, [r4, #0]
}
 800d79c:	bd16      	pop	{r1, r2, r4, pc}
	...

0800d7a0 <SX126xGetRandom>:
    uint32_t number = 0;
 800d7a0:	2300      	movs	r3, #0
{
 800d7a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800d7a4:	4e16      	ldr	r6, [pc, #88]	; (800d800 <SX126xGetRandom+0x60>)
{
 800d7a6:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800d7a8:	0030      	movs	r0, r6
    uint32_t number = 0;
 800d7aa:	9303      	str	r3, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800d7ac:	f7ff ffee 	bl	800d78c <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800d7b0:	2701      	movs	r7, #1
 800d7b2:	0001      	movs	r1, r0
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800d7b4:	4d13      	ldr	r5, [pc, #76]	; (800d804 <SX126xGetRandom+0x64>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800d7b6:	43b9      	bics	r1, r7
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800d7b8:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800d7ba:	b2c9      	uxtb	r1, r1
 800d7bc:	0030      	movs	r0, r6
 800d7be:	f7ff ff45 	bl	800d64c <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800d7c2:	0028      	movs	r0, r5
 800d7c4:	f7ff ffe2 	bl	800d78c <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800d7c8:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800d7ca:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800d7cc:	4001      	ands	r1, r0
 800d7ce:	0028      	movs	r0, r5
 800d7d0:	f7ff ff3c 	bl	800d64c <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800d7d4:	480c      	ldr	r0, [pc, #48]	; (800d808 <SX126xGetRandom+0x68>)
 800d7d6:	f7ff ff65 	bl	800d6a4 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800d7da:	2204      	movs	r2, #4
 800d7dc:	a903      	add	r1, sp, #12
 800d7de:	480b      	ldr	r0, [pc, #44]	; (800d80c <SX126xGetRandom+0x6c>)
 800d7e0:	f7ff ffb0 	bl	800d744 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800d7e4:	0038      	movs	r0, r7
 800d7e6:	f7ff fd2f 	bl	800d248 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 800d7ea:	0021      	movs	r1, r4
 800d7ec:	0030      	movs	r0, r6
 800d7ee:	f7ff ff2d 	bl	800d64c <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 800d7f2:	0028      	movs	r0, r5
 800d7f4:	9901      	ldr	r1, [sp, #4]
 800d7f6:	f7ff ff29 	bl	800d64c <SX126xWriteRegister>
}
 800d7fa:	9803      	ldr	r0, [sp, #12]
 800d7fc:	b005      	add	sp, #20
 800d7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d800:	000008e2 	.word	0x000008e2
 800d804:	000008e5 	.word	0x000008e5
 800d808:	00ffffff 	.word	0x00ffffff
 800d80c:	00000819 	.word	0x00000819

0800d810 <SX126xSetTxParams>:
{
 800d810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d812:	0005      	movs	r5, r0
	SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800d814:	4810      	ldr	r0, [pc, #64]	; (800d858 <SX126xSetTxParams+0x48>)
{
 800d816:	000c      	movs	r4, r1
	SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800d818:	f7ff ffb8 	bl	800d78c <SX126xReadRegister>
 800d81c:	231e      	movs	r3, #30
 800d81e:	4303      	orrs	r3, r0
 800d820:	b2d9      	uxtb	r1, r3
 800d822:	480d      	ldr	r0, [pc, #52]	; (800d858 <SX126xSetTxParams+0x48>)
 800d824:	f7ff ff12 	bl	800d64c <SX126xWriteRegister>
	SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800d828:	2301      	movs	r3, #1
 800d82a:	2200      	movs	r2, #0
 800d82c:	2107      	movs	r1, #7
 800d82e:	2004      	movs	r0, #4
 800d830:	f7ff fd9e 	bl	800d370 <SX126xSetPaConfig>
	if( power > 22 )
 800d834:	1c2b      	adds	r3, r5, #0
 800d836:	3509      	adds	r5, #9
 800d838:	da01      	bge.n	800d83e <SX126xSetTxParams+0x2e>
 800d83a:	4b08      	ldr	r3, [pc, #32]	; (800d85c <SX126xSetTxParams+0x4c>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
    buf[0] = power;
 800d83e:	b25a      	sxtb	r2, r3
 800d840:	2a16      	cmp	r2, #22
 800d842:	dd00      	ble.n	800d846 <SX126xSetTxParams+0x36>
 800d844:	2316      	movs	r3, #22
 800d846:	466a      	mov	r2, sp
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800d848:	208e      	movs	r0, #142	; 0x8e
    buf[0] = power;
 800d84a:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 800d84c:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800d84e:	a901      	add	r1, sp, #4
 800d850:	2202      	movs	r2, #2
 800d852:	f7ff fcc5 	bl	800d1e0 <SX126xWriteCommand>
}
 800d856:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800d858:	000008d8 	.word	0x000008d8
 800d85c:	0800f28c 	.word	0x0800f28c

0800d860 <SX126xSetRfTxPower>:
{
 800d860:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800d862:	2102      	movs	r1, #2
 800d864:	f7ff ffd4 	bl	800d810 <SX126xSetTxParams>
}
 800d868:	bd10      	pop	{r4, pc}
	...

0800d86c <SX126xGetRxBufferStatus>:
{
 800d86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d86e:	0004      	movs	r4, r0
 800d870:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800d872:	2202      	movs	r2, #2
 800d874:	2013      	movs	r0, #19
 800d876:	a901      	add	r1, sp, #4
 800d878:	f7ff fe71 	bl	800d55e <SX126xReadCommand>
    return PacketType;
 800d87c:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d10b      	bne.n	800d89c <SX126xGetRxBufferStatus+0x30>
 800d884:	4b08      	ldr	r3, [pc, #32]	; (800d8a8 <SX126xGetRxBufferStatus+0x3c>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d107      	bne.n	800d89c <SX126xGetRxBufferStatus+0x30>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800d88c:	4807      	ldr	r0, [pc, #28]	; (800d8ac <SX126xGetRxBufferStatus+0x40>)
 800d88e:	f7ff ff7d 	bl	800d78c <SX126xReadRegister>
 800d892:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 800d894:	466b      	mov	r3, sp
 800d896:	795b      	ldrb	r3, [r3, #5]
 800d898:	702b      	strb	r3, [r5, #0]
}
 800d89a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 800d89c:	466b      	mov	r3, sp
 800d89e:	791b      	ldrb	r3, [r3, #4]
 800d8a0:	7023      	strb	r3, [r4, #0]
 800d8a2:	e7f7      	b.n	800d894 <SX126xGetRxBufferStatus+0x28>
 800d8a4:	200014cb 	.word	0x200014cb
 800d8a8:	200014c9 	.word	0x200014c9
 800d8ac:	00000702 	.word	0x00000702

0800d8b0 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	0005      	movs	r5, r0
 800d8b4:	000c      	movs	r4, r1
 800d8b6:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800d8b8:	f7ff fc7a 	bl	800d1b0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800d8bc:	2000      	movs	r0, #0
 800d8be:	f7f6 fa99 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800d8c2:	200e      	movs	r0, #14
 800d8c4:	f7f6 fab6 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800d8c8:	b2a8      	uxth	r0, r5
 800d8ca:	f7f6 fab3 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800d8ce:	19a6      	adds	r6, r4, r6
 800d8d0:	42b4      	cmp	r4, r6
 800d8d2:	d105      	bne.n	800d8e0 <SX126xWriteBuffer+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	f7f6 fa8d 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800d8da:	f7f6 fa81 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800d8e0:	7820      	ldrb	r0, [r4, #0]
 800d8e2:	f7f6 faa7 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800d8e6:	3401      	adds	r4, #1
 800d8e8:	e7f2      	b.n	800d8d0 <SX126xWriteBuffer+0x20>

0800d8ea <SX126xSetPayload>:
{
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 800d8ee:	0001      	movs	r1, r0
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	f7ff ffdd 	bl	800d8b0 <SX126xWriteBuffer>
}
 800d8f6:	bd10      	pop	{r4, pc}

0800d8f8 <SX126xSendPayload>:
{
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 800d8fc:	f7ff fff5 	bl	800d8ea <SX126xSetPayload>
    SX126xSetTx( timeout );
 800d900:	0020      	movs	r0, r4
 800d902:	f7ff fead 	bl	800d660 <SX126xSetTx>
}
 800d906:	bd10      	pop	{r4, pc}

0800d908 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	0005      	movs	r5, r0
 800d90c:	000c      	movs	r4, r1
 800d90e:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800d910:	f7ff fc4e 	bl	800d1b0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800d914:	2000      	movs	r0, #0
 800d916:	f7f6 fa6d 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 800d91a:	201e      	movs	r0, #30
 800d91c:	f7f6 fa8a 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800d920:	b2a8      	uxth	r0, r5
 800d922:	f7f6 fa87 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800d926:	2000      	movs	r0, #0
 800d928:	f7f6 fa84 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800d92c:	19a6      	adds	r6, r4, r6
 800d92e:	42b4      	cmp	r4, r6
 800d930:	d105      	bne.n	800d93e <SX126xReadBuffer+0x36>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800d932:	2001      	movs	r0, #1
 800d934:	f7f6 fa5e 	bl	8003df4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800d938:	f7f6 fa52 	bl	8003de0 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800d93c:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800d93e:	2000      	movs	r0, #0
 800d940:	f7f6 fa78 	bl	8003e34 <SX1262DVK1CAS_RADIO_SendRecv>
 800d944:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800d946:	3401      	adds	r4, #1
 800d948:	e7f1      	b.n	800d92e <SX126xReadBuffer+0x26>

0800d94a <SX126xGetPayload>:
{
 800d94a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d94c:	000c      	movs	r4, r1
    uint8_t offset = 0;
 800d94e:	466b      	mov	r3, sp
 800d950:	2700      	movs	r7, #0
{
 800d952:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 800d954:	1dd9      	adds	r1, r3, #7
 800d956:	0020      	movs	r0, r4
{
 800d958:	0016      	movs	r6, r2
    uint8_t offset = 0;
 800d95a:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 800d95c:	f7ff ff86 	bl	800d86c <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800d960:	7822      	ldrb	r2, [r4, #0]
        return 1;
 800d962:	2001      	movs	r0, #1
    if( *size > maxSize )
 800d964:	42b2      	cmp	r2, r6
 800d966:	d805      	bhi.n	800d974 <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 800d968:	466b      	mov	r3, sp
 800d96a:	0029      	movs	r1, r5
 800d96c:	79d8      	ldrb	r0, [r3, #7]
 800d96e:	f7ff ffcb 	bl	800d908 <SX126xReadBuffer>
    return 0;
 800d972:	0038      	movs	r0, r7
}
 800d974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800d978 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d978:	2300      	movs	r3, #0
 800d97a:	4a02      	ldr	r2, [pc, #8]	; (800d984 <UTIL_LPM_Init+0xc>)
 800d97c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d97e:	4a02      	ldr	r2, [pc, #8]	; (800d988 <UTIL_LPM_Init+0x10>)
 800d980:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d982:	4770      	bx	lr
 800d984:	200014d0 	.word	0x200014d0
 800d988:	200014cc 	.word	0x200014cc

0800d98c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d98c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d98e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d992:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800d994:	2900      	cmp	r1, #0
 800d996:	d008      	beq.n	800d9aa <UTIL_LPM_SetStopMode+0x1e>
 800d998:	2901      	cmp	r1, #1
 800d99a:	d103      	bne.n	800d9a4 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800d99c:	4b05      	ldr	r3, [pc, #20]	; (800d9b4 <UTIL_LPM_SetStopMode+0x28>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	4310      	orrs	r0, r2
 800d9a2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9a4:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d9a8:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800d9aa:	4a02      	ldr	r2, [pc, #8]	; (800d9b4 <UTIL_LPM_SetStopMode+0x28>)
 800d9ac:	6813      	ldr	r3, [r2, #0]
 800d9ae:	4383      	bics	r3, r0
 800d9b0:	6013      	str	r3, [r2, #0]
      break;
 800d9b2:	e7f7      	b.n	800d9a4 <UTIL_LPM_SetStopMode+0x18>
 800d9b4:	200014d0 	.word	0x200014d0

0800d9b8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d9b8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d9be:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	d008      	beq.n	800d9d6 <UTIL_LPM_SetOffMode+0x1e>
 800d9c4:	2901      	cmp	r1, #1
 800d9c6:	d103      	bne.n	800d9d0 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d9c8:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <UTIL_LPM_SetOffMode+0x28>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	4310      	orrs	r0, r2
 800d9ce:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9d0:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d9d4:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800d9d6:	4a02      	ldr	r2, [pc, #8]	; (800d9e0 <UTIL_LPM_SetOffMode+0x28>)
 800d9d8:	6813      	ldr	r3, [r2, #0]
 800d9da:	4383      	bics	r3, r0
 800d9dc:	6013      	str	r3, [r2, #0]
      break;
 800d9de:	e7f7      	b.n	800d9d0 <UTIL_LPM_SetOffMode+0x18>
 800d9e0:	200014cc 	.word	0x200014cc

0800d9e4 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9e4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d9e8:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800d9ea:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800d9ec:	4a05      	ldr	r2, [pc, #20]	; (800da04 <UTIL_LPM_GetMode+0x20>)
 800d9ee:	6812      	ldr	r2, [r2, #0]
 800d9f0:	4282      	cmp	r2, r0
 800d9f2:	d104      	bne.n	800d9fe <UTIL_LPM_GetMode+0x1a>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800d9f4:	4a04      	ldr	r2, [pc, #16]	; (800da08 <UTIL_LPM_GetMode+0x24>)
 800d9f6:	6810      	ldr	r0, [r2, #0]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800d9f8:	4242      	negs	r2, r0
 800d9fa:	4150      	adcs	r0, r2
 800d9fc:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9fe:	f383 8810 	msr	PRIMASK, r3
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800da02:	4770      	bx	lr
 800da04:	200014d0 	.word	0x200014d0
 800da08:	200014cc 	.word	0x200014cc

0800da0c <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800da0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da0e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da12:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800da14:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <UTIL_LPM_EnterLowPower+0x40>)
 800da16:	4c0e      	ldr	r4, [pc, #56]	; (800da50 <UTIL_LPM_EnterLowPower+0x44>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800da24:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800da26:	9301      	str	r3, [sp, #4]
 800da28:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da2a:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800da2e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800da30:	4b08      	ldr	r3, [pc, #32]	; (800da54 <UTIL_LPM_EnterLowPower+0x48>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d004      	beq.n	800da42 <UTIL_LPM_EnterLowPower+0x36>
        UTIL_PowerDriver.EnterStopMode( );
 800da38:	68a3      	ldr	r3, [r4, #8]
 800da3a:	9301      	str	r3, [sp, #4]
 800da3c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800da3e:	68e3      	ldr	r3, [r4, #12]
 800da40:	e7f1      	b.n	800da26 <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800da48:	6963      	ldr	r3, [r4, #20]
 800da4a:	e7ec      	b.n	800da26 <UTIL_LPM_EnterLowPower+0x1a>
 800da4c:	200014d0 	.word	0x200014d0
 800da50:	0800e7a0 	.word	0x0800e7a0
 800da54:	200014cc 	.word	0x200014cc

0800da58 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800da58:	2300      	movs	r3, #0
{
 800da5a:	b510      	push	{r4, lr}
  while( size-- )
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d100      	bne.n	800da62 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800da60:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800da62:	5ccc      	ldrb	r4, [r1, r3]
 800da64:	54c4      	strb	r4, [r0, r3]
 800da66:	3301      	adds	r3, #1
 800da68:	e7f8      	b.n	800da5c <UTIL_MEM_cpy_8+0x4>

0800da6a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800da6a:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800da6c:	f000 fd97 	bl	800e59e <memset>
  }
}
 800da70:	bd10      	pop	{r4, pc}
	...

0800da74 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800da74:	b082      	sub	sp, #8
 800da76:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800da78:	18c9      	adds	r1, r1, r3
{
 800da7a:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800da7c:	ab05      	add	r3, sp, #20
 800da7e:	889c      	ldrh	r4, [r3, #4]
 800da80:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800da82:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800da84:	b293      	uxth	r3, r2
 800da86:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800da88:	00a4      	lsls	r4, r4, #2
 800da8a:	42a2      	cmp	r2, r4
 800da8c:	db03      	blt.n	800da96 <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800da8e:	4a05      	ldr	r2, [pc, #20]	; (800daa4 <SysTimeAdd+0x30>)
    c.Seconds++;
 800da90:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800da92:	189b      	adds	r3, r3, r2
 800da94:	b21a      	sxth	r2, r3
  }
  return c;
 800da96:	6001      	str	r1, [r0, #0]
 800da98:	8082      	strh	r2, [r0, #4]
}
 800da9a:	bc16      	pop	{r1, r2, r4}
 800da9c:	bc08      	pop	{r3}
 800da9e:	b002      	add	sp, #8
 800daa0:	4718      	bx	r3
 800daa2:	46c0      	nop			; (mov r8, r8)
 800daa4:	fffffc18 	.word	0xfffffc18

0800daa8 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800daa8:	b082      	sub	sp, #8
 800daaa:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800daac:	1ac9      	subs	r1, r1, r3
{
 800daae:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800dab0:	ab05      	add	r3, sp, #20
 800dab2:	889b      	ldrh	r3, [r3, #4]
 800dab4:	1ad2      	subs	r2, r2, r3
 800dab6:	b293      	uxth	r3, r2
 800dab8:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800daba:	0412      	lsls	r2, r2, #16
 800dabc:	d504      	bpl.n	800dac8 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800dabe:	22fa      	movs	r2, #250	; 0xfa
 800dac0:	0092      	lsls	r2, r2, #2
 800dac2:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800dac4:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800dac6:	b21c      	sxth	r4, r3
  }
  return c;
 800dac8:	6001      	str	r1, [r0, #0]
 800daca:	8084      	strh	r4, [r0, #4]
}
 800dacc:	bc16      	pop	{r1, r2, r4}
 800dace:	bc08      	pop	{r3}
 800dad0:	b002      	add	sp, #8
 800dad2:	4718      	bx	r3

0800dad4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dad4:	2300      	movs	r3, #0
{
 800dad6:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dad8:	4c11      	ldr	r4, [pc, #68]	; (800db20 <SysTimeSet+0x4c>)
{
 800dada:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dadc:	ad04      	add	r5, sp, #16
 800dade:	80ab      	strh	r3, [r5, #4]
 800dae0:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dae2:	6923      	ldr	r3, [r4, #16]
{
 800dae4:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dae6:	a805      	add	r0, sp, #20
 800dae8:	9301      	str	r3, [sp, #4]
{
 800daea:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800daec:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800daee:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800daf0:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800daf2:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800daf4:	ab02      	add	r3, sp, #8
 800daf6:	88aa      	ldrh	r2, [r5, #4]
 800daf8:	889b      	ldrh	r3, [r3, #4]
 800dafa:	1a9b      	subs	r3, r3, r2
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800db00:	041b      	lsls	r3, r3, #16
 800db02:	d504      	bpl.n	800db0e <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800db04:	23fa      	movs	r3, #250	; 0xfa
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800db0a:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800db0c:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800db14:	68a3      	ldr	r3, [r4, #8]
 800db16:	0028      	movs	r0, r5
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	4798      	blx	r3
}
 800db1c:	b007      	add	sp, #28
 800db1e:	bd30      	pop	{r4, r5, pc}
 800db20:	0800e760 	.word	0x0800e760

0800db24 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800db24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db26:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db28:	4e12      	ldr	r6, [pc, #72]	; (800db74 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db2a:	aa02      	add	r2, sp, #8
 800db2c:	8093      	strh	r3, [r2, #4]
 800db2e:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db30:	6933      	ldr	r3, [r6, #16]
{
 800db32:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db34:	a803      	add	r0, sp, #12
 800db36:	9301      	str	r3, [sp, #4]
 800db38:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db3a:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db3c:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800db42:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800db44:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800db4a:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800db4c:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800db4e:	0089      	lsls	r1, r1, #2
  c.Seconds = a.Seconds + b.Seconds;
 800db50:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800db52:	ab02      	add	r3, sp, #8
 800db54:	889b      	ldrh	r3, [r3, #4]
 800db56:	195b      	adds	r3, r3, r5
 800db58:	b29a      	uxth	r2, r3
 800db5a:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800db5c:	428b      	cmp	r3, r1
 800db5e:	db03      	blt.n	800db68 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800db60:	4b05      	ldr	r3, [pc, #20]	; (800db78 <SysTimeGet+0x54>)
    c.Seconds++;
 800db62:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800db64:	18d2      	adds	r2, r2, r3
 800db66:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800db68:	6020      	str	r0, [r4, #0]
}
 800db6a:	0020      	movs	r0, r4
  return sysTime;
 800db6c:	80a3      	strh	r3, [r4, #4]
}
 800db6e:	b004      	add	sp, #16
 800db70:	bd70      	pop	{r4, r5, r6, pc}
 800db72:	46c0      	nop			; (mov r8, r8)
 800db74:	0800e760 	.word	0x0800e760
 800db78:	fffffc18 	.word	0xfffffc18

0800db7c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800db7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db7e:	2300      	movs	r3, #0
 800db80:	466d      	mov	r5, sp
{
 800db82:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db88:	4b04      	ldr	r3, [pc, #16]	; (800db9c <SysTimeGetMcuTime+0x20>)
 800db8a:	a801      	add	r0, sp, #4
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	4798      	blx	r3
  
  return calendarTime;
 800db90:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800db92:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800db94:	cd06      	ldmia	r5!, {r1, r2}
 800db96:	c306      	stmia	r3!, {r1, r2}
}
 800db98:	0020      	movs	r0, r4
 800db9a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800db9c:	0800e760 	.word	0x0800e760

0800dba0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800dba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba2:	b09d      	sub	sp, #116	; 0x74
 800dba4:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800dba6:	2000      	movs	r0, #0
{
 800dba8:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800dbaa:	9f02      	ldr	r7, [sp, #8]
{
 800dbac:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800dbae:	4281      	cmp	r1, r0
 800dbb0:	dc0a      	bgt.n	800dbc8 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800dbb2:	b01d      	add	sp, #116	; 0x74
 800dbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800dbb6:	4298      	cmp	r0, r3
 800dbb8:	da0d      	bge.n	800dbd6 <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800dbba:	2925      	cmp	r1, #37	; 0x25
 800dbbc:	d00e      	beq.n	800dbdc <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800dbbe:	7039      	strb	r1, [r7, #0]
      continue;
 800dbc0:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800dbc2:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800dbc4:	9a01      	ldr	r2, [sp, #4]
 800dbc6:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 800dbc8:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800dbca:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800dbcc:	1af8      	subs	r0, r7, r3
 800dbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd0:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800dbd2:	2900      	cmp	r1, #0
 800dbd4:	d1ef      	bne.n	800dbb6 <tiny_vsnprintf_like+0x16>
  *str = '\0';
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800dbda:	e7ea      	b.n	800dbb2 <tiny_vsnprintf_like+0x12>
    fmt++;
 800dbdc:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800dbde:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800dbe0:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800dbe2:	0010      	movs	r0, r2
 800dbe4:	3830      	subs	r0, #48	; 0x30
 800dbe6:	9204      	str	r2, [sp, #16]
 800dbe8:	4241      	negs	r1, r0
 800dbea:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800dbec:	b2c0      	uxtb	r0, r0
      flags |= ZEROPAD;
 800dbee:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800dbf0:	2809      	cmp	r0, #9
 800dbf2:	d92e      	bls.n	800dc52 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800dbf4:	2001      	movs	r0, #1
 800dbf6:	4240      	negs	r0, r0
 800dbf8:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800dbfa:	9801      	ldr	r0, [sp, #4]
 800dbfc:	7800      	ldrb	r0, [r0, #0]
 800dbfe:	2869      	cmp	r0, #105	; 0x69
 800dc00:	d100      	bne.n	800dc04 <tiny_vsnprintf_like+0x64>
 800dc02:	e0a4      	b.n	800dd4e <tiny_vsnprintf_like+0x1ae>
 800dc04:	d829      	bhi.n	800dc5a <tiny_vsnprintf_like+0xba>
 800dc06:	2863      	cmp	r0, #99	; 0x63
 800dc08:	d038      	beq.n	800dc7c <tiny_vsnprintf_like+0xdc>
 800dc0a:	2864      	cmp	r0, #100	; 0x64
 800dc0c:	d100      	bne.n	800dc10 <tiny_vsnprintf_like+0x70>
 800dc0e:	e09e      	b.n	800dd4e <tiny_vsnprintf_like+0x1ae>
 800dc10:	2858      	cmp	r0, #88	; 0x58
 800dc12:	d066      	beq.n	800dce2 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800dc14:	0039      	movs	r1, r7
 800dc16:	2825      	cmp	r0, #37	; 0x25
 800dc18:	d126      	bne.n	800dc68 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800dc1a:	9801      	ldr	r0, [sp, #4]
 800dc1c:	7800      	ldrb	r0, [r0, #0]
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d100      	bne.n	800dc24 <tiny_vsnprintf_like+0x84>
 800dc22:	e098      	b.n	800dd56 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800dc24:	1c4f      	adds	r7, r1, #1
 800dc26:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800dc28:	9902      	ldr	r1, [sp, #8]
 800dc2a:	1a79      	subs	r1, r7, r1
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	db00      	blt.n	800dc32 <tiny_vsnprintf_like+0x92>
 800dc30:	e08f      	b.n	800dd52 <tiny_vsnprintf_like+0x1b2>
 800dc32:	e7c7      	b.n	800dbc4 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800dc34:	9d01      	ldr	r5, [sp, #4]
 800dc36:	3501      	adds	r5, #1
 800dc38:	9501      	str	r5, [sp, #4]
 800dc3a:	9d00      	ldr	r5, [sp, #0]
 800dc3c:	4375      	muls	r5, r6
 800dc3e:	1828      	adds	r0, r5, r0
 800dc40:	3830      	subs	r0, #48	; 0x30
 800dc42:	9000      	str	r0, [sp, #0]
 800dc44:	9801      	ldr	r0, [sp, #4]
 800dc46:	7800      	ldrb	r0, [r0, #0]
 800dc48:	0005      	movs	r5, r0
 800dc4a:	3d30      	subs	r5, #48	; 0x30
 800dc4c:	2d09      	cmp	r5, #9
 800dc4e:	d9f1      	bls.n	800dc34 <tiny_vsnprintf_like+0x94>
 800dc50:	e7d3      	b.n	800dbfa <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800dc52:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800dc54:	260a      	movs	r6, #10
  int i = 0;
 800dc56:	9000      	str	r0, [sp, #0]
 800dc58:	e7f4      	b.n	800dc44 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800dc5a:	2875      	cmp	r0, #117	; 0x75
 800dc5c:	d079      	beq.n	800dd52 <tiny_vsnprintf_like+0x1b2>
 800dc5e:	2510      	movs	r5, #16
 800dc60:	2878      	cmp	r0, #120	; 0x78
 800dc62:	d041      	beq.n	800dce8 <tiny_vsnprintf_like+0x148>
 800dc64:	2873      	cmp	r0, #115	; 0x73
 800dc66:	d01d      	beq.n	800dca4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800dc68:	2025      	movs	r0, #37	; 0x25
 800dc6a:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800dc6c:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800dc6e:	1c79      	adds	r1, r7, #1
 800dc70:	000f      	movs	r7, r1
    base = 10;
 800dc72:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800dc74:	1a08      	subs	r0, r1, r0
 800dc76:	4298      	cmp	r0, r3
 800dc78:	da36      	bge.n	800dce8 <tiny_vsnprintf_like+0x148>
 800dc7a:	e7ce      	b.n	800dc1a <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800dc7c:	2500      	movs	r5, #0
 800dc7e:	9b00      	ldr	r3, [sp, #0]
 800dc80:	42ab      	cmp	r3, r5
 800dc82:	dd00      	ble.n	800dc86 <tiny_vsnprintf_like+0xe6>
 800dc84:	1e5d      	subs	r5, r3, #1
 800dc86:	002a      	movs	r2, r5
 800dc88:	2120      	movs	r1, #32
 800dc8a:	0038      	movs	r0, r7
 800dc8c:	f000 fc87 	bl	800e59e <memset>
 800dc90:	9a00      	ldr	r2, [sp, #0]
 800dc92:	2301      	movs	r3, #1
 800dc94:	197d      	adds	r5, r7, r5
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	dd00      	ble.n	800dc9c <tiny_vsnprintf_like+0xfc>
 800dc9a:	0013      	movs	r3, r2
 800dc9c:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800dc9e:	cc08      	ldmia	r4!, {r3}
 800dca0:	702b      	strb	r3, [r5, #0]
        continue;
 800dca2:	e78f      	b.n	800dbc4 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 800dca4:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800dca6:	2e00      	cmp	r6, #0
 800dca8:	d100      	bne.n	800dcac <tiny_vsnprintf_like+0x10c>
 800dcaa:	4e4f      	ldr	r6, [pc, #316]	; (800dde8 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800dcac:	0030      	movs	r0, r6
 800dcae:	f7f2 fa2b 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	9303      	str	r3, [sp, #12]
 800dcb6:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800dcb8:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800dcba:	4283      	cmp	r3, r0
 800dcbc:	db01      	blt.n	800dcc2 <tiny_vsnprintf_like+0x122>
 800dcbe:	1a1b      	subs	r3, r3, r0
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	0038      	movs	r0, r7
 800dcc4:	2120      	movs	r1, #32
 800dcc6:	9a03      	ldr	r2, [sp, #12]
 800dcc8:	f000 fc69 	bl	800e59e <memset>
 800dccc:	9b03      	ldr	r3, [sp, #12]
 800dcce:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	42ab      	cmp	r3, r5
 800dcd4:	db01      	blt.n	800dcda <tiny_vsnprintf_like+0x13a>
 800dcd6:	197f      	adds	r7, r7, r5
 800dcd8:	e774      	b.n	800dbc4 <tiny_vsnprintf_like+0x24>
 800dcda:	5cf2      	ldrb	r2, [r6, r3]
 800dcdc:	54fa      	strb	r2, [r7, r3]
 800dcde:	3301      	adds	r3, #1
 800dce0:	e7f7      	b.n	800dcd2 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800dce2:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800dce4:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800dce6:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800dce8:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800dcea:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800dcec:	1a3e      	subs	r6, r7, r0
 800dcee:	0020      	movs	r0, r4
 800dcf0:	1b9e      	subs	r6, r3, r6
 800dcf2:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 800dcf4:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800dcf6:	9005      	str	r0, [sp, #20]
  if (type & UPPERCASE)  dig = upper_digits;
 800dcf8:	483c      	ldr	r0, [pc, #240]	; (800ddec <tiny_vsnprintf_like+0x24c>)
 800dcfa:	9007      	str	r0, [sp, #28]
 800dcfc:	2040      	movs	r0, #64	; 0x40
 800dcfe:	4202      	tst	r2, r0
 800dd00:	d101      	bne.n	800dd06 <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800dd02:	4a3b      	ldr	r2, [pc, #236]	; (800ddf0 <tiny_vsnprintf_like+0x250>)
 800dd04:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800dd06:	2230      	movs	r2, #48	; 0x30
 800dd08:	9208      	str	r2, [sp, #32]
 800dd0a:	9a04      	ldr	r2, [sp, #16]
 800dd0c:	2a30      	cmp	r2, #48	; 0x30
 800dd0e:	d001      	beq.n	800dd14 <tiny_vsnprintf_like+0x174>
 800dd10:	2220      	movs	r2, #32
 800dd12:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 800dd14:	2900      	cmp	r1, #0
 800dd16:	d023      	beq.n	800dd60 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da21      	bge.n	800dd60 <tiny_vsnprintf_like+0x1c0>
      size--;
 800dd1c:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800dd1e:	425b      	negs	r3, r3
      size--;
 800dd20:	3a01      	subs	r2, #1
 800dd22:	9200      	str	r2, [sp, #0]
      sign = '-';
 800dd24:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800dd26:	2400      	movs	r4, #0
 800dd28:	9203      	str	r2, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	0029      	movs	r1, r5
 800dd2e:	9306      	str	r3, [sp, #24]
 800dd30:	f7f2 fa96 	bl	8000260 <__aeabi_uidivmod>
 800dd34:	0022      	movs	r2, r4
 800dd36:	4684      	mov	ip, r0
 800dd38:	9b07      	ldr	r3, [sp, #28]
 800dd3a:	3401      	adds	r4, #1
 800dd3c:	5c59      	ldrb	r1, [r3, r1]
 800dd3e:	ab0b      	add	r3, sp, #44	; 0x2c
 800dd40:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 800dd42:	9a06      	ldr	r2, [sp, #24]
 800dd44:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800dd46:	4663      	mov	r3, ip
    while (num != 0)
 800dd48:	4295      	cmp	r5, r2
 800dd4a:	d9ee      	bls.n	800dd2a <tiny_vsnprintf_like+0x18a>
 800dd4c:	e011      	b.n	800dd72 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800dd4e:	2202      	movs	r2, #2
 800dd50:	430a      	orrs	r2, r1
    base = 10;
 800dd52:	250a      	movs	r5, #10
 800dd54:	e7c8      	b.n	800dce8 <tiny_vsnprintf_like+0x148>
          --fmt;
 800dd56:	9801      	ldr	r0, [sp, #4]
 800dd58:	000f      	movs	r7, r1
 800dd5a:	3801      	subs	r0, #1
 800dd5c:	9001      	str	r0, [sp, #4]
 800dd5e:	e763      	b.n	800dc28 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <tiny_vsnprintf_like+0x1c8>
 800dd64:	2200      	movs	r2, #0
 800dd66:	e7de      	b.n	800dd26 <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800dd68:	2130      	movs	r1, #48	; 0x30
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	aa0b      	add	r2, sp, #44	; 0x2c
 800dd6e:	7011      	strb	r1, [r2, #0]
 800dd70:	9303      	str	r3, [sp, #12]
  size -= precision;
 800dd72:	9b00      	ldr	r3, [sp, #0]
 800dd74:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800dd76:	9b04      	ldr	r3, [sp, #16]
 800dd78:	2b30      	cmp	r3, #48	; 0x30
 800dd7a:	d006      	beq.n	800dd8a <tiny_vsnprintf_like+0x1ea>
 800dd7c:	003b      	movs	r3, r7
 800dd7e:	2220      	movs	r2, #32
 800dd80:	0021      	movs	r1, r4
 800dd82:	001f      	movs	r7, r3
 800dd84:	3c01      	subs	r4, #1
 800dd86:	2900      	cmp	r1, #0
 800dd88:	dc0c      	bgt.n	800dda4 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800dd8a:	9b03      	ldr	r3, [sp, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <tiny_vsnprintf_like+0x1fc>
 800dd90:	1c79      	adds	r1, r7, #1
 800dd92:	3e01      	subs	r6, #1
 800dd94:	703b      	strb	r3, [r7, #0]
 800dd96:	000f      	movs	r7, r1
 800dd98:	2e00      	cmp	r6, #0
 800dd9a:	d009      	beq.n	800ddb0 <tiny_vsnprintf_like+0x210>
 800dd9c:	003b      	movs	r3, r7
 800dd9e:	0032      	movs	r2, r6
 800dda0:	1ba4      	subs	r4, r4, r6
 800dda2:	e00f      	b.n	800ddc4 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800dda4:	3301      	adds	r3, #1
 800dda6:	3e01      	subs	r6, #1
 800dda8:	0019      	movs	r1, r3
 800ddaa:	703a      	strb	r2, [r7, #0]
 800ddac:	2e00      	cmp	r6, #0
 800ddae:	d1e7      	bne.n	800dd80 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ddb0:	000f      	movs	r7, r1
 800ddb2:	9c05      	ldr	r4, [sp, #20]
 800ddb4:	e706      	b.n	800dbc4 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800ddb6:	9e08      	ldr	r6, [sp, #32]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	3a01      	subs	r2, #1
 800ddbc:	0019      	movs	r1, r3
 800ddbe:	702e      	strb	r6, [r5, #0]
 800ddc0:	2a00      	cmp	r2, #0
 800ddc2:	d0f5      	beq.n	800ddb0 <tiny_vsnprintf_like+0x210>
 800ddc4:	18a1      	adds	r1, r4, r2
 800ddc6:	001d      	movs	r5, r3
 800ddc8:	2900      	cmp	r1, #0
 800ddca:	dcf4      	bgt.n	800ddb6 <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800ddcc:	ad0b      	add	r5, sp, #44	; 0x2c
 800ddce:	189a      	adds	r2, r3, r2
 800ddd0:	001c      	movs	r4, r3
 800ddd2:	3801      	subs	r0, #1
 800ddd4:	d201      	bcs.n	800ddda <tiny_vsnprintf_like+0x23a>
 800ddd6:	0019      	movs	r1, r3
 800ddd8:	e7ea      	b.n	800ddb0 <tiny_vsnprintf_like+0x210>
 800ddda:	5d46      	ldrb	r6, [r0, r5]
 800dddc:	3301      	adds	r3, #1
 800ddde:	0019      	movs	r1, r3
 800dde0:	7026      	strb	r6, [r4, #0]
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d1f4      	bne.n	800ddd0 <tiny_vsnprintf_like+0x230>
 800dde6:	e7e3      	b.n	800ddb0 <tiny_vsnprintf_like+0x210>
 800dde8:	0800f28d 	.word	0x0800f28d
 800ddec:	0800f294 	.word	0x0800f294
 800ddf0:	0800f2b9 	.word	0x0800f2b9

0800ddf4 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ddf4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ddfa:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800ddfc:	4a05      	ldr	r2, [pc, #20]	; (800de14 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ddfe:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800de00:	6813      	ldr	r3, [r2, #0]
 800de02:	4303      	orrs	r3, r0
 800de04:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800de06:	4b04      	ldr	r3, [pc, #16]	; (800de18 <UTIL_SEQ_SetTask+0x24>)
 800de08:	58ca      	ldr	r2, [r1, r3]
 800de0a:	4310      	orrs	r0, r2
 800de0c:	50c8      	str	r0, [r1, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de0e:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800de12:	bd10      	pop	{r4, pc}
 800de14:	20001570 	.word	0x20001570
 800de18:	20001560 	.word	0x20001560

0800de1c <UTIL_SEQ_PreIdle>:
 800de1c:	4770      	bx	lr

0800de1e <UTIL_SEQ_PostIdle>:
 800de1e:	4770      	bx	lr

0800de20 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800de20:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800de22:	0c02      	lsrs	r2, r0, #16
 800de24:	429a      	cmp	r2, r3
 800de26:	d101      	bne.n	800de2c <SEQ_BitPosition+0xc>
 800de28:	0400      	lsls	r0, r0, #16
 800de2a:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800de2c:	0e02      	lsrs	r2, r0, #24
 800de2e:	d102      	bne.n	800de36 <SEQ_BitPosition+0x16>
 800de30:	3308      	adds	r3, #8
 800de32:	b2db      	uxtb	r3, r3
 800de34:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800de36:	0f02      	lsrs	r2, r0, #28
 800de38:	d102      	bne.n	800de40 <SEQ_BitPosition+0x20>
 800de3a:	3304      	adds	r3, #4
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800de40:	221f      	movs	r2, #31
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	4a02      	ldr	r2, [pc, #8]	; (800de50 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800de46:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800de48:	5c10      	ldrb	r0, [r2, r0]
 800de4a:	1a18      	subs	r0, r3, r0
 800de4c:	b2c0      	uxtb	r0, r0
}
 800de4e:	4770      	bx	lr
 800de50:	0800f2de 	.word	0x0800f2de

0800de54 <UTIL_SEQ_Run>:
{
 800de54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800de56:	4e36      	ldr	r6, [pc, #216]	; (800df30 <UTIL_SEQ_Run+0xdc>)
 800de58:	6833      	ldr	r3, [r6, #0]
  SuperMask &= Mask_bm;
 800de5a:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800de5c:	9300      	str	r3, [sp, #0]
  SuperMask &= Mask_bm;
 800de5e:	6030      	str	r0, [r6, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800de60:	4c34      	ldr	r4, [pc, #208]	; (800df34 <UTIL_SEQ_Run+0xe0>)
 800de62:	4f35      	ldr	r7, [pc, #212]	; (800df38 <UTIL_SEQ_Run+0xe4>)
 800de64:	6821      	ldr	r1, [r4, #0]
 800de66:	683a      	ldr	r2, [r7, #0]
 800de68:	6833      	ldr	r3, [r6, #0]
 800de6a:	400a      	ands	r2, r1
 800de6c:	4213      	tst	r3, r2
 800de6e:	d040      	beq.n	800def2 <UTIL_SEQ_Run+0x9e>
 800de70:	4832      	ldr	r0, [pc, #200]	; (800df3c <UTIL_SEQ_Run+0xe8>)
 800de72:	4a33      	ldr	r2, [pc, #204]	; (800df40 <UTIL_SEQ_Run+0xec>)
 800de74:	6800      	ldr	r0, [r0, #0]
 800de76:	6812      	ldr	r2, [r2, #0]
 800de78:	0005      	movs	r5, r0
 800de7a:	4015      	ands	r5, r2
 800de7c:	4210      	tst	r0, r2
 800de7e:	d138      	bne.n	800def2 <UTIL_SEQ_Run+0x9e>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800de80:	4c30      	ldr	r4, [pc, #192]	; (800df44 <UTIL_SEQ_Run+0xf0>)
 800de82:	400b      	ands	r3, r1
 800de84:	6822      	ldr	r2, [r4, #0]
 800de86:	0010      	movs	r0, r2
 800de88:	4018      	ands	r0, r3
 800de8a:	421a      	tst	r2, r3
 800de8c:	d102      	bne.n	800de94 <UTIL_SEQ_Run+0x40>
      counter++;
 800de8e:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800de90:	68a0      	ldr	r0, [r4, #8]
 800de92:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800de94:	00ed      	lsls	r5, r5, #3
 800de96:	1963      	adds	r3, r4, r5
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	4202      	tst	r2, r0
 800de9c:	d102      	bne.n	800dea4 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800de9e:	2201      	movs	r2, #1
 800dea0:	4252      	negs	r2, r2
 800dea2:	605a      	str	r2, [r3, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800dea4:	1965      	adds	r5, r4, r5
 800dea6:	686f      	ldr	r7, [r5, #4]
 800dea8:	4038      	ands	r0, r7
 800deaa:	f7ff ffb9 	bl	800de20 <SEQ_BitPosition>
 800deae:	4b26      	ldr	r3, [pc, #152]	; (800df48 <UTIL_SEQ_Run+0xf4>)
 800deb0:	6018      	str	r0, [r3, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800deb2:	2301      	movs	r3, #1
 800deb4:	4083      	lsls	r3, r0
 800deb6:	439f      	bics	r7, r3
 800deb8:	606f      	str	r7, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800deba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800debe:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800dec0:	4b21      	ldr	r3, [pc, #132]	; (800df48 <UTIL_SEQ_Run+0xf4>)
 800dec2:	481d      	ldr	r0, [pc, #116]	; (800df38 <UTIL_SEQ_Run+0xe4>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	9301      	str	r3, [sp, #4]
 800dec8:	2301      	movs	r3, #1
 800deca:	9a01      	ldr	r2, [sp, #4]
 800decc:	4093      	lsls	r3, r2
 800dece:	6802      	ldr	r2, [r0, #0]
 800ded0:	439a      	bics	r2, r3
 800ded2:	6002      	str	r2, [r0, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ded4:	68a2      	ldr	r2, [r4, #8]
 800ded6:	439a      	bics	r2, r3
 800ded8:	60a2      	str	r2, [r4, #8]
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	439a      	bics	r2, r3
 800dede:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dee0:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800dee4:	4b18      	ldr	r3, [pc, #96]	; (800df48 <UTIL_SEQ_Run+0xf4>)
 800dee6:	4a19      	ldr	r2, [pc, #100]	; (800df4c <UTIL_SEQ_Run+0xf8>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	589b      	ldr	r3, [r3, r2]
 800deee:	4798      	blx	r3
 800def0:	e7b6      	b.n	800de60 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800def2:	2301      	movs	r3, #1
 800def4:	4a14      	ldr	r2, [pc, #80]	; (800df48 <UTIL_SEQ_Run+0xf4>)
 800def6:	425b      	negs	r3, r3
 800def8:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_PreIdle( );
 800defa:	f7ff ff8f 	bl	800de1c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800defe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800df02:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	4013      	ands	r3, r2
 800df0a:	6832      	ldr	r2, [r6, #0]
 800df0c:	4013      	ands	r3, r2
 800df0e:	4a0c      	ldr	r2, [pc, #48]	; (800df40 <UTIL_SEQ_Run+0xec>)
 800df10:	6811      	ldr	r1, [r2, #0]
 800df12:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <UTIL_SEQ_Run+0xe8>)
 800df14:	6812      	ldr	r2, [r2, #0]
 800df16:	400a      	ands	r2, r1
 800df18:	4313      	orrs	r3, r2
 800df1a:	d101      	bne.n	800df20 <UTIL_SEQ_Run+0xcc>
	UTIL_SEQ_Idle( );
 800df1c:	f7f4 fe7e 	bl	8002c1c <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df20:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800df24:	f7ff ff7b 	bl	800de1e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800df28:	9b00      	ldr	r3, [sp, #0]
 800df2a:	6033      	str	r3, [r6, #0]
}
 800df2c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800df2e:	46c0      	nop			; (mov r8, r8)
 800df30:	200001c8 	.word	0x200001c8
 800df34:	200001cc 	.word	0x200001cc
 800df38:	20001570 	.word	0x20001570
 800df3c:	200014dc 	.word	0x200014dc
 800df40:	200014d8 	.word	0x200014d8
 800df44:	20001560 	.word	0x20001560
 800df48:	200014d4 	.word	0x200014d4
 800df4c:	200014e0 	.word	0x200014e0

0800df50 <UTIL_SEQ_RegTask>:
{
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df54:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800df58:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800df5a:	f7ff ff61 	bl	800de20 <SEQ_BitPosition>
 800df5e:	4b03      	ldr	r3, [pc, #12]	; (800df6c <UTIL_SEQ_RegTask+0x1c>)
 800df60:	0080      	lsls	r0, r0, #2
 800df62:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df64:	f385 8810 	msr	PRIMASK, r5
}
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	46c0      	nop			; (mov r8, r8)
 800df6c:	200014e0 	.word	0x200014e0

0800df70 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800df70:	2200      	movs	r2, #0
{
 800df72:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800df74:	4b02      	ldr	r3, [pc, #8]	; (800df80 <UTIL_TIMER_Init+0x10>)
 800df76:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800df78:	4b02      	ldr	r3, [pc, #8]	; (800df84 <UTIL_TIMER_Init+0x14>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4798      	blx	r3
}
 800df7e:	bd10      	pop	{r4, pc}
 800df80:	20001574 	.word	0x20001574
 800df84:	0800e774 	.word	0x0800e774

0800df88 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800df88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df8a:	0004      	movs	r4, r0
 800df8c:	0017      	movs	r7, r2
 800df8e:	0008      	movs	r0, r1
 800df90:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800df92:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800df94:	2c00      	cmp	r4, #0
 800df96:	d00f      	beq.n	800dfb8 <UTIL_TIMER_Create+0x30>
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00d      	beq.n	800dfb8 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800df9c:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800df9e:	4b07      	ldr	r3, [pc, #28]	; (800dfbc <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800dfa0:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800dfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	4798      	blx	r3
    TimerObject->argument = Argument;
 800dfa8:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800dfaa:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800dfac:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800dfae:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800dfb0:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800dfb2:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800dfb4:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800dfb6:	6165      	str	r5, [r4, #20]
  }
}
 800dfb8:	0028      	movs	r0, r5
 800dfba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfbc:	0800e774 	.word	0x0800e774

0800dfc0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800dfc0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800dfc2:	4c03      	ldr	r4, [pc, #12]	; (800dfd0 <UTIL_TIMER_GetCurrentTime+0x10>)
 800dfc4:	69e3      	ldr	r3, [r4, #28]
 800dfc6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800dfc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dfca:	4798      	blx	r3
}
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	46c0      	nop			; (mov r8, r8)
 800dfd0:	0800e774 	.word	0x0800e774

0800dfd4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800dfd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800dfd6:	4d06      	ldr	r5, [pc, #24]	; (800dff0 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800dfd8:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800dfda:	69eb      	ldr	r3, [r5, #28]
 800dfdc:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800dfde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800dfe0:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800dfe2:	0030      	movs	r0, r6
 800dfe4:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800dfe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800dfe8:	1a20      	subs	r0, r4, r0
 800dfea:	4798      	blx	r3
}
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
 800dfee:	46c0      	nop			; (mov r8, r8)
 800dff0:	0800e774 	.word	0x0800e774

0800dff4 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dff4:	4a05      	ldr	r2, [pc, #20]	; (800e00c <TimerExists+0x18>)
{
 800dff6:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800dff8:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d100      	bne.n	800e000 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800dffe:	4770      	bx	lr
    if( cur == TimerObject )
 800e000:	4298      	cmp	r0, r3
 800e002:	d001      	beq.n	800e008 <TimerExists+0x14>
    cur = cur->Next;
 800e004:	6940      	ldr	r0, [r0, #20]
 800e006:	e7f8      	b.n	800dffa <TimerExists+0x6>
      return true;
 800e008:	2001      	movs	r0, #1
 800e00a:	e7f8      	b.n	800dffe <TimerExists+0xa>
 800e00c:	20001574 	.word	0x20001574

0800e010 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800e010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e012:	4e0c      	ldr	r6, [pc, #48]	; (800e044 <TimerSetTimeout+0x34>)
{
 800e014:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e016:	6a33      	ldr	r3, [r6, #32]
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800e01c:	2301      	movs	r3, #1
 800e01e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800e020:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e022:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800e024:	6827      	ldr	r7, [r4, #0]
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	4798      	blx	r3
 800e02a:	1940      	adds	r0, r0, r5
 800e02c:	4287      	cmp	r7, r0
 800e02e:	d203      	bcs.n	800e038 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800e030:	9b01      	ldr	r3, [sp, #4]
 800e032:	4798      	blx	r3
 800e034:	1945      	adds	r5, r0, r5
 800e036:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800e038:	68b3      	ldr	r3, [r6, #8]
 800e03a:	6820      	ldr	r0, [r4, #0]
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	4798      	blx	r3
}
 800e040:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e042:	46c0      	nop			; (mov r8, r8)
 800e044:	0800e774 	.word	0x0800e774

0800e048 <UTIL_TIMER_Stop>:
{
 800e048:	0003      	movs	r3, r0
 800e04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800e04c:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d016      	beq.n	800e080 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e052:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e056:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800e058:	4c11      	ldr	r4, [pc, #68]	; (800e0a0 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800e05a:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800e05c:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800e05e:	2a00      	cmp	r2, #0
 800e060:	d00b      	beq.n	800e07a <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800e062:	2100      	movs	r1, #0
 800e064:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800e066:	4293      	cmp	r3, r2
 800e068:	d111      	bne.n	800e08e <UTIL_TIMER_Stop+0x46>
          if( TimerListHead->Next != NULL )
 800e06a:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800e06c:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800e06e:	428e      	cmp	r6, r1
 800e070:	d007      	beq.n	800e082 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800e072:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800e074:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800e076:	f7ff ffcb 	bl	800e010 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e07a:	f385 8810 	msr	PRIMASK, r5
}
 800e07e:	2000      	movs	r0, #0
}
 800e080:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800e082:	4b08      	ldr	r3, [pc, #32]	; (800e0a4 <UTIL_TIMER_Stop+0x5c>)
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	9301      	str	r3, [sp, #4]
 800e088:	4798      	blx	r3
            TimerListHead = NULL;
 800e08a:	6026      	str	r6, [r4, #0]
 800e08c:	e7f5      	b.n	800e07a <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800e08e:	0011      	movs	r1, r2
 800e090:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800e092:	2a00      	cmp	r2, #0
 800e094:	d0f1      	beq.n	800e07a <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800e096:	4293      	cmp	r3, r2
 800e098:	d1f9      	bne.n	800e08e <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	614b      	str	r3, [r1, #20]
 800e09e:	e7ec      	b.n	800e07a <UTIL_TIMER_Stop+0x32>
 800e0a0:	20001574 	.word	0x20001574
 800e0a4:	0800e774 	.word	0x0800e774

0800e0a8 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e0a8:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <TimerInsertTimer+0x28>)
{
 800e0aa:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e0ac:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800e0ae:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800e0b0:	6959      	ldr	r1, [r3, #20]
 800e0b2:	2900      	cmp	r1, #0
 800e0b4:	d102      	bne.n	800e0bc <TimerInsertTimer+0x14>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800e0b6:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800e0b8:	6141      	str	r1, [r0, #20]
 800e0ba:	e008      	b.n	800e0ce <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800e0bc:	6801      	ldr	r1, [r0, #0]
 800e0be:	6814      	ldr	r4, [r2, #0]
 800e0c0:	42a1      	cmp	r1, r4
 800e0c2:	d902      	bls.n	800e0ca <TimerInsertTimer+0x22>
        next = next->Next;
 800e0c4:	0013      	movs	r3, r2
 800e0c6:	6952      	ldr	r2, [r2, #20]
 800e0c8:	e7f2      	b.n	800e0b0 <TimerInsertTimer+0x8>
        cur->Next = TimerObject;
 800e0ca:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800e0cc:	6142      	str	r2, [r0, #20]
}
 800e0ce:	bd10      	pop	{r4, pc}
 800e0d0:	20001574 	.word	0x20001574

0800e0d4 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e0d4:	4a05      	ldr	r2, [pc, #20]	; (800e0ec <TimerInsertNewHeadTimer+0x18>)
{
 800e0d6:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e0d8:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800e0de:	2100      	movs	r1, #0
 800e0e0:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800e0e2:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800e0e4:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800e0e6:	f7ff ff93 	bl	800e010 <TimerSetTimeout>
}
 800e0ea:	bd10      	pop	{r4, pc}
 800e0ec:	20001574 	.word	0x20001574

0800e0f0 <UTIL_TIMER_Start>:
{
 800e0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f2:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e0f4:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d025      	beq.n	800e146 <UTIL_TIMER_Start+0x56>
 800e0fa:	f7ff ff7b 	bl	800dff4 <TimerExists>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d121      	bne.n	800e146 <UTIL_TIMER_Start+0x56>
 800e102:	7a65      	ldrb	r5, [r4, #9]
 800e104:	2d00      	cmp	r5, #0
 800e106:	d12e      	bne.n	800e166 <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e108:	f3ef 8310 	mrs	r3, PRIMASK
 800e10c:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e10e:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e110:	4e16      	ldr	r6, [pc, #88]	; (800e16c <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800e112:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e114:	6a33      	ldr	r3, [r6, #32]
 800e116:	9301      	str	r3, [sp, #4]
 800e118:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800e11a:	4287      	cmp	r7, r0
 800e11c:	d200      	bcs.n	800e120 <UTIL_TIMER_Start+0x30>
 800e11e:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800e120:	2380      	movs	r3, #128	; 0x80
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e126:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800e128:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800e12a:	4f11      	ldr	r7, [pc, #68]	; (800e170 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800e12c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10a      	bne.n	800e14a <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800e134:	6933      	ldr	r3, [r6, #16]
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800e13a:	0020      	movs	r0, r4
 800e13c:	f7ff ffca 	bl	800e0d4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e140:	9b00      	ldr	r3, [sp, #0]
 800e142:	f383 8810 	msr	PRIMASK, r3
}
 800e146:	0028      	movs	r0, r5
 800e148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800e14a:	69b3      	ldr	r3, [r6, #24]
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e154:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800e156:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4298      	cmp	r0, r3
 800e15c:	d3ed      	bcc.n	800e13a <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800e15e:	0020      	movs	r0, r4
 800e160:	f7ff ffa2 	bl	800e0a8 <TimerInsertTimer>
 800e164:	e7ec      	b.n	800e140 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e166:	2501      	movs	r5, #1
 800e168:	e7ed      	b.n	800e146 <UTIL_TIMER_Start+0x56>
 800e16a:	46c0      	nop			; (mov r8, r8)
 800e16c:	0800e774 	.word	0x0800e774
 800e170:	20001574 	.word	0x20001574

0800e174 <UTIL_TIMER_StartWithPeriod>:
{
 800e174:	b513      	push	{r0, r1, r4, lr}
 800e176:	0004      	movs	r4, r0
    ret = UTIL_TIMER_INVALID_PARAM;
 800e178:	2001      	movs	r0, #1
  if(NULL == TimerObject)
 800e17a:	2c00      	cmp	r4, #0
 800e17c:	d010      	beq.n	800e1a0 <UTIL_TIMER_StartWithPeriod+0x2c>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e17e:	4b09      	ldr	r3, [pc, #36]	; (800e1a4 <UTIL_TIMER_StartWithPeriod+0x30>)
 800e180:	0008      	movs	r0, r1
 800e182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e184:	9301      	str	r3, [sp, #4]
 800e186:	4798      	blx	r3
 800e188:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800e18a:	0020      	movs	r0, r4
 800e18c:	f7ff ff32 	bl	800dff4 <TimerExists>
 800e190:	2800      	cmp	r0, #0
 800e192:	d002      	beq.n	800e19a <UTIL_TIMER_StartWithPeriod+0x26>
      (void)UTIL_TIMER_Stop(TimerObject);
 800e194:	0020      	movs	r0, r4
 800e196:	f7ff ff57 	bl	800e048 <UTIL_TIMER_Stop>
    ret = UTIL_TIMER_Start(TimerObject);
 800e19a:	0020      	movs	r0, r4
 800e19c:	f7ff ffa8 	bl	800e0f0 <UTIL_TIMER_Start>
}
 800e1a0:	bd16      	pop	{r1, r2, r4, pc}
 800e1a2:	46c0      	nop			; (mov r8, r8)
 800e1a4:	0800e774 	.word	0x0800e774

0800e1a8 <UTIL_TIMER_SetPeriod>:
{
 800e1a8:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800e1aa:	2301      	movs	r3, #1
{
 800e1ac:	0004      	movs	r4, r0
 800e1ae:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800e1b0:	2c00      	cmp	r4, #0
 800e1b2:	d011      	beq.n	800e1d8 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800e1b4:	4b09      	ldr	r3, [pc, #36]	; (800e1dc <UTIL_TIMER_SetPeriod+0x34>)
 800e1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	4798      	blx	r3
 800e1bc:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800e1be:	0020      	movs	r0, r4
 800e1c0:	f7ff ff18 	bl	800dff4 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800e1c4:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800e1c6:	4298      	cmp	r0, r3
 800e1c8:	d006      	beq.n	800e1d8 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800e1ca:	0020      	movs	r0, r4
 800e1cc:	f7ff ff3c 	bl	800e048 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800e1d0:	0020      	movs	r0, r4
 800e1d2:	f7ff ff8d 	bl	800e0f0 <UTIL_TIMER_Start>
 800e1d6:	0003      	movs	r3, r0
}
 800e1d8:	0018      	movs	r0, r3
 800e1da:	bd16      	pop	{r1, r2, r4, pc}
 800e1dc:	0800e774 	.word	0x0800e774

0800e1e0 <UTIL_TIMER_IRQ_Handler>:
{
 800e1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1e2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e1e6:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e1e8:	4e1e      	ldr	r6, [pc, #120]	; (800e264 <UTIL_TIMER_IRQ_Handler+0x84>)
 800e1ea:	6973      	ldr	r3, [r6, #20]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e1f0:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e1f2:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800e1f8:	4d1b      	ldr	r5, [pc, #108]	; (800e268 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800e1fa:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800e1fc:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800e1fe:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800e200:	2b00      	cmp	r3, #0
 800e202:	d01f      	beq.n	800e244 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800e204:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800e206:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800e208:	4288      	cmp	r0, r1
 800e20a:	d900      	bls.n	800e20e <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800e20c:	1822      	adds	r2, r4, r0
 800e20e:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800e210:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800e212:	e7f5      	b.n	800e200 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e214:	681c      	ldr	r4, [r3, #0]
 800e216:	2c00      	cmp	r4, #0
 800e218:	d004      	beq.n	800e224 <UTIL_TIMER_IRQ_Handler+0x44>
 800e21a:	69b3      	ldr	r3, [r6, #24]
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	4798      	blx	r3
 800e220:	4284      	cmp	r4, r0
 800e222:	d212      	bcs.n	800e24a <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800e224:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800e226:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800e228:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800e22a:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800e230:	68e3      	ldr	r3, [r4, #12]
 800e232:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800e234:	2280      	movs	r2, #128	; 0x80
 800e236:	8963      	ldrh	r3, [r4, #10]
 800e238:	0052      	lsls	r2, r2, #1
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d102      	bne.n	800e244 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800e23e:	0020      	movs	r0, r4
 800e240:	f7ff ff56 	bl	800e0f0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e4      	bne.n	800e214 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e24a:	6828      	ldr	r0, [r5, #0]
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d102      	bne.n	800e256 <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e250:	f387 8810 	msr	PRIMASK, r7
}
 800e254:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e256:	7a03      	ldrb	r3, [r0, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1f9      	bne.n	800e250 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800e25c:	f7ff fed8 	bl	800e010 <TimerSetTimeout>
 800e260:	e7f6      	b.n	800e250 <UTIL_TIMER_IRQ_Handler+0x70>
 800e262:	46c0      	nop			; (mov r8, r8)
 800e264:	0800e774 	.word	0x0800e774
 800e268:	20001574 	.word	0x20001574

0800e26c <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800e26c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e26e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e272:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800e274:	4b16      	ldr	r3, [pc, #88]	; (800e2d0 <TRACE_AllocateBufer+0x64>)
 800e276:	8a5d      	ldrh	r5, [r3, #18]
 800e278:	8a1a      	ldrh	r2, [r3, #16]
 800e27a:	4295      	cmp	r5, r2
 800e27c:	d114      	bne.n	800e2a8 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800e27e:	2280      	movs	r2, #128	; 0x80
 800e280:	0092      	lsls	r2, r2, #2
 800e282:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800e284:	b292      	uxth	r2, r2
 800e286:	4290      	cmp	r0, r2
 800e288:	d306      	bcc.n	800e298 <TRACE_AllocateBufer+0x2c>
 800e28a:	4285      	cmp	r5, r0
 800e28c:	d916      	bls.n	800e2bc <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800e28e:	2201      	movs	r2, #1
 800e290:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800e292:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800e294:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800e296:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800e298:	8a5a      	ldrh	r2, [r3, #18]
 800e29a:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800e29c:	1812      	adds	r2, r2, r0
 800e29e:	05d2      	lsls	r2, r2, #23
 800e2a0:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800e2a2:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800e2a4:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800e2a6:	e00b      	b.n	800e2c0 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800e2a8:	4295      	cmp	r5, r2
 800e2aa:	d90c      	bls.n	800e2c6 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800e2ac:	2680      	movs	r6, #128	; 0x80
 800e2ae:	00b6      	lsls	r6, r6, #2
 800e2b0:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800e2b2:	b2b6      	uxth	r6, r6
 800e2b4:	4286      	cmp	r6, r0
 800e2b6:	d8ef      	bhi.n	800e298 <TRACE_AllocateBufer+0x2c>
 800e2b8:	4282      	cmp	r2, r0
 800e2ba:	d8e8      	bhi.n	800e28e <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800e2bc:	2001      	movs	r0, #1
 800e2be:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2c0:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 800e2c4:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800e2c6:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 800e2c8:	b292      	uxth	r2, r2
 800e2ca:	4282      	cmp	r2, r0
 800e2cc:	d8e4      	bhi.n	800e298 <TRACE_AllocateBufer+0x2c>
 800e2ce:	e7f5      	b.n	800e2bc <TRACE_AllocateBufer+0x50>
 800e2d0:	20001778 	.word	0x20001778

0800e2d4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e2d8:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800e2da:	4a03      	ldr	r2, [pc, #12]	; (800e2e8 <TRACE_Lock+0x14>)
 800e2dc:	8ad3      	ldrh	r3, [r2, #22]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800e2e6:	4770      	bx	lr
 800e2e8:	20001778 	.word	0x20001778

0800e2ec <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e2f0:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800e2f2:	4a03      	ldr	r2, [pc, #12]	; (800e300 <TRACE_UnLock+0x14>)
 800e2f4:	8ad3      	ldrh	r3, [r2, #22]
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2fa:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800e2fe:	4770      	bx	lr
 800e300:	20001778 	.word	0x20001778

0800e304 <UTIL_ADV_TRACE_Init>:
{
 800e304:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800e306:	2218      	movs	r2, #24
 800e308:	2100      	movs	r1, #0
 800e30a:	4807      	ldr	r0, [pc, #28]	; (800e328 <UTIL_ADV_TRACE_Init+0x24>)
 800e30c:	f7ff fbad 	bl	800da6a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800e310:	2280      	movs	r2, #128	; 0x80
 800e312:	2100      	movs	r1, #0
 800e314:	4805      	ldr	r0, [pc, #20]	; (800e32c <UTIL_ADV_TRACE_Init+0x28>)
 800e316:	0092      	lsls	r2, r2, #2
 800e318:	f7ff fba7 	bl	800da6a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <UTIL_ADV_TRACE_Init+0x2c>)
 800e31e:	4805      	ldr	r0, [pc, #20]	; (800e334 <UTIL_ADV_TRACE_Init+0x30>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4798      	blx	r3
}
 800e324:	bd10      	pop	{r4, pc}
 800e326:	46c0      	nop			; (mov r8, r8)
 800e328:	20001778 	.word	0x20001778
 800e32c:	20001578 	.word	0x20001578
 800e330:	0800e8f0 	.word	0x0800e8f0
 800e334:	0800e4b1 	.word	0x0800e4b1

0800e338 <UTIL_ADV_TRACE_StartRxProcess>:
{
 800e338:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.StartRx(UserCallback);
 800e33a:	4b02      	ldr	r3, [pc, #8]	; (800e344 <UTIL_ADV_TRACE_StartRxProcess+0xc>)
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	4798      	blx	r3
}
 800e340:	bd10      	pop	{r4, pc}
 800e342:	46c0      	nop			; (mov r8, r8)
 800e344:	0800e8f0 	.word	0x0800e8f0

0800e348 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 800e348:	4b01      	ldr	r3, [pc, #4]	; (800e350 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800e34a:	6058      	str	r0, [r3, #4]
}
 800e34c:	4770      	bx	lr
 800e34e:	46c0      	nop			; (mov r8, r8)
 800e350:	20001778 	.word	0x20001778

0800e354 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800e354:	4b01      	ldr	r3, [pc, #4]	; (800e35c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800e356:	7218      	strb	r0, [r3, #8]
}
 800e358:	4770      	bx	lr
 800e35a:	46c0      	nop			; (mov r8, r8)
 800e35c:	20001778 	.word	0x20001778

0800e360 <TRACE_Send>:
{
 800e360:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e362:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e366:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800e368:	4c1b      	ldr	r4, [pc, #108]	; (800e3d8 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800e36a:	8ae5      	ldrh	r5, [r4, #22]
 800e36c:	2d00      	cmp	r5, #0
 800e36e:	d12e      	bne.n	800e3ce <TRACE_Send+0x6e>
    TRACE_Lock();
 800e370:	f7ff ffb0 	bl	800e2d4 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800e374:	8a20      	ldrh	r0, [r4, #16]
 800e376:	8a62      	ldrh	r2, [r4, #18]
 800e378:	4290      	cmp	r0, r2
 800e37a:	d026      	beq.n	800e3ca <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800e37c:	78a1      	ldrb	r1, [r4, #2]
 800e37e:	2901      	cmp	r1, #1
 800e380:	d110      	bne.n	800e3a4 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800e382:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800e384:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800e386:	1a1b      	subs	r3, r3, r0
 800e388:	b29b      	uxth	r3, r3
 800e38a:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800e38c:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800e38e:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800e390:	2b00      	cmp	r3, #0
 800e392:	d109      	bne.n	800e3a8 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800e394:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800e396:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800e398:	8a23      	ldrh	r3, [r4, #16]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d912      	bls.n	800e3c4 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800e39e:	1ad2      	subs	r2, r2, r3
 800e3a0:	82a2      	strh	r2, [r4, #20]
 800e3a2:	e001      	b.n	800e3a8 <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800e3a4:	2900      	cmp	r1, #0
 800e3a6:	d0f7      	beq.n	800e398 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800e3a8:	8a25      	ldrh	r5, [r4, #16]
 800e3aa:	4b0c      	ldr	r3, [pc, #48]	; (800e3dc <TRACE_Send+0x7c>)
 800e3ac:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ae:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 800e3b2:	f7f4 fc75 	bl	8002ca0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800e3b6:	4b0a      	ldr	r3, [pc, #40]	; (800e3e0 <TRACE_Send+0x80>)
 800e3b8:	8aa1      	ldrh	r1, [r4, #20]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	0028      	movs	r0, r5
 800e3be:	9301      	str	r3, [sp, #4]
 800e3c0:	4798      	blx	r3
}
 800e3c2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800e3c4:	2280      	movs	r2, #128	; 0x80
 800e3c6:	0092      	lsls	r2, r2, #2
 800e3c8:	e7e9      	b.n	800e39e <TRACE_Send+0x3e>
      TRACE_UnLock();
 800e3ca:	f7ff ff8f 	bl	800e2ec <TRACE_UnLock>
 800e3ce:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 800e3d2:	2000      	movs	r0, #0
}
 800e3d4:	e7f5      	b.n	800e3c2 <TRACE_Send+0x62>
 800e3d6:	46c0      	nop			; (mov r8, r8)
 800e3d8:	20001778 	.word	0x20001778
 800e3dc:	20001578 	.word	0x20001578
 800e3e0:	0800e8f0 	.word	0x0800e8f0

0800e3e4 <UTIL_ADV_TRACE_COND_FSend>:
{
 800e3e4:	b408      	push	{r3}
 800e3e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3e8:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	466c      	mov	r4, sp
 800e3ee:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800e3f0:	4b2c      	ldr	r3, [pc, #176]	; (800e4a4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800e3f2:	7a1c      	ldrb	r4, [r3, #8]
 800e3f4:	4284      	cmp	r4, r0
 800e3f6:	d350      	bcc.n	800e49a <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800e3f8:	68d8      	ldr	r0, [r3, #12]
 800e3fa:	4008      	ands	r0, r1
 800e3fc:	4288      	cmp	r0, r1
 800e3fe:	d14e      	bne.n	800e49e <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d004      	beq.n	800e410 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800e406:	2a00      	cmp	r2, #0
 800e408:	d002      	beq.n	800e410 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800e40a:	4669      	mov	r1, sp
 800e40c:	a802      	add	r0, sp, #8
 800e40e:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800e410:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800e412:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800e414:	0049      	lsls	r1, r1, #1
 800e416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e418:	4823      	ldr	r0, [pc, #140]	; (800e4a8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800e41a:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800e41c:	f7ff fbc0 	bl	800dba0 <tiny_vsnprintf_like>
 800e420:	0005      	movs	r5, r0
  TRACE_Lock();
 800e422:	f7ff ff57 	bl	800e2d4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800e426:	466b      	mov	r3, sp
 800e428:	8818      	ldrh	r0, [r3, #0]
 800e42a:	1c9c      	adds	r4, r3, #2
 800e42c:	1940      	adds	r0, r0, r5
 800e42e:	0021      	movs	r1, r4
 800e430:	b280      	uxth	r0, r0
 800e432:	f7ff ff1b 	bl	800e26c <TRACE_AllocateBufer>
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	d02a      	beq.n	800e490 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800e43a:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800e43c:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800e43e:	466b      	mov	r3, sp
 800e440:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800e442:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800e444:	881b      	ldrh	r3, [r3, #0]
 800e446:	8826      	ldrh	r6, [r4, #0]
 800e448:	4818      	ldr	r0, [pc, #96]	; (800e4ac <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800e44a:	b297      	uxth	r7, r2
 800e44c:	19f1      	adds	r1, r6, r7
 800e44e:	b289      	uxth	r1, r1
 800e450:	42bb      	cmp	r3, r7
 800e452:	d815      	bhi.n	800e480 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800e454:	199b      	adds	r3, r3, r6
 800e456:	b29b      	uxth	r3, r3
 800e458:	2d00      	cmp	r5, #0
 800e45a:	d000      	beq.n	800e45e <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800e45c:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800e45e:	2180      	movs	r1, #128	; 0x80
 800e460:	8823      	ldrh	r3, [r4, #0]
 800e462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e464:	0049      	lsls	r1, r1, #1
 800e466:	18c0      	adds	r0, r0, r3
 800e468:	9b01      	ldr	r3, [sp, #4]
 800e46a:	f7ff fb99 	bl	800dba0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800e46e:	f7ff ff3d 	bl	800e2ec <TRACE_UnLock>
    return TRACE_Send();
 800e472:	f7ff ff75 	bl	800e360 <TRACE_Send>
}
 800e476:	b006      	add	sp, #24
 800e478:	bcf0      	pop	{r4, r5, r6, r7}
 800e47a:	bc08      	pop	{r3}
 800e47c:	b001      	add	sp, #4
 800e47e:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800e480:	466d      	mov	r5, sp
 800e482:	2708      	movs	r7, #8
 800e484:	19ed      	adds	r5, r5, r7
 800e486:	5cad      	ldrb	r5, [r5, r2]
 800e488:	3201      	adds	r2, #1
 800e48a:	5445      	strb	r5, [r0, r1]
 800e48c:	4665      	mov	r5, ip
 800e48e:	e7dc      	b.n	800e44a <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800e490:	f7ff ff2c 	bl	800e2ec <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800e494:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800e496:	4240      	negs	r0, r0
 800e498:	e7ed      	b.n	800e476 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800e49a:	2005      	movs	r0, #5
 800e49c:	e7fb      	b.n	800e496 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800e49e:	2006      	movs	r0, #6
 800e4a0:	e7f9      	b.n	800e496 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800e4a2:	46c0      	nop			; (mov r8, r8)
 800e4a4:	20001778 	.word	0x20001778
 800e4a8:	20001790 	.word	0x20001790
 800e4ac:	20001578 	.word	0x20001578

0800e4b0 <TRACE_TxCpltCallback>:
{ 
 800e4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e4b6:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800e4b8:	4b1f      	ldr	r3, [pc, #124]	; (800e538 <TRACE_TxCpltCallback+0x88>)
 800e4ba:	789a      	ldrb	r2, [r3, #2]
 800e4bc:	2a02      	cmp	r2, #2
 800e4be:	d11e      	bne.n	800e4fe <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800e4c4:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800e4c6:	8a1d      	ldrh	r5, [r3, #16]
 800e4c8:	8a59      	ldrh	r1, [r3, #18]
 800e4ca:	428d      	cmp	r5, r1
 800e4cc:	d02d      	beq.n	800e52a <TRACE_TxCpltCallback+0x7a>
 800e4ce:	8ada      	ldrh	r2, [r3, #22]
 800e4d0:	2a01      	cmp	r2, #1
 800e4d2:	d12a      	bne.n	800e52a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800e4d4:	7898      	ldrb	r0, [r3, #2]
 800e4d6:	2801      	cmp	r0, #1
 800e4d8:	d117      	bne.n	800e50a <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800e4da:	3001      	adds	r0, #1
 800e4dc:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800e4de:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800e4e0:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800e4e2:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800e4e4:	1b52      	subs	r2, r2, r5
 800e4e6:	b292      	uxth	r2, r2
 800e4e8:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800e4ea:	4282      	cmp	r2, r0
 800e4ec:	d10f      	bne.n	800e50e <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800e4ee:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800e4f0:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800e4f2:	8a1a      	ldrh	r2, [r3, #16]
 800e4f4:	4291      	cmp	r1, r2
 800e4f6:	d915      	bls.n	800e524 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800e4f8:	1a89      	subs	r1, r1, r2
 800e4fa:	8299      	strh	r1, [r3, #20]
 800e4fc:	e007      	b.n	800e50e <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800e4fe:	8a1a      	ldrh	r2, [r3, #16]
 800e500:	8a99      	ldrh	r1, [r3, #20]
 800e502:	1852      	adds	r2, r2, r1
 800e504:	05d2      	lsls	r2, r2, #23
 800e506:	0dd2      	lsrs	r2, r2, #23
 800e508:	e7dc      	b.n	800e4c4 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d0f1      	beq.n	800e4f2 <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e50e:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800e512:	8a18      	ldrh	r0, [r3, #16]
 800e514:	8a99      	ldrh	r1, [r3, #20]
 800e516:	4b09      	ldr	r3, [pc, #36]	; (800e53c <TRACE_TxCpltCallback+0x8c>)
 800e518:	18c0      	adds	r0, r0, r3
 800e51a:	4b09      	ldr	r3, [pc, #36]	; (800e540 <TRACE_TxCpltCallback+0x90>)
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	9301      	str	r3, [sp, #4]
 800e520:	4798      	blx	r3
}
 800e522:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800e524:	2180      	movs	r1, #128	; 0x80
 800e526:	0089      	lsls	r1, r1, #2
 800e528:	e7e6      	b.n	800e4f8 <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 800e52a:	f7f4 fbbf 	bl	8002cac <UTIL_ADV_TRACE_PostSendHook>
 800e52e:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 800e532:	f7ff fedb 	bl	800e2ec <TRACE_UnLock>
}
 800e536:	e7f4      	b.n	800e522 <TRACE_TxCpltCallback+0x72>
 800e538:	20001778 	.word	0x20001778
 800e53c:	20001578 	.word	0x20001578
 800e540:	0800e8f0 	.word	0x0800e8f0

0800e544 <__libc_init_array>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	2600      	movs	r6, #0
 800e548:	4d0c      	ldr	r5, [pc, #48]	; (800e57c <__libc_init_array+0x38>)
 800e54a:	4c0d      	ldr	r4, [pc, #52]	; (800e580 <__libc_init_array+0x3c>)
 800e54c:	1b64      	subs	r4, r4, r5
 800e54e:	10a4      	asrs	r4, r4, #2
 800e550:	42a6      	cmp	r6, r4
 800e552:	d109      	bne.n	800e568 <__libc_init_array+0x24>
 800e554:	2600      	movs	r6, #0
 800e556:	f000 f8b5 	bl	800e6c4 <_init>
 800e55a:	4d0a      	ldr	r5, [pc, #40]	; (800e584 <__libc_init_array+0x40>)
 800e55c:	4c0a      	ldr	r4, [pc, #40]	; (800e588 <__libc_init_array+0x44>)
 800e55e:	1b64      	subs	r4, r4, r5
 800e560:	10a4      	asrs	r4, r4, #2
 800e562:	42a6      	cmp	r6, r4
 800e564:	d105      	bne.n	800e572 <__libc_init_array+0x2e>
 800e566:	bd70      	pop	{r4, r5, r6, pc}
 800e568:	00b3      	lsls	r3, r6, #2
 800e56a:	58eb      	ldr	r3, [r5, r3]
 800e56c:	4798      	blx	r3
 800e56e:	3601      	adds	r6, #1
 800e570:	e7ee      	b.n	800e550 <__libc_init_array+0xc>
 800e572:	00b3      	lsls	r3, r6, #2
 800e574:	58eb      	ldr	r3, [r5, r3]
 800e576:	4798      	blx	r3
 800e578:	3601      	adds	r6, #1
 800e57a:	e7f2      	b.n	800e562 <__libc_init_array+0x1e>
 800e57c:	0800f2f8 	.word	0x0800f2f8
 800e580:	0800f2f8 	.word	0x0800f2f8
 800e584:	0800f2f8 	.word	0x0800f2f8
 800e588:	0800f2fc 	.word	0x0800f2fc

0800e58c <memcpy>:
 800e58c:	2300      	movs	r3, #0
 800e58e:	b510      	push	{r4, lr}
 800e590:	429a      	cmp	r2, r3
 800e592:	d100      	bne.n	800e596 <memcpy+0xa>
 800e594:	bd10      	pop	{r4, pc}
 800e596:	5ccc      	ldrb	r4, [r1, r3]
 800e598:	54c4      	strb	r4, [r0, r3]
 800e59a:	3301      	adds	r3, #1
 800e59c:	e7f8      	b.n	800e590 <memcpy+0x4>

0800e59e <memset>:
 800e59e:	0003      	movs	r3, r0
 800e5a0:	1882      	adds	r2, r0, r2
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d100      	bne.n	800e5a8 <memset+0xa>
 800e5a6:	4770      	bx	lr
 800e5a8:	7019      	strb	r1, [r3, #0]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	e7f9      	b.n	800e5a2 <memset+0x4>
	...

0800e5b0 <floor>:
 800e5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5b2:	004b      	lsls	r3, r1, #1
 800e5b4:	4a3d      	ldr	r2, [pc, #244]	; (800e6ac <floor+0xfc>)
 800e5b6:	0d5b      	lsrs	r3, r3, #21
 800e5b8:	189f      	adds	r7, r3, r2
 800e5ba:	4684      	mov	ip, r0
 800e5bc:	000e      	movs	r6, r1
 800e5be:	000d      	movs	r5, r1
 800e5c0:	0004      	movs	r4, r0
 800e5c2:	9001      	str	r0, [sp, #4]
 800e5c4:	2f13      	cmp	r7, #19
 800e5c6:	dc34      	bgt.n	800e632 <floor+0x82>
 800e5c8:	2f00      	cmp	r7, #0
 800e5ca:	da16      	bge.n	800e5fa <floor+0x4a>
 800e5cc:	4a38      	ldr	r2, [pc, #224]	; (800e6b0 <floor+0x100>)
 800e5ce:	4b39      	ldr	r3, [pc, #228]	; (800e6b4 <floor+0x104>)
 800e5d0:	4660      	mov	r0, ip
 800e5d2:	0031      	movs	r1, r6
 800e5d4:	f7f2 fa9a 	bl	8000b0c <__aeabi_dadd>
 800e5d8:	2200      	movs	r2, #0
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f7f1 ff5a 	bl	8000494 <__aeabi_dcmpgt>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d007      	beq.n	800e5f4 <floor+0x44>
 800e5e4:	2e00      	cmp	r6, #0
 800e5e6:	da5d      	bge.n	800e6a4 <floor+0xf4>
 800e5e8:	0073      	lsls	r3, r6, #1
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	431c      	orrs	r4, r3
 800e5ee:	d001      	beq.n	800e5f4 <floor+0x44>
 800e5f0:	2400      	movs	r4, #0
 800e5f2:	4d31      	ldr	r5, [pc, #196]	; (800e6b8 <floor+0x108>)
 800e5f4:	46a4      	mov	ip, r4
 800e5f6:	002e      	movs	r6, r5
 800e5f8:	e029      	b.n	800e64e <floor+0x9e>
 800e5fa:	4b30      	ldr	r3, [pc, #192]	; (800e6bc <floor+0x10c>)
 800e5fc:	413b      	asrs	r3, r7
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	400b      	ands	r3, r1
 800e602:	4303      	orrs	r3, r0
 800e604:	d023      	beq.n	800e64e <floor+0x9e>
 800e606:	4a2a      	ldr	r2, [pc, #168]	; (800e6b0 <floor+0x100>)
 800e608:	4b2a      	ldr	r3, [pc, #168]	; (800e6b4 <floor+0x104>)
 800e60a:	4660      	mov	r0, ip
 800e60c:	0031      	movs	r1, r6
 800e60e:	f7f2 fa7d 	bl	8000b0c <__aeabi_dadd>
 800e612:	2200      	movs	r2, #0
 800e614:	2300      	movs	r3, #0
 800e616:	f7f1 ff3d 	bl	8000494 <__aeabi_dcmpgt>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d0ea      	beq.n	800e5f4 <floor+0x44>
 800e61e:	2e00      	cmp	r6, #0
 800e620:	da03      	bge.n	800e62a <floor+0x7a>
 800e622:	2380      	movs	r3, #128	; 0x80
 800e624:	035b      	lsls	r3, r3, #13
 800e626:	413b      	asrs	r3, r7
 800e628:	18f5      	adds	r5, r6, r3
 800e62a:	9b00      	ldr	r3, [sp, #0]
 800e62c:	2400      	movs	r4, #0
 800e62e:	439d      	bics	r5, r3
 800e630:	e7e0      	b.n	800e5f4 <floor+0x44>
 800e632:	2f33      	cmp	r7, #51	; 0x33
 800e634:	dd0f      	ble.n	800e656 <floor+0xa6>
 800e636:	2380      	movs	r3, #128	; 0x80
 800e638:	00db      	lsls	r3, r3, #3
 800e63a:	429f      	cmp	r7, r3
 800e63c:	d107      	bne.n	800e64e <floor+0x9e>
 800e63e:	0002      	movs	r2, r0
 800e640:	000b      	movs	r3, r1
 800e642:	4660      	mov	r0, ip
 800e644:	0031      	movs	r1, r6
 800e646:	f7f2 fa61 	bl	8000b0c <__aeabi_dadd>
 800e64a:	4684      	mov	ip, r0
 800e64c:	000e      	movs	r6, r1
 800e64e:	4660      	mov	r0, ip
 800e650:	0031      	movs	r1, r6
 800e652:	b003      	add	sp, #12
 800e654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e656:	4a1a      	ldr	r2, [pc, #104]	; (800e6c0 <floor+0x110>)
 800e658:	189b      	adds	r3, r3, r2
 800e65a:	2201      	movs	r2, #1
 800e65c:	4252      	negs	r2, r2
 800e65e:	40da      	lsrs	r2, r3
 800e660:	9200      	str	r2, [sp, #0]
 800e662:	4210      	tst	r0, r2
 800e664:	d0f3      	beq.n	800e64e <floor+0x9e>
 800e666:	4a12      	ldr	r2, [pc, #72]	; (800e6b0 <floor+0x100>)
 800e668:	4b12      	ldr	r3, [pc, #72]	; (800e6b4 <floor+0x104>)
 800e66a:	4660      	mov	r0, ip
 800e66c:	0031      	movs	r1, r6
 800e66e:	f7f2 fa4d 	bl	8000b0c <__aeabi_dadd>
 800e672:	2200      	movs	r2, #0
 800e674:	2300      	movs	r3, #0
 800e676:	f7f1 ff0d 	bl	8000494 <__aeabi_dcmpgt>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	d0ba      	beq.n	800e5f4 <floor+0x44>
 800e67e:	2e00      	cmp	r6, #0
 800e680:	da02      	bge.n	800e688 <floor+0xd8>
 800e682:	2f14      	cmp	r7, #20
 800e684:	d103      	bne.n	800e68e <floor+0xde>
 800e686:	3501      	adds	r5, #1
 800e688:	9b00      	ldr	r3, [sp, #0]
 800e68a:	439c      	bics	r4, r3
 800e68c:	e7b2      	b.n	800e5f4 <floor+0x44>
 800e68e:	2334      	movs	r3, #52	; 0x34
 800e690:	1bdf      	subs	r7, r3, r7
 800e692:	3b33      	subs	r3, #51	; 0x33
 800e694:	40bb      	lsls	r3, r7
 800e696:	18e4      	adds	r4, r4, r3
 800e698:	9b01      	ldr	r3, [sp, #4]
 800e69a:	429c      	cmp	r4, r3
 800e69c:	419b      	sbcs	r3, r3
 800e69e:	425b      	negs	r3, r3
 800e6a0:	18f5      	adds	r5, r6, r3
 800e6a2:	e7f1      	b.n	800e688 <floor+0xd8>
 800e6a4:	2400      	movs	r4, #0
 800e6a6:	0025      	movs	r5, r4
 800e6a8:	e7a4      	b.n	800e5f4 <floor+0x44>
 800e6aa:	46c0      	nop			; (mov r8, r8)
 800e6ac:	fffffc01 	.word	0xfffffc01
 800e6b0:	8800759c 	.word	0x8800759c
 800e6b4:	7e37e43c 	.word	0x7e37e43c
 800e6b8:	bff00000 	.word	0xbff00000
 800e6bc:	000fffff 	.word	0x000fffff
 800e6c0:	fffffbed 	.word	0xfffffbed

0800e6c4 <_init>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	46c0      	nop			; (mov r8, r8)
 800e6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ca:	bc08      	pop	{r3}
 800e6cc:	469e      	mov	lr, r3
 800e6ce:	4770      	bx	lr

0800e6d0 <_fini>:
 800e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d2:	46c0      	nop			; (mov r8, r8)
 800e6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d6:	bc08      	pop	{r3}
 800e6d8:	469e      	mov	lr, r3
 800e6da:	4770      	bx	lr
